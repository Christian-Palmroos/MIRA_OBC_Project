
miracode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bbe8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  0801bda8  0801bda8  0002bda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c688  0801c688  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  0801c688  0801c688  0002c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c690  0801c690  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c690  0801c690  0002c690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c694  0801c694  0002c694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801c698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ce4  20000360  0801c9f8  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20003044  0801c9f8  00033044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047854  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000682e  00000000  00000000  00077be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035b0  00000000  00000000  0007e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003340  00000000  00000000  000819c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035526  00000000  00000000  00084d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ba55  00000000  00000000  000ba22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129ffc  00000000  00000000  000f5c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021fc7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fab8  00000000  00000000  0021fcd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0022f788  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0022f854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000360 	.word	0x20000360
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801bd90 	.word	0x0801bd90

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000364 	.word	0x20000364
 80001fc:	0801bd90 	.word	0x0801bd90

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b974 	b.w	8000f78 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fbd6 	bl	800273a <null_ptr_check>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d131      	bne.n	8000ffe <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a1b      	ldrb	r3, [r3, #8]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d003      	beq.n	8000faa <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	729a      	strb	r2, [r3, #10]
 8000fa8:	e002      	b.n	8000fb0 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	729a      	strb	r2, [r3, #10]

	/* Read the chip-id of bmp3 sensor */
        //rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
	
        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000fb0:	f107 010e 	add.w	r1, r7, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f826 	bl	800100a <bmp3_get_regs>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d119      	bne.n	8000ffe <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b50      	cmp	r3, #80	; 0x50
 8000fce:	d002      	beq.n	8000fd6 <bmp3_init+0x5a>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b60      	cmp	r3, #96	; 0x60
 8000fd4:	d111      	bne.n	8000ffa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f9ae 	bl	800133e <bmp3_soft_reset>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d107      	bne.n	8000ffe <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 fb4e 	bl	8001690 <get_calib_data>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000ff8:	e001      	b.n	8000ffe <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000ffa:	23f9      	movs	r3, #249	; 0xf9
 8000ffc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800100a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800100e:	b08b      	sub	sp, #44	; 0x2c
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f001 fb8c 	bl	800273a <null_ptr_check>
 8001022:	4603      	mov	r3, r0
 8001024:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001028:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800102c:	2b00      	cmp	r3, #0
 800102e:	d172      	bne.n	8001116 <bmp3_get_regs+0x10c>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06f      	beq.n	8001116 <bmp3_get_regs+0x10c>
    {
 8001036:	466b      	mov	r3, sp
 8001038:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	7a9b      	ldrb	r3, [r3, #10]
 800103e:	461a      	mov	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7a9b      	ldrb	r3, [r3, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	18d1      	adds	r1, r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	3b01      	subs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	2300      	movs	r3, #0
 8001058:	4688      	mov	r8, r1
 800105a:	4699      	mov	r9, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001068:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800106c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001070:	2300      	movs	r3, #0
 8001072:	460c      	mov	r4, r1
 8001074:	461d      	mov	r5, r3
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	00eb      	lsls	r3, r5, #3
 8001080:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001084:	00e2      	lsls	r2, r4, #3
 8001086:	1dcb      	adds	r3, r1, #7
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	ebad 0d03 	sub.w	sp, sp, r3
 8001090:	466b      	mov	r3, sp
 8001092:	3300      	adds	r3, #0
 8001094:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7a1b      	ldrb	r3, [r3, #8]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d025      	beq.n	80010ea <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68dc      	ldr	r4, [r3, #12]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	7bf8      	ldrb	r0, [r7, #15]
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	47a0      	blx	r4
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00d      	b.n	80010e0 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	7a9b      	ldrb	r3, [r3, #10]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	441a      	add	r2, r3
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	440b      	add	r3, r1
 80010d4:	6979      	ldr	r1, [r7, #20]
 80010d6:	5c8a      	ldrb	r2, [r1, r2]
 80010d8:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
 80010e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3ed      	bcc.n	80010c4 <bmp3_get_regs+0xba>
 80010e8:	e00b      	b.n	8001102 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68dc      	ldr	r4, [r3, #12]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	7bf8      	ldrb	r0, [r7, #15]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	47a0      	blx	r4
 80010fa:	4603      	mov	r3, r0
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800110c:	23fe      	movs	r3, #254	; 0xfe
 800110e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001112:	46b5      	mov	sp, r6
    {
 8001114:	e002      	b.n	800111c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800111c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001120:	4618      	mov	r0, r3
 8001122:	372c      	adds	r7, #44	; 0x2c
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800112a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800112a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	466b      	mov	r3, sp
 800113c:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0059      	lsls	r1, r3, #1
 8001142:	460b      	mov	r3, r1
 8001144:	3b01      	subs	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	2300      	movs	r3, #0
 800114a:	4688      	mov	r8, r1
 800114c:	4699      	mov	r9, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800115a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800115e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001162:	2300      	movs	r3, #0
 8001164:	460c      	mov	r4, r1
 8001166:	461d      	mov	r5, r3
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	00eb      	lsls	r3, r5, #3
 8001172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001176:	00e2      	lsls	r2, r4, #3
 8001178:	1dcb      	adds	r3, r1, #7
 800117a:	08db      	lsrs	r3, r3, #3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	ebad 0d03 	sub.w	sp, sp, r3
 8001182:	466b      	mov	r3, sp
 8001184:	3300      	adds	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001188:	6838      	ldr	r0, [r7, #0]
 800118a:	f001 fad6 	bl	800273a <null_ptr_check>
 800118e:	4603      	mov	r3, r0
 8001190:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001192:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d14c      	bne.n	8001234 <bmp3_set_regs+0x10a>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d049      	beq.n	8001234 <bmp3_set_regs+0x10a>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d046      	beq.n	8001234 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d040      	beq.n	800122e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	781a      	ldrb	r2, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	7a1b      	ldrb	r3, [r3, #8]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d114      	bne.n	80011e6 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011bc:	2300      	movs	r3, #0
 80011be:	76bb      	strb	r3, [r7, #26]
 80011c0:	e00d      	b.n	80011de <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80011c2:	7ebb      	ldrb	r3, [r7, #26]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	7ebb      	ldrb	r3, [r7, #26]
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	440b      	add	r3, r1
 80011d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	3301      	adds	r3, #1
 80011dc:	76bb      	strb	r3, [r7, #26]
 80011de:	7ebb      	ldrb	r3, [r7, #26]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d8ed      	bhi.n	80011c2 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d909      	bls.n	8001200 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	68f8      	ldr	r0, [r7, #12]
 80011f4:	f000 fa71 	bl	80016da <interleave_reg_addr>
                temp_len = len * 2;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e001      	b.n	8001204 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691c      	ldr	r4, [r3, #16]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	7818      	ldrb	r0, [r3, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	6939      	ldr	r1, [r7, #16]
 8001214:	47a0      	blx	r4
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001228:	23fe      	movs	r3, #254	; 0xfe
 800122a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800122c:	e005      	b.n	800123a <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001232:	e002      	b.n	800123a <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001234:	23ff      	movs	r3, #255	; 0xff
 8001236:	76fb      	strb	r3, [r7, #27]
 8001238:	e000      	b.n	800123c <bmp3_set_regs+0x112>
        if (len != 0)
 800123a:	bf00      	nop
    }

    return rslt;
 800123c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001240:	46b5      	mov	sp, r6
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800124c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03a      	beq.n	80012d8 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8001262:	68f9      	ldr	r1, [r7, #12]
 8001264:	2006      	movs	r0, #6
 8001266:	f001 fa50 	bl	800270a <are_settings_changed>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f000 fa96 	bl	80017a6 <set_pwr_ctrl_settings>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	20f0      	movs	r0, #240	; 0xf0
 8001282:	f001 fa42 	bl	800270a <are_settings_changed>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fad7 	bl	8001844 <set_odr_filter_settings>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80012a0:	f001 fa33 	bl	800270a <are_settings_changed>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68b9      	ldr	r1, [r7, #8]
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f000 fb36 	bl	8001920 <set_int_ctrl_settings>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80012be:	f001 fa24 	bl	800270a <are_settings_changed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fba1 	bl	8001a14 <set_advance_settings>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e001      	b.n	80012dc <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80012d8:	23ff      	movs	r3, #255	; 0xff
 80012da:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80012dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01a      	beq.n	800132e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 80012f8:	6839      	ldr	r1, [r7, #0]
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f001 fa41 	bl	8002782 <get_sensor_status>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001304:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d112      	bne.n	8001332 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f001 fa7a 	bl	8002808 <get_int_status>
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d108      	bne.n	8001332 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f001 fa9e 	bl	8002864 <get_err_status>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800132e:	23ff      	movs	r3, #255	; 0xff
 8001330:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001346:	237e      	movs	r3, #126	; 0x7e
 8001348:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800134a:	23b6      	movs	r3, #182	; 0xb6
 800134c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff fe57 	bl	800100a <bmp3_get_regs>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d02d      	beq.n	80013c6 <bmp3_soft_reset+0x88>
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d129      	bne.n	80013c6 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001372:	f107 010d 	add.w	r1, r7, #13
 8001376:	f107 000e 	add.w	r0, r7, #14
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f7ff fed4 	bl	800112a <bmp3_set_regs>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6852      	ldr	r2, [r2, #4]
 8001396:	4611      	mov	r1, r2
 8001398:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139c:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800139e:	f107 010b 	add.w	r1, r7, #11
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	2002      	movs	r0, #2
 80013a8:	f7ff fe2f 	bl	800100a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80013b0:	7afb      	ldrb	r3, [r7, #11]
 80013b2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <bmp3_soft_reset+0x84>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80013c2:	23fc      	movs	r3, #252	; 0xfc
 80013c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80013dc:	6838      	ldr	r0, [r7, #0]
 80013de:	f001 f9ac 	bl	800273a <null_ptr_check>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80013e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d139      	bne.n	8001462 <bmp3_set_op_mode+0x90>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d036      	beq.n	8001462 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80013fa:	f107 030d 	add.w	r3, r7, #13
 80013fe:	6839      	ldr	r1, [r7, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f838 	bl	8001476 <bmp3_get_op_mode>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800140a:	7b7b      	ldrb	r3, [r7, #13]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d010      	beq.n	8001432 <bmp3_set_op_mode+0x60>
 8001410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10c      	bne.n	8001432 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001418:	6838      	ldr	r0, [r7, #0]
 800141a:	f000 f8f7 	bl	800160c <put_device_to_sleep>
 800141e:	4603      	mov	r3, r0
 8001420:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6852      	ldr	r2, [r2, #4]
 800142a:	4611      	mov	r1, r2
 800142c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001430:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d106      	bne.n	800144e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f879 	bl	800153a <set_normal_mode>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    {
 800144c:	e00c      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d109      	bne.n	8001468 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8a2 	bl	80015a0 <write_power_mode>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    {
 8001460:	e002      	b.n	8001468 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001462:	23ff      	movs	r3, #255	; 0xff
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e000      	b.n	800146a <bmp3_set_op_mode+0x98>
    {
 8001468:	bf00      	nop
    }

    return rslt;
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d011      	beq.n	80014aa <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	201b      	movs	r0, #27
 800148e:	f7ff fdbc 	bl	800100a <bmp3_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	111b      	asrs	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80014aa:	23ff      	movs	r3, #255	; 0xff
 80014ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b08a      	sub	sp, #40	; 0x28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	2300      	movs	r3, #0
 80014ce:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80014e4:	f107 0120 	add.w	r1, r7, #32
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2206      	movs	r2, #6
 80014ec:	2004      	movs	r0, #4
 80014ee:	f7ff fd8c 	bl	800100a <bmp3_get_regs>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 80014f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d116      	bne.n	800152e <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8001500:	f107 0210 	add.w	r2, r7, #16
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fc70 	bl	8001df0 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0110 	add.w	r1, r7, #16
 8001518:	7bf8      	ldrb	r0, [r7, #15]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	f000 fca3 	bl	8001e66 <compensate_data>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001526:	e002      	b.n	800152e <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800152e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001532:	4618      	mov	r0, r3
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f888 	bl	800165c <validate_normal_mode_settings>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d11d      	bne.n	8001594 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001558:	6839      	ldr	r1, [r7, #0]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f820 	bl	80015a0 <write_power_mode>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800156c:	f107 010e 	add.w	r1, r7, #14
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	2002      	movs	r0, #2
 8001576:	f7ff fd48 	bl	800100a <bmp3_get_regs>
 800157a:	4603      	mov	r3, r0
 800157c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8001590:	23fb      	movs	r3, #251	; 0xfb
 8001592:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80015aa:	231b      	movs	r3, #27
 80015ac:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80015b4:	7b78      	ldrb	r0, [r7, #13]
 80015b6:	f107 010c 	add.w	r1, r7, #12
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2201      	movs	r2, #1
 80015be:	f7ff fd24 	bl	800100a <bmp3_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	b25b      	sxtb	r3, r3
 80015d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80015ec:	f107 010c 	add.w	r1, r7, #12
 80015f0:	f107 000d 	add.w	r0, r7, #13
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f7ff fd97 	bl	800112a <bmp3_set_regs>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001614:	231b      	movs	r3, #27
 8001616:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001618:	f107 010d 	add.w	r1, r7, #13
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	201b      	movs	r0, #27
 8001622:	f7ff fcf2 	bl	800100a <bmp3_get_regs>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8001632:	7b7b      	ldrb	r3, [r7, #13]
 8001634:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800163c:	f107 010d 	add.w	r1, r7, #13
 8001640:	f107 000e 	add.w	r0, r7, #14
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f7ff fd6f 	bl	800112a <bmp3_set_regs>
 800164c:	4603      	mov	r3, r0
 800164e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fa26 	bl	8001aba <get_odr_filter_settings>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d104      	bne.n	8001684 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa3a 	bl	8001af4 <validate_osr_and_odr_settings>
 8001680:	4603      	mov	r3, r0
 8001682:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001698:	2331      	movs	r3, #49	; 0x31
 800169a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800169c:	2300      	movs	r3, #0
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80016b0:	f107 0108 	add.w	r1, r7, #8
 80016b4:	7ff8      	ldrb	r0, [r7, #31]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2215      	movs	r2, #21
 80016ba:	f7ff fca6 	bl	800100a <bmp3_get_regs>
 80016be:	4603      	mov	r3, r0
 80016c0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fc3f 	bl	8001f4c <parse_calib_data>

    return rslt;
 80016ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80016e8:	2301      	movs	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e015      	b.n	800171a <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	440b      	add	r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	440b      	add	r3, r1
 8001710:	7812      	ldrb	r2, [r2, #0]
 8001712:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3e5      	bcc.n	80016ee <interleave_reg_addr+0x14>
    }
}
 8001722:	bf00      	nop
 8001724:	bf00      	nop
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	b2da      	uxtb	r2, r3
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	b2da      	uxtb	r2, r3
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	b2da      	uxtb	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3302      	adds	r3, #2
 8001782:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	105b      	asrs	r3, r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	b2da      	uxtb	r2, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	709a      	strb	r2, [r3, #2]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80017b2:	231b      	movs	r3, #27
 80017b4:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017b6:	7db8      	ldrb	r0, [r7, #22]
 80017b8:	f107 0115 	add.w	r1, r7, #21
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f7ff fc23 	bl	800100a <bmp3_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d132      	bne.n	8001836 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00e      	beq.n	80017f8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80017da:	7d7b      	ldrb	r3, [r7, #21]
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	785b      	ldrb	r3, [r3, #1]
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00f      	beq.n	8001822 <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f023 0302 	bic.w	r3, r3, #2
 800180a:	b25a      	sxtb	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	789b      	ldrb	r3, [r3, #2]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b25b      	sxtb	r3, r3
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001822:	f107 0115 	add.w	r1, r7, #21
 8001826:	f107 0016 	add.w	r0, r7, #22
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc7c 	bl	800112a <bmp3_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <set_odr_filter_settings+0xd8>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	83bb      	strh	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800185e:	f107 0118 	add.w	r1, r7, #24
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2204      	movs	r2, #4
 8001866:	201c      	movs	r0, #28
 8001868:	f7ff fbcf 	bl	800100a <bmp3_get_regs>
 800186c:	4603      	mov	r3, r0
 800186e:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001870:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d14a      	bne.n	800190e <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	2030      	movs	r0, #48	; 0x30
 800187c:	f000 ff45 	bl	800270a <are_settings_changed>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001886:	f107 0017 	add.w	r0, r7, #23
 800188a:	f107 0218 	add.w	r2, r7, #24
 800188e:	f107 011c 	add.w	r1, r7, #28
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4603      	mov	r3, r0
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	f000 f9e1 	bl	8001c60 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800189e:	68f9      	ldr	r1, [r7, #12]
 80018a0:	2080      	movs	r0, #128	; 0x80
 80018a2:	f000 ff32 	bl	800270a <are_settings_changed>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 80018ac:	f107 0217 	add.w	r2, r7, #23
 80018b0:	f107 0118 	add.w	r1, r7, #24
 80018b4:	f107 001c 	add.w	r0, r7, #28
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	f000 fa29 	bl	8001d10 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	2040      	movs	r0, #64	; 0x40
 80018c2:	f000 ff22 	bl	800270a <are_settings_changed>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 80018cc:	f107 0217 	add.w	r2, r7, #23
 80018d0:	f107 0118 	add.w	r1, r7, #24
 80018d4:	f107 001c 	add.w	r0, r7, #28
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f000 fa53 	bl	8001d84 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d104      	bne.n	80018f0 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f904 	bl	8001af4 <validate_osr_and_odr_settings>
 80018ec:	4603      	mov	r3, r0
 80018ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 80018f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10a      	bne.n	800190e <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f107 0118 	add.w	r1, r7, #24
 8001900:	f107 001c 	add.w	r0, r7, #28
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f7ff fc10 	bl	800112a <bmp3_set_regs>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800190e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0801bda8 	.word	0x0801bda8

08001920 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800192c:	2319      	movs	r3, #25
 800192e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001930:	7d78      	ldrb	r0, [r7, #21]
 8001932:	f107 0116 	add.w	r1, r7, #22
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f7ff fb66 	bl	800100a <bmp3_get_regs>
 800193e:	4603      	mov	r3, r0
 8001940:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d15e      	bne.n	8001a08 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	3207      	adds	r2, #7
 8001952:	6810      	ldr	r0, [r2, #0]
 8001954:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00d      	beq.n	800197c <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7c3b      	ldrb	r3, [r7, #16]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b25b      	sxtb	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b25b      	sxtb	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	b25a      	sxtb	r2, r3
 8001990:	7c7b      	ldrb	r3, [r7, #17]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	b25b      	sxtb	r3, r3
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	b25b      	sxtb	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00e      	beq.n	80019cc <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 80019ae:	7dbb      	ldrb	r3, [r7, #22]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	b25a      	sxtb	r2, r3
 80019b8:	7cbb      	ldrb	r3, [r7, #18]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	b25b      	sxtb	r3, r3
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b25b      	sxtb	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00e      	beq.n	80019f4 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 80019d6:	7dbb      	ldrb	r3, [r7, #22]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	7cfb      	ldrb	r3, [r7, #19]
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b25b      	sxtb	r3, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80019f4:	f107 0116 	add.w	r1, r7, #22
 80019f8:	f107 0015 	add.w	r0, r7, #21
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f7ff fb93 	bl	800112a <bmp3_set_regs>
 8001a04:	4603      	mov	r3, r0
 8001a06:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	320b      	adds	r2, #11
 8001a28:	8812      	ldrh	r2, [r2, #0]
 8001a2a:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001a2c:	231a      	movs	r3, #26
 8001a2e:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001a30:	7db8      	ldrb	r0, [r7, #22]
 8001a32:	f107 0115 	add.w	r1, r7, #21
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f7ff fae6 	bl	800100a <bmp3_get_regs>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001a42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d131      	bne.n	8001aae <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d00e      	beq.n	8001a72 <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	b25b      	sxtb	r3, r3
 8001a58:	f023 0302 	bic.w	r3, r3, #2
 8001a5c:	b25a      	sxtb	r2, r3
 8001a5e:	7c3b      	ldrb	r3, [r7, #16]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00e      	beq.n	8001a9a <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001a7c:	7d7b      	ldrb	r3, [r7, #21]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	f023 0304 	bic.w	r3, r3, #4
 8001a84:	b25a      	sxtb	r2, r3
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	b25b      	sxtb	r3, r3
 8001a92:	4313      	orrs	r3, r2
 8001a94:	b25b      	sxtb	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001a9a:	f107 0115 	add.w	r1, r7, #21
 8001a9e:	f107 0016 	add.w	r0, r7, #22
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f7ff fb40 	bl	800112a <bmp3_set_regs>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001ac4:	f107 0108 	add.w	r1, r7, #8
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2204      	movs	r2, #4
 8001acc:	201c      	movs	r0, #28
 8001ace:	f7ff fa9c 	bl	800100a <bmp3_get_regs>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1cda      	adds	r2, r3, #3
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe25 	bl	8001730 <parse_odr_filter_settings>

    return rslt;
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b098      	sub	sp, #96	; 0x60
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001afc:	23ea      	movs	r3, #234	; 0xea
 8001afe:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <validate_osr_and_odr_settings+0x7c>)
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	2248      	movs	r2, #72	; 0x48
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f017 f9ee 	bl	8018ef0 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f83f 	bl	8001ba0 <calculate_press_meas_time>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b26:	4413      	add	r3, r2
 8001b28:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f864 	bl	8001c00 <calculate_temp_meas_time>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b3c:	4413      	add	r3, r2
 8001b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001b40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b44:	4413      	add	r3, r2
 8001b46:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	; 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001b56:	4619      	mov	r1, r3
 8001b58:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001b5a:	f000 f80b 	bl	8001b74 <verify_meas_time_and_odr_duration>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001b64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3760      	adds	r7, #96	; 0x60
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	0801bdac 	.word	0x0801bdac

08001b74 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d202      	bcs.n	8001b8c <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e001      	b.n	8001b90 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001b8c:	23fd      	movs	r3, #253	; 0xfd
 8001b8e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	3203      	adds	r2, #3
 8001bb0:	6810      	ldr	r0, [r2, #0]
 8001bb2:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001bc0:	7b3b      	ldrb	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	ed97 0b06 	vldr	d0, [r7, #24]
 8001bc8:	f000 fd7a 	bl	80026c0 <pow_bmp3>
 8001bcc:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bd4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001bf8 <calculate_press_meas_time+0x58>
 8001bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bdc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001bfc <calculate_press_meas_time+0x5c>
 8001be0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	44fa0000 	.word	0x44fa0000
 8001bfc:	43c40000 	.word	0x43c40000

08001c00 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	3203      	adds	r2, #3
 8001c10:	6810      	ldr	r0, [r2, #0]
 8001c12:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	4618      	mov	r0, r3
 8001c24:	ed97 0b06 	vldr	d0, [r7, #24]
 8001c28:	f000 fd4a 	bl	80026c0 <pow_bmp3>
 8001c2c:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001c30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c34:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c58 <calculate_temp_meas_time+0x58>
 8001c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001c5c <calculate_temp_meas_time+0x5c>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8001c4e:	693b      	ldr	r3, [r7, #16]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	44fa0000 	.word	0x44fa0000
 8001c5c:	439c8000 	.word	0x439c8000

08001c60 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	3203      	adds	r2, #3
 8001c76:	6810      	ldr	r0, [r2, #0]
 8001c78:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03f      	beq.n	8001d04 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d013      	beq.n	8001cb6 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	f023 0307 	bic.w	r3, r3, #7
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	7d3b      	ldrb	r3, [r7, #20]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b25a      	sxtb	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d014      	beq.n	8001cea <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001cca:	b25a      	sxtb	r2, r3
 8001ccc:	7d7b      	ldrb	r3, [r7, #21]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25a      	sxtb	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221c      	movs	r2, #28
 8001cf6:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	701a      	strb	r2, [r3, #0]
    }
}
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3303      	adds	r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	78db      	ldrb	r3, [r3, #3]
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d902      	bls.n	8001d32 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	2211      	movs	r2, #17
 8001d30:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	3301      	adds	r3, #1
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	f023 031f 	bic.w	r3, r3, #31
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	78db      	ldrb	r3, [r3, #3]
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	440b      	add	r3, r1
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	221d      	movs	r2, #29
 8001d6a:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	371c      	adds	r7, #28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	3203      	adds	r2, #3
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3303      	adds	r3, #3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f023 030e 	bic.w	r3, r3, #14
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b25b      	sxtb	r3, r3
 8001db2:	f003 030e 	and.w	r3, r3, #14
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b25a      	sxtb	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	440b      	add	r3, r1
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	701a      	strb	r2, [r3, #0]
}
 8001de4:	bf00      	nop
 8001de6:	371c      	adds	r7, #28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8001df0:	b4b0      	push	{r4, r5, r7}
 8001df2:	b087      	sub	sp, #28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	7809      	ldrb	r1, [r1, #0]
 8001dfe:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	3101      	adds	r1, #1
 8001e04:	7809      	ldrb	r1, [r1, #0]
 8001e06:	0209      	lsls	r1, r1, #8
 8001e08:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	3102      	adds	r1, #2
 8001e0e:	7809      	ldrb	r1, [r1, #0]
 8001e10:	0409      	lsls	r1, r1, #16
 8001e12:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	4308      	orrs	r0, r1
 8001e1a:	6979      	ldr	r1, [r7, #20]
 8001e1c:	4301      	orrs	r1, r0
 8001e1e:	2000      	movs	r0, #0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4605      	mov	r5, r0
 8001e24:	6839      	ldr	r1, [r7, #0]
 8001e26:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	3103      	adds	r1, #3
 8001e2e:	7809      	ldrb	r1, [r1, #0]
 8001e30:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	3104      	adds	r1, #4
 8001e36:	7809      	ldrb	r1, [r1, #0]
 8001e38:	0209      	lsls	r1, r1, #8
 8001e3a:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	3105      	adds	r1, #5
 8001e40:	7809      	ldrb	r1, [r1, #0]
 8001e42:	0409      	lsls	r1, r1, #16
 8001e44:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	6939      	ldr	r1, [r7, #16]
 8001e4a:	4308      	orrs	r0, r1
 8001e4c:	6979      	ldr	r1, [r7, #20]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	2000      	movs	r0, #0
 8001e52:	460a      	mov	r2, r1
 8001e54:	4603      	mov	r3, r0
 8001e56:	6839      	ldr	r1, [r7, #0]
 8001e58:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bcb0      	pop	{r4, r5, r7}
 8001e64:	4770      	bx	lr

08001e66 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	4603      	mov	r3, r0
 8001e74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d05a      	beq.n	8001f36 <compensate_data+0xd0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d057      	beq.n	8001f36 <compensate_data+0xd0>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d054      	beq.n	8001f36 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d115      	bne.n	8001ebe <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa1f 	bl	80022dc <compensate_temperature>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8001ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d148      	bne.n	8001f3c <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3308      	adds	r3, #8
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 fa8c 	bl	80023d0 <compensate_pressure>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ebc:	e03e      	b.n	8001f3c <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d116      	bne.n	8001ef2 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fa06 	bl	80022dc <compensate_temperature>
            comp_data->temperature = 0;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa72 	bl	80023d0 <compensate_pressure>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001ef0:	e024      	b.n	8001f3c <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d10f      	bne.n	8001f18 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f9ec 	bl	80022dc <compensate_temperature>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f16:	e011      	b.n	8001f3c <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	f04f 0300 	mov.w	r3, #0
 8001f30:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f34:	e002      	b.n	8001f3c <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001f36:	23ff      	movs	r3, #255	; 0xff
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e000      	b.n	8001f3e <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8001f3c:	bf00      	nop
    }

    return rslt;
 8001f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	3390      	adds	r3, #144	; 0x90
 8001f5a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	3318      	adds	r3, #24
 8001f60:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4ba4      	ldr	r3, [pc, #656]	; (80021f8 <parse_calib_data+0x2ac>)
 8001f68:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	b21a      	sxth	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b21b      	sxth	r3, r3
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fad2 	bl	8000534 <__aeabi_ui2d>
 8001f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f94:	f7fe fc72 	bl	800087c <__aeabi_ddiv>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	6939      	ldr	r1, [r7, #16]
 8001f9e:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	b21a      	sxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	b21b      	sxth	r3, r3
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <parse_calib_data+0x2b0>)
 8001fc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fab1 	bl	8000534 <__aeabi_ui2d>
 8001fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd6:	f7fe fc51 	bl	800087c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b82      	ldr	r3, [pc, #520]	; (8002200 <parse_calib_data+0x2b4>)
 8001ff6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe faa7 	bl	8000554 <__aeabi_i2d>
 8002006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800200a:	f7fe fc37 	bl	800087c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	6939      	ldr	r1, [r7, #16]
 8002014:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3306      	adds	r3, #6
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3305      	adds	r3, #5
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	b21a      	sxth	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b73      	ldr	r3, [pc, #460]	; (8002204 <parse_calib_data+0x2b8>)
 8002038:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002042:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa84 	bl	8000554 <__aeabi_i2d>
 800204c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002050:	f7fe fc14 	bl	800087c <__aeabi_ddiv>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	6939      	ldr	r1, [r7, #16]
 800205a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3308      	adds	r3, #8
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	b21a      	sxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3307      	adds	r3, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	b21b      	sxth	r3, r3
 8002070:	4313      	orrs	r3, r2
 8002072:	b21a      	sxth	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <parse_calib_data+0x2bc>)
 800207e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002088:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa61 	bl	8000554 <__aeabi_i2d>
 8002092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002096:	f7fe fbf1 	bl	800087c <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3309      	adds	r3, #9
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <parse_calib_data+0x2c0>)
 80020b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fa47 	bl	8000554 <__aeabi_i2d>
 80020c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020ca:	f7fe fbd7 	bl	800087c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6939      	ldr	r1, [r7, #16]
 80020d4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	330a      	adds	r3, #10
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25a      	sxtb	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	4b49      	ldr	r3, [pc, #292]	; (8002210 <parse_calib_data+0x2c4>)
 80020ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	f7fe fbbd 	bl	800087c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b21a      	sxth	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	330b      	adds	r3, #11
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b21b      	sxth	r3, r3
 800211e:	4313      	orrs	r3, r2
 8002120:	b21b      	sxth	r3, r3
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002130:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	899b      	ldrh	r3, [r3, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9fb 	bl	8000534 <__aeabi_ui2d>
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	f7fe fb9b 	bl	800087c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330e      	adds	r3, #14
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b21a      	sxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330d      	adds	r3, #13
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <parse_calib_data+0x2c8>)
 8002172:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	89db      	ldrh	r3, [r3, #14]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe f9da 	bl	8000534 <__aeabi_ui2d>
 8002180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002184:	f7fe fb7a 	bl	800087c <__aeabi_ddiv>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	6939      	ldr	r1, [r7, #16]
 800218e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	330f      	adds	r3, #15
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	b25a      	sxtb	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <parse_calib_data+0x2cc>)
 80021a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f9d0 	bl	8000554 <__aeabi_i2d>
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	f7fe fb60 	bl	800087c <__aeabi_ddiv>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	6939      	ldr	r1, [r7, #16]
 80021c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3310      	adds	r3, #16
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <parse_calib_data+0x2d0>)
 80021d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b6 	bl	8000554 <__aeabi_i2d>
 80021e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ec:	f7fe fb46 	bl	800087c <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	6939      	ldr	r1, [r7, #16]
 80021f6:	e013      	b.n	8002220 <parse_calib_data+0x2d4>
 80021f8:	3f700000 	.word	0x3f700000
 80021fc:	41d00000 	.word	0x41d00000
 8002200:	42f00000 	.word	0x42f00000
 8002204:	41300000 	.word	0x41300000
 8002208:	41c00000 	.word	0x41c00000
 800220c:	41f00000 	.word	0x41f00000
 8002210:	42400000 	.word	0x42400000
 8002214:	40500000 	.word	0x40500000
 8002218:	40700000 	.word	0x40700000
 800221c:	40e00000 	.word	0x40e00000
 8002220:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3312      	adds	r3, #18
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3311      	adds	r3, #17
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <parse_calib_data+0x38c>)
 8002244:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f980 	bl	8000554 <__aeabi_i2d>
 8002254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3313      	adds	r3, #19
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25a      	sxtb	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <parse_calib_data+0x38c>)
 8002278:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_i2d>
 8002288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800228c:	f7fe faf6 	bl	800087c <__aeabi_ddiv>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3314      	adds	r3, #20
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b25a      	sxtb	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80022ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f94b 	bl	8000554 <__aeabi_i2d>
 80022be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c2:	f7fe fadb 	bl	800087c <__aeabi_ddiv>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	6939      	ldr	r1, [r7, #16]
 80022cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	42f00000 	.word	0x42f00000

080022dc <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80022f4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80022f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80022fc:	f7fe f966 	bl	80005cc <__aeabi_l2d>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffd7 	bl	80002b8 <__aeabi_dsub>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002318:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231c:	f7fe f984 	bl	8000628 <__aeabi_dmul>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002328:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8002342:	f7fe f971 	bl	8000628 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002352:	f7fd ffb3 	bl	80002bc <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8002366:	f04f 0200 	mov.w	r2, #0
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <compensate_temperature+0xec>)
 800236c:	f7fe fbce 	bl	8000b0c <__aeabi_dcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <compensate_temperature+0xec>)
 800237e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MIN_TEMP;
 8002382:	2303      	movs	r3, #3
 8002384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <compensate_temperature+0xf0>)
 8002394:	f7fe fbd8 	bl	8000b48 <__aeabi_dcmpgt>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d008      	beq.n	80023b0 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <compensate_temperature+0xf0>)
 80023a6:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        rslt = BMP3_W_MAX_TEMP;
 80023aa:	2304      	movs	r3, #4
 80023ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023b6:	68f9      	ldr	r1, [r7, #12]
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80023bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3730      	adds	r7, #48	; 0x30
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	c0440000 	.word	0xc0440000
 80023cc:	40554000 	.word	0x40554000

080023d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b096      	sub	sp, #88	; 0x58
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80023f2:	f7fe f919 	bl	8000628 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80023fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002400:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002406:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 800240a:	2002      	movs	r0, #2
 800240c:	eeb0 0a47 	vmov.f32	s0, s14
 8002410:	eef0 0a67 	vmov.f32	s1, s15
 8002414:	f000 f954 	bl	80026c0 <pow_bmp3>
 8002418:	ee10 3a10 	vmov	r3, s0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8ab 	bl	8000578 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f8fd 	bl	8000628 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 8002442:	2003      	movs	r0, #3
 8002444:	eeb0 0a47 	vmov.f32	s0, s14
 8002448:	eef0 0a67 	vmov.f32	s1, s15
 800244c:	f000 f938 	bl	80026c0 <pow_bmp3>
 8002450:	ee10 3a10 	vmov	r3, s0
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f88f 	bl	8000578 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4620      	mov	r0, r4
 8002460:	4629      	mov	r1, r5
 8002462:	f7fe f8e1 	bl	8000628 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800246e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002470:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002478:	f7fd ff20 	bl	80002bc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002488:	f7fd ff18 	bl	80002bc <__adddf3>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	f7fd ff12 	bl	80002bc <__adddf3>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80024a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80024ac:	f7fe f8bc 	bl	8000628 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80024be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024c0:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024c4:	2002      	movs	r0, #2
 80024c6:	eeb0 0a47 	vmov.f32	s0, s14
 80024ca:	eef0 0a67 	vmov.f32	s1, s15
 80024ce:	f000 f8f7 	bl	80026c0 <pow_bmp3>
 80024d2:	ee10 3a10 	vmov	r3, s0
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f84e 	bl	8000578 <__aeabi_f2d>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4620      	mov	r0, r4
 80024e2:	4629      	mov	r1, r5
 80024e4:	f7fe f8a0 	bl	8000628 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80024fc:	2003      	movs	r0, #3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f000 f8db 	bl	80026c0 <pow_bmp3>
 800250a:	ee10 3a10 	vmov	r3, s0
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f832 	bl	8000578 <__aeabi_f2d>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4620      	mov	r0, r4
 800251a:	4629      	mov	r1, r5
 800251c:	f7fe f884 	bl	8000628 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f843 	bl	80005bc <__aeabi_ul2d>
 8002536:	4604      	mov	r4, r0
 8002538:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800253a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002544:	f7fd feba 	bl	80002bc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002554:	f7fd feb2 	bl	80002bc <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002564:	f7fd feaa 	bl	80002bc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800256c:	4620      	mov	r0, r4
 800256e:	4629      	mov	r1, r5
 8002570:	f7fe f85a 	bl	8000628 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f7fe f819 	bl	80005bc <__aeabi_ul2d>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	2002      	movs	r0, #2
 8002590:	ec43 2b10 	vmov	d0, r2, r3
 8002594:	f000 f894 	bl	80026c0 <pow_bmp3>
 8002598:	ee10 3a10 	vmov	r3, s0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd ffeb 	bl	8000578 <__aeabi_f2d>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80025b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80025bc:	f7fe f834 	bl	8000628 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4620      	mov	r0, r4
 80025c6:	4629      	mov	r1, r5
 80025c8:	f7fd fe78 	bl	80002bc <__adddf3>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 80025d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025dc:	f7fe f824 	bl	8000628 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7fd ffe3 	bl	80005bc <__aeabi_ul2d>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	2003      	movs	r0, #3
 80025fc:	ec43 2b10 	vmov	d0, r2, r3
 8002600:	f000 f85e 	bl	80026c0 <pow_bmp3>
 8002604:	ee10 3a10 	vmov	r3, s0
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ffb5 	bl	8000578 <__aeabi_f2d>
 800260e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002610:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002614:	f7fe f808 	bl	8000628 <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002620:	f7fd fe4c 	bl	80002bc <__adddf3>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800262c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002634:	f7fd fe42 	bl	80002bc <__adddf3>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002640:	f7fd fe3c 	bl	80002bc <__adddf3>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800264c:	a318      	add	r3, pc, #96	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002656:	f7fe fa59 	bl	8000b0c <__aeabi_dcmplt>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8002660:	a313      	add	r3, pc, #76	; (adr r3, 80026b0 <compensate_pressure+0x2e0>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MIN_PRES;
 800266a:	2305      	movs	r3, #5
 800266c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8002670:	a311      	add	r3, pc, #68	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800267a:	f7fe fa65 	bl	8000b48 <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8002684:	a30c      	add	r3, pc, #48	; (adr r3, 80026b8 <compensate_pressure+0x2e8>)
 8002686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
        rslt = BMP3_W_MAX_PRES;
 800268e:	2306      	movs	r3, #6
 8002690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    (*pressure) = comp_press;
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800269a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800269e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3758      	adds	r7, #88	; 0x58
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	f3af 8000 	nop.w
 80026b0:	00000000 	.word	0x00000000
 80026b4:	40dd4c00 	.word	0x40dd4c00
 80026b8:	00000000 	.word	0x00000000
 80026bc:	40fe8480 	.word	0x40fe8480

080026c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80026ce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80026d4:	e00e      	b.n	80026f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80026d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026da:	f7fe fa7d 	bl	8000bd8 <__aeabi_d2f>
 80026de:	ee07 0a10 	vmov	s14, r0
 80026e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ed      	bne.n	80026d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	ee07 3a90 	vmov	s15, r3
}
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
 8002712:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e001      	b.n	800272c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800273a:	b480      	push	{r7}
 800273c:	b085      	sub	sp, #20
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00f      	beq.n	8002768 <null_ptr_check+0x2e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <null_ptr_check+0x2e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <null_ptr_check+0x2e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e001      	b.n	8002772 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800278c:	2303      	movs	r3, #3
 800278e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002790:	f107 010d 	add.w	r1, r7, #13
 8002794:	7bb8      	ldrb	r0, [r7, #14]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	f7fe fc36 	bl	800100a <bmp3_get_regs>
 800279e:	4603      	mov	r3, r0
 80027a0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d128      	bne.n	80027fc <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	111b      	asrs	r3, r3, #4
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	115b      	asrs	r3, r3, #5
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 80027ca:	7b7b      	ldrb	r3, [r7, #13]
 80027cc:	119b      	asrs	r3, r3, #6
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 80027da:	2310      	movs	r3, #16
 80027dc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80027de:	f107 010d 	add.w	r1, r7, #13
 80027e2:	7bb8      	ldrb	r0, [r7, #14]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f7fe fc0f 	bl	800100a <bmp3_get_regs>
 80027ec:	4603      	mov	r3, r0
 80027ee:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002812:	f107 010e 	add.w	r1, r7, #14
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	2011      	movs	r0, #17
 800281c:	f7fe fbf5 	bl	800100a <bmp3_get_regs>
 8002820:	4603      	mov	r3, r0
 8002822:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800282c:	7bbb      	ldrb	r3, [r7, #14]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	b2da      	uxtb	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	105b      	asrs	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002848:	7bbb      	ldrb	r3, [r7, #14]
 800284a:	10db      	asrs	r3, r3, #3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800286e:	f107 010e 	add.w	r1, r7, #14
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2201      	movs	r2, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f7fe fbc7 	bl	800100a <bmp3_get_regs>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d115      	bne.n	80028b4 <get_err_status+0x50>
    {
        status->err.cmd = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002888:	7bbb      	ldrb	r3, [r7, #14]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	105b      	asrs	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	721a      	strb	r2, [r3, #8]
        status->err.fatal = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 80028a4:	7bbb      	ldrb	r3, [r7, #14]
 80028a6:	109b      	asrs	r3, r3, #2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	719a      	strb	r2, [r3, #6]
    }

    return rslt;
 80028b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <bmp3_check_rslt>:
extern volatile uint8_t int2_flag;

static uint8_t dev_addr = 0;

void bmp3_check_rslt(const char api_name[], int8_t rslt)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
    switch (rslt)
 80028cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028d0:	3307      	adds	r3, #7
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	d839      	bhi.n	800294a <bmp3_check_rslt+0x8a>
 80028d6:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <bmp3_check_rslt+0x1c>)
 80028d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028dc:	08002923 	.word	0x08002923
 80028e0:	08002919 	.word	0x08002919
 80028e4:	0800292d 	.word	0x0800292d
 80028e8:	0800294b 	.word	0x0800294b
 80028ec:	0800294b 	.word	0x0800294b
 80028f0:	0800290f 	.word	0x0800290f
 80028f4:	08002905 	.word	0x08002905
 80028f8:	08002955 	.word	0x08002955
 80028fc:	08002937 	.word	0x08002937
 8002900:	08002941 	.word	0x08002941

            // Do nothing
            break;
        case BMP3_E_NULL_PTR:
            //PDEBUG("API [%s] Error [%d] : Null pointer\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR1\n", 7);
 8002904:	2107      	movs	r1, #7
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <bmp3_check_rslt+0xa0>)
 8002908:	f015 fd9a 	bl	8018440 <CDC_Transmit_FS>
            break;
 800290c:	e023      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_COMM_FAIL:
        	//PDEBUG("API [%s] Error [%d] : Communication failure\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR2\n", 6);
 800290e:	2106      	movs	r1, #6
 8002910:	4814      	ldr	r0, [pc, #80]	; (8002964 <bmp3_check_rslt+0xa4>)
 8002912:	f015 fd95 	bl	8018440 <CDC_Transmit_FS>
        	break;
 8002916:	e01e      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_INVALID_LEN:
        	//PDEBUG("API [%s] Error [%d] : Incorrect length parameter\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR3\n", 6);
 8002918:	2106      	movs	r1, #6
 800291a:	4813      	ldr	r0, [pc, #76]	; (8002968 <bmp3_check_rslt+0xa8>)
 800291c:	f015 fd90 	bl	8018440 <CDC_Transmit_FS>
        	break;
 8002920:	e019      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_DEV_NOT_FOUND:
        	//PDEBUG("API [%s] Error [%d] : Device not found\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR4\n", 6);
 8002922:	2106      	movs	r1, #6
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <bmp3_check_rslt+0xac>)
 8002926:	f015 fd8b 	bl	8018440 <CDC_Transmit_FS>
        	break;
 800292a:	e014      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_E_CONFIGURATION_ERR:
        	//PDEBUG("API [%s] Error [%d] : Configuration Error\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR5\n", 6);
 800292c:	2106      	movs	r1, #6
 800292e:	4810      	ldr	r0, [pc, #64]	; (8002970 <bmp3_check_rslt+0xb0>)
 8002930:	f015 fd86 	bl	8018440 <CDC_Transmit_FS>
        	break;
 8002934:	e00f      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_SENSOR_NOT_ENABLED:
        	//PDEBUG("API [%s] Error [%d] : Warning when Sensor not enabled\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR6\n", 6);
 8002936:	2106      	movs	r1, #6
 8002938:	480e      	ldr	r0, [pc, #56]	; (8002974 <bmp3_check_rslt+0xb4>)
 800293a:	f015 fd81 	bl	8018440 <CDC_Transmit_FS>
        	break;
 800293e:	e00a      	b.n	8002956 <bmp3_check_rslt+0x96>
        case BMP3_W_INVALID_FIFO_REQ_FRAME_CNT:
        	//PDEBUG("API [%s] Error [%d] : Warning when Fifo watermark level is not in limit\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR7\n", 6);
 8002940:	2106      	movs	r1, #6
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <bmp3_check_rslt+0xb8>)
 8002944:	f015 fd7c 	bl	8018440 <CDC_Transmit_FS>
        	break;
 8002948:	e005      	b.n	8002956 <bmp3_check_rslt+0x96>
        default:
        	//PDEBUG("API [%s] Error [%d] : Unknown error code\r\n", api_name, rslt);
        	CDC_Transmit_FS("ERROR8\n", 6);
 800294a:	2106      	movs	r1, #6
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <bmp3_check_rslt+0xbc>)
 800294e:	f015 fd77 	bl	8018440 <CDC_Transmit_FS>
        	break;
 8002952:	e000      	b.n	8002956 <bmp3_check_rslt+0x96>
            break;
 8002954:	bf00      	nop
    }
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	0801bdf4 	.word	0x0801bdf4
 8002964:	0801bdfc 	.word	0x0801bdfc
 8002968:	0801be04 	.word	0x0801be04
 800296c:	0801be0c 	.word	0x0801be0c
 8002970:	0801be14 	.word	0x0801be14
 8002974:	0801be1c 	.word	0x0801be1c
 8002978:	0801be24 	.word	0x0801be24
 800297c:	0801be2c 	.word	0x0801be2c

08002980 <bmp3_interface_init>:

BMP3_INTF_RET_TYPE bmp3_interface_init(struct bmp3_dev *bmp3, uint8_t intf)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BMP3_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

	if(bmp3 != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <bmp3_interface_init+0x42>
	{
		/* Bus configuration : I2C */
		if (intf == BMP3_I2C_INTF)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10b      	bne.n	80029b4 <bmp3_interface_init+0x34>
		{
			//PDEBUG("I2C Interface\n");
			dev_addr = BMP3_ADDR_I2C_SEC;
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <bmp3_interface_init+0x58>)
 800299e:	2277      	movs	r2, #119	; 0x77
 80029a0:	701a      	strb	r2, [r3, #0]
			bmp3->read = SensorAPI_I2Cx_Read;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0d      	ldr	r2, [pc, #52]	; (80029dc <bmp3_interface_init+0x5c>)
 80029a6:	60da      	str	r2, [r3, #12]
			bmp3->write = SensorAPI_I2Cx_Write;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <bmp3_interface_init+0x60>)
 80029ac:	611a      	str	r2, [r3, #16]
			bmp3->intf = BMP3_I2C_INTF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	721a      	strb	r2, [r3, #8]
			bmp3->read = SensorAPI_SPIx_Read;
			bmp3->write = SensorAPI_SPIx_Write;
			bmp3->intf = BMP3_SPI_INTF;
		}*/

		bmp3->delay_us = bmp3_delay_us;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <bmp3_interface_init+0x64>)
 80029b8:	615a      	str	r2, [r3, #20]
		bmp3->intf_ptr = &dev_addr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <bmp3_interface_init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e001      	b.n	80029c6 <bmp3_interface_init+0x46>
	}
	else
	{
		rslt = BMP3_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	; 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000037c 	.word	0x2000037c
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a75 	.word	0x08002a75
 80029e4:	080029e9 	.word	0x080029e9

080029e8 <bmp3_delay_us>:
		}
	}
}

void bmp3_delay_us(uint32_t period, void *intf_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
	uint32_t i;

	while(period--)
 80029f2:	e008      	b.n	8002a06 <bmp3_delay_us+0x1e>
	{
		for(i = 0; i < 84; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e002      	b.n	8002a00 <bmp3_delay_us+0x18>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3301      	adds	r3, #1
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b53      	cmp	r3, #83	; 0x53
 8002a04:	d9f9      	bls.n	80029fa <bmp3_delay_us+0x12>
	while(period--)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	1e5a      	subs	r2, r3, #1
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f1      	bne.n	80029f4 <bmp3_delay_us+0xc>
		{
			;
		}
	}
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SensorAPI_I2Cx_Read>:
* Input          : I2C1 or I2C2, slave_address7, subaddress, Write Number
* Output         : None
* Return         : number of bytes transmitted
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t subaddress, uint8_t *pBuffer, uint16_t ReadNumbr, void *intf_ptr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	82bb      	strh	r3, [r7, #20]

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, &subaddress, 1, BUS_TIMEOUT);
 8002a40:	f107 020f 	add.w	r2, r7, #15
 8002a44:	8ab9      	ldrh	r1, [r7, #20]
 8002a46:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	4808      	ldr	r0, [pc, #32]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a50:	f004 ffe4 	bl	8007a1c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, DevAddress, pBuffer, ReadNumbr, BUS_TIMEOUT);
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	8ab9      	ldrh	r1, [r7, #20]
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	9200      	str	r2, [sp, #0]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SensorAPI_I2Cx_Read+0x50>)
 8002a62:	f005 f8cf 	bl	8007c04 <HAL_I2C_Master_Receive>
	return 0;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000580 	.word	0x20000580

08002a74 <SensorAPI_I2Cx_Write>:

int8_t SensorAPI_I2Cx_Write(uint8_t subaddress, uint8_t *pBuffer, uint16_t WriteNumbr, void *intf_ptr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	4613      	mov	r3, r2
 8002a84:	81bb      	strh	r3, [r7, #12]
	uint8_t dev_addr = *(uint8_t*)intf_ptr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	75fb      	strb	r3, [r7, #23]
	uint16_t DevAddress = dev_addr << 1;
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	82bb      	strh	r3, [r7, #20]

	GTXBuffer[0] = subaddress;
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], pBuffer, WriteNumbr);
 8002a9a:	89bb      	ldrh	r3, [r7, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	480a      	ldr	r0, [pc, #40]	; (8002acc <SensorAPI_I2Cx_Write+0x58>)
 8002aa2:	f016 fa25 	bl	8018ef0 <memcpy>

	// send register address
	HAL_I2C_Master_Transmit(&I2C_HANDLE, DevAddress, GTXBuffer, WriteNumbr+1, BUS_TIMEOUT);
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	8ab9      	ldrh	r1, [r7, #20]
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	9200      	str	r2, [sp, #0]
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <SensorAPI_I2Cx_Write+0x54>)
 8002ab6:	4806      	ldr	r0, [pc, #24]	; (8002ad0 <SensorAPI_I2Cx_Write+0x5c>)
 8002ab8:	f004 ffb0 	bl	8007a1c <HAL_I2C_Master_Transmit>
	return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000380 	.word	0x20000380
 8002acc:	20000381 	.word	0x20000381
 8002ad0:	20000580 	.word	0x20000580

08002ad4 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <BSP_I2C2_Init+0x74>)
 8002ae2:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	4918      	ldr	r1, [pc, #96]	; (8002b4c <BSP_I2C2_Init+0x78>)
 8002aec:	600a      	str	r2, [r1, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d122      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8002af2:	4814      	ldr	r0, [pc, #80]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002af4:	f005 fcb1 	bl	800845a <HAL_I2C_GetState>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11c      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002afe:	4811      	ldr	r0, [pc, #68]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b00:	f000 f8fe 	bl	8002d00 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b0c:	f000 f8b4 	bl	8002c78 <MX_I2C2_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b16:	f06f 0307 	mvn.w	r3, #7
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e00c      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4808      	ldr	r0, [pc, #32]	; (8002b44 <BSP_I2C2_Init+0x70>)
 8002b22:	f005 ffd5 	bl	8008ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002b2c:	f06f 0307 	mvn.w	r3, #7
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	e001      	b.n	8002b38 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000580 	.word	0x20000580
 8002b48:	40005800 	.word	0x40005800
 8002b4c:	200005d4 	.word	0x200005d4

08002b50 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d014      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <BSP_I2C2_DeInit+0x48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b76:	f000 f923 	bl	8002dc0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <BSP_I2C2_DeInit+0x4c>)
 8002b7c:	f004 ff1f 	bl	80079be <HAL_I2C_DeInit>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002b86:	f06f 0307 	mvn.w	r3, #7
 8002b8a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002b8c:	687b      	ldr	r3, [r7, #4]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200005d4 	.word	0x200005d4
 8002b9c:	20000580 	.word	0x20000580

08002ba0 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	; 0x28
 8002ba4:	af04      	add	r7, sp, #16
 8002ba6:	60ba      	str	r2, [r7, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	81fb      	strh	r3, [r7, #14]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	81bb      	strh	r3, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002bba:	89ba      	ldrh	r2, [r7, #12]
 8002bbc:	89f9      	ldrh	r1, [r7, #14]
 8002bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	480c      	ldr	r0, [pc, #48]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bd0:	f005 f90e 	bl	8007df0 <HAL_I2C_Mem_Write>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <BSP_I2C2_WriteReg+0x60>)
 8002bdc:	f005 fc4b 	bl	8008476 <HAL_I2C_GetError>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d103      	bne.n	8002bee <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002be6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	e002      	b.n	8002bf4 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002bee:	f06f 0303 	mvn.w	r3, #3
 8002bf2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002bf4:	697b      	ldr	r3, [r7, #20]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000580 	.word	0x20000580

08002c04 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af04      	add	r7, sp, #16
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4603      	mov	r3, r0
 8002c10:	81fb      	strh	r3, [r7, #14]
 8002c12:	460b      	mov	r3, r1
 8002c14:	81bb      	strh	r3, [r7, #12]
 8002c16:	4613      	mov	r3, r2
 8002c18:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	89f9      	ldrh	r1, [r7, #14]
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2301      	movs	r3, #1
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c34:	f005 f9f0 	bl	8008018 <HAL_I2C_Mem_Read>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <BSP_I2C2_ReadReg+0x60>)
 8002c40:	f005 fc19 	bl	8008476 <HAL_I2C_GetError>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d103      	bne.n	8002c52 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c4a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e002      	b.n	8002c58 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002c52:	f06f 0303 	mvn.w	r3, #3
 8002c56:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002c58:	697b      	ldr	r3, [r7, #20]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000580 	.word	0x20000580

08002c68 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002c6c:	f003 feda 	bl	8006a24 <HAL_GetTick>
 8002c70:	4603      	mov	r3, r0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <MX_I2C2_Init+0x80>)
 8002c88:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x307075B1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <MX_I2C2_Init+0x84>)
 8002c8e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 fdf0 	bl	80078a0 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cca:	2100      	movs	r1, #0
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f005 feff 	bl	8008ad0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002cdc:	2100      	movs	r1, #0
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f005 ff41 	bl	8008b66 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40005800 	.word	0x40005800
 8002cfc:	307075b1 	.word	0x307075b1

08002d00 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0ae      	sub	sp, #184	; 0xb8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2294      	movs	r2, #148	; 0x94
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f016 f8fb 	bl	8018f0c <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d1e:	f107 0310 	add.w	r3, r7, #16
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 f90e 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	4a22      	ldr	r2, [pc, #136]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d34:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d48:	2312      	movs	r3, #18
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d64:	4619      	mov	r1, r3
 8002d66:	4815      	ldr	r0, [pc, #84]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d68:	f004 facc 	bl	8007304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d74:	2312      	movs	r3, #18
 8002d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2303      	movs	r3, #3
 8002d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d90:	4619      	mov	r1, r3
 8002d92:	480a      	ldr	r0, [pc, #40]	; (8002dbc <I2C2_MspInit+0xbc>)
 8002d94:	f004 fab6 	bl	8007304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a06      	ldr	r2, [pc, #24]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <I2C2_MspInit+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 8002db0:	bf00      	nop
 8002db2:	37b8      	adds	r7, #184	; 0xb8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	48000400 	.word	0x48000400

08002dc0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <I2C2_MspDeInit+0x30>)
 8002dce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dd8:	4806      	ldr	r0, [pc, #24]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002dda:	f004 fc25 	bl	8007628 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 8002dde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de2:	4804      	ldr	r0, [pc, #16]	; (8002df4 <I2C2_MspDeInit+0x34>)
 8002de4:	f004 fc20 	bl	8007628 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	48000400 	.word	0x48000400

08002df8 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6858      	ldr	r0, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8adb      	ldrh	r3, [r3, #22]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f004 fd0d 	bl	800783c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	1cf9      	adds	r1, r7, #3
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f00b fab7 	bl	800e3a0 <HAL_SPI_Transmit>
 8002e32:	4603      	mov	r3, r0
 8002e34:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f107 010f 	add.w	r1, r7, #15
 8002e42:	2201      	movs	r2, #1
 8002e44:	f00b fc1a 	bl	800e67c <HAL_SPI_Receive>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6858      	ldr	r0, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8adb      	ldrh	r3, [r3, #22]
 8002e54:	2201      	movs	r2, #1
 8002e56:	4619      	mov	r1, r3
 8002e58:	f004 fcf0 	bl	800783c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	70fb      	strb	r3, [r7, #3]
 8002e72:	4613      	mov	r3, r2
 8002e74:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e7c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b21b      	sxth	r3, r3
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6858      	ldr	r0, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8adb      	ldrh	r3, [r3, #22]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f004 fcce 	bl	800783c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f107 010a 	add.w	r1, r7, #10
 8002eac:	2202      	movs	r2, #2
 8002eae:	f00b fa77 	bl	800e3a0 <HAL_SPI_Transmit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6858      	ldr	r0, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	8adb      	ldrh	r3, [r3, #22]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f004 fcbb 	bl	800783c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	461a      	mov	r2, r3
 8002edc:	460b      	mov	r3, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6858      	ldr	r0, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8adb      	ldrh	r3, [r3, #22]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f004 fca2 	bl	800783c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f107 0117 	add.w	r1, r7, #23
 8002f04:	2201      	movs	r2, #1
 8002f06:	f00b fa4b 	bl	800e3a0 <HAL_SPI_Transmit>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d108      	bne.n	8002f26 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	79fa      	ldrb	r2, [r7, #7]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f00b fef0 	bl	800ed04 <HAL_SPI_Transmit_DMA>
 8002f24:	e012      	b.n	8002f4c <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	f00b fa34 	bl	800e3a0 <HAL_SPI_Transmit>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6858      	ldr	r0, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8adb      	ldrh	r3, [r3, #22]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4619      	mov	r1, r3
 8002f48:	f004 fc78 	bl	800783c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff ff7b 	bl	8002e66 <write_register>
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b2c      	cmp	r3, #44	; 0x2c
 8002f88:	d801      	bhi.n	8002f8e <set_OCP+0x16>
    imax = 45;
 8002f8a:	232d      	movs	r3, #45	; 0x2d
 8002f8c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8002f8e:	78fb      	ldrb	r3, [r7, #3]
 8002f90:	2bf0      	cmp	r3, #240	; 0xf0
 8002f92:	d901      	bls.n	8002f98 <set_OCP+0x20>
    imax = 240;
 8002f94:	23f0      	movs	r3, #240	; 0xf0
 8002f96:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b81      	cmp	r3, #129	; 0x81
 8002f9c:	d809      	bhi.n	8002fb2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	3b2d      	subs	r3, #45	; 0x2d
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <set_OCP+0x68>)
 8002fa4:	fb82 1203 	smull	r1, r2, r2, r3
 8002fa8:	1052      	asrs	r2, r2, #1
 8002faa:	17db      	asrs	r3, r3, #31
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e008      	b.n	8002fc4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	331e      	adds	r3, #30
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <set_OCP+0x68>)
 8002fb8:	fb82 1203 	smull	r1, r2, r2, r3
 8002fbc:	1092      	asrs	r2, r2, #2
 8002fbe:	17db      	asrs	r3, r3, #31
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	210b      	movs	r1, #11
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff48 	bl	8002e66 <write_register>
}
 8002fd6:	bf00      	nop
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	66666667 	.word	0x66666667

08002fe4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8002fec:	211d      	movs	r1, #29
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff02 	bl	8002df8 <read_register>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	461c      	mov	r4, r3
 8003000:	4615      	mov	r5, r2
 8003002:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8003006:	211e      	movs	r1, #30
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fef5 	bl	8002df8 <read_register>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b0a      	cmp	r3, #10
 800301c:	d908      	bls.n	8003030 <set_low_data_rate_optimization+0x4c>
 800301e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003022:	1fd1      	subs	r1, r2, #7
 8003024:	430b      	orrs	r3, r1
 8003026:	d103      	bne.n	8003030 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8003028:	7ffb      	ldrb	r3, [r7, #31]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	461a      	mov	r2, r3
 8003034:	2126      	movs	r1, #38	; 0x26
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff ff15 	bl	8002e66 <write_register>
}
 800303c:	bf00      	nop
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bdb0      	pop	{r4, r5, r7, pc}

08003044 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800304c:	2100      	movs	r1, #0
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff ff7f 	bl	8002f52 <set_mode>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8003064:	2101      	movs	r1, #1
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff73 	bl	8002f52 <set_mode>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800307c:	211d      	movs	r1, #29
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff feba 	bl	8002df8 <read_register>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	461a      	mov	r2, r3
 8003094:	211d      	movs	r1, #29
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fee5 	bl	8002e66 <write_register>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d901      	bls.n	80030c2 <lora_set_tx_power+0x1e>
      level = 15;
 80030be:	230f      	movs	r3, #15
 80030c0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	2109      	movs	r1, #9
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fec9 	bl	8002e66 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 80030d4:	e02e      	b.n	8003134 <lora_set_tx_power+0x90>
    if (level > 20) {
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	2b14      	cmp	r3, #20
 80030da:	d901      	bls.n	80030e0 <lora_set_tx_power+0x3c>
      level = 20;
 80030dc:	2314      	movs	r3, #20
 80030de:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d801      	bhi.n	80030ea <lora_set_tx_power+0x46>
      level = 2;
 80030e6:	2302      	movs	r3, #2
 80030e8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d90c      	bls.n	800310a <lora_set_tx_power+0x66>
      level -= 3;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	3b03      	subs	r3, #3
 80030f4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80030f6:	2287      	movs	r2, #135	; 0x87
 80030f8:	214d      	movs	r1, #77	; 0x4d
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff feb3 	bl	8002e66 <write_register>
      set_OCP(lora, 140);
 8003100:	218c      	movs	r1, #140	; 0x8c
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff38 	bl	8002f78 <set_OCP>
 8003108:	e008      	b.n	800311c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	214d      	movs	r1, #77	; 0x4d
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fea9 	bl	8002e66 <write_register>
      set_OCP(lora, 97);
 8003114:	2161      	movs	r1, #97	; 0x61
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff ff2e 	bl	8002f78 <set_OCP>
    level -= 2;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b02      	subs	r3, #2
 8003120:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8003122:	78fb      	ldrb	r3, [r7, #3]
 8003124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	2109      	movs	r1, #9
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fe99 	bl	8002e66 <write_register>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8003148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	04d9      	lsls	r1, r3, #19
 8003156:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 800315a:	04d0      	lsls	r0, r2, #19
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <lora_set_frequency+0x88>)
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	f7fd fd89 	bl	8000c78 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 800316e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	0c02      	lsrs	r2, r0, #16
 800317c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003180:	0c0b      	lsrs	r3, r1, #16
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	461a      	mov	r2, r3
 8003186:	2106      	movs	r1, #6
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff fe6c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 800318e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003192:	f04f 0200 	mov.w	r2, #0
 8003196:	f04f 0300 	mov.w	r3, #0
 800319a:	0a02      	lsrs	r2, r0, #8
 800319c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031a0:	0a0b      	lsrs	r3, r1, #8
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	2107      	movs	r1, #7
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fe5c 	bl	8002e66 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80031ae:	7c3b      	ldrb	r3, [r7, #16]
 80031b0:	461a      	mov	r2, r3
 80031b2:	2108      	movs	r1, #8
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f7ff fe56 	bl	8002e66 <write_register>
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	01e84800 	.word	0x01e84800

080031c8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d802      	bhi.n	80031e0 <lora_set_spreading_factor+0x18>
    sf = 6;
 80031da:	2306      	movs	r3, #6
 80031dc:	70fb      	strb	r3, [r7, #3]
 80031de:	e004      	b.n	80031ea <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d901      	bls.n	80031ea <lora_set_spreading_factor+0x22>
    sf = 12;
 80031e6:	230c      	movs	r3, #12
 80031e8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d10a      	bne.n	8003206 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 80031f0:	22c5      	movs	r2, #197	; 0xc5
 80031f2:	2131      	movs	r1, #49	; 0x31
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fe36 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 80031fa:	220c      	movs	r2, #12
 80031fc:	2137      	movs	r1, #55	; 0x37
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7ff fe31 	bl	8002e66 <write_register>
 8003204:	e009      	b.n	800321a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8003206:	22c3      	movs	r2, #195	; 0xc3
 8003208:	2131      	movs	r1, #49	; 0x31
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe2b 	bl	8002e66 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8003210:	220a      	movs	r2, #10
 8003212:	2137      	movs	r1, #55	; 0x37
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fe26 	bl	8002e66 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 800321a:	211e      	movs	r1, #30
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fdeb 	bl	8002df8 <read_register>
 8003222:	4603      	mov	r3, r0
 8003224:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8003226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b25a      	sxtb	r2, r3
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	b25b      	sxtb	r3, r3
 8003236:	4313      	orrs	r3, r2
 8003238:	b25b      	sxtb	r3, r3
 800323a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	461a      	mov	r2, r3
 8003240:	211e      	movs	r1, #30
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fe0f 	bl	8002e66 <write_register>

  set_low_data_rate_optimization(lora);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff fecb 	bl	8002fe4 <set_low_data_rate_optimization>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8003262:	887b      	ldrh	r3, [r7, #2]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	b29b      	uxth	r3, r3
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	2120      	movs	r1, #32
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fdf9 	bl	8002e66 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	2121      	movs	r1, #33	; 0x21
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fdef 	bl	8002e66 <write_register>
}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8003298:	2142      	movs	r1, #66	; 0x42
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fdac 	bl	8002df8 <read_register>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fd9f 	bl	8002df8 <read_register>
 80032ba:	4603      	mov	r3, r0
 80032bc:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	f003 0303 	and.w	r3, r3, #3
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d101      	bne.n	80032cc <lora_is_transmitting+0x22>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e000      	b.n	80032ce <lora_is_transmitting+0x24>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	4611      	mov	r1, r2
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	71fb      	strb	r3, [r7, #7]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff ffdc 	bl	80032aa <lora_is_transmitting>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80032f8:	2305      	movs	r3, #5
 80032fa:	e02a      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80032fc:	2101      	movs	r1, #1
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff fe27 	bl	8002f52 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f83a 	bl	800337e <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	7d1b      	ldrb	r3, [r3, #20]
 800330e:	461a      	mov	r2, r3
 8003310:	210d      	movs	r1, #13
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fda7 	bl	8002e66 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	7d1b      	ldrb	r3, [r3, #20]
 800331c:	461a      	mov	r2, r3
 800331e:	210e      	movs	r1, #14
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fda0 	bl	8002e66 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	461a      	mov	r2, r3
 800332a:	2122      	movs	r1, #34	; 0x22
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f7ff fd9a 	bl	8002e66 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	79fa      	ldrb	r2, [r7, #7]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fdc8 	bl	8002ece <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800333e:	79bb      	ldrb	r3, [r7, #6]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <lora_send_packet_base+0x72>
    return LORA_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e004      	b.n	8003352 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8003348:	2103      	movs	r1, #3
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff fe01 	bl	8002f52 <set_mode>
  return LORA_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	4613      	mov	r3, r2
 8003366:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	2302      	movs	r3, #2
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffb1 	bl	80032d6 <lora_send_packet_base>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8003386:	2208      	movs	r2, #8
 8003388:	2112      	movs	r1, #18
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd6b 	bl	8002e66 <write_register>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033d6:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff ff59 	bl	8003290 <lora_version>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b12      	cmp	r3, #18
 80033e6:	d001      	beq.n	80033ec <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 80033e8:	2304      	movs	r3, #4
 80033ea:	e031      	b.n	8003450 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f7ff fe29 	bl	8003044 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f7ff fe26 	bl	8003044 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 80033f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe9d 	bl	800313c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8003402:	2107      	movs	r1, #7
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff fedf 	bl	80031c8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800340a:	210a      	movs	r1, #10
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff22 	bl	8003256 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff fe2e 	bl	8003074 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8003418:	210c      	movs	r1, #12
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f7ff fcec 	bl	8002df8 <read_register>
 8003420:	4603      	mov	r3, r0
 8003422:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8003424:	7dbb      	ldrb	r3, [r7, #22]
 8003426:	f043 0303 	orr.w	r3, r3, #3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	210c      	movs	r1, #12
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fd18 	bl	8002e66 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8003436:	2204      	movs	r2, #4
 8003438:	2126      	movs	r1, #38	; 0x26
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff fd13 	bl	8002e66 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8003440:	2111      	movs	r1, #17
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff fe2e 	bl	80030a4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff fe07 	bl	800305c <lora_mode_standby>

  return LORA_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	f5ad 6d39 	sub.w	sp, sp, #2960	; 0xb90
 800345e:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	// The SD card mount, init, read, and write variables
	FRESULT sd_result_write; /* FatFs function common result code */
	UINT sd_err_byteswritten, sd_err_bytesread; /* File write/read counts */
	uint8_t sd_write_buffer[50] = "STM32 FATFS works great!"; /* File write buffer. */
 8003460:	4baf      	ldr	r3, [pc, #700]	; (8003720 <main+0x2c8>)
 8003462:	f507 642e 	add.w	r4, r7, #2784	; 0xae0
 8003466:	461d      	mov	r5, r3
 8003468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003470:	c403      	stmia	r4!, {r0, r1}
 8003472:	7022      	strb	r2, [r4, #0]
 8003474:	f607 23f9 	addw	r3, r7, #2809	; 0xaf9
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
 8003484:	615a      	str	r2, [r3, #20]
 8003486:	761a      	strb	r2, [r3, #24]

	// The pressure sensor BMP390 variables
	int8_t bmp_result;
	uint16_t bmp_settings_select;
	struct bmp3_dev bmp_device;
	struct bmp3_data bmp_data = { 0 };
 8003488:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800348c:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8003490:	461a      	mov	r2, r3
 8003492:	2300      	movs	r3, #0
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	6053      	str	r3, [r2, #4]
 8003498:	6093      	str	r3, [r2, #8]
 800349a:	60d3      	str	r3, [r2, #12]
	struct bmp3_settings bmp_settings = { 0 };
 800349c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80034a0:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	731a      	strb	r2, [r3, #12]
	struct bmp3_status bmp_status = { { 0 } };
 80034ae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80034b2:	f6a3 1384 	subw	r3, r3, #2436	; 0x984
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	605a      	str	r2, [r3, #4]
 80034bc:	811a      	strh	r2, [r3, #8]
	uint8_t bmp_temperature_buffer[25] = {0};
 80034be:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80034c2:	f5a3 631a 	sub.w	r3, r3, #2464	; 0x9a0
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	3304      	adds	r3, #4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
 80034d8:	751a      	strb	r2, [r3, #20]
	uint8_t bmp_pressure_buffer[25] = {0};
 80034da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80034de:	f6a3 13bc 	subw	r3, r3, #2492	; 0x9bc
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	3304      	adds	r3, #4
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	751a      	strb	r2, [r3, #20]

	//test
	//HAL_StatusTypeDef i2c2status;
	//uint8_t hello[7] = "Hello!\n";
	uint8_t i2c2check_active_address[25] = {0};
 80034f6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80034fa:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	3304      	adds	r3, #4
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
 8003510:	751a      	strb	r2, [r3, #20]
	uint8_t i2c2check_space[] = " - ";
 8003512:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003516:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 800351a:	4a82      	ldr	r2, [pc, #520]	; (8003724 <main+0x2cc>)
 800351c:	601a      	str	r2, [r3, #0]

	// The gyroscope LSM6DSO variables
	LSM6DSO_Object_t gyro_device;
	LSM6DSO_Axes_t gyro_acceleration_object;
	uint8_t gyro_acceleration_buffer[40] = {0};
 800351e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003522:	f6a3 2348 	subw	r3, r3, #2632	; 0xa48
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	3304      	adds	r3, #4
 800352c:	2224      	movs	r2, #36	; 0x24
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f015 fceb 	bl	8018f0c <memset>
	LSM6DSO_Axes_t gyro_angularvel_object;
	uint8_t gyro_angularvel_buffer[40] = {0};
 8003536:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800353a:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	3304      	adds	r3, #4
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	2100      	movs	r1, #0
 8003548:	4618      	mov	r0, r3
 800354a:	f015 fcdf 	bl	8018f0c <memset>

	//LoRa
	lora_sx1276 lora;

	//MIRA
	uint8_t mira_target_reg = 0x00;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3b7e 	strb.w	r3, [r7, #2942]	; 0xb7e
	uint8_t mira_Tx_payload[4] = {0x00,0x00,0x00,0x00};
 8003554:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003558:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
	//	int message;
	//	int message_length;

	// Time progress tracking using tick
	double system_time_counter;
	system_time_counter = 0;
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	f507 6138 	add.w	r1, r7, #2944	; 0xb80
 800356c:	e9c1 2300 	strd	r2, r3, [r1]
	uint8_t system_time_buffer[25] = {0};
 8003570:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003574:	f6a3 3388 	subw	r3, r3, #2952	; 0xb88
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	3304      	adds	r3, #4
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	751a      	strb	r2, [r3, #20]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800358c:	f003 f9e2 	bl	8006954 <HAL_Init>

	/* USER CODE BEGIN Init */

	// Initialize HAL for UART interrupts
	HAL_MspInit();
 8003590:	f001 f9a6 	bl	80048e0 <HAL_MspInit>
	// Initialize I2C2 with custom driver
	BSP_I2C2_Init();
 8003594:	f7ff fa9e 	bl	8002ad4 <BSP_I2C2_Init>

	//Initialize Msp for both UARTs
	HAL_UART_MspInit(&huart1);
 8003598:	4863      	ldr	r0, [pc, #396]	; (8003728 <main+0x2d0>)
 800359a:	f001 fb2b 	bl	8004bf4 <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart2);
 800359e:	4863      	ldr	r0, [pc, #396]	; (800372c <main+0x2d4>)
 80035a0:	f001 fb28 	bl	8004bf4 <HAL_UART_MspInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80035a4:	f000 fe6e 	bl	8004284 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80035a8:	f001 f8c0 	bl	800472c <MX_GPIO_Init>
	MX_DMA_Init();
 80035ac:	f001 f89a 	bl	80046e4 <MX_DMA_Init>
	MX_I2C1_Init();
 80035b0:	f000 fee6 	bl	8004380 <MX_I2C1_Init>
	MX_SDMMC1_SD_Init();
 80035b4:	f000 ff24 	bl	8004400 <MX_SDMMC1_SD_Init>
	MX_SPI1_Init();
 80035b8:	f000 ff44 	bl	8004444 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 80035bc:	f000 fff6 	bl	80045ac <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80035c0:	f001 f840 	bl	8004644 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 80035c4:	f010 f912 	bl	80137ec <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 80035c8:	f014 fe6c 	bl	80182a4 <MX_USB_DEVICE_Init>
	MX_TIM17_Init();
 80035cc:	f000 ff78 	bl	80044c0 <MX_TIM17_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80035d0:	f000 feaa 	bl	8004328 <MX_NVIC_Init>


	/// MIRA Init /////////////////////////////////////////////////////////////////////////////////

	// enable channel 1 for MIRA communication
	HAL_GPIO_WritePin(RX_EN_1_GPIO_Port, RX_EN_1_Pin, GPIO_PIN_SET);
 80035d4:	2201      	movs	r2, #1
 80035d6:	2110      	movs	r1, #16
 80035d8:	4855      	ldr	r0, [pc, #340]	; (8003730 <main+0x2d8>)
 80035da:	f004 f92f 	bl	800783c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TX_EN_1_GPIO_Port, TX_EN_1_Pin, GPIO_PIN_SET);
 80035de:	2201      	movs	r2, #1
 80035e0:	2120      	movs	r1, #32
 80035e2:	4853      	ldr	r0, [pc, #332]	; (8003730 <main+0x2d8>)
 80035e4:	f004 f92a 	bl	800783c <HAL_GPIO_WritePin>

	// WAIT FOR USB CONNECTION
	HAL_Delay(8000);
 80035e8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80035ec:	f003 fa26 	bl	8006a3c <HAL_Delay>
	while (CDC_Transmit_FS ("START\n", 6) == USBD_BUSY);
 80035f0:	bf00      	nop
 80035f2:	2106      	movs	r1, #6
 80035f4:	484f      	ldr	r0, [pc, #316]	; (8003734 <main+0x2dc>)
 80035f6:	f014 ff23 	bl	8018440 <CDC_Transmit_FS>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d0f8      	beq.n	80035f2 <main+0x19a>
	//	mira_Tx_payload[3] = 0x01;
	//	status = mira_command(&huart1, WRITE_REGISTER, mira_target_reg, mira_Tx_payload, mira_Rx_buffer, 5000);


	/// LoRa Init /////////////////////////////////////////////////////////////////////////////////
	uint8_t lora_res = lora_init(&lora, &hspi1, LORA_NSS_GPIO_Port, LORA_NSS_Pin, LORA_BASE_FREQUENCY_US);
 8003600:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8003604:	a344      	add	r3, pc, #272	; (adr r3, 8003718 <main+0x2c0>)
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	e9cd 2300 	strd	r2, r3, [sp]
 800360e:	2320      	movs	r3, #32
 8003610:	4a49      	ldr	r2, [pc, #292]	; (8003738 <main+0x2e0>)
 8003612:	494a      	ldr	r1, [pc, #296]	; (800373c <main+0x2e4>)
 8003614:	f7ff fec0 	bl	8003398 <lora_init>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 3b7d 	strb.w	r3, [r7, #2941]	; 0xb7d
	if (lora_res != LORA_OK) {
 800361e:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <main+0x1de>
		// Initialization failed
		while (CDC_Transmit_FS ("LORA INIT NOT OK!\n", 18) == USBD_BUSY);
 8003626:	bf00      	nop
 8003628:	2112      	movs	r1, #18
 800362a:	4845      	ldr	r0, [pc, #276]	; (8003740 <main+0x2e8>)
 800362c:	f014 ff08 	bl	8018440 <CDC_Transmit_FS>
 8003630:	4603      	mov	r3, r0
 8003632:	2b01      	cmp	r3, #1
 8003634:	d0f8      	beq.n	8003628 <main+0x1d0>
	}
	lora_res = lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003636:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800363a:	2204      	movs	r2, #4
 800363c:	4941      	ldr	r1, [pc, #260]	; (8003744 <main+0x2ec>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff fe8b 	bl	800335a <lora_send_packet>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3b7d 	strb.w	r3, [r7, #2941]	; 0xb7d
	if (lora_res != LORA_OK) {
 800364a:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <main+0x20a>
		// Send failed
		while (CDC_Transmit_FS ("LORA SEND NOT OK!\n", 18) == USBD_BUSY);
 8003652:	bf00      	nop
 8003654:	2112      	movs	r1, #18
 8003656:	483c      	ldr	r0, [pc, #240]	; (8003748 <main+0x2f0>)
 8003658:	f014 fef2 	bl	8018440 <CDC_Transmit_FS>
 800365c:	4603      	mov	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d0f8      	beq.n	8003654 <main+0x1fc>
	}
	if (lora_res == LORA_OK) {
 8003662:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <main+0x222>
		// All good
		while (CDC_Transmit_FS ("LORA OK!\n", 9) == USBD_BUSY);
 800366a:	bf00      	nop
 800366c:	2109      	movs	r1, #9
 800366e:	4837      	ldr	r0, [pc, #220]	; (800374c <main+0x2f4>)
 8003670:	f014 fee6 	bl	8018440 <CDC_Transmit_FS>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d0f8      	beq.n	800366c <main+0x214>


	/// Gyro Init /////////////////////////////////////////////////////////////////////////////////

	// Set gyro io functions and values
	gyro_io.Init = BSP_I2C2_Init;
 800367a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800367e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8003682:	4a33      	ldr	r2, [pc, #204]	; (8003750 <main+0x2f8>)
 8003684:	601a      	str	r2, [r3, #0]
	gyro_io.DeInit = BSP_I2C2_DeInit;
 8003686:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800368a:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800368e:	4a31      	ldr	r2, [pc, #196]	; (8003754 <main+0x2fc>)
 8003690:	605a      	str	r2, [r3, #4]
	gyro_io.BusType = 0;
 8003692:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003696:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
	gyro_io.Address = LSM6DSO_I2C_ADD_L;
 800369e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036a2:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80036a6:	22d5      	movs	r2, #213	; 0xd5
 80036a8:	731a      	strb	r2, [r3, #12]
	gyro_io.WriteReg = BSP_I2C2_WriteReg;
 80036aa:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036ae:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80036b2:	4a29      	ldr	r2, [pc, #164]	; (8003758 <main+0x300>)
 80036b4:	611a      	str	r2, [r3, #16]
	gyro_io.ReadReg = BSP_I2C2_ReadReg;
 80036b6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036ba:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80036be:	4a27      	ldr	r2, [pc, #156]	; (800375c <main+0x304>)
 80036c0:	615a      	str	r2, [r3, #20]
	gyro_io.GetTick = BSP_GetTick;
 80036c2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036c6:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80036ca:	4a25      	ldr	r2, [pc, #148]	; (8003760 <main+0x308>)
 80036cc:	619a      	str	r2, [r3, #24]
	gyro_io.Delay = HAL_Delay;
 80036ce:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80036d2:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 80036d6:	4a23      	ldr	r2, [pc, #140]	; (8003764 <main+0x30c>)
 80036d8:	61da      	str	r2, [r3, #28]

	// Initialize gyro
	LSM6DSO_RegisterBusIO(&gyro_device, &gyro_io);
 80036da:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80036de:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fc8d 	bl	8005004 <LSM6DSO_RegisterBusIO>
	gyro_result_init = LSM6DSO_Init(&gyro_device);
 80036ea:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fcf2 	bl	80050d8 <LSM6DSO_Init>
 80036f4:	f8c7 0b78 	str.w	r0, [r7, #2936]	; 0xb78

	// Check and print gyro device status
	if (gyro_result_init == 0) {while (CDC_Transmit_FS ("GYRO OK!\n", 9) == USBD_BUSY);}
 80036f8:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	; 0xb78
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d135      	bne.n	800376c <main+0x314>
 8003700:	bf00      	nop
 8003702:	2109      	movs	r1, #9
 8003704:	4818      	ldr	r0, [pc, #96]	; (8003768 <main+0x310>)
 8003706:	f014 fe9b 	bl	8018440 <CDC_Transmit_FS>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	d0f8      	beq.n	8003702 <main+0x2aa>
 8003710:	e034      	b.n	800377c <main+0x324>
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	3689cac0 	.word	0x3689cac0
 800371c:	00000000 	.word	0x00000000
 8003720:	0801c0a8 	.word	0x0801c0a8
 8003724:	00202d20 	.word	0x00202d20
 8003728:	2000075c 	.word	0x2000075c
 800372c:	200007ec 	.word	0x200007ec
 8003730:	48001000 	.word	0x48001000
 8003734:	0801bed4 	.word	0x0801bed4
 8003738:	48000800 	.word	0x48000800
 800373c:	200006ac 	.word	0x200006ac
 8003740:	0801bedc 	.word	0x0801bedc
 8003744:	0801bef0 	.word	0x0801bef0
 8003748:	0801bef8 	.word	0x0801bef8
 800374c:	0801bf0c 	.word	0x0801bf0c
 8003750:	08002ad5 	.word	0x08002ad5
 8003754:	08002b51 	.word	0x08002b51
 8003758:	08002ba1 	.word	0x08002ba1
 800375c:	08002c05 	.word	0x08002c05
 8003760:	08002c69 	.word	0x08002c69
 8003764:	08006a3d 	.word	0x08006a3d
 8003768:	0801bf18 	.word	0x0801bf18
	else {while (CDC_Transmit_FS ("GYRO NOT OK!\n", 13) == USBD_BUSY);}
 800376c:	bf00      	nop
 800376e:	210d      	movs	r1, #13
 8003770:	48cc      	ldr	r0, [pc, #816]	; (8003aa4 <main+0x64c>)
 8003772:	f014 fe65 	bl	8018440 <CDC_Transmit_FS>
 8003776:	4603      	mov	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d0f8      	beq.n	800376e <main+0x316>

	// Enabling translational and angular acceleration measurements
	LSM6DSO_ACC_Enable(&gyro_device);
 800377c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fd1e 	bl	80051c2 <LSM6DSO_ACC_Enable>
	LSM6DSO_GYRO_Enable(&gyro_device);
 8003786:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800378a:	4618      	mov	r0, r3
 800378c:	f001 ff8b 	bl	80056a6 <LSM6DSO_GYRO_Enable>
	LSM6DSO_ACC_SetOutputDataRate(&gyro_device, 104.0f);
 8003790:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003794:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8003aa8 <main+0x650>
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fd7d 	bl	8005298 <LSM6DSO_ACC_SetOutputDataRate>
	LSM6DSO_GYRO_SetOutputDataRate(&gyro_device, 104.0f);
 800379e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80037a2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8003aa8 <main+0x650>
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 f822 	bl	80057f0 <LSM6DSO_GYRO_SetOutputDataRate>
	/// BMP Init /////////////////////////////////////////////////////////////////////////////////
	/* Interface reference is given as a parameter
	 *         For I2C : BMP3_I2C_INTF
	 *         For SPI : BMP3_SPI_INTF
	 */
	bmp_result = bmp3_interface_init(&bmp_device, BMP3_I2C_INTF);
 80037ac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80037b0:	2101      	movs	r1, #1
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff f8e4 	bl	8002980 <bmp3_interface_init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
	bmp3_check_rslt("bmp3_interface_init", bmp_result);
 80037be:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 80037c2:	4619      	mov	r1, r3
 80037c4:	48b9      	ldr	r0, [pc, #740]	; (8003aac <main+0x654>)
 80037c6:	f7ff f87b 	bl	80028c0 <bmp3_check_rslt>

	bmp_result = bmp3_init(&bmp_device);
 80037ca:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fbd4 	bl	8000f7c <bmp3_init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
	bmp3_check_rslt("bmp3_init", bmp_result);
 80037da:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 80037de:	4619      	mov	r1, r3
 80037e0:	48b3      	ldr	r0, [pc, #716]	; (8003ab0 <main+0x658>)
 80037e2:	f7ff f86d 	bl	80028c0 <bmp3_check_rslt>


	bmp_settings.int_settings.drdy_en = BMP3_DISABLE;
 80037e6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80037ea:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80037ee:	2200      	movs	r2, #0
 80037f0:	729a      	strb	r2, [r3, #10]
	bmp_settings.int_settings.latch = BMP3_ENABLE;
 80037f2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80037f6:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 80037fa:	2201      	movs	r2, #1
 80037fc:	725a      	strb	r2, [r3, #9]
	bmp_settings.press_en = BMP3_ENABLE;
 80037fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003802:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003806:	2201      	movs	r2, #1
 8003808:	705a      	strb	r2, [r3, #1]
	bmp_settings.temp_en = BMP3_ENABLE;
 800380a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800380e:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003812:	2201      	movs	r2, #1
 8003814:	709a      	strb	r2, [r3, #2]

	bmp_settings.odr_filter.press_os = BMP3_OVERSAMPLING_4X;
 8003816:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800381a:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 800381e:	2202      	movs	r2, #2
 8003820:	70da      	strb	r2, [r3, #3]
	bmp_settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8003822:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003826:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 800382a:	2200      	movs	r2, #0
 800382c:	711a      	strb	r2, [r3, #4]
	bmp_settings.odr_filter.odr = BMP3_ODR_100_HZ;
 800382e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003832:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003836:	2201      	movs	r2, #1
 8003838:	719a      	strb	r2, [r3, #6]

	bmp_settings_select = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR | BMP3_SEL_DRDY_EN;
 800383a:	23be      	movs	r3, #190	; 0xbe
 800383c:	f8a7 3b74 	strh.w	r3, [r7, #2932]	; 0xb74

	bmp_result = bmp3_set_sensor_settings(bmp_settings_select, &bmp_settings, &bmp_device);
 8003840:	f8b7 3b74 	ldrh.w	r3, [r7, #2932]	; 0xb74
 8003844:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003848:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fcfd 	bl	800124c <bmp3_set_sensor_settings>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
	bmp3_check_rslt("bmp3_set_sensor_settings", bmp_result);
 8003858:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 800385c:	4619      	mov	r1, r3
 800385e:	4895      	ldr	r0, [pc, #596]	; (8003ab4 <main+0x65c>)
 8003860:	f7ff f82e 	bl	80028c0 <bmp3_check_rslt>

	if (bmp_result == BMP3_OK) {
 8003864:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <main+0x424>
		while (CDC_Transmit_FS ("BMP OK!\n", 8) == USBD_BUSY);
 800386c:	bf00      	nop
 800386e:	2108      	movs	r1, #8
 8003870:	4891      	ldr	r0, [pc, #580]	; (8003ab8 <main+0x660>)
 8003872:	f014 fde5 	bl	8018440 <CDC_Transmit_FS>
 8003876:	4603      	mov	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d0f8      	beq.n	800386e <main+0x416>


	/// GPS Init /////////////////////////////////////////////////////////////////////////////////

	// Setting the buffer for UART2 data reading
	gps_rxBuffer = gps_rxBuffer1;
 800387c:	4b8f      	ldr	r3, [pc, #572]	; (8003abc <main+0x664>)
 800387e:	4a90      	ldr	r2, [pc, #576]	; (8003ac0 <main+0x668>)
 8003880:	601a      	str	r2, [r3, #0]
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_UE);
 8003882:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <main+0x66c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8c7 3b48 	str.w	r3, [r7, #2888]	; 0xb48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	f8c7 3b44 	str.w	r3, [r7, #2884]	; 0xb44
   return(result);
 8003896:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	f8c7 3b70 	str.w	r3, [r7, #2928]	; 0xb70
 80038a2:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <main+0x66c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 80038ac:	f8c7 3b54 	str.w	r3, [r7, #2900]	; 0xb54
 80038b0:	f8c7 2b50 	str.w	r2, [r7, #2896]	; 0xb50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	f8d7 1b50 	ldr.w	r1, [r7, #2896]	; 0xb50
 80038b8:	f8d7 2b54 	ldr.w	r2, [r7, #2900]	; 0xb54
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	f8c7 3b4c 	str.w	r3, [r7, #2892]	; 0xb4c
   return(result);
 80038c4:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1da      	bne.n	8003882 <main+0x42a>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 80038cc:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <main+0x66c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	f8c7 3b30 	str.w	r3, [r7, #2864]	; 0xb30
   return(result);
 80038e0:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 80038e4:	f043 0304 	orr.w	r3, r3, #4
 80038e8:	f8c7 3b6c 	str.w	r3, [r7, #2924]	; 0xb6c
 80038ec:	4b75      	ldr	r3, [pc, #468]	; (8003ac4 <main+0x66c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 80038f6:	f8c7 3b40 	str.w	r3, [r7, #2880]	; 0xb40
 80038fa:	f8c7 2b3c 	str.w	r2, [r7, #2876]	; 0xb3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f8d7 1b3c 	ldr.w	r1, [r7, #2876]	; 0xb3c
 8003902:	f8d7 2b40 	ldr.w	r2, [r7, #2880]	; 0xb40
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	f8c7 3b38 	str.w	r3, [r7, #2872]	; 0xb38
   return(result);
 800390e:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1da      	bne.n	80038cc <main+0x474>
	ATOMIC_SET_BIT(huart2.Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <main+0x66c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8c7 3b20 	str.w	r3, [r7, #2848]	; 0xb20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
   return(result);
 800392a:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	f8c7 3b68 	str.w	r3, [r7, #2920]	; 0xb68
 8003936:	4b63      	ldr	r3, [pc, #396]	; (8003ac4 <main+0x66c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8003940:	f8c7 3b2c 	str.w	r3, [r7, #2860]	; 0xb2c
 8003944:	f8c7 2b28 	str.w	r2, [r7, #2856]	; 0xb28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	f8d7 1b28 	ldr.w	r1, [r7, #2856]	; 0xb28
 800394c:	f8d7 2b2c 	ldr.w	r2, [r7, #2860]	; 0xb2c
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	f8c7 3b24 	str.w	r3, [r7, #2852]	; 0xb24
   return(result);
 8003958:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1da      	bne.n	8003916 <main+0x4be>

	/// SD Init /////////////////////////////////////////////////////////////////////////////////

	// Initialize SD card
	// If not FR_OK, mounting failed, else it was successful
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 8003960:	2200      	movs	r2, #0
 8003962:	4959      	ldr	r1, [pc, #356]	; (8003ac8 <main+0x670>)
 8003964:	4859      	ldr	r0, [pc, #356]	; (8003acc <main+0x674>)
 8003966:	f013 fab5 	bl	8016ed4 <f_mount>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <main+0x52a>
	{
		while (CDC_Transmit_FS ("Mount failed!\n", 14) == USBD_BUSY);
 8003970:	bf00      	nop
 8003972:	210e      	movs	r1, #14
 8003974:	4856      	ldr	r0, [pc, #344]	; (8003ad0 <main+0x678>)
 8003976:	f014 fd63 	bl	8018440 <CDC_Transmit_FS>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d0f8      	beq.n	8003972 <main+0x51a>
 8003980:	e058      	b.n	8003a34 <main+0x5dc>
	}
	// here f_mount == FR_OK -> mounting was a success
	else
	{
		// f_mkfs
		if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, sd_read_buffer, sizeof(sd_read_buffer)) != FR_OK)
 8003982:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003986:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800398a:	9200      	str	r2, [sp, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2107      	movs	r1, #7
 8003990:	484d      	ldr	r0, [pc, #308]	; (8003ac8 <main+0x670>)
 8003992:	f013 ffff 	bl	8017994 <f_mkfs>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00b      	beq.n	80039b4 <main+0x55c>
		{
			while (CDC_Transmit_FS ("MKFS failed!\n", 13) == USBD_BUSY);
 800399c:	bf00      	nop
 800399e:	210d      	movs	r1, #13
 80039a0:	484c      	ldr	r0, [pc, #304]	; (8003ad4 <main+0x67c>)
 80039a2:	f014 fd4d 	bl	8018440 <CDC_Transmit_FS>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d0f8      	beq.n	800399e <main+0x546>
			hsd1.Init.ClockDiv = 0;
 80039ac:	4b4a      	ldr	r3, [pc, #296]	; (8003ad8 <main+0x680>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	615a      	str	r2, [r3, #20]
 80039b2:	e03f      	b.n	8003a34 <main+0x5dc>
		}
		else
		{
			hsd1.Init.ClockDiv = 0;
 80039b4:	4b48      	ldr	r3, [pc, #288]	; (8003ad8 <main+0x680>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	615a      	str	r2, [r3, #20]
			// Open file for writing (Create)
			if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 80039ba:	220a      	movs	r2, #10
 80039bc:	4947      	ldr	r1, [pc, #284]	; (8003adc <main+0x684>)
 80039be:	4848      	ldr	r0, [pc, #288]	; (8003ae0 <main+0x688>)
 80039c0:	f013 face 	bl	8016f60 <f_open>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <main+0x584>
			{
				while (CDC_Transmit_FS ("Open file failed!\n", 18) == USBD_BUSY);
 80039ca:	bf00      	nop
 80039cc:	2112      	movs	r1, #18
 80039ce:	4845      	ldr	r0, [pc, #276]	; (8003ae4 <main+0x68c>)
 80039d0:	f014 fd36 	bl	8018440 <CDC_Transmit_FS>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d0f8      	beq.n	80039cc <main+0x574>
 80039da:	e02b      	b.n	8003a34 <main+0x5dc>
			}
			else
			{

				// Write to the text file
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80039dc:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fc0d 	bl	8000200 <strlen>
 80039e6:	4602      	mov	r2, r0
 80039e8:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80039ec:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80039f0:	483b      	ldr	r0, [pc, #236]	; (8003ae0 <main+0x688>)
 80039f2:	f013 fdb2 	bl	801755a <f_write>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				f_read(&SDFile, &sd_read_buffer, 100, &sd_err_bytesread);
 80039fc:	f607 3314 	addw	r3, r7, #2836	; 0xb14
 8003a00:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8003a04:	2264      	movs	r2, #100	; 0x64
 8003a06:	4836      	ldr	r0, [pc, #216]	; (8003ae0 <main+0x688>)
 8003a08:	f013 fc68 	bl	80172dc <f_read>

				//while( CDC_Transmit_FS(sd_read_buffer,  sizeof(sd_read_buffer))  == USBD_BUSY);
				if((sd_err_byteswritten == 0) || (sd_result_write != FR_OK))
 8003a0c:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <main+0x5c4>
 8003a14:	f897 3b67 	ldrb.w	r3, [r7, #2919]	; 0xb67
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <main+0x5d6>
				{
					while (CDC_Transmit_FS ("Read/Write failed!\n", 19) == USBD_BUSY);
 8003a1c:	bf00      	nop
 8003a1e:	2113      	movs	r1, #19
 8003a20:	4831      	ldr	r0, [pc, #196]	; (8003ae8 <main+0x690>)
 8003a22:	f014 fd0d 	bl	8018440 <CDC_Transmit_FS>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d0f8      	beq.n	8003a1e <main+0x5c6>
				if((sd_err_byteswritten == 0) || (sd_result_write != FR_OK))
 8003a2c:	e002      	b.n	8003a34 <main+0x5dc>
				}
				else
				{
					f_close(&SDFile);
 8003a2e:	482c      	ldr	r0, [pc, #176]	; (8003ae0 <main+0x688>)
 8003a30:	f013 ff86 	bl	8017940 <f_close>
				}

			}
		}
	}
	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2100      	movs	r1, #0
 8003a38:	4824      	ldr	r0, [pc, #144]	; (8003acc <main+0x674>)
 8003a3a:	f013 fa4b 	bl	8016ed4 <f_mount>


	/// System timers Init /////////////////////////////////////////////////////////////////////////////////

	// Start timers
	HAL_TIM_Base_Start_IT(&htim17);
 8003a3e:	482b      	ldr	r0, [pc, #172]	; (8003aec <main+0x694>)
 8003a40:	f00b fd08 	bl	800f454 <HAL_TIM_Base_Start_IT>
	tick = 0;
 8003a44:	4b2a      	ldr	r3, [pc, #168]	; (8003af0 <main+0x698>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003a4a:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <main+0x69c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]


	/// I2C scanning /////////////////////////////////////////////////////////////////////////////////

	//-[ I2C Bus Scanning ]-
	uint8_t i = 0, ret;
 8003a50:	2300      	movs	r3, #0
 8003a52:	f887 3b7f 	strb.w	r3, [r7, #2943]	; 0xb7f
	for(i = 1; i < 128; i++)
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3b7f 	strb.w	r3, [r7, #2943]	; 0xb7f
 8003a5c:	e070      	b.n	8003b40 <main+0x6e8>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 3, 5);
 8003a5e:	f897 3b7f 	ldrb.w	r3, [r7, #2943]	; 0xb7f
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	b299      	uxth	r1, r3
 8003a68:	2305      	movs	r3, #5
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	4822      	ldr	r0, [pc, #136]	; (8003af8 <main+0x6a0>)
 8003a6e:	f004 fbed 	bl	800824c <HAL_I2C_IsDeviceReady>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3b5b 	strb.w	r3, [r7, #2907]	; 0xb5b
		if (ret != HAL_OK) // No ACK Received At That Address
 8003a78:	f897 3b5b 	ldrb.w	r3, [r7, #2907]	; 0xb5b
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d03d      	beq.n	8003afc <main+0x6a4>
		{
			while (CDC_Transmit_FS (i2c2check_space, strlen(i2c2check_space)) == USBD_BUSY);
 8003a80:	bf00      	nop
 8003a82:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc fbba 	bl	8000200 <strlen>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f014 fcd2 	bl	8018440 <CDC_Transmit_FS>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d0ef      	beq.n	8003a82 <main+0x62a>
 8003aa2:	e048      	b.n	8003b36 <main+0x6de>
 8003aa4:	0801bf24 	.word	0x0801bf24
 8003aa8:	42d00000 	.word	0x42d00000
 8003aac:	0801bf34 	.word	0x0801bf34
 8003ab0:	0801bf48 	.word	0x0801bf48
 8003ab4:	0801bf54 	.word	0x0801bf54
 8003ab8:	0801bf70 	.word	0x0801bf70
 8003abc:	20000f7c 	.word	0x20000f7c
 8003ac0:	2000093c 	.word	0x2000093c
 8003ac4:	200007ec 	.word	0x200007ec
 8003ac8:	20000f94 	.word	0x20000f94
 8003acc:	20000f98 	.word	0x20000f98
 8003ad0:	0801bf7c 	.word	0x0801bf7c
 8003ad4:	0801bf8c 	.word	0x0801bf8c
 8003ad8:	2000062c 	.word	0x2000062c
 8003adc:	0801bf9c 	.word	0x0801bf9c
 8003ae0:	200011c8 	.word	0x200011c8
 8003ae4:	0801bfa8 	.word	0x0801bfa8
 8003ae8:	0801bfbc 	.word	0x0801bfbc
 8003aec:	20000710 	.word	0x20000710
 8003af0:	20000f88 	.word	0x20000f88
 8003af4:	20000f89 	.word	0x20000f89
 8003af8:	20000580 	.word	0x20000580
		}
		else if(ret == HAL_OK)
 8003afc:	f897 3b5b 	ldrb.w	r3, [r7, #2907]	; 0xb5b
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d118      	bne.n	8003b36 <main+0x6de>
		{
			sprintf(i2c2check_active_address, "0x%X", i);
 8003b04:	f897 2b7f 	ldrb.w	r2, [r7, #2943]	; 0xb7f
 8003b08:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003b0c:	4968      	ldr	r1, [pc, #416]	; (8003cb0 <main+0x858>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f015 ff76 	bl	8019a00 <siprintf>
			while (CDC_Transmit_FS (i2c2check_active_address, strlen(i2c2check_active_address)) == USBD_BUSY);
 8003b14:	bf00      	nop
 8003b16:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fb70 	bl	8000200 <strlen>
 8003b20:	4603      	mov	r3, r0
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f014 fc88 	bl	8018440 <CDC_Transmit_FS>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d0ef      	beq.n	8003b16 <main+0x6be>
	for(i = 1; i < 128; i++)
 8003b36:	f897 3b7f 	ldrb.w	r3, [r7, #2943]	; 0xb7f
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	f887 3b7f 	strb.w	r3, [r7, #2943]	; 0xb7f
 8003b40:	f997 3b7f 	ldrsb.w	r3, [r7, #2943]	; 0xb7f
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	da8a      	bge.n	8003a5e <main+0x606>
	/* USER CODE BEGIN WHILE */

	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	/// Pre-main program /////////////////////////////////////////////////////////////////////////////////
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003b48:	2108      	movs	r1, #8
 8003b4a:	485a      	ldr	r0, [pc, #360]	; (8003cb4 <main+0x85c>)
 8003b4c:	f003 fe8e 	bl	800786c <HAL_GPIO_TogglePin>
	while (1) {

		while (usb_Rx_ready == 0);
 8003b50:	bf00      	nop
 8003b52:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <main+0x860>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0fa      	beq.n	8003b52 <main+0x6fa>
		usb_Rx_ready = 0;
 8003b5c:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <main+0x860>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]


		if (usb_Rx_buffer[0] == USB_MIRA) {
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <main+0x864>)
 8003b64:	781a      	ldrb	r2, [r3, #0]
 8003b66:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <main+0x868>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d105      	bne.n	8003b7a <main+0x722>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003b6e:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <main+0x864>)
 8003b70:	785a      	ldrb	r2, [r3, #1]
 8003b72:	4b54      	ldr	r3, [pc, #336]	; (8003cc4 <main+0x86c>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	e7ea      	b.n	8003b50 <main+0x6f8>
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {

			}

		}
		else if (usb_Rx_buffer[0] == USB_LORA) {
 8003b7a:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <main+0x864>)
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	4b52      	ldr	r3, [pc, #328]	; (8003cc8 <main+0x870>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d105      	bne.n	8003b92 <main+0x73a>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003b86:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <main+0x864>)
 8003b88:	785a      	ldrb	r2, [r3, #1]
 8003b8a:	4b4e      	ldr	r3, [pc, #312]	; (8003cc4 <main+0x86c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	e7de      	b.n	8003b50 <main+0x6f8>

			}

		}

		else if (usb_Rx_buffer[0] == USB_GYRO) {
 8003b92:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <main+0x864>)
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	4b4d      	ldr	r3, [pc, #308]	; (8003ccc <main+0x874>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d105      	bne.n	8003baa <main+0x752>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <main+0x864>)
 8003ba0:	785a      	ldrb	r2, [r3, #1]
 8003ba2:	4b48      	ldr	r3, [pc, #288]	; (8003cc4 <main+0x86c>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	e7d2      	b.n	8003b50 <main+0x6f8>

			}

		}

		else if (usb_Rx_buffer[0] == USB_BMP) {
 8003baa:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <main+0x864>)
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <main+0x878>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d105      	bne.n	8003bc2 <main+0x76a>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <main+0x864>)
 8003bb8:	785a      	ldrb	r2, [r3, #1]
 8003bba:	4b42      	ldr	r3, [pc, #264]	; (8003cc4 <main+0x86c>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	e7c6      	b.n	8003b50 <main+0x6f8>

			}

		}

		else if (usb_Rx_buffer[0] == USB_GPS) {
 8003bc2:	4b3e      	ldr	r3, [pc, #248]	; (8003cbc <main+0x864>)
 8003bc4:	781a      	ldrb	r2, [r3, #0]
 8003bc6:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <main+0x87c>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d105      	bne.n	8003bda <main+0x782>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003bce:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <main+0x864>)
 8003bd0:	785a      	ldrb	r2, [r3, #1]
 8003bd2:	4b3c      	ldr	r3, [pc, #240]	; (8003cc4 <main+0x86c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	e7ba      	b.n	8003b50 <main+0x6f8>

			}

		}

		else if (usb_Rx_buffer[0] == USB_SD) {
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <main+0x864>)
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <main+0x880>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d105      	bne.n	8003bf2 <main+0x79a>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003be6:	4b35      	ldr	r3, [pc, #212]	; (8003cbc <main+0x864>)
 8003be8:	785a      	ldrb	r2, [r3, #1]
 8003bea:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <main+0x86c>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	e7ae      	b.n	8003b50 <main+0x6f8>

			}

		}

		else if (usb_Rx_buffer[0] == USB_TIMERS) {
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <main+0x864>)
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <main+0x884>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d138      	bne.n	8003c70 <main+0x818>
			if (usb_Rx_buffer[1] == USB_CHECKSTATUS) {
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <main+0x864>)
 8003c00:	785a      	ldrb	r2, [r3, #1]
 8003c02:	4b30      	ldr	r3, [pc, #192]	; (8003cc4 <main+0x86c>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d0a2      	beq.n	8003b50 <main+0x6f8>

			}
			else if (usb_Rx_buffer[1] == USB_TESTOUTPUT) {
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <main+0x864>)
 8003c0c:	785a      	ldrb	r2, [r3, #1]
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <main+0x888>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d19c      	bne.n	8003b50 <main+0x6f8>
				if (tick == 0) {
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <main+0x88c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <main+0x7ea>
					tick = 10;
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <main+0x88c>)
 8003c22:	220a      	movs	r2, #10
 8003c24:	701a      	strb	r2, [r3, #0]
					while (tick != 0);
 8003c26:	bf00      	nop
 8003c28:	4b2e      	ldr	r3, [pc, #184]	; (8003ce4 <main+0x88c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1fa      	bne.n	8003c28 <main+0x7d0>
					while (CDC_Transmit_FS ("\nTick works!\n", 13) == USBD_BUSY);
 8003c32:	bf00      	nop
 8003c34:	210d      	movs	r1, #13
 8003c36:	482c      	ldr	r0, [pc, #176]	; (8003ce8 <main+0x890>)
 8003c38:	f014 fc02 	bl	8018440 <CDC_Transmit_FS>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d0f8      	beq.n	8003c34 <main+0x7dc>
				}

				if (tickGPS == 0) {
 8003c42:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <main+0x894>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d181      	bne.n	8003b50 <main+0x6f8>
					tickGPS = 10;
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <main+0x894>)
 8003c4e:	220a      	movs	r2, #10
 8003c50:	701a      	strb	r2, [r3, #0]
					while (tickGPS != 0);
 8003c52:	bf00      	nop
 8003c54:	4b25      	ldr	r3, [pc, #148]	; (8003cec <main+0x894>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1fa      	bne.n	8003c54 <main+0x7fc>
					while (CDC_Transmit_FS ("\nGPStick works!\n", 16) == USBD_BUSY);
 8003c5e:	bf00      	nop
 8003c60:	2110      	movs	r1, #16
 8003c62:	4823      	ldr	r0, [pc, #140]	; (8003cf0 <main+0x898>)
 8003c64:	f014 fbec 	bl	8018440 <CDC_Transmit_FS>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d0f8      	beq.n	8003c60 <main+0x808>
 8003c6e:	e76f      	b.n	8003b50 <main+0x6f8>
				}
			}

		}

		else if (usb_Rx_buffer[1] == USB_FLIGHTMODE) {
 8003c70:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <main+0x864>)
 8003c72:	785a      	ldrb	r2, [r3, #1]
 8003c74:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <main+0x89c>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d108      	bne.n	8003c8e <main+0x836>
			while (CDC_Transmit_FS ("OK", 2) == USBD_BUSY);
 8003c7c:	bf00      	nop
 8003c7e:	2102      	movs	r1, #2
 8003c80:	481d      	ldr	r0, [pc, #116]	; (8003cf8 <main+0x8a0>)
 8003c82:	f014 fbdd 	bl	8018440 <CDC_Transmit_FS>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d0f8      	beq.n	8003c7e <main+0x826>
			break;
 8003c8c:	e03a      	b.n	8003d04 <main+0x8ac>
		}

		else if (usb_Rx_buffer[1] == USB_PING) {
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <main+0x864>)
 8003c90:	785a      	ldrb	r2, [r3, #1]
 8003c92:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <main+0x8a4>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	f47f af5a 	bne.w	8003b50 <main+0x6f8>

			while (CDC_Transmit_FS ("PONG", 4) == USBD_BUSY);
 8003c9c:	bf00      	nop
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	4817      	ldr	r0, [pc, #92]	; (8003d00 <main+0x8a8>)
 8003ca2:	f014 fbcd 	bl	8018440 <CDC_Transmit_FS>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d0f8      	beq.n	8003c9e <main+0x846>
		while (usb_Rx_ready == 0);
 8003cac:	e750      	b.n	8003b50 <main+0x6f8>
 8003cae:	bf00      	nop
 8003cb0:	0801bfd0 	.word	0x0801bfd0
 8003cb4:	48000c00 	.word	0x48000c00
 8003cb8:	20001702 	.word	0x20001702
 8003cbc:	20001700 	.word	0x20001700
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000001 	.word	0x20000001
 8003cc8:	20000003 	.word	0x20000003
 8003ccc:	20000004 	.word	0x20000004
 8003cd0:	20000005 	.word	0x20000005
 8003cd4:	20000006 	.word	0x20000006
 8003cd8:	20000007 	.word	0x20000007
 8003cdc:	20000008 	.word	0x20000008
 8003ce0:	20000002 	.word	0x20000002
 8003ce4:	20000f88 	.word	0x20000f88
 8003ce8:	0801bfd8 	.word	0x0801bfd8
 8003cec:	20000f89 	.word	0x20000f89
 8003cf0:	0801bfe8 	.word	0x0801bfe8
 8003cf4:	20000009 	.word	0x20000009
 8003cf8:	0801bffc 	.word	0x0801bffc
 8003cfc:	2000000a 	.word	0x2000000a
 8003d00:	0801c000 	.word	0x0801c000
			//break;
		}

	}
	HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8003d04:	2108      	movs	r1, #8
 8003d06:	48cf      	ldr	r0, [pc, #828]	; (8004044 <main+0xbec>)
 8003d08:	f003 fdb0 	bl	800786c <HAL_GPIO_TogglePin>
	// Reset timers before main program
	tick = 0;
 8003d0c:	4bce      	ldr	r3, [pc, #824]	; (8004048 <main+0xbf0>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
	tickGPS = 0;
 8003d12:	4bce      	ldr	r3, [pc, #824]	; (800404c <main+0xbf4>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_TogglePin (LED3_GPIO_Port, LED3_Pin);
 8003d18:	2140      	movs	r1, #64	; 0x40
 8003d1a:	48ca      	ldr	r0, [pc, #808]	; (8004044 <main+0xbec>)
 8003d1c:	f003 fda6 	bl	800786c <HAL_GPIO_TogglePin>
	/// Main program /////////////////////////////////////////////////////////////////////////////////
	while (1)
	{
		/// BMP and Gyro /////////////////////////////////////////////////////////////////////////////////
		// Read temperature, pressure and gyro data every second
		if (tick == 0)
 8003d20:	4bc9      	ldr	r3, [pc, #804]	; (8004048 <main+0xbf0>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 8226 	bne.w	8004178 <main+0xd20>
		{
			// Start timer again
			tick = 10;
 8003d2c:	4bc6      	ldr	r3, [pc, #792]	; (8004048 <main+0xbf0>)
 8003d2e:	220a      	movs	r2, #10
 8003d30:	701a      	strb	r2, [r3, #0]

			//----------------------------------------------------------------------------------------------------------------------
			// Print current time
			sprintf(system_time_buffer, "\ntime: %.0f s \n", system_time_counter);
 8003d32:	4638      	mov	r0, r7
 8003d34:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	49c4      	ldr	r1, [pc, #784]	; (8004050 <main+0xbf8>)
 8003d3e:	f015 fe5f 	bl	8019a00 <siprintf>
			while (CDC_Transmit_FS (system_time_buffer, strlen(system_time_buffer)) == USBD_BUSY);
 8003d42:	bf00      	nop
 8003d44:	463b      	mov	r3, r7
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fa5a 	bl	8000200 <strlen>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	463b      	mov	r3, r7
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f014 fb73 	bl	8018440 <CDC_Transmit_FS>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d0f1      	beq.n	8003d44 <main+0x8ec>
			//write current time to SD
			if (sd_status == FR_OK){
 8003d60:	f897 3b66 	ldrb.w	r3, [r7, #2918]	; 0xb66
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <main+0x930>
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8003d68:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fa47 	bl	8000200 <strlen>
 8003d72:	4602      	mov	r2, r0
 8003d74:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003d78:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003d7c:	48b5      	ldr	r0, [pc, #724]	; (8004054 <main+0xbfc>)
 8003d7e:	f013 fbec 	bl	801755a <f_write>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
			}
			// Send current time to LORA
			if (lora_res == LORA_OK) {
 8003d88:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <main+0x946>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003d90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d94:	2204      	movs	r2, #4
 8003d96:	49b0      	ldr	r1, [pc, #704]	; (8004058 <main+0xc00>)
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fade 	bl	800335a <lora_send_packet>
			}
			system_time_counter++;
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	4bae      	ldr	r3, [pc, #696]	; (800405c <main+0xc04>)
 8003da4:	f507 6138 	add.w	r1, r7, #2944	; 0xb80
 8003da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dac:	f7fc fa86 	bl	80002bc <__adddf3>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	f507 6138 	add.w	r1, r7, #2944	; 0xb80
 8003db8:	e9c1 2300 	strd	r2, r3, [r1]

			// Toggle LED on board to indicate succesful timer management
			HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
 8003dbc:	2110      	movs	r1, #16
 8003dbe:	48a1      	ldr	r0, [pc, #644]	; (8004044 <main+0xbec>)
 8003dc0:	f003 fd54 	bl	800786c <HAL_GPIO_TogglePin>

			//----------------------------------------------------------------------------------------------------------------------
			// bmp needed to be forced for this kind of data reading, as now FIFO buffers or dready interrupts are being used
			bmp_settings.op_mode = BMP3_MODE_FORCED;
 8003dc4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003dc8:	f6a3 1378 	subw	r3, r3, #2424	; 0x978
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]
			bmp_result = bmp3_set_op_mode(&bmp_settings, &bmp_device);
 8003dd0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003dd4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003dd8:	4611      	mov	r1, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd faf9 	bl	80013d2 <bmp3_set_op_mode>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
			bmp3_check_rslt("bmp3_set_op_mode", bmp_result);
 8003de6:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 8003dea:	4619      	mov	r1, r3
 8003dec:	489c      	ldr	r0, [pc, #624]	; (8004060 <main+0xc08>)
 8003dee:	f7fe fd67 	bl	80028c0 <bmp3_check_rslt>
			 * BMP3_TEMP       : To read only temperature data
			 * BMP3_PRESS      : To read only pressure data
			 */

			// Check sensor measurements
			bmp_result = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp_data, &bmp_device);
 8003df2:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003df6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	2003      	movs	r0, #3
 8003dfe:	f7fd fb5c 	bl	80014ba <bmp3_get_sensor_data>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
			bmp3_check_rslt("bmp3_get_sensor_data", bmp_result);
 8003e08:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4895      	ldr	r0, [pc, #596]	; (8004064 <main+0xc0c>)
 8003e10:	f7fe fd56 	bl	80028c0 <bmp3_check_rslt>

			// NOTE : Read status register again to clear data ready interrupt status
			bmp_result = bmp3_get_status(&bmp_status, &bmp_device);
 8003e14:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8003e18:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd fa62 	bl	80012e8 <bmp3_get_status>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3b77 	strb.w	r3, [r7, #2935]	; 0xb77
			bmp3_check_rslt("bmp3_get_status", bmp_result);
 8003e2a:	f997 3b77 	ldrsb.w	r3, [r7, #2935]	; 0xb77
 8003e2e:	4619      	mov	r1, r3
 8003e30:	488d      	ldr	r0, [pc, #564]	; (8004068 <main+0xc10>)
 8003e32:	f7fe fd45 	bl	80028c0 <bmp3_check_rslt>


			// Print bmp measurements
			sprintf(bmp_temperature_buffer, "%.2f\n", bmp_data.temperature);
 8003e36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e3a:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8003e46:	4989      	ldr	r1, [pc, #548]	; (800406c <main+0xc14>)
 8003e48:	f015 fdda 	bl	8019a00 <siprintf>
			sprintf(bmp_pressure_buffer, "%.2f\n", bmp_data.pressure);
 8003e4c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003e50:	f6a3 1368 	subw	r3, r3, #2408	; 0x968
 8003e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e58:	f507 70e6 	add.w	r0, r7, #460	; 0x1cc
 8003e5c:	4983      	ldr	r1, [pc, #524]	; (800406c <main+0xc14>)
 8003e5e:	f015 fdcf 	bl	8019a00 <siprintf>

			while (CDC_Transmit_FS ("\nBMP390 END\n", 12) == USBD_BUSY);
 8003e62:	bf00      	nop
 8003e64:	210c      	movs	r1, #12
 8003e66:	4882      	ldr	r0, [pc, #520]	; (8004070 <main+0xc18>)
 8003e68:	f014 faea 	bl	8018440 <CDC_Transmit_FS>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d0f8      	beq.n	8003e64 <main+0xa0c>
			while (CDC_Transmit_FS (bmp_temperature_buffer, strlen(bmp_temperature_buffer)) == USBD_BUSY);
 8003e72:	bf00      	nop
 8003e74:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7fc f9c1 	bl	8000200 <strlen>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f014 fad9 	bl	8018440 <CDC_Transmit_FS>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d0ef      	beq.n	8003e74 <main+0xa1c>
			while (CDC_Transmit_FS (bmp_pressure_buffer, strlen(bmp_pressure_buffer)) == USBD_BUSY);
 8003e94:	bf00      	nop
 8003e96:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc f9b0 	bl	8000200 <strlen>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f014 fac8 	bl	8018440 <CDC_Transmit_FS>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d0ef      	beq.n	8003e96 <main+0xa3e>
			while (CDC_Transmit_FS ("BMP390 END\n\n", 12) == USBD_BUSY);
 8003eb6:	bf00      	nop
 8003eb8:	210c      	movs	r1, #12
 8003eba:	486e      	ldr	r0, [pc, #440]	; (8004074 <main+0xc1c>)
 8003ebc:	f014 fac0 	bl	8018440 <CDC_Transmit_FS>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d0f8      	beq.n	8003eb8 <main+0xa60>

			// Write bmp to SD
			if (sd_status == FR_OK){
 8003ec6:	f897 3b66 	ldrb.w	r3, [r7, #2918]	; 0xb66
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d13f      	bne.n	8003f4e <main+0xaf6>
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8003ece:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fc f994 	bl	8000200 <strlen>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003ede:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003ee2:	485c      	ldr	r0, [pc, #368]	; (8004054 <main+0xbfc>)
 8003ee4:	f013 fb39 	bl	801755a <f_write>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8003eee:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fc f984 	bl	8000200 <strlen>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003efe:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003f02:	4854      	ldr	r0, [pc, #336]	; (8004054 <main+0xbfc>)
 8003f04:	f013 fb29 	bl	801755a <f_write>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8003f0e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc f974 	bl	8000200 <strlen>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003f1e:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003f22:	484c      	ldr	r0, [pc, #304]	; (8004054 <main+0xbfc>)
 8003f24:	f013 fb19 	bl	801755a <f_write>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8003f2e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc f964 	bl	8000200 <strlen>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8003f3e:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8003f42:	4844      	ldr	r0, [pc, #272]	; (8004054 <main+0xbfc>)
 8003f44:	f013 fb09 	bl	801755a <f_write>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
			}

			// Send bmp data to LORA
			if (lora_res == LORA_OK) {
 8003f4e:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d11b      	bne.n	8003f8e <main+0xb36>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003f56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	493e      	ldr	r1, [pc, #248]	; (8004058 <main+0xc00>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f9fb 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f68:	2204      	movs	r2, #4
 8003f6a:	493b      	ldr	r1, [pc, #236]	; (8004058 <main+0xc00>)
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f9f4 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003f72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f76:	2204      	movs	r2, #4
 8003f78:	4937      	ldr	r1, [pc, #220]	; (8004058 <main+0xc00>)
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f9ed 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8003f80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f84:	2204      	movs	r2, #4
 8003f86:	4934      	ldr	r1, [pc, #208]	; (8004058 <main+0xc00>)
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f9e6 	bl	800335a <lora_send_packet>
			}
			//----------------------------------------------------------------------------------------------------------------------
			// Read gyro acceleration and angular velocity data
			gyro_result_acceleration = LSM6DSO_ACC_GetAxes (&gyro_device, &gyro_acceleration_object);
 8003f8e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003f92:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f001 fb2d 	bl	80055f8 <LSM6DSO_ACC_GetAxes>
 8003f9e:	f8c7 0b60 	str.w	r0, [r7, #2912]	; 0xb60
			gyro_result_angularvel = LSM6DSO_GYRO_GetAxes (&gyro_device, &gyro_angularvel_object);
 8003fa2:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8003fa6:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fcc7 	bl	8005940 <LSM6DSO_GYRO_GetAxes>
 8003fb2:	f8c7 0b5c 	str.w	r0, [r7, #2908]	; 0xb5c

			sprintf(gyro_acceleration_buffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", gyro_acceleration_object.x, gyro_acceleration_object.y, gyro_acceleration_object.z);
 8003fb6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003fba:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003fc4:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003fce:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4926      	ldr	r1, [pc, #152]	; (8004078 <main+0xc20>)
 8003fde:	f015 fd0f 	bl	8019a00 <siprintf>
			sprintf(gyro_angularvel_buffer, "%"PRId32"   %"PRId32"   %"PRId32"\n", gyro_angularvel_object.x, gyro_angularvel_object.y, gyro_angularvel_object.z);
 8003fe2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003fe6:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ff0:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ffa:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	460b      	mov	r3, r1
 8004008:	491b      	ldr	r1, [pc, #108]	; (8004078 <main+0xc20>)
 800400a:	f015 fcf9 	bl	8019a00 <siprintf>

			// Print gyro measurements
			while (CDC_Transmit_FS ("GYRO START\n", 11) == USBD_BUSY);
 800400e:	bf00      	nop
 8004010:	210b      	movs	r1, #11
 8004012:	481a      	ldr	r0, [pc, #104]	; (800407c <main+0xc24>)
 8004014:	f014 fa14 	bl	8018440 <CDC_Transmit_FS>
 8004018:	4603      	mov	r3, r0
 800401a:	2b01      	cmp	r3, #1
 800401c:	d0f8      	beq.n	8004010 <main+0xbb8>
			while (CDC_Transmit_FS (gyro_acceleration_buffer, strlen(gyro_acceleration_buffer)) == USBD_BUSY);
 800401e:	bf00      	nop
 8004020:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004024:	4618      	mov	r0, r3
 8004026:	f7fc f8eb 	bl	8000200 <strlen>
 800402a:	4603      	mov	r3, r0
 800402c:	b29a      	uxth	r2, r3
 800402e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f014 fa03 	bl	8018440 <CDC_Transmit_FS>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d0ef      	beq.n	8004020 <main+0xbc8>
			while (CDC_Transmit_FS (gyro_angularvel_buffer, strlen(gyro_angularvel_buffer)) == USBD_BUSY);
 8004040:	bf00      	nop
 8004042:	e01d      	b.n	8004080 <main+0xc28>
 8004044:	48000c00 	.word	0x48000c00
 8004048:	20000f88 	.word	0x20000f88
 800404c:	20000f89 	.word	0x20000f89
 8004050:	0801c008 	.word	0x0801c008
 8004054:	200011c8 	.word	0x200011c8
 8004058:	0801bef0 	.word	0x0801bef0
 800405c:	3ff00000 	.word	0x3ff00000
 8004060:	0801c018 	.word	0x0801c018
 8004064:	0801c02c 	.word	0x0801c02c
 8004068:	0801c044 	.word	0x0801c044
 800406c:	0801c054 	.word	0x0801c054
 8004070:	0801c05c 	.word	0x0801c05c
 8004074:	0801c06c 	.word	0x0801c06c
 8004078:	0801c07c 	.word	0x0801c07c
 800407c:	0801c090 	.word	0x0801c090
 8004080:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc f8bb 	bl	8000200 <strlen>
 800408a:	4603      	mov	r3, r0
 800408c:	b29a      	uxth	r2, r3
 800408e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f014 f9d3 	bl	8018440 <CDC_Transmit_FS>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d0ef      	beq.n	8004080 <main+0xc28>
			while (CDC_Transmit_FS ("GYRO END\n\n", 10) == USBD_BUSY);
 80040a0:	bf00      	nop
 80040a2:	210a      	movs	r1, #10
 80040a4:	486e      	ldr	r0, [pc, #440]	; (8004260 <main+0xe08>)
 80040a6:	f014 f9cb 	bl	8018440 <CDC_Transmit_FS>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d0f8      	beq.n	80040a2 <main+0xc4a>

			// Write gyro to SD
			if (sd_status == FR_OK){
 80040b0:	f897 3b66 	ldrb.w	r3, [r7, #2918]	; 0xb66
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13f      	bne.n	8004138 <main+0xce0>
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80040b8:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fc f89f 	bl	8000200 <strlen>
 80040c2:	4602      	mov	r2, r0
 80040c4:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80040c8:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80040cc:	4865      	ldr	r0, [pc, #404]	; (8004264 <main+0xe0c>)
 80040ce:	f013 fa44 	bl	801755a <f_write>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80040d8:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f88f 	bl	8000200 <strlen>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80040e8:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80040ec:	485d      	ldr	r0, [pc, #372]	; (8004264 <main+0xe0c>)
 80040ee:	f013 fa34 	bl	801755a <f_write>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80040f8:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc f87f 	bl	8000200 <strlen>
 8004102:	4602      	mov	r2, r0
 8004104:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004108:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800410c:	4855      	ldr	r0, [pc, #340]	; (8004264 <main+0xe0c>)
 800410e:	f013 fa24 	bl	801755a <f_write>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8004118:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc f86f 	bl	8000200 <strlen>
 8004122:	4602      	mov	r2, r0
 8004124:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004128:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 800412c:	484d      	ldr	r0, [pc, #308]	; (8004264 <main+0xe0c>)
 800412e:	f013 fa14 	bl	801755a <f_write>
 8004132:	4603      	mov	r3, r0
 8004134:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
			}

			// Send gyro data to LORA
			if (lora_res == LORA_OK) {
 8004138:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11b      	bne.n	8004178 <main+0xd20>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 8004140:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004144:	2204      	movs	r2, #4
 8004146:	4948      	ldr	r1, [pc, #288]	; (8004268 <main+0xe10>)
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f906 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 800414e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004152:	2204      	movs	r2, #4
 8004154:	4944      	ldr	r1, [pc, #272]	; (8004268 <main+0xe10>)
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f8ff 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 800415c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004160:	2204      	movs	r2, #4
 8004162:	4941      	ldr	r1, [pc, #260]	; (8004268 <main+0xe10>)
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff f8f8 	bl	800335a <lora_send_packet>
				lora_send_packet(&lora, (uint8_t *)"test", 4);
 800416a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800416e:	2204      	movs	r2, #4
 8004170:	493d      	ldr	r1, [pc, #244]	; (8004268 <main+0xe10>)
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f8f1 	bl	800335a <lora_send_packet>

		}

		/// GPS /////////////////////////////////////////////////////////////////////////////////
		// Read GPS data whenever UART interrupt raises gps_data_ready flag
		if (gps_data_ready)
 8004178:	4b3c      	ldr	r3, [pc, #240]	; (800426c <main+0xe14>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f43f adcf 	beq.w	8003d20 <main+0x8c8>
		{
			// Toggle LED on board whenever printing data
			HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
 8004182:	2108      	movs	r1, #8
 8004184:	483a      	ldr	r0, [pc, #232]	; (8004270 <main+0xe18>)
 8004186:	f003 fb71 	bl	800786c <HAL_GPIO_TogglePin>
			//while (CDC_Transmit_FS ("GPS START\n", 10) == USBD_BUSY);

			// Choose the buffer from the two data buffers that is nit currently being written into
			if (gps_rxBuffer == gps_rxBuffer1)
 800418a:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <main+0xe1c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a3a      	ldr	r2, [pc, #232]	; (8004278 <main+0xe20>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d12c      	bne.n	80041ee <main+0xd96>
			{
				// print gps data
				while (CDC_Transmit_FS (gps_rxBuffer2, strlen(gps_rxBuffer2)) == USBD_BUSY);
 8004194:	bf00      	nop
 8004196:	4839      	ldr	r0, [pc, #228]	; (800427c <main+0xe24>)
 8004198:	f7fc f832 	bl	8000200 <strlen>
 800419c:	4603      	mov	r3, r0
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	4836      	ldr	r0, [pc, #216]	; (800427c <main+0xe24>)
 80041a4:	f014 f94c 	bl	8018440 <CDC_Transmit_FS>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d0f3      	beq.n	8004196 <main+0xd3e>
				//write gps data to SD
				if (sd_status == FR_OK){
 80041ae:	f897 3b66 	ldrb.w	r3, [r7, #2918]	; 0xb66
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <main+0xd7e>
					sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 80041b6:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fc f820 	bl	8000200 <strlen>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80041c6:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80041ca:	4826      	ldr	r0, [pc, #152]	; (8004264 <main+0xe0c>)
 80041cc:	f013 f9c5 	bl	801755a <f_write>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				}
				// Sendgps data to LORA
				if (lora_res == LORA_OK) {
 80041d6:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d133      	bne.n	8004246 <main+0xdee>
					lora_send_packet(&lora, (uint8_t *)"test", 4);
 80041de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80041e2:	2204      	movs	r2, #4
 80041e4:	4920      	ldr	r1, [pc, #128]	; (8004268 <main+0xe10>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff f8b7 	bl	800335a <lora_send_packet>
 80041ec:	e02b      	b.n	8004246 <main+0xdee>

			}
			else
			{
				// print gps data
				while (CDC_Transmit_FS (gps_rxBuffer1, strlen(gps_rxBuffer1)) == USBD_BUSY);
 80041ee:	bf00      	nop
 80041f0:	4821      	ldr	r0, [pc, #132]	; (8004278 <main+0xe20>)
 80041f2:	f7fc f805 	bl	8000200 <strlen>
 80041f6:	4603      	mov	r3, r0
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	4619      	mov	r1, r3
 80041fc:	481e      	ldr	r0, [pc, #120]	; (8004278 <main+0xe20>)
 80041fe:	f014 f91f 	bl	8018440 <CDC_Transmit_FS>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d0f3      	beq.n	80041f0 <main+0xd98>
				//write gps data to SD
				if (sd_status == FR_OK){
 8004208:	f897 3b66 	ldrb.w	r3, [r7, #2918]	; 0xb66
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <main+0xdd8>
					sd_result_write = f_write(&SDFile, sd_write_buffer, strlen((char *)sd_write_buffer), (void *)&sd_err_byteswritten);
 8004210:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004214:	4618      	mov	r0, r3
 8004216:	f7fb fff3 	bl	8000200 <strlen>
 800421a:	4602      	mov	r2, r0
 800421c:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8004220:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 8004224:	480f      	ldr	r0, [pc, #60]	; (8004264 <main+0xe0c>)
 8004226:	f013 f998 	bl	801755a <f_write>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3b67 	strb.w	r3, [r7, #2919]	; 0xb67
				}
				// Sendgps data to LORA
				if (lora_res == LORA_OK) {
 8004230:	f897 3b7d 	ldrb.w	r3, [r7, #2941]	; 0xb7d
 8004234:	2b00      	cmp	r3, #0
 8004236:	d106      	bne.n	8004246 <main+0xdee>
					lora_send_packet(&lora, (uint8_t *)"test", 4);
 8004238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800423c:	2204      	movs	r2, #4
 800423e:	490a      	ldr	r1, [pc, #40]	; (8004268 <main+0xe10>)
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff f88a 	bl	800335a <lora_send_packet>
				}

			}

			// Toggle flags to allow for buffer swapping and next data batch sending
			gps_data_ready ^= 1;
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <main+0xe14>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <main+0xe14>)
 8004250:	6013      	str	r3, [r2, #0]
			gps_send_ready |= 1;
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <main+0xe28>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <main+0xe28>)
 800425c:	6013      	str	r3, [r2, #0]
		if (tick == 0)
 800425e:	e55f      	b.n	8003d20 <main+0x8c8>
 8004260:	0801c09c 	.word	0x0801c09c
 8004264:	200011c8 	.word	0x200011c8
 8004268:	0801bef0 	.word	0x0801bef0
 800426c:	20000f84 	.word	0x20000f84
 8004270:	48000c00 	.word	0x48000c00
 8004274:	20000f7c 	.word	0x20000f7c
 8004278:	2000093c 	.word	0x2000093c
 800427c:	20000c5c 	.word	0x20000c5c
 8004280:	2000000c 	.word	0x2000000c

08004284 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b096      	sub	sp, #88	; 0x58
 8004288:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800428a:	f107 0314 	add.w	r3, r7, #20
 800428e:	2244      	movs	r2, #68	; 0x44
 8004290:	2100      	movs	r1, #0
 8004292:	4618      	mov	r0, r3
 8004294:	f014 fe3a 	bl	8018f0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004298:	463b      	mov	r3, r7
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80042a6:	2000      	movs	r0, #0
 80042a8:	f005 fe94 	bl	8009fd4 <HAL_PWREx_ControlVoltageScaling>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <SystemClock_Config+0x32>
	{
		Error_Handler();
 80042b2:	f000 fb0b 	bl	80048cc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80042b6:	2321      	movs	r3, #33	; 0x21
 80042b8:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80042ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042be:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80042c0:	2301      	movs	r3, #1
 80042c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042c4:	2302      	movs	r3, #2
 80042c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80042c8:	2303      	movs	r3, #3
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80042cc:	2301      	movs	r3, #1
 80042ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 80042d0:	231e      	movs	r3, #30
 80042d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042d4:	2302      	movs	r3, #2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042d8:	2302      	movs	r3, #2
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042dc:	2302      	movs	r3, #2
 80042de:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	4618      	mov	r0, r3
 80042e6:	f005 ff29 	bl	800a13c <HAL_RCC_OscConfig>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <SystemClock_Config+0x70>
	{
		Error_Handler();
 80042f0:	f000 faec 	bl	80048cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042f4:	230f      	movs	r3, #15
 80042f6:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042f8:	2303      	movs	r3, #3
 80042fa:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004308:	463b      	mov	r3, r7
 800430a:	2105      	movs	r1, #5
 800430c:	4618      	mov	r0, r3
 800430e:	f006 fb2f 	bl	800a970 <HAL_RCC_ClockConfig>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <SystemClock_Config+0x98>
	{
		Error_Handler();
 8004318:	f000 fad8 	bl	80048cc <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 800431c:	f006 fd26 	bl	800ad6c <HAL_RCC_EnableCSS>
}
 8004320:	bf00      	nop
 8004322:	3758      	adds	r7, #88	; 0x58
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
	/* TIM1_TRG_COM_TIM17_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	2100      	movs	r1, #0
 8004330:	201a      	movs	r0, #26
 8004332:	f002 fc82 	bl	8006c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004336:	201a      	movs	r0, #26
 8004338:	f002 fc9b 	bl	8006c72 <HAL_NVIC_EnableIRQ>
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800433c:	2200      	movs	r2, #0
 800433e:	2100      	movs	r1, #0
 8004340:	2026      	movs	r0, #38	; 0x26
 8004342:	f002 fc7a 	bl	8006c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004346:	2026      	movs	r0, #38	; 0x26
 8004348:	f002 fc93 	bl	8006c72 <HAL_NVIC_EnableIRQ>
	/* USART1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2025      	movs	r0, #37	; 0x25
 8004352:	f002 fc72 	bl	8006c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004356:	2025      	movs	r0, #37	; 0x25
 8004358:	f002 fc8b 	bl	8006c72 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800435c:	2200      	movs	r2, #0
 800435e:	2100      	movs	r1, #0
 8004360:	200b      	movs	r0, #11
 8004362:	f002 fc6a 	bl	8006c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004366:	200b      	movs	r0, #11
 8004368:	f002 fc83 	bl	8006c72 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	200c      	movs	r0, #12
 8004372:	f002 fc62 	bl	8006c3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004376:	200c      	movs	r0, #12
 8004378:	f002 fc7b 	bl	8006c72 <HAL_NVIC_EnableIRQ>
}
 800437c:	bf00      	nop
 800437e:	bd80      	pop	{r7, pc}

08004380 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <MX_I2C1_Init+0x74>)
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <MX_I2C1_Init+0x78>)
 8004388:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x307075B1;
 800438a:	4b1a      	ldr	r3, [pc, #104]	; (80043f4 <MX_I2C1_Init+0x74>)
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <MX_I2C1_Init+0x7c>)
 800438e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8004390:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <MX_I2C1_Init+0x74>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <MX_I2C1_Init+0x74>)
 8004398:	2201      	movs	r2, #1
 800439a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800439c:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <MX_I2C1_Init+0x74>)
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043ba:	480e      	ldr	r0, [pc, #56]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043bc:	f003 fa70 	bl	80078a0 <HAL_I2C_Init>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80043c6:	f000 fa81 	bl	80048cc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80043ca:	2100      	movs	r1, #0
 80043cc:	4809      	ldr	r0, [pc, #36]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043ce:	f004 fb7f 	bl	8008ad0 <HAL_I2CEx_ConfigAnalogFilter>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 80043d8:	f000 fa78 	bl	80048cc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80043dc:	2100      	movs	r1, #0
 80043de:	4805      	ldr	r0, [pc, #20]	; (80043f4 <MX_I2C1_Init+0x74>)
 80043e0:	f004 fbc1 	bl	8008b66 <HAL_I2CEx_ConfigDigitalFilter>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 80043ea:	f000 fa6f 	bl	80048cc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200005d8 	.word	0x200005d8
 80043f8:	40005400 	.word	0x40005400
 80043fc:	307075b1 	.word	0x307075b1

08004400 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <MX_SDMMC1_SD_Init+0x40>)
 8004408:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 8004418:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800441c:	60da      	str	r2, [r3, #12]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
	hsd1.Init.ClockDiv = 0;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
	hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 800442a:	4b04      	ldr	r3, [pc, #16]	; (800443c <MX_SDMMC1_SD_Init+0x3c>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	2000062c 	.word	0x2000062c
 8004440:	50062400 	.word	0x50062400

08004444 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <MX_SPI1_Init+0x74>)
 800444a:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <MX_SPI1_Init+0x78>)
 800444c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800444e:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004454:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004458:	2200      	movs	r2, #0
 800445a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <MX_SPI1_Init+0x74>)
 800445e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004462:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004464:	4b14      	ldr	r3, [pc, #80]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004466:	2200      	movs	r2, #0
 8004468:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800446a:	4b13      	ldr	r3, [pc, #76]	; (80044b8 <MX_SPI1_Init+0x74>)
 800446c:	2200      	movs	r2, #0
 800446e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004470:	4b11      	ldr	r3, [pc, #68]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004476:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004478:	4b0f      	ldr	r3, [pc, #60]	; (80044b8 <MX_SPI1_Init+0x74>)
 800447a:	2228      	movs	r2, #40	; 0x28
 800447c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004480:	2200      	movs	r2, #0
 8004482:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004484:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004486:	2200      	movs	r2, #0
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <MX_SPI1_Init+0x74>)
 800448c:	2200      	movs	r2, #0
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8004490:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004492:	2207      	movs	r2, #7
 8004494:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <MX_SPI1_Init+0x74>)
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <MX_SPI1_Init+0x74>)
 800449e:	2208      	movs	r2, #8
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044a2:	4805      	ldr	r0, [pc, #20]	; (80044b8 <MX_SPI1_Init+0x74>)
 80044a4:	f009 fed9 	bl	800e25a <HAL_SPI_Init>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <MX_SPI1_Init+0x6e>
	{
		Error_Handler();
 80044ae:	f000 fa0d 	bl	80048cc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200006ac 	.word	0x200006ac
 80044bc:	40013000 	.word	0x40013000

080044c0 <MX_TIM17_Init>:
 * @brief TIM17 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM17_Init(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	; 0x48
 80044c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM17_Init 0 */

	/* USER CODE END TIM17_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80044c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	611a      	str	r2, [r3, #16]
 80044d6:	615a      	str	r2, [r3, #20]
 80044d8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044da:	463b      	mov	r3, r7
 80044dc:	222c      	movs	r2, #44	; 0x2c
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f014 fd13 	bl	8018f0c <memset>

	/* USER CODE BEGIN TIM17_Init 1 */

	/* USER CODE END TIM17_Init 1 */
	htim17.Instance = TIM17;
 80044e6:	4b2f      	ldr	r3, [pc, #188]	; (80045a4 <MX_TIM17_Init+0xe4>)
 80044e8:	4a2f      	ldr	r2, [pc, #188]	; (80045a8 <MX_TIM17_Init+0xe8>)
 80044ea:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 999;
 80044ec:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <MX_TIM17_Init+0xe4>)
 80044ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044f2:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f4:	4b2b      	ldr	r3, [pc, #172]	; (80045a4 <MX_TIM17_Init+0xe4>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 11999;
 80044fa:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <MX_TIM17_Init+0xe4>)
 80044fc:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004500:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004502:	4b28      	ldr	r3, [pc, #160]	; (80045a4 <MX_TIM17_Init+0xe4>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8004508:	4b26      	ldr	r3, [pc, #152]	; (80045a4 <MX_TIM17_Init+0xe4>)
 800450a:	2200      	movs	r2, #0
 800450c:	615a      	str	r2, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800450e:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <MX_TIM17_Init+0xe4>)
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004514:	4823      	ldr	r0, [pc, #140]	; (80045a4 <MX_TIM17_Init+0xe4>)
 8004516:	f00a ff45 	bl	800f3a4 <HAL_TIM_Base_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <MX_TIM17_Init+0x64>
	{
		Error_Handler();
 8004520:	f000 f9d4 	bl	80048cc <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8004524:	481f      	ldr	r0, [pc, #124]	; (80045a4 <MX_TIM17_Init+0xe4>)
 8004526:	f00b f805 	bl	800f534 <HAL_TIM_OC_Init>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <MX_TIM17_Init+0x74>
	{
		Error_Handler();
 8004530:	f000 f9cc 	bl	80048cc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800453c:	2300      	movs	r3, #0
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004540:	2300      	movs	r3, #0
 8004542:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004544:	2300      	movs	r3, #0
 8004546:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800454c:	2300      	movs	r3, #0
 800454e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004554:	2200      	movs	r2, #0
 8004556:	4619      	mov	r1, r3
 8004558:	4812      	ldr	r0, [pc, #72]	; (80045a4 <MX_TIM17_Init+0xe4>)
 800455a:	f00b f96b 	bl	800f834 <HAL_TIM_OC_ConfigChannel>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM17_Init+0xa8>
	{
		Error_Handler();
 8004564:	f000 f9b2 	bl	80048cc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800457c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004580:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004582:	2300      	movs	r3, #0
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004586:	463b      	mov	r3, r7
 8004588:	4619      	mov	r1, r3
 800458a:	4806      	ldr	r0, [pc, #24]	; (80045a4 <MX_TIM17_Init+0xe4>)
 800458c:	f00b fd6e 	bl	801006c <HAL_TIMEx_ConfigBreakDeadTime>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <MX_TIM17_Init+0xda>
	{
		Error_Handler();
 8004596:	f000 f999 	bl	80048cc <Error_Handler>
	}
	/* USER CODE BEGIN TIM17_Init 2 */

	/* USER CODE END TIM17_Init 2 */

}
 800459a:	bf00      	nop
 800459c:	3748      	adds	r7, #72	; 0x48
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000710 	.word	0x20000710
 80045a8:	40014800 	.word	0x40014800

080045ac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80045b0:	4b22      	ldr	r3, [pc, #136]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045b2:	4a23      	ldr	r2, [pc, #140]	; (8004640 <MX_USART1_UART_Init+0x94>)
 80045b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80045b6:	4b21      	ldr	r3, [pc, #132]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045be:	4b1f      	ldr	r3, [pc, #124]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80045ca:	4b1c      	ldr	r3, [pc, #112]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80045d0:	4b1a      	ldr	r3, [pc, #104]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045d2:	220c      	movs	r2, #12
 80045d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045d6:	4b19      	ldr	r3, [pc, #100]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045dc:	4b17      	ldr	r3, [pc, #92]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045de:	2200      	movs	r2, #0
 80045e0:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045e2:	4b16      	ldr	r3, [pc, #88]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80045f4:	4811      	ldr	r0, [pc, #68]	; (800463c <MX_USART1_UART_Init+0x90>)
 80045f6:	f00b fdd5 	bl	80101a4 <HAL_UART_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8004600:	f000 f964 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004604:	2100      	movs	r1, #0
 8004606:	480d      	ldr	r0, [pc, #52]	; (800463c <MX_USART1_UART_Init+0x90>)
 8004608:	f00c ff03 	bl	8011412 <HAL_UARTEx_SetTxFifoThreshold>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8004612:	f000 f95b 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004616:	2100      	movs	r1, #0
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <MX_USART1_UART_Init+0x90>)
 800461a:	f00c ff38 	bl	801148e <HAL_UARTEx_SetRxFifoThreshold>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8004624:	f000 f952 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004628:	4804      	ldr	r0, [pc, #16]	; (800463c <MX_USART1_UART_Init+0x90>)
 800462a:	f00c feb9 	bl	80113a0 <HAL_UARTEx_DisableFifoMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8004634:	f000 f94a 	bl	80048cc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2000075c 	.word	0x2000075c
 8004640:	40013800 	.word	0x40013800

08004644 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004648:	4b24      	ldr	r3, [pc, #144]	; (80046dc <MX_USART2_UART_Init+0x98>)
 800464a:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <MX_USART2_UART_Init+0x9c>)
 800464c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800464e:	4b23      	ldr	r3, [pc, #140]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004650:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004654:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <MX_USART2_UART_Init+0x98>)
 800465e:	2200      	movs	r2, #0
 8004660:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004664:	2200      	movs	r2, #0
 8004666:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <MX_USART2_UART_Init+0x98>)
 800466a:	220c      	movs	r2, #12
 800466c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004670:	2200      	movs	r2, #0
 8004672:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004674:	4b19      	ldr	r3, [pc, #100]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004676:	2200      	movs	r2, #0
 8004678:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <MX_USART2_UART_Init+0x98>)
 800467c:	2200      	movs	r2, #0
 800467e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004680:	4b16      	ldr	r3, [pc, #88]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004682:	2200      	movs	r2, #0
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004688:	2210      	movs	r2, #16
 800468a:	629a      	str	r2, [r3, #40]	; 0x28
	huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <MX_USART2_UART_Init+0x98>)
 800468e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004692:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004694:	4811      	ldr	r0, [pc, #68]	; (80046dc <MX_USART2_UART_Init+0x98>)
 8004696:	f00b fd85 	bl	80101a4 <HAL_UART_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_USART2_UART_Init+0x60>
	{
		Error_Handler();
 80046a0:	f000 f914 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046a4:	2100      	movs	r1, #0
 80046a6:	480d      	ldr	r0, [pc, #52]	; (80046dc <MX_USART2_UART_Init+0x98>)
 80046a8:	f00c feb3 	bl	8011412 <HAL_UARTEx_SetTxFifoThreshold>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_USART2_UART_Init+0x72>
	{
		Error_Handler();
 80046b2:	f000 f90b 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046b6:	2100      	movs	r1, #0
 80046b8:	4808      	ldr	r0, [pc, #32]	; (80046dc <MX_USART2_UART_Init+0x98>)
 80046ba:	f00c fee8 	bl	801148e <HAL_UARTEx_SetRxFifoThreshold>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_USART2_UART_Init+0x84>
	{
		Error_Handler();
 80046c4:	f000 f902 	bl	80048cc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80046c8:	4804      	ldr	r0, [pc, #16]	; (80046dc <MX_USART2_UART_Init+0x98>)
 80046ca:	f00c fe69 	bl	80113a0 <HAL_UARTEx_DisableFifoMode>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_USART2_UART_Init+0x94>
	{
		Error_Handler();
 80046d4:	f000 f8fa 	bl	80048cc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	200007ec 	.word	0x200007ec
 80046e0:	40004400 	.word	0x40004400

080046e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80046ea:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <MX_DMA_Init+0x44>)
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ee:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <MX_DMA_Init+0x44>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	6493      	str	r3, [r2, #72]	; 0x48
 80046f6:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <MX_DMA_Init+0x44>)
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <MX_DMA_Init+0x44>)
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <MX_DMA_Init+0x44>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	6493      	str	r3, [r2, #72]	; 0x48
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <MX_DMA_Init+0x44>)
 8004710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	683b      	ldr	r3, [r7, #0]

}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000

0800472c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b08c      	sub	sp, #48	; 0x30
 8004730:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004732:	f107 031c 	add.w	r3, r7, #28
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004742:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	4a5c      	ldr	r2, [pc, #368]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004748:	f043 0310 	orr.w	r3, r3, #16
 800474c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800474e:	4b5a      	ldr	r3, [pc, #360]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004752:	f003 0310 	and.w	r3, r3, #16
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800475a:	4b57      	ldr	r3, [pc, #348]	; (80048b8 <MX_GPIO_Init+0x18c>)
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	4a56      	ldr	r2, [pc, #344]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004766:	4b54      	ldr	r3, [pc, #336]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004772:	4b51      	ldr	r3, [pc, #324]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004776:	4a50      	ldr	r2, [pc, #320]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800477e:	4b4e      	ldr	r3, [pc, #312]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800478a:	4b4b      	ldr	r3, [pc, #300]	; (80048b8 <MX_GPIO_Init+0x18c>)
 800478c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800478e:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <MX_GPIO_Init+0x18c>)
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80047a2:	4b45      	ldr	r3, [pc, #276]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a6:	4a44      	ldr	r2, [pc, #272]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047a8:	f043 0302 	orr.w	r3, r3, #2
 80047ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ae:	4b42      	ldr	r3, [pc, #264]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80047ba:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	4a3e      	ldr	r2, [pc, #248]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047c0:	f043 0308 	orr.w	r3, r3, #8
 80047c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047c6:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <MX_GPIO_Init+0x18c>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80047d2:	2200      	movs	r2, #0
 80047d4:	f641 013c 	movw	r1, #6204	; 0x183c
 80047d8:	4838      	ldr	r0, [pc, #224]	; (80048bc <MX_GPIO_Init+0x190>)
 80047da:	f003 f82f 	bl	800783c <HAL_GPIO_WritePin>
			|MIRA_EN_PWR_Pin|OCPEN_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LORA_RST_Pin|LORA_NSS_Pin, GPIO_PIN_SET);
 80047de:	2201      	movs	r2, #1
 80047e0:	2130      	movs	r1, #48	; 0x30
 80047e2:	4837      	ldr	r0, [pc, #220]	; (80048c0 <MX_GPIO_Init+0x194>)
 80047e4:	f003 f82a 	bl	800783c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80047e8:	2200      	movs	r2, #0
 80047ea:	2178      	movs	r1, #120	; 0x78
 80047ec:	4835      	ldr	r0, [pc, #212]	; (80048c4 <MX_GPIO_Init+0x198>)
 80047ee:	f003 f825 	bl	800783c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RX_EN_2_Pin TX_EN_2_Pin RX_EN_1_Pin TX_EN_1_Pin
                           MIRA_EN_PWR_Pin OCPEN_Pin */
	GPIO_InitStruct.Pin = RX_EN_2_Pin|TX_EN_2_Pin|RX_EN_1_Pin|TX_EN_1_Pin
 80047f2:	f641 033c 	movw	r3, #6204	; 0x183c
 80047f6:	61fb      	str	r3, [r7, #28]
			|MIRA_EN_PWR_Pin|OCPEN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f8:	2301      	movs	r3, #1
 80047fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4619      	mov	r1, r3
 800480a:	482c      	ldr	r0, [pc, #176]	; (80048bc <MX_GPIO_Init+0x190>)
 800480c:	f002 fd7a 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHG_INT_Pin */
	GPIO_InitStruct.Pin = CHG_INT_Pin;
 8004810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004814:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CHG_INT_GPIO_Port, &GPIO_InitStruct);
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	4826      	ldr	r0, [pc, #152]	; (80048c0 <MX_GPIO_Init+0x194>)
 8004826:	f002 fd6d 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_DIG0_Pin CARD_DETECT_Pin */
	GPIO_InitStruct.Pin = LORA_DIG0_Pin|CARD_DETECT_Pin;
 800482a:	f248 0302 	movw	r3, #32770	; 0x8002
 800482e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004830:	2300      	movs	r3, #0
 8004832:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004834:	2300      	movs	r3, #0
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004838:	f107 031c 	add.w	r3, r7, #28
 800483c:	4619      	mov	r1, r3
 800483e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004842:	f002 fd5f 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pins : LORA_RST_Pin LORA_NSS_Pin */
	GPIO_InitStruct.Pin = LORA_RST_Pin|LORA_NSS_Pin;
 8004846:	2330      	movs	r3, #48	; 0x30
 8004848:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484a:	2301      	movs	r3, #1
 800484c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004852:	2300      	movs	r3, #0
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004856:	f107 031c 	add.w	r3, r7, #28
 800485a:	4619      	mov	r1, r3
 800485c:	4818      	ldr	r0, [pc, #96]	; (80048c0 <MX_GPIO_Init+0x194>)
 800485e:	f002 fd51 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pin : OCPFAULT_Pin */
	GPIO_InitStruct.Pin = OCPFAULT_Pin;
 8004862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004866:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800486c:	2301      	movs	r3, #1
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OCPFAULT_GPIO_Port, &GPIO_InitStruct);
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	4619      	mov	r1, r3
 8004876:	4811      	ldr	r0, [pc, #68]	; (80048bc <MX_GPIO_Init+0x190>)
 8004878:	f002 fd44 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 800487c:	2378      	movs	r3, #120	; 0x78
 800487e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004880:	2301      	movs	r3, #1
 8004882:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	2300      	movs	r3, #0
 800488a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	480c      	ldr	r0, [pc, #48]	; (80048c4 <MX_GPIO_Init+0x198>)
 8004894:	f002 fd36 	bl	8007304 <HAL_GPIO_Init>

	/*Configure GPIO pin : POWERGOOD_Pin */
	GPIO_InitStruct.Pin = POWERGOOD_Pin;
 8004898:	2320      	movs	r3, #32
 800489a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489c:	2300      	movs	r3, #0
 800489e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(POWERGOOD_GPIO_Port, &GPIO_InitStruct);
 80048a4:	f107 031c 	add.w	r3, r7, #28
 80048a8:	4619      	mov	r1, r3
 80048aa:	4807      	ldr	r0, [pc, #28]	; (80048c8 <MX_GPIO_Init+0x19c>)
 80048ac:	f002 fd2a 	bl	8007304 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80048b0:	bf00      	nop
 80048b2:	3730      	adds	r7, #48	; 0x30
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	48001000 	.word	0x48001000
 80048c0:	48000800 	.word	0x48000800
 80048c4:	48000c00 	.word	0x48000c00
 80048c8:	48000400 	.word	0x48000400

080048cc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80048d0:	b672      	cpsid	i
}
 80048d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	printf("Error_Handler() called");
 80048d4:	4801      	ldr	r0, [pc, #4]	; (80048dc <Error_Handler+0x10>)
 80048d6:	f015 f86b 	bl	80199b0 <iprintf>
	while (1)
 80048da:	e7fe      	b.n	80048da <Error_Handler+0xe>
 80048dc:	0801c0dc 	.word	0x0801c0dc

080048e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <HAL_MspInit+0x44>)
 80048e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ea:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <HAL_MspInit+0x44>)
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	6613      	str	r3, [r2, #96]	; 0x60
 80048f2:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_MspInit+0x44>)
 80048f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_MspInit+0x44>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_MspInit+0x44>)
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6593      	str	r3, [r2, #88]	; 0x58
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_MspInit+0x44>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000

08004928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0ae      	sub	sp, #184	; 0xb8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	2294      	movs	r2, #148	; 0x94
 8004946:	2100      	movs	r1, #0
 8004948:	4618      	mov	r0, r3
 800494a:	f014 fadf 	bl	8018f0c <memset>
  if(hi2c->Instance==I2C1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <HAL_I2C_MspInit+0xb0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d13a      	bne.n	80049ce <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004958:	2340      	movs	r3, #64	; 0x40
 800495a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800495c:	2300      	movs	r3, #0
 800495e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004960:	f107 0310 	add.w	r3, r7, #16
 8004964:	4618      	mov	r0, r3
 8004966:	f006 faed 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004970:	f7ff ffac 	bl	80048cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 8004976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004978:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800498c:	23c0      	movs	r3, #192	; 0xc0
 800498e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004992:	2312      	movs	r3, #18
 8004994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049a4:	2304      	movs	r3, #4
 80049a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049ae:	4619      	mov	r1, r3
 80049b0:	480b      	ldr	r0, [pc, #44]	; (80049e0 <HAL_I2C_MspInit+0xb8>)
 80049b2:	f002 fca7 	bl	8007304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a08      	ldr	r2, [pc, #32]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 80049bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_I2C_MspInit+0xb4>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049ce:	bf00      	nop
 80049d0:	37b8      	adds	r7, #184	; 0xb8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40005400 	.word	0x40005400
 80049dc:	40021000 	.word	0x40021000
 80049e0:	48000400 	.word	0x48000400

080049e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_I2C_MspDeInit+0x38>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10d      	bne.n	8004a12 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_I2C_MspDeInit+0x3c>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_I2C_MspDeInit+0x3c>)
 80049fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a00:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004a02:	2140      	movs	r1, #64	; 0x40
 8004a04:	4807      	ldr	r0, [pc, #28]	; (8004a24 <HAL_I2C_MspDeInit+0x40>)
 8004a06:	f002 fe0f 	bl	8007628 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	4805      	ldr	r0, [pc, #20]	; (8004a24 <HAL_I2C_MspDeInit+0x40>)
 8004a0e:	f002 fe0b 	bl	8007628 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004a12:	bf00      	nop
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40005400 	.word	0x40005400
 8004a20:	40021000 	.word	0x40021000
 8004a24:	48000400 	.word	0x48000400

08004a28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0b0      	sub	sp, #192	; 0xc0
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a40:	f107 0318 	add.w	r3, r7, #24
 8004a44:	2294      	movs	r2, #148	; 0x94
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f014 fa5f 	bl	8018f0c <memset>
  if(hsd->Instance==SDMMC1)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a33      	ldr	r2, [pc, #204]	; (8004b20 <HAL_SD_MspInit+0xf8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d15e      	bne.n	8004b16 <HAL_SD_MspInit+0xee>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8004a58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_HSI48;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a64:	f107 0318 	add.w	r3, r7, #24
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f006 fa6b 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8004a74:	f7ff ff2a 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	4a29      	ldr	r2, [pc, #164]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a90:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	4a23      	ldr	r2, [pc, #140]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004aae:	f043 0308 	orr.w	r3, r3, #8
 8004ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <HAL_SD_MspInit+0xfc>)
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004ac0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004ac4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004ada:	230c      	movs	r3, #12
 8004adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4810      	ldr	r0, [pc, #64]	; (8004b28 <HAL_SD_MspInit+0x100>)
 8004ae8:	f002 fc0c 	bl	8007304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004aec:	2304      	movs	r3, #4
 8004aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af2:	2302      	movs	r3, #2
 8004af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004afe:	2303      	movs	r3, #3
 8004b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004b04:	230c      	movs	r3, #12
 8004b06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4806      	ldr	r0, [pc, #24]	; (8004b2c <HAL_SD_MspInit+0x104>)
 8004b12:	f002 fbf7 	bl	8007304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004b16:	bf00      	nop
 8004b18:	37c0      	adds	r7, #192	; 0xc0
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	50062400 	.word	0x50062400
 8004b24:	40021000 	.word	0x40021000
 8004b28:	48000800 	.word	0x48000800
 8004b2c:	48000c00 	.word	0x48000c00

08004b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a17      	ldr	r2, [pc, #92]	; (8004bac <HAL_SPI_MspInit+0x7c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d128      	bne.n	8004ba4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <HAL_SPI_MspInit+0x80>)
 8004b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|LORA0_SCK_Pin|LORA0_MISO_Pin|LORA0_MOSI_Pin;
 8004b82:	23f0      	movs	r3, #240	; 0xf0
 8004b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b92:	2305      	movs	r3, #5
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	f107 0314 	add.w	r3, r7, #20
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ba0:	f002 fbb0 	bl	8007304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004ba4:	bf00      	nop
 8004ba6:	3728      	adds	r7, #40	; 0x28
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40013000 	.word	0x40013000
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <HAL_TIM_Base_MspInit+0x38>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d10b      	bne.n	8004bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8004bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bca:	4a09      	ldr	r2, [pc, #36]	; (8004bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bd2:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8004bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004bde:	bf00      	nop
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40014800 	.word	0x40014800
 8004bf0:	40021000 	.word	0x40021000

08004bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0b0      	sub	sp, #192	; 0xc0
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	609a      	str	r2, [r3, #8]
 8004c08:	60da      	str	r2, [r3, #12]
 8004c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c0c:	f107 0318 	add.w	r3, r7, #24
 8004c10:	2294      	movs	r2, #148	; 0x94
 8004c12:	2100      	movs	r1, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f014 f979 	bl	8018f0c <memset>
  if(huart->Instance==USART1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6c      	ldr	r2, [pc, #432]	; (8004dd0 <HAL_UART_MspInit+0x1dc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	f040 8090 	bne.w	8004d46 <HAL_UART_MspInit+0x152>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004c26:	2301      	movs	r3, #1
 8004c28:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c2e:	f107 0318 	add.w	r3, r7, #24
 8004c32:	4618      	mov	r0, r3
 8004c34:	f006 f986 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c3e:	f7ff fe45 	bl	80048cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c42:	4b64      	ldr	r3, [pc, #400]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c46:	4a63      	ldr	r2, [pc, #396]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c4e:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5a:	4b5e      	ldr	r3, [pc, #376]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	4a5d      	ldr	r2, [pc, #372]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8004c72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c86:	2303      	movs	r3, #3
 8004c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c8c:	2307      	movs	r3, #7
 8004c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c96:	4619      	mov	r1, r3
 8004c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c9c:	f002 fb32 	bl	8007304 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8004ca0:	4b4d      	ldr	r3, [pc, #308]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <HAL_UART_MspInit+0x1e8>)
 8004ca4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004ca6:	4b4c      	ldr	r3, [pc, #304]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004ca8:	2218      	movs	r2, #24
 8004caa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004cac:	4b4a      	ldr	r3, [pc, #296]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cb2:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cb8:	4b47      	ldr	r3, [pc, #284]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cbe:	4b46      	ldr	r3, [pc, #280]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cc4:	4b44      	ldr	r3, [pc, #272]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004cca:	4b43      	ldr	r3, [pc, #268]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004cd0:	4b41      	ldr	r3, [pc, #260]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004cd6:	4840      	ldr	r0, [pc, #256]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cd8:	f001 ffe6 	bl	8006ca8 <HAL_DMA_Init>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8004ce2:	f7ff fdf3 	bl	80048cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a3b      	ldr	r2, [pc, #236]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cea:	67da      	str	r2, [r3, #124]	; 0x7c
 8004cec:	4a3a      	ldr	r2, [pc, #232]	; (8004dd8 <HAL_UART_MspInit+0x1e4>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8004cf2:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004cf4:	4a3b      	ldr	r2, [pc, #236]	; (8004de4 <HAL_UART_MspInit+0x1f0>)
 8004cf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004cfa:	2219      	movs	r2, #25
 8004cfc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cfe:	4b38      	ldr	r3, [pc, #224]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d00:	2210      	movs	r2, #16
 8004d02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d04:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0a:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d10:	4b33      	ldr	r3, [pc, #204]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d16:	4b32      	ldr	r3, [pc, #200]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d22:	4b2f      	ldr	r3, [pc, #188]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004d28:	482d      	ldr	r0, [pc, #180]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d2a:	f001 ffbd 	bl	8006ca8 <HAL_DMA_Init>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 8004d34:	f7ff fdca 	bl	80048cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d3c:	679a      	str	r2, [r3, #120]	; 0x78
 8004d3e:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <HAL_UART_MspInit+0x1ec>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d44:	e040      	b.n	8004dc8 <HAL_UART_MspInit+0x1d4>
  else if(huart->Instance==USART2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <HAL_UART_MspInit+0x1f4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d13b      	bne.n	8004dc8 <HAL_UART_MspInit+0x1d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d50:	2302      	movs	r3, #2
 8004d52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d54:	2300      	movs	r3, #0
 8004d56:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d58:	f107 0318 	add.w	r3, r7, #24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f006 f8f1 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_UART_MspInit+0x178>
      Error_Handler();
 8004d68:	f7ff fdb0 	bl	80048cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	4a18      	ldr	r2, [pc, #96]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d76:	6593      	str	r3, [r2, #88]	; 0x58
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d84:	4b13      	ldr	r3, [pc, #76]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d88:	4a12      	ldr	r2, [pc, #72]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d8a:	f043 0301 	orr.w	r3, r3, #1
 8004d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_UART_MspInit+0x1e0>)
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	60bb      	str	r3, [r7, #8]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da2:	2302      	movs	r3, #2
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dae:	2303      	movs	r3, #3
 8004db0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004db4:	2307      	movs	r3, #7
 8004db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004dc4:	f002 fa9e 	bl	8007304 <HAL_GPIO_Init>
}
 8004dc8:	bf00      	nop
 8004dca:	37c0      	adds	r7, #192	; 0xc0
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	2000087c 	.word	0x2000087c
 8004ddc:	40020008 	.word	0x40020008
 8004de0:	200008dc 	.word	0x200008dc
 8004de4:	4002001c 	.word	0x4002001c
 8004de8:	40004400 	.word	0x40004400

08004dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004df0:	f005 ffcc 	bl	800ad8c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004df4:	e7fe      	b.n	8004df4 <NMI_Handler+0x8>

08004df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dfa:	e7fe      	b.n	8004dfa <HardFault_Handler+0x4>

08004dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e00:	e7fe      	b.n	8004e00 <MemManage_Handler+0x4>

08004e02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e06:	e7fe      	b.n	8004e06 <BusFault_Handler+0x4>

08004e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <UsageFault_Handler+0x4>

08004e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e3c:	f001 fdde 	bl	80069fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <DMA1_Channel1_IRQHandler+0x10>)
 8004e4a:	f002 f90b 	bl	8007064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000087c 	.word	0x2000087c

08004e58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <DMA1_Channel2_IRQHandler+0x10>)
 8004e5e:	f002 f901 	bl	8007064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200008dc 	.word	0x200008dc

08004e6c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	if (tick) {tick--;}
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d006      	beq.n	8004e88 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4b09      	ldr	r3, [pc, #36]	; (8004eac <TIM1_TRG_COM_TIM17_IRQHandler+0x40>)
 8004e86:	701a      	strb	r2, [r3, #0]
	if (tickGPS) {tickGPS--;}
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b04      	ldr	r3, [pc, #16]	; (8004eb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x44>)
 8004e9e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004ea0:	4804      	ldr	r0, [pc, #16]	; (8004eb4 <TIM1_TRG_COM_TIM17_IRQHandler+0x48>)
 8004ea2:	f00a fba8 	bl	800f5f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000f88 	.word	0x20000f88
 8004eb0:	20000f89 	.word	0x20000f89
 8004eb4:	20000710 	.word	0x20000710

08004eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
//		if (mira_rxBuffer == mira_rxBuffer1) {mira_rxBuffer = mira_rxBuffer2;}
//		else {mira_rxBuffer = mira_rxBuffer1;}
//		HAL_GPIO_TogglePin (LED1_GPIO_Port, LED1_Pin);
//	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ebc:	4802      	ldr	r0, [pc, #8]	; (8004ec8 <USART1_IRQHandler+0x10>)
 8004ebe:	f00b f9c1 	bl	8010244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000075c 	.word	0x2000075c

08004ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	char c = huart2.Instance->RDR;
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <USART2_IRQHandler+0x90>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	71fb      	strb	r3, [r7, #7]
	if (gps_rxBufferPos < gps_RXBUFSIZE - 1)
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <USART2_IRQHandler+0x94>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
	{ gps_rxBuffer[gps_rxBufferPos++] = (uint8_t) c; }
 8004ee0:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <USART2_IRQHandler+0x98>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <USART2_IRQHandler+0x94>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	b2c8      	uxtb	r0, r1
 8004eee:	491c      	ldr	r1, [pc, #112]	; (8004f60 <USART2_IRQHandler+0x94>)
 8004ef0:	7008      	strb	r0, [r1, #0]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	79fa      	ldrb	r2, [r7, #7]
 8004ef6:	701a      	strb	r2, [r3, #0]

	if ((c == '\n') && (gps_send_ready))// && (tickGPS == 0))// && (tickGPS == 0)) //(c == '\r') ||
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	2b0a      	cmp	r3, #10
 8004efc:	d126      	bne.n	8004f4c <USART2_IRQHandler+0x80>
 8004efe:	4b1a      	ldr	r3, [pc, #104]	; (8004f68 <USART2_IRQHandler+0x9c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d022      	beq.n	8004f4c <USART2_IRQHandler+0x80>
	{
		//tickGPS = 1;
		gps_rxBuffer[gps_rxBufferPos] = 0;
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <USART2_IRQHandler+0x98>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <USART2_IRQHandler+0x94>)
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	4413      	add	r3, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	701a      	strb	r2, [r3, #0]
		gps_data_ready |= 1;
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <USART2_IRQHandler+0xa0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	4a13      	ldr	r2, [pc, #76]	; (8004f6c <USART2_IRQHandler+0xa0>)
 8004f20:	6013      	str	r3, [r2, #0]
		gps_send_ready ^= 1;
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <USART2_IRQHandler+0x9c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f083 0301 	eor.w	r3, r3, #1
 8004f2a:	4a0f      	ldr	r2, [pc, #60]	; (8004f68 <USART2_IRQHandler+0x9c>)
 8004f2c:	6013      	str	r3, [r2, #0]
		gps_rxBufferPos = 0;
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <USART2_IRQHandler+0x94>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
		if (gps_rxBuffer == gps_rxBuffer1) {gps_rxBuffer = gps_rxBuffer2;}
 8004f34:	4b0b      	ldr	r3, [pc, #44]	; (8004f64 <USART2_IRQHandler+0x98>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0d      	ldr	r2, [pc, #52]	; (8004f70 <USART2_IRQHandler+0xa4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d103      	bne.n	8004f46 <USART2_IRQHandler+0x7a>
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <USART2_IRQHandler+0x98>)
 8004f40:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <USART2_IRQHandler+0xa8>)
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e002      	b.n	8004f4c <USART2_IRQHandler+0x80>
		else {gps_rxBuffer = gps_rxBuffer1;}
 8004f46:	4b07      	ldr	r3, [pc, #28]	; (8004f64 <USART2_IRQHandler+0x98>)
 8004f48:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <USART2_IRQHandler+0xa4>)
 8004f4a:	601a      	str	r2, [r3, #0]

	//HAL_GPIO_TogglePin (LED0_GPIO_Port, LED0_Pin);
	//rchar = huart2.Instance->RDR;

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f4c:	4803      	ldr	r0, [pc, #12]	; (8004f5c <USART2_IRQHandler+0x90>)
 8004f4e:	f00b f979 	bl	8010244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	//ATOMIC_SET_BIT(huart2.Instance->CR3, USART_CR3_EIE);
  /* USER CODE END USART2_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	200007ec 	.word	0x200007ec
 8004f60:	20000f80 	.word	0x20000f80
 8004f64:	20000f7c 	.word	0x20000f7c
 8004f68:	2000000c 	.word	0x2000000c
 8004f6c:	20000f84 	.word	0x20000f84
 8004f70:	2000093c 	.word	0x2000093c
 8004f74:	20000c5c 	.word	0x20000c5c

08004f78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f7c:	4802      	ldr	r0, [pc, #8]	; (8004f88 <OTG_FS_IRQHandler+0x10>)
 8004f7e:	f003 ff91 	bl	8008ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20002904 	.word	0x20002904

08004f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <SystemInit+0x20>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	4a05      	ldr	r2, [pc, #20]	; (8004fac <SystemInit+0x20>)
 8004f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	e000ed00 	.word	0xe000ed00

08004fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fb4:	f7ff ffea 	bl	8004f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fb8:	480c      	ldr	r0, [pc, #48]	; (8004fec <LoopForever+0x6>)
  ldr r1, =_edata
 8004fba:	490d      	ldr	r1, [pc, #52]	; (8004ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <LoopForever+0xe>)
  movs r3, #0
 8004fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fc0:	e002      	b.n	8004fc8 <LoopCopyDataInit>

08004fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fc6:	3304      	adds	r3, #4

08004fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fcc:	d3f9      	bcc.n	8004fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fce:	4a0a      	ldr	r2, [pc, #40]	; (8004ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004fd0:	4c0a      	ldr	r4, [pc, #40]	; (8004ffc <LoopForever+0x16>)
  movs r3, #0
 8004fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fd4:	e001      	b.n	8004fda <LoopFillZerobss>

08004fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fd8:	3204      	adds	r2, #4

08004fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fdc:	d3fb      	bcc.n	8004fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004fde:	f013 ff5b 	bl	8018e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fe2:	f7fe fa39 	bl	8003458 <main>

08004fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8004fe6:	e7fe      	b.n	8004fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004fe8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ff0:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8004ff4:	0801c698 	.word	0x0801c698
  ldr r2, =_sbss
 8004ff8:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8004ffc:	20003044 	.word	0x20003044

08005000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005000:	e7fe      	b.n	8005000 <ADC1_IRQHandler>
	...

08005004 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e051      	b.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	7b1a      	ldrb	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <LSM6DSO_RegisterBusIO+0xcc>)
 800505c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <LSM6DSO_RegisterBusIO+0xd0>)
 8005062:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 800507a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e020      	b.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4798      	blx	r3
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 800508e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e016      	b.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d112      	bne.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80050a8:	230c      	movs	r3, #12
 80050aa:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80050ac:	7afb      	ldrb	r3, [r7, #11]
 80050ae:	461a      	mov	r2, r3
 80050b0:	2112      	movs	r1, #18
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fc98 	bl	80059e8 <LSM6DSO_Write_Reg>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80050c4:	68fb      	ldr	r3, [r7, #12]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	08005e8d 	.word	0x08005e8d
 80050d4:	08005ec3 	.word	0x08005ec3

080050d8 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3320      	adds	r3, #32
 80050e4:	2180      	movs	r1, #128	; 0x80
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fb5e 	bl	80067a8 <lsm6dso_i3c_disable_set>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f6:	e060      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3320      	adds	r3, #32
 80050fc:	2101      	movs	r1, #1
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fb2c 	bl	800675c <lsm6dso_auto_increment_set>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800510e:	e054      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3320      	adds	r3, #32
 8005114:	2101      	movs	r1, #1
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fa3e 	bl	8006598 <lsm6dso_block_data_update_set>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005126:	e048      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3320      	adds	r3, #32
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f001 fb80 	bl	8006834 <lsm6dso_fifo_mode_set>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800513e:	e03c      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2204      	movs	r2, #4
 8005144:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3320      	adds	r3, #32
 800514c:	2100      	movs	r1, #0
 800514e:	4618      	mov	r0, r3
 8005150:	f000 ff60 	bl	8006014 <lsm6dso_xl_data_rate_set>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800515a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800515e:	e02c      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3320      	adds	r3, #32
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fef6 	bl	8005f58 <lsm6dso_xl_full_scale_set>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d002      	beq.n	8005178 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005176:	e020      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2204      	movs	r2, #4
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3320      	adds	r3, #32
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f001 f8a8 	bl	80062dc <lsm6dso_gy_data_rate_set>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8005192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005196:	e010      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3320      	adds	r3, #32
 800519c:	2106      	movs	r1, #6
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 f834 	bl	800620c <lsm6dso_gy_full_scale_set>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80051aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051ae:	e004      	b.n	80051ba <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSO_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80051d4:	2300      	movs	r3, #0
 80051d6:	e014      	b.n	8005202 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 0220 	add.w	r2, r3, #32
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f000 ff14 	bl	8006014 <lsm6dso_xl_data_rate_set>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f6:	e004      	b.n	8005202 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSO_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3320      	adds	r3, #32
 800521e:	f107 020b 	add.w	r2, r7, #11
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f000 febd 	bl	8005fa4 <lsm6dso_xl_full_scale_get>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005234:	e023      	b.n	800527e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005236:	7afb      	ldrb	r3, [r7, #11]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d81b      	bhi.n	8005274 <LSM6DSO_ACC_GetSensitivity+0x68>
 800523c:	a201      	add	r2, pc, #4	; (adr r2, 8005244 <LSM6DSO_ACC_GetSensitivity+0x38>)
 800523e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005242:	bf00      	nop
 8005244:	08005255 	.word	0x08005255
 8005248:	0800526d 	.word	0x0800526d
 800524c:	0800525d 	.word	0x0800525d
 8005250:	08005265 	.word	0x08005265
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	4a0c      	ldr	r2, [pc, #48]	; (8005288 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005258:	601a      	str	r2, [r3, #0]
      break;
 800525a:	e00f      	b.n	800527c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	4a0b      	ldr	r2, [pc, #44]	; (800528c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005260:	601a      	str	r2, [r3, #0]
      break;
 8005262:	e00b      	b.n	800527c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005268:	601a      	str	r2, [r3, #0]
      break;
 800526a:	e007      	b.n	800527c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005270:	601a      	str	r2, [r3, #0]
      break;
 8005272:	e003      	b.n	800527c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005278:	60fb      	str	r3, [r7, #12]
      break;
 800527a:	bf00      	nop
  }

  return ret;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	3d79db23 	.word	0x3d79db23
 800528c:	3df9db23 	.word	0x3df9db23
 8005290:	3e79db23 	.word	0x3e79db23
 8005294:	3ef9db23 	.word	0x3ef9db23

08005298 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 80052a4:	2100      	movs	r1, #0
 80052a6:	ed97 0a00 	vldr	s0, [r7]
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f806 	bl	80052bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80052c8:	460b      	mov	r3, r1
 80052ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	f000 80ea 	beq.w	80054b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 80052dc:	2b02      	cmp	r3, #2
 80052de:	f300 8163 	bgt.w	80055a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d074      	beq.n	80053d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80052ea:	e15d      	b.n	80055a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f103 0020 	add.w	r0, r3, #32
 80052f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80052f6:	2301      	movs	r3, #1
 80052f8:	2114      	movs	r1, #20
 80052fa:	f000 fdfd 	bl	8005ef8 <lsm6dso_read_reg>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8005304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005308:	e16c      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800530a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800530e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d025      	beq.n	8005364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10b      	bne.n	800533a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3320      	adds	r3, #32
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe73 	bl	8006014 <lsm6dso_xl_data_rate_set>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005338:	e154      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 800533a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800533e:	f36f 13c7 	bfc	r3, #7, #1
 8005342:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f103 0020 	add.w	r0, r3, #32
 800534c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005350:	2301      	movs	r3, #1
 8005352:	2114      	movs	r1, #20
 8005354:	f000 fde8 	bl	8005f28 <lsm6dso_write_reg>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005362:	e13f      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f103 0020 	add.w	r0, r3, #32
 800536a:	f107 0220 	add.w	r2, r7, #32
 800536e:	2301      	movs	r3, #1
 8005370:	2115      	movs	r1, #21
 8005372:	f000 fdc1 	bl	8005ef8 <lsm6dso_read_reg>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005380:	e130      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8005382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d014      	beq.n	80053ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8005390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005394:	f36f 1304 	bfc	r3, #4, #1
 8005398:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f103 0020 	add.w	r0, r3, #32
 80053a2:	f107 0220 	add.w	r2, r7, #32
 80053a6:	2301      	movs	r3, #1
 80053a8:	2115      	movs	r1, #21
 80053aa:	f000 fdbd 	bl	8005f28 <lsm6dso_write_reg>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053b8:	e114      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80053ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80053be:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80053c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	d400      	bmi.n	80053ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 80053cc:	e0f0      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 80053ce:	4b87      	ldr	r3, [pc, #540]	; (80055ec <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053d2:	e0ed      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f103 0020 	add.w	r0, r3, #32
 80053da:	f107 021c 	add.w	r2, r7, #28
 80053de:	2301      	movs	r3, #1
 80053e0:	2114      	movs	r1, #20
 80053e2:	f000 fd89 	bl	8005ef8 <lsm6dso_read_reg>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f0:	e0f8      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80053f2:	7f3b      	ldrb	r3, [r7, #28]
 80053f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d023      	beq.n	8005446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005404:	2b01      	cmp	r3, #1
 8005406:	d10b      	bne.n	8005420 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3320      	adds	r3, #32
 800540c:	2100      	movs	r1, #0
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fe00 	bl	8006014 <lsm6dso_xl_data_rate_set>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800541a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800541e:	e0e1      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8005420:	7f3b      	ldrb	r3, [r7, #28]
 8005422:	f36f 13c7 	bfc	r3, #7, #1
 8005426:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f103 0020 	add.w	r0, r3, #32
 800542e:	f107 021c 	add.w	r2, r7, #28
 8005432:	2301      	movs	r3, #1
 8005434:	2114      	movs	r1, #20
 8005436:	f000 fd77 	bl	8005f28 <lsm6dso_write_reg>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 8005440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005444:	e0ce      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f103 0020 	add.w	r0, r3, #32
 800544c:	f107 0218 	add.w	r2, r7, #24
 8005450:	2301      	movs	r3, #1
 8005452:	2115      	movs	r1, #21
 8005454:	f000 fd50 	bl	8005ef8 <lsm6dso_read_reg>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800545e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005462:	e0bf      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8005464:	7e3b      	ldrb	r3, [r7, #24]
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d112      	bne.n	8005496 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8005470:	7e3b      	ldrb	r3, [r7, #24]
 8005472:	f043 0310 	orr.w	r3, r3, #16
 8005476:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f103 0020 	add.w	r0, r3, #32
 800547e:	f107 0218 	add.w	r2, r7, #24
 8005482:	2301      	movs	r3, #1
 8005484:	2115      	movs	r1, #21
 8005486:	f000 fd4f 	bl	8005f28 <lsm6dso_write_reg>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005494:	e0a6      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8005496:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800549a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80055f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800549e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	dc00      	bgt.n	80054aa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 80054a8:	e082      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80054aa:	4b52      	ldr	r3, [pc, #328]	; (80055f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80054ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ae:	e07f      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f103 0020 	add.w	r0, r3, #32
 80054b6:	f107 0210 	add.w	r2, r7, #16
 80054ba:	2301      	movs	r3, #1
 80054bc:	2115      	movs	r1, #21
 80054be:	f000 fd1b 	bl	8005ef8 <lsm6dso_read_reg>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054cc:	e08a      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80054ce:	7c3b      	ldrb	r3, [r7, #16]
 80054d0:	f003 0310 	and.w	r3, r3, #16
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 80054da:	7c3b      	ldrb	r3, [r7, #16]
 80054dc:	f36f 1304 	bfc	r3, #4, #1
 80054e0:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f103 0020 	add.w	r0, r3, #32
 80054e8:	f107 0210 	add.w	r2, r7, #16
 80054ec:	2301      	movs	r3, #1
 80054ee:	2115      	movs	r1, #21
 80054f0:	f000 fd1a 	bl	8005f28 <lsm6dso_write_reg>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054fe:	e071      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005506:	2b01      	cmp	r3, #1
 8005508:	d108      	bne.n	800551c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f8ef 	bl	80056ee <LSM6DSO_GYRO_Disable>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800551a:	e063      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f103 0020 	add.w	r0, r3, #32
 8005522:	f107 0214 	add.w	r2, r7, #20
 8005526:	2301      	movs	r3, #1
 8005528:	2114      	movs	r1, #20
 800552a:	f000 fce5 	bl	8005ef8 <lsm6dso_read_reg>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005538:	e054      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 800553a:	7d3b      	ldrb	r3, [r7, #20]
 800553c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d123      	bne.n	800558e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800554c:	2b01      	cmp	r3, #1
 800554e:	d10b      	bne.n	8005568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	3320      	adds	r3, #32
 8005554:	2100      	movs	r1, #0
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fd5c 	bl	8006014 <lsm6dso_xl_data_rate_set>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 8005562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005566:	e03d      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8005568:	7d3b      	ldrb	r3, [r7, #20]
 800556a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556e:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f103 0020 	add.w	r0, r3, #32
 8005576:	f107 0214 	add.w	r2, r7, #20
 800557a:	2301      	movs	r3, #1
 800557c:	2114      	movs	r1, #20
 800557e:	f000 fcd3 	bl	8005f28 <lsm6dso_write_reg>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8005588:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800558c:	e02a      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800558e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005592:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80055f0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8005596:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559e:	dc00      	bgt.n	80055a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 80055a0:	e006      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 80055a2:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a6:	e003      	b.n	80055b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80055ae:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b6:	d102      	bne.n	80055be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055bc:	e012      	b.n	80055e4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80055c8:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fa27 	bl	8005a20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80055d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80055d4:	e005      	b.n	80055e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80055d6:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fab8 	bl	8005b50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80055e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3730      	adds	r7, #48	; 0x30
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	41480000 	.word	0x41480000
 80055f0:	43500000 	.word	0x43500000
 80055f4:	43500000 	.word	0x43500000

080055f8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3320      	adds	r3, #32
 800560c:	f107 0210 	add.w	r2, r7, #16
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f831 	bl	800667a <lsm6dso_acceleration_raw_get>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005622:	e03c      	b.n	800569e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fdee 	bl	800520c <LSM6DSO_ACC_GetSensitivity>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800563a:	e030      	b.n	800569e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800563c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005640:	ee07 3a90 	vmov	s15, r3
 8005644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005648:	edd7 7a03 	vldr	s15, [r7, #12]
 800564c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005654:	ee17 2a90 	vmov	r2, s15
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800565c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005668:	edd7 7a03 	vldr	s15, [r7, #12]
 800566c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005674:	ee17 2a90 	vmov	r2, s15
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800567c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005688:	edd7 7a03 	vldr	s15, [r7, #12]
 800568c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005694:	ee17 2a90 	vmov	r2, s15
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e014      	b.n	80056e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0220 	add.w	r2, r3, #32
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 fe06 	bl	80062dc <lsm6dso_gy_data_rate_set>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056da:	e004      	b.n	80056e6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e01f      	b.n	8005744 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0220 	add.w	r2, r3, #32
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3334      	adds	r3, #52	; 0x34
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f000 fedf 	bl	80064d4 <lsm6dso_gy_data_rate_get>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005720:	e010      	b.n	8005744 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3320      	adds	r3, #32
 8005726:	2100      	movs	r1, #0
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fdd7 	bl	80062dc <lsm6dso_gy_data_rate_set>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005738:	e004      	b.n	8005744 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSO_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3320      	adds	r3, #32
 800575e:	f107 020b 	add.w	r2, r7, #11
 8005762:	4611      	mov	r1, r2
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fd77 	bl	8006258 <lsm6dso_gy_full_scale_get>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005774:	e02d      	b.n	80057d2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d825      	bhi.n	80057c8 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057a1 	.word	0x080057a1
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057c9 	.word	0x080057c9
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c9 	.word	0x080057c9
 800579c:	080057c1 	.word	0x080057c1
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <LSM6DSO_GYRO_GetSensitivity+0x90>)
 80057a4:	601a      	str	r2, [r3, #0]
      break;
 80057a6:	e013      	b.n	80057d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	4a0d      	ldr	r2, [pc, #52]	; (80057e0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 80057ac:	601a      	str	r2, [r3, #0]
      break;
 80057ae:	e00f      	b.n	80057d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 80057b4:	601a      	str	r2, [r3, #0]
      break;
 80057b6:	e00b      	b.n	80057d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	4a0b      	ldr	r2, [pc, #44]	; (80057e8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 80057bc:	601a      	str	r2, [r3, #0]
      break;
 80057be:	e007      	b.n	80057d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	4a0a      	ldr	r2, [pc, #40]	; (80057ec <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 80057c4:	601a      	str	r2, [r3, #0]
      break;
 80057c6:	e003      	b.n	80057d0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 80057c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057cc:	60fb      	str	r3, [r7, #12]
      break;
 80057ce:	bf00      	nop
  }

  return ret;
 80057d0:	68fb      	ldr	r3, [r7, #12]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	408c0000 	.word	0x408c0000
 80057e0:	410c0000 	.word	0x410c0000
 80057e4:	418c0000 	.word	0x418c0000
 80057e8:	420c0000 	.word	0x420c0000
 80057ec:	428c0000 	.word	0x428c0000

080057f0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80057fc:	2100      	movs	r1, #0
 80057fe:	ed97 0a00 	vldr	s0, [r7]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f806 	bl	8005814 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005820:	460b      	mov	r3, r1
 8005822:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8005832:	2b01      	cmp	r3, #1
 8005834:	d028      	beq.n	8005888 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8005836:	e05c      	b.n	80058f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f103 0020 	add.w	r0, r3, #32
 800583e:	f107 0214 	add.w	r2, r7, #20
 8005842:	2301      	movs	r3, #1
 8005844:	2116      	movs	r1, #22
 8005846:	f000 fb57 	bl	8005ef8 <lsm6dso_read_reg>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8005850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005854:	e06c      	b.n	8005930 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8005856:	7d3b      	ldrb	r3, [r7, #20]
 8005858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d04b      	beq.n	80058fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8005862:	7d3b      	ldrb	r3, [r7, #20]
 8005864:	f36f 13c7 	bfc	r3, #7, #1
 8005868:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f103 0020 	add.w	r0, r3, #32
 8005870:	f107 0214 	add.w	r2, r7, #20
 8005874:	2301      	movs	r3, #1
 8005876:	2116      	movs	r1, #22
 8005878:	f000 fb56 	bl	8005f28 <lsm6dso_write_reg>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03b      	beq.n	80058fa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005886:	e053      	b.n	8005930 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f103 0020 	add.w	r0, r3, #32
 800588e:	f107 0210 	add.w	r2, r7, #16
 8005892:	2301      	movs	r3, #1
 8005894:	2116      	movs	r1, #22
 8005896:	f000 fb2f 	bl	8005ef8 <lsm6dso_read_reg>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058a4:	e044      	b.n	8005930 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 80058a6:	7c3b      	ldrb	r3, [r7, #16]
 80058a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d112      	bne.n	80058d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 80058b2:	7c3b      	ldrb	r3, [r7, #16]
 80058b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b8:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f103 0020 	add.w	r0, r3, #32
 80058c0:	f107 0210 	add.w	r2, r7, #16
 80058c4:	2301      	movs	r3, #1
 80058c6:	2116      	movs	r1, #22
 80058c8:	f000 fb2e 	bl	8005f28 <lsm6dso_write_reg>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d6:	e02b      	b.n	8005930 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 80058d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80058dc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005938 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 80058e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e8:	dc00      	bgt.n	80058ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80058ea:	e007      	b.n	80058fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80058ec:	4b13      	ldr	r3, [pc, #76]	; (800593c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e004      	b.n	80058fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f6:	61fb      	str	r3, [r7, #28]
      break;
 80058f8:	e000      	b.n	80058fc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80058fa:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005902:	d102      	bne.n	800590a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8005904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005908:	e012      	b.n	8005930 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005910:	2b01      	cmp	r3, #1
 8005912:	d106      	bne.n	8005922 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8005914:	ed97 0a06 	vldr	s0, [r7, #24]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 f9a9 	bl	8005c70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800591e:	61f8      	str	r0, [r7, #28]
 8005920:	e005      	b.n	800592e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8005922:	ed97 0a06 	vldr	s0, [r7, #24]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fa2e 	bl	8005d88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 800592c:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 800592e:	69fb      	ldr	r3, [r7, #28]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	43500000 	.word	0x43500000
 800593c:	43500000 	.word	0x43500000

08005940 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3320      	adds	r3, #32
 800594e:	f107 0210 	add.w	r2, r7, #16
 8005952:	4611      	mov	r1, r2
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fe45 	bl	80065e4 <lsm6dso_angular_rate_raw_get>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8005960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005964:	e03c      	b.n	80059e0 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8005966:	f107 030c 	add.w	r3, r7, #12
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff feed 	bl	800574c <LSM6DSO_GYRO_GetSensitivity>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8005978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800597c:	e030      	b.n	80059e0 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800597e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800598a:	edd7 7a03 	vldr	s15, [r7, #12]
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005996:	ee17 2a90 	vmov	r2, s15
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800599e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80059ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059b6:	ee17 2a90 	vmov	r2, s15
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80059be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80059c2:	ee07 3a90 	vmov	s15, r3
 80059c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d6:	ee17 2a90 	vmov	r2, s15
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	70fb      	strb	r3, [r7, #3]
 80059f4:	4613      	mov	r3, r2
 80059f6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f103 0020 	add.w	r0, r3, #32
 80059fe:	1cba      	adds	r2, r7, #2
 8005a00:	78f9      	ldrb	r1, [r7, #3]
 8005a02:	2301      	movs	r3, #1
 8005a04:	f000 fa90 	bl	8005f28 <lsm6dso_write_reg>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a12:	e000      	b.n	8005a16 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005a2c:	edd7 7a00 	vldr	s15, [r7]
 8005a30:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005b30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8005a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3c:	d801      	bhi.n	8005a42 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8005a3e:	230b      	movs	r3, #11
 8005a40:	e063      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a42:	edd7 7a00 	vldr	s15, [r7]
 8005a46:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a52:	d801      	bhi.n	8005a58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e058      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a58:	edd7 7a00 	vldr	s15, [r7]
 8005a5c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a68:	d801      	bhi.n	8005a6e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	e04d      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a6e:	edd7 7a00 	vldr	s15, [r7]
 8005a72:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005b34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8005a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	d801      	bhi.n	8005a84 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8005a80:	2303      	movs	r3, #3
 8005a82:	e042      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a84:	edd7 7a00 	vldr	s15, [r7]
 8005a88:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005b38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8005a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a94:	d801      	bhi.n	8005a9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8005a96:	2304      	movs	r3, #4
 8005a98:	e037      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005a9a:	edd7 7a00 	vldr	s15, [r7]
 8005a9e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005b3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8005aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aaa:	d801      	bhi.n	8005ab0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8005aac:	2305      	movs	r3, #5
 8005aae:	e02c      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005ab0:	edd7 7a00 	vldr	s15, [r7]
 8005ab4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005b40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8005ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	d801      	bhi.n	8005ac6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8005ac2:	2306      	movs	r3, #6
 8005ac4:	e021      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005ac6:	edd7 7a00 	vldr	s15, [r7]
 8005aca:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005b44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8005ace:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad6:	d801      	bhi.n	8005adc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8005ad8:	2307      	movs	r3, #7
 8005ada:	e016      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005adc:	edd7 7a00 	vldr	s15, [r7]
 8005ae0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b48 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8005ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aec:	d801      	bhi.n	8005af2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8005aee:	2308      	movs	r3, #8
 8005af0:	e00b      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005af2:	edd7 7a00 	vldr	s15, [r7]
 8005af6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005b4c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8005afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b02:	d801      	bhi.n	8005b08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8005b04:	2309      	movs	r3, #9
 8005b06:	e000      	b.n	8005b0a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8005b08:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005b0a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3320      	adds	r3, #32
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	4611      	mov	r1, r2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fa7d 	bl	8006014 <lsm6dso_xl_data_rate_set>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8005b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b24:	e000      	b.n	8005b28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	3fcccccd 	.word	0x3fcccccd
 8005b34:	42500000 	.word	0x42500000
 8005b38:	42d00000 	.word	0x42d00000
 8005b3c:	43500000 	.word	0x43500000
 8005b40:	43d08000 	.word	0x43d08000
 8005b44:	44504000 	.word	0x44504000
 8005b48:	44d06000 	.word	0x44d06000
 8005b4c:	45505000 	.word	0x45505000

08005b50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8005b5c:	edd7 7a00 	vldr	s15, [r7]
 8005b60:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005c50 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	d801      	bhi.n	8005b72 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8005b6e:	230b      	movs	r3, #11
 8005b70:	e063      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b72:	edd7 7a00 	vldr	s15, [r7]
 8005b76:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	d801      	bhi.n	8005b88 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e058      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b88:	edd7 7a00 	vldr	s15, [r7]
 8005b8c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d801      	bhi.n	8005b9e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e04d      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005b9e:	edd7 7a00 	vldr	s15, [r7]
 8005ba2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005c54 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8005ba6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bae:	d801      	bhi.n	8005bb4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e042      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005bb4:	edd7 7a00 	vldr	s15, [r7]
 8005bb8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005c58 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8005bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc4:	d801      	bhi.n	8005bca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8005bc6:	2304      	movs	r3, #4
 8005bc8:	e037      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005bca:	edd7 7a00 	vldr	s15, [r7]
 8005bce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8005c5c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8005bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bda:	d801      	bhi.n	8005be0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8005bdc:	2305      	movs	r3, #5
 8005bde:	e02c      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005be0:	edd7 7a00 	vldr	s15, [r7]
 8005be4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005c60 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8005be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	d801      	bhi.n	8005bf6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8005bf2:	2306      	movs	r3, #6
 8005bf4:	e021      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005bf6:	edd7 7a00 	vldr	s15, [r7]
 8005bfa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005c64 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8005bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c06:	d801      	bhi.n	8005c0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8005c08:	2307      	movs	r3, #7
 8005c0a:	e016      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005c0c:	edd7 7a00 	vldr	s15, [r7]
 8005c10:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005c68 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8005c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	d801      	bhi.n	8005c22 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005c1e:	2308      	movs	r3, #8
 8005c20:	e00b      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005c22:	edd7 7a00 	vldr	s15, [r7]
 8005c26:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005c6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8005c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d801      	bhi.n	8005c38 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8005c34:	2309      	movs	r3, #9
 8005c36:	e000      	b.n	8005c3a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8005c38:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	3fcccccd 	.word	0x3fcccccd
 8005c54:	42500000 	.word	0x42500000
 8005c58:	42d00000 	.word	0x42d00000
 8005c5c:	43500000 	.word	0x43500000
 8005c60:	43d08000 	.word	0x43d08000
 8005c64:	44504000 	.word	0x44504000
 8005c68:	44d06000 	.word	0x44d06000
 8005c6c:	45505000 	.word	0x45505000

08005c70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005c7c:	edd7 7a00 	vldr	s15, [r7]
 8005c80:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	d801      	bhi.n	8005c92 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e058      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005c92:	edd7 7a00 	vldr	s15, [r7]
 8005c96:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca2:	d801      	bhi.n	8005ca8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e04d      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005ca8:	edd7 7a00 	vldr	s15, [r7]
 8005cac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005d6c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb8:	d801      	bhi.n	8005cbe <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e042      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cbe:	edd7 7a00 	vldr	s15, [r7]
 8005cc2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005d70 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8005cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	d801      	bhi.n	8005cd4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	e037      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cd4:	edd7 7a00 	vldr	s15, [r7]
 8005cd8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005d74 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8005cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	d801      	bhi.n	8005cea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8005ce6:	2305      	movs	r3, #5
 8005ce8:	e02c      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005cea:	edd7 7a00 	vldr	s15, [r7]
 8005cee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005d78 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8005cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	d801      	bhi.n	8005d00 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8005cfc:	2306      	movs	r3, #6
 8005cfe:	e021      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d00:	edd7 7a00 	vldr	s15, [r7]
 8005d04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005d7c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8005d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d10:	d801      	bhi.n	8005d16 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8005d12:	2307      	movs	r3, #7
 8005d14:	e016      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d16:	edd7 7a00 	vldr	s15, [r7]
 8005d1a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005d80 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d26:	d801      	bhi.n	8005d2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	e00b      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d2c:	edd7 7a00 	vldr	s15, [r7]
 8005d30:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005d84 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8005d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	d801      	bhi.n	8005d42 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005d3e:	2309      	movs	r3, #9
 8005d40:	e000      	b.n	8005d44 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005d42:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005d44:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	3320      	adds	r3, #32
 8005d4a:	7bfa      	ldrb	r2, [r7, #15]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fac4 	bl	80062dc <lsm6dso_gy_data_rate_set>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d5e:	e000      	b.n	8005d62 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	42500000 	.word	0x42500000
 8005d70:	42d00000 	.word	0x42d00000
 8005d74:	43500000 	.word	0x43500000
 8005d78:	43d08000 	.word	0x43d08000
 8005d7c:	44504000 	.word	0x44504000
 8005d80:	44d06000 	.word	0x44d06000
 8005d84:	45505000 	.word	0x45505000

08005d88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8005d94:	edd7 7a00 	vldr	s15, [r7]
 8005d98:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005da4:	d801      	bhi.n	8005daa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e058      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005daa:	edd7 7a00 	vldr	s15, [r7]
 8005dae:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dba:	d801      	bhi.n	8005dc0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e04d      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dc0:	edd7 7a00 	vldr	s15, [r7]
 8005dc4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005e70 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8005dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd0:	d801      	bhi.n	8005dd6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e042      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dd6:	edd7 7a00 	vldr	s15, [r7]
 8005dda:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005e74 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8005dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	d801      	bhi.n	8005dec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8005de8:	2304      	movs	r3, #4
 8005dea:	e037      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005dec:	edd7 7a00 	vldr	s15, [r7]
 8005df0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005e78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8005df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	d801      	bhi.n	8005e02 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8005dfe:	2305      	movs	r3, #5
 8005e00:	e02c      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e02:	edd7 7a00 	vldr	s15, [r7]
 8005e06:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005e7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8005e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	d801      	bhi.n	8005e18 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005e14:	2306      	movs	r3, #6
 8005e16:	e021      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e18:	edd7 7a00 	vldr	s15, [r7]
 8005e1c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005e80 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e28:	d801      	bhi.n	8005e2e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005e2a:	2307      	movs	r3, #7
 8005e2c:	e016      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e2e:	edd7 7a00 	vldr	s15, [r7]
 8005e32:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005e84 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	d801      	bhi.n	8005e44 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005e40:	2308      	movs	r3, #8
 8005e42:	e00b      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e44:	edd7 7a00 	vldr	s15, [r7]
 8005e48:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005e88 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e54:	d801      	bhi.n	8005e5a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005e56:	2309      	movs	r3, #9
 8005e58:	e000      	b.n	8005e5c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005e5a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	42500000 	.word	0x42500000
 8005e74:	42d00000 	.word	0x42d00000
 8005e78:	43500000 	.word	0x43500000
 8005e7c:	43d08000 	.word	0x43d08000
 8005e80:	44504000 	.word	0x44504000
 8005e84:	44d06000 	.word	0x44d06000
 8005e88:	45505000 	.word	0x45505000

08005e8c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	461a      	mov	r2, r3
 8005e98:	460b      	mov	r3, r1
 8005e9a:	72fb      	strb	r3, [r7, #11]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	695c      	ldr	r4, [r3, #20]
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	7b1b      	ldrb	r3, [r3, #12]
 8005eac:	b298      	uxth	r0, r3
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	b299      	uxth	r1, r3
 8005eb2:	893b      	ldrh	r3, [r7, #8]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	47a0      	blx	r4
 8005eb8:	4603      	mov	r3, r0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd90      	pop	{r4, r7, pc}

08005ec2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ec2:	b590      	push	{r4, r7, lr}
 8005ec4:	b087      	sub	sp, #28
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	460b      	mov	r3, r1
 8005ed0:	72fb      	strb	r3, [r7, #11]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	691c      	ldr	r4, [r3, #16]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	7b1b      	ldrb	r3, [r3, #12]
 8005ee2:	b298      	uxth	r0, r3
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	b299      	uxth	r1, r3
 8005ee8:	893b      	ldrh	r3, [r7, #8]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	47a0      	blx	r4
 8005eee:	4603      	mov	r3, r0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd90      	pop	{r4, r7, pc}

08005ef8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	461a      	mov	r2, r3
 8005f04:	460b      	mov	r3, r1
 8005f06:	72fb      	strb	r3, [r7, #11]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685c      	ldr	r4, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68d8      	ldr	r0, [r3, #12]
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	7af9      	ldrb	r1, [r7, #11]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	47a0      	blx	r4
 8005f1c:	6178      	str	r0, [r7, #20]

  return ret;
 8005f1e:	697b      	ldr	r3, [r7, #20]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd90      	pop	{r4, r7, pc}

08005f28 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	461a      	mov	r2, r3
 8005f34:	460b      	mov	r3, r1
 8005f36:	72fb      	strb	r3, [r7, #11]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681c      	ldr	r4, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68d8      	ldr	r0, [r3, #12]
 8005f44:	893b      	ldrh	r3, [r7, #8]
 8005f46:	7af9      	ldrb	r1, [r7, #11]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	47a0      	blx	r4
 8005f4c:	6178      	str	r0, [r7, #20]

  return ret;
 8005f4e:	697b      	ldr	r3, [r7, #20]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd90      	pop	{r4, r7, pc}

08005f58 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005f64:	f107 0208 	add.w	r2, r7, #8
 8005f68:	2301      	movs	r3, #1
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f7ff ffc3 	bl	8005ef8 <lsm6dso_read_reg>
 8005f72:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	7a3b      	ldrb	r3, [r7, #8]
 8005f84:	f362 0383 	bfi	r3, r2, #2, #2
 8005f88:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005f8a:	f107 0208 	add.w	r2, r7, #8
 8005f8e:	2301      	movs	r3, #1
 8005f90:	2110      	movs	r1, #16
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ffc8 	bl	8005f28 <lsm6dso_write_reg>
 8005f98:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005fae:	f107 0208 	add.w	r2, r7, #8
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	2110      	movs	r1, #16
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff9e 	bl	8005ef8 <lsm6dso_read_reg>
 8005fbc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8005fbe:	7a3b      	ldrb	r3, [r7, #8]
 8005fc0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d81a      	bhi.n	8006000 <lsm6dso_xl_full_scale_get+0x5c>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <lsm6dso_xl_full_scale_get+0x2c>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005fe9 	.word	0x08005fe9
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08005ff9 	.word	0x08005ff9
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
      break;
 8005fe6:	e00f      	b.n	8006008 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
      break;
 8005fee:	e00b      	b.n	8006008 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
      break;
 8005ff6:	e007      	b.n	8006008 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	701a      	strb	r2, [r3, #0]
      break;
 8005ffe:	e003      	b.n	8006008 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	701a      	strb	r2, [r3, #0]
      break;
 8006006:	bf00      	nop
  }

  return ret;
 8006008:	68fb      	ldr	r3, [r7, #12]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8006024:	f107 030c 	add.w	r3, r7, #12
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc28 	bl	8006880 <lsm6dso_fsm_enable_get>
 8006030:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 80c4 	bne.w	80061c2 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800603a:	7b3b      	ldrb	r3, [r7, #12]
 800603c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006040:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006042:	7b3b      	ldrb	r3, [r7, #12]
 8006044:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006048:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800604a:	4313      	orrs	r3, r2
 800604c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800604e:	7b3b      	ldrb	r3, [r7, #12]
 8006050:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006054:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006056:	4313      	orrs	r3, r2
 8006058:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800605a:	7b3b      	ldrb	r3, [r7, #12]
 800605c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006060:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006062:	4313      	orrs	r3, r2
 8006064:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006066:	7b3b      	ldrb	r3, [r7, #12]
 8006068:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800606c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800606e:	4313      	orrs	r3, r2
 8006070:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006072:	7b3b      	ldrb	r3, [r7, #12]
 8006074:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006078:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800607a:	4313      	orrs	r3, r2
 800607c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800607e:	7b3b      	ldrb	r3, [r7, #12]
 8006080:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006084:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006086:	4313      	orrs	r3, r2
 8006088:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800608a:	7b3b      	ldrb	r3, [r7, #12]
 800608c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006090:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006092:	4313      	orrs	r3, r2
 8006094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006096:	7b7b      	ldrb	r3, [r7, #13]
 8006098:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800609c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800609e:	4313      	orrs	r3, r2
 80060a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80060a2:	7b7b      	ldrb	r3, [r7, #13]
 80060a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80060a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80060aa:	4313      	orrs	r3, r2
 80060ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80060ae:	7b7b      	ldrb	r3, [r7, #13]
 80060b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80060b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80060b6:	4313      	orrs	r3, r2
 80060b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80060ba:	7b7b      	ldrb	r3, [r7, #13]
 80060bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80060c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80060c2:	4313      	orrs	r3, r2
 80060c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060c6:	7b7b      	ldrb	r3, [r7, #13]
 80060c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80060cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060d2:	7b7b      	ldrb	r3, [r7, #13]
 80060d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80060da:	4313      	orrs	r3, r2
 80060dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80060de:	7b7b      	ldrb	r3, [r7, #13]
 80060e0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80060e6:	4313      	orrs	r3, r2
 80060e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80060ea:	7b7b      	ldrb	r3, [r7, #13]
 80060ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d163      	bne.n	80061c2 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80060fa:	f107 030b 	add.w	r3, r7, #11
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fbdf 	bl	80068c4 <lsm6dso_fsm_data_rate_get>
 8006106:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d159      	bne.n	80061c2 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	2b03      	cmp	r3, #3
 8006112:	d853      	bhi.n	80061bc <lsm6dso_xl_data_rate_set+0x1a8>
 8006114:	a201      	add	r2, pc, #4	; (adr r2, 800611c <lsm6dso_xl_data_rate_set+0x108>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800612d 	.word	0x0800612d
 8006120:	0800613f 	.word	0x0800613f
 8006124:	0800615d 	.word	0x0800615d
 8006128:	08006187 	.word	0x08006187
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d102      	bne.n	8006138 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8006132:	2301      	movs	r3, #1
 8006134:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006136:	e045      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	75fb      	strb	r3, [r7, #23]
            break;
 800613c:	e042      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d102      	bne.n	800614a <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006144:	2302      	movs	r3, #2
 8006146:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006148:	e03c      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d102      	bne.n	8006156 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006150:	2302      	movs	r3, #2
 8006152:	75fb      	strb	r3, [r7, #23]
            break;
 8006154:	e036      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	75fb      	strb	r3, [r7, #23]
            break;
 800615a:	e033      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800615c:	78fb      	ldrb	r3, [r7, #3]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006162:	2303      	movs	r3, #3
 8006164:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006166:	e02d      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d102      	bne.n	8006174 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800616e:	2303      	movs	r3, #3
 8006170:	75fb      	strb	r3, [r7, #23]
            break;
 8006172:	e027      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d102      	bne.n	8006180 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800617a:	2303      	movs	r3, #3
 800617c:	75fb      	strb	r3, [r7, #23]
            break;
 800617e:	e021      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	75fb      	strb	r3, [r7, #23]
            break;
 8006184:	e01e      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800618c:	2304      	movs	r3, #4
 800618e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006190:	e018      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d102      	bne.n	800619e <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006198:	2304      	movs	r3, #4
 800619a:	75fb      	strb	r3, [r7, #23]
            break;
 800619c:	e012      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d102      	bne.n	80061aa <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80061a4:	2304      	movs	r3, #4
 80061a6:	75fb      	strb	r3, [r7, #23]
            break;
 80061a8:	e00c      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d102      	bne.n	80061b6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80061b0:	2304      	movs	r3, #4
 80061b2:	75fb      	strb	r3, [r7, #23]
            break;
 80061b4:	e006      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	75fb      	strb	r3, [r7, #23]
            break;
 80061ba:	e003      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80061bc:	78fb      	ldrb	r3, [r7, #3]
 80061be:	75fb      	strb	r3, [r7, #23]
            break;
 80061c0:	e000      	b.n	80061c4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80061c2:	bf00      	nop
    }
  }

  if (ret == 0)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80061ca:	f107 0208 	add.w	r2, r7, #8
 80061ce:	2301      	movs	r3, #1
 80061d0:	2110      	movs	r1, #16
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe90 	bl	8005ef8 <lsm6dso_read_reg>
 80061d8:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10f      	bne.n	8006200 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	7a3b      	ldrb	r3, [r7, #8]
 80061ea:	f362 1307 	bfi	r3, r2, #4, #4
 80061ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80061f0:	f107 0208 	add.w	r2, r7, #8
 80061f4:	2301      	movs	r3, #1
 80061f6:	2110      	movs	r1, #16
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fe95 	bl	8005f28 <lsm6dso_write_reg>
 80061fe:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006200:	693b      	ldr	r3, [r7, #16]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop

0800620c <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006218:	f107 0208 	add.w	r2, r7, #8
 800621c:	2301      	movs	r3, #1
 800621e:	2111      	movs	r1, #17
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fe69 	bl	8005ef8 <lsm6dso_read_reg>
 8006226:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10f      	bne.n	800624e <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b2da      	uxtb	r2, r3
 8006236:	7a3b      	ldrb	r3, [r7, #8]
 8006238:	f362 0343 	bfi	r3, r2, #1, #3
 800623c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800623e:	f107 0208 	add.w	r2, r7, #8
 8006242:	2301      	movs	r3, #1
 8006244:	2111      	movs	r1, #17
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff fe6e 	bl	8005f28 <lsm6dso_write_reg>
 800624c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800624e:	68fb      	ldr	r3, [r7, #12]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006262:	f107 0208 	add.w	r2, r7, #8
 8006266:	2301      	movs	r3, #1
 8006268:	2111      	movs	r1, #17
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fe44 	bl	8005ef8 <lsm6dso_read_reg>
 8006270:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8006272:	7a3b      	ldrb	r3, [r7, #8]
 8006274:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b06      	cmp	r3, #6
 800627c:	d824      	bhi.n	80062c8 <lsm6dso_gy_full_scale_get+0x70>
 800627e:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <lsm6dso_gy_full_scale_get+0x2c>)
 8006280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006284:	080062a1 	.word	0x080062a1
 8006288:	080062a9 	.word	0x080062a9
 800628c:	080062b1 	.word	0x080062b1
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062c9 	.word	0x080062c9
 800629c:	080062c1 	.word	0x080062c1
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
      break;
 80062a6:	e013      	b.n	80062d0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
      break;
 80062ae:	e00f      	b.n	80062d0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]
      break;
 80062b6:	e00b      	b.n	80062d0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2204      	movs	r2, #4
 80062bc:	701a      	strb	r2, [r3, #0]
      break;
 80062be:	e007      	b.n	80062d0 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2206      	movs	r2, #6
 80062c4:	701a      	strb	r2, [r3, #0]
      break;
 80062c6:	e003      	b.n	80062d0 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2200      	movs	r2, #0
 80062cc:	701a      	strb	r2, [r3, #0]
      break;
 80062ce:	bf00      	nop
  }

  return ret;
 80062d0:	68fb      	ldr	r3, [r7, #12]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80062ec:	f107 030c 	add.w	r3, r7, #12
 80062f0:	4619      	mov	r1, r3
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fac4 	bl	8006880 <lsm6dso_fsm_enable_get>
 80062f8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 80c4 	bne.w	800648a <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006302:	7b3b      	ldrb	r3, [r7, #12]
 8006304:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006308:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800630a:	7b3b      	ldrb	r3, [r7, #12]
 800630c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006310:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006312:	4313      	orrs	r3, r2
 8006314:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006316:	7b3b      	ldrb	r3, [r7, #12]
 8006318:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800631c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800631e:	4313      	orrs	r3, r2
 8006320:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006322:	7b3b      	ldrb	r3, [r7, #12]
 8006324:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006328:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800632a:	4313      	orrs	r3, r2
 800632c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800632e:	7b3b      	ldrb	r3, [r7, #12]
 8006330:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006334:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006336:	4313      	orrs	r3, r2
 8006338:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800633a:	7b3b      	ldrb	r3, [r7, #12]
 800633c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006340:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006342:	4313      	orrs	r3, r2
 8006344:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006346:	7b3b      	ldrb	r3, [r7, #12]
 8006348:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800634c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800634e:	4313      	orrs	r3, r2
 8006350:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006352:	7b3b      	ldrb	r3, [r7, #12]
 8006354:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006358:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800635a:	4313      	orrs	r3, r2
 800635c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800635e:	7b7b      	ldrb	r3, [r7, #13]
 8006360:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006364:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006366:	4313      	orrs	r3, r2
 8006368:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800636a:	7b7b      	ldrb	r3, [r7, #13]
 800636c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006370:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006372:	4313      	orrs	r3, r2
 8006374:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006376:	7b7b      	ldrb	r3, [r7, #13]
 8006378:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800637c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800637e:	4313      	orrs	r3, r2
 8006380:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006382:	7b7b      	ldrb	r3, [r7, #13]
 8006384:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006388:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800638a:	4313      	orrs	r3, r2
 800638c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800638e:	7b7b      	ldrb	r3, [r7, #13]
 8006390:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006394:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006396:	4313      	orrs	r3, r2
 8006398:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800639a:	7b7b      	ldrb	r3, [r7, #13]
 800639c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80063a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80063a2:	4313      	orrs	r3, r2
 80063a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80063a6:	7b7b      	ldrb	r3, [r7, #13]
 80063a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80063ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80063ba:	4313      	orrs	r3, r2
 80063bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d163      	bne.n	800648a <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80063c2:	f107 030b 	add.w	r3, r7, #11
 80063c6:	4619      	mov	r1, r3
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fa7b 	bl	80068c4 <lsm6dso_fsm_data_rate_get>
 80063ce:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d159      	bne.n	800648a <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d853      	bhi.n	8006484 <lsm6dso_gy_data_rate_set+0x1a8>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <lsm6dso_gy_data_rate_set+0x108>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	08006407 	.word	0x08006407
 80063ec:	08006425 	.word	0x08006425
 80063f0:	0800644f 	.word	0x0800644f
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80063fa:	2301      	movs	r3, #1
 80063fc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80063fe:	e045      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	75fb      	strb	r3, [r7, #23]
            break;
 8006404:	e042      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 800640c:	2302      	movs	r3, #2
 800640e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006410:	e03c      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d102      	bne.n	800641e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8006418:	2302      	movs	r3, #2
 800641a:	75fb      	strb	r3, [r7, #23]
            break;
 800641c:	e036      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	75fb      	strb	r3, [r7, #23]
            break;
 8006422:	e033      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800642a:	2303      	movs	r3, #3
 800642c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800642e:	e02d      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006436:	2303      	movs	r3, #3
 8006438:	75fb      	strb	r3, [r7, #23]
            break;
 800643a:	e027      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d102      	bne.n	8006448 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8006442:	2303      	movs	r3, #3
 8006444:	75fb      	strb	r3, [r7, #23]
            break;
 8006446:	e021      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	75fb      	strb	r3, [r7, #23]
            break;
 800644c:	e01e      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800644e:	78fb      	ldrb	r3, [r7, #3]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006454:	2304      	movs	r3, #4
 8006456:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006458:	e018      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d102      	bne.n	8006466 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006460:	2304      	movs	r3, #4
 8006462:	75fb      	strb	r3, [r7, #23]
            break;
 8006464:	e012      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d102      	bne.n	8006472 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800646c:	2304      	movs	r3, #4
 800646e:	75fb      	strb	r3, [r7, #23]
            break;
 8006470:	e00c      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8006472:	78fb      	ldrb	r3, [r7, #3]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d102      	bne.n	800647e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8006478:	2304      	movs	r3, #4
 800647a:	75fb      	strb	r3, [r7, #23]
            break;
 800647c:	e006      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	75fb      	strb	r3, [r7, #23]
            break;
 8006482:	e003      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	75fb      	strb	r3, [r7, #23]
            break;
 8006488:	e000      	b.n	800648c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800648a:	bf00      	nop
    }
  }

  if (ret == 0)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8006492:	f107 0208 	add.w	r2, r7, #8
 8006496:	2301      	movs	r3, #1
 8006498:	2111      	movs	r1, #17
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fd2c 	bl	8005ef8 <lsm6dso_read_reg>
 80064a0:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10f      	bne.n	80064c8 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	7a3b      	ldrb	r3, [r7, #8]
 80064b2:	f362 1307 	bfi	r3, r2, #4, #4
 80064b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80064b8:	f107 0208 	add.w	r2, r7, #8
 80064bc:	2301      	movs	r3, #1
 80064be:	2111      	movs	r1, #17
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fd31 	bl	8005f28 <lsm6dso_write_reg>
 80064c6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80064c8:	693b      	ldr	r3, [r7, #16]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop

080064d4 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80064de:	f107 0208 	add.w	r2, r7, #8
 80064e2:	2301      	movs	r3, #1
 80064e4:	2111      	movs	r1, #17
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fd06 	bl	8005ef8 <lsm6dso_read_reg>
 80064ec:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80064ee:	7a3b      	ldrb	r3, [r7, #8]
 80064f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b0a      	cmp	r3, #10
 80064f8:	d844      	bhi.n	8006584 <lsm6dso_gy_data_rate_get+0xb0>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <lsm6dso_gy_data_rate_get+0x2c>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	0800652d 	.word	0x0800652d
 8006504:	08006535 	.word	0x08006535
 8006508:	0800653d 	.word	0x0800653d
 800650c:	08006545 	.word	0x08006545
 8006510:	0800654d 	.word	0x0800654d
 8006514:	08006555 	.word	0x08006555
 8006518:	0800655d 	.word	0x0800655d
 800651c:	08006565 	.word	0x08006565
 8006520:	0800656d 	.word	0x0800656d
 8006524:	08006575 	.word	0x08006575
 8006528:	0800657d 	.word	0x0800657d
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
      break;
 8006532:	e02b      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2201      	movs	r2, #1
 8006538:	701a      	strb	r2, [r3, #0]
      break;
 800653a:	e027      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2202      	movs	r2, #2
 8006540:	701a      	strb	r2, [r3, #0]
      break;
 8006542:	e023      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	2203      	movs	r2, #3
 8006548:	701a      	strb	r2, [r3, #0]
      break;
 800654a:	e01f      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2204      	movs	r2, #4
 8006550:	701a      	strb	r2, [r3, #0]
      break;
 8006552:	e01b      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2205      	movs	r2, #5
 8006558:	701a      	strb	r2, [r3, #0]
      break;
 800655a:	e017      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2206      	movs	r2, #6
 8006560:	701a      	strb	r2, [r3, #0]
      break;
 8006562:	e013      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2207      	movs	r2, #7
 8006568:	701a      	strb	r2, [r3, #0]
      break;
 800656a:	e00f      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2208      	movs	r2, #8
 8006570:	701a      	strb	r2, [r3, #0]
      break;
 8006572:	e00b      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2209      	movs	r2, #9
 8006578:	701a      	strb	r2, [r3, #0]
      break;
 800657a:	e007      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	220a      	movs	r2, #10
 8006580:	701a      	strb	r2, [r3, #0]
      break;
 8006582:	e003      	b.n	800658c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]
      break;
 800658a:	bf00      	nop
  }

  return ret;
 800658c:	68fb      	ldr	r3, [r7, #12]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop

08006598 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80065a4:	f107 0208 	add.w	r2, r7, #8
 80065a8:	2301      	movs	r3, #1
 80065aa:	2112      	movs	r1, #18
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff fca3 	bl	8005ef8 <lsm6dso_read_reg>
 80065b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	7a3b      	ldrb	r3, [r7, #8]
 80065c4:	f362 1386 	bfi	r3, r2, #6, #1
 80065c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80065ca:	f107 0208 	add.w	r2, r7, #8
 80065ce:	2301      	movs	r3, #1
 80065d0:	2112      	movs	r1, #18
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7ff fca8 	bl	8005f28 <lsm6dso_write_reg>
 80065d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065da:	68fb      	ldr	r3, [r7, #12]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80065ee:	f107 020c 	add.w	r2, r7, #12
 80065f2:	2306      	movs	r3, #6
 80065f4:	2122      	movs	r1, #34	; 0x22
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff fc7e 	bl	8005ef8 <lsm6dso_read_reg>
 80065fc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80065fe:	7b7b      	ldrb	r3, [r7, #13]
 8006600:	b21a      	sxth	r2, r3
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800660c:	b29b      	uxth	r3, r3
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b29a      	uxth	r2, r3
 8006612:	7b3b      	ldrb	r3, [r7, #12]
 8006614:	b29b      	uxth	r3, r3
 8006616:	4413      	add	r3, r2
 8006618:	b29b      	uxth	r3, r3
 800661a:	b21a      	sxth	r2, r3
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	3302      	adds	r3, #2
 8006626:	b212      	sxth	r2, r2
 8006628:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	3302      	adds	r3, #2
 800662e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006632:	b29b      	uxth	r3, r3
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	b29a      	uxth	r2, r3
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	b29b      	uxth	r3, r3
 800663c:	4413      	add	r3, r2
 800663e:	b29a      	uxth	r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	3302      	adds	r3, #2
 8006644:	b212      	sxth	r2, r2
 8006646:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006648:	7c7a      	ldrb	r2, [r7, #17]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	3304      	adds	r3, #4
 800664e:	b212      	sxth	r2, r2
 8006650:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	3304      	adds	r3, #4
 8006656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800665a:	b29b      	uxth	r3, r3
 800665c:	021b      	lsls	r3, r3, #8
 800665e:	b29a      	uxth	r2, r3
 8006660:	7c3b      	ldrb	r3, [r7, #16]
 8006662:	b29b      	uxth	r3, r3
 8006664:	4413      	add	r3, r2
 8006666:	b29a      	uxth	r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	3304      	adds	r3, #4
 800666c:	b212      	sxth	r2, r2
 800666e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006670:	697b      	ldr	r3, [r7, #20]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8006684:	f107 020c 	add.w	r2, r7, #12
 8006688:	2306      	movs	r3, #6
 800668a:	2128      	movs	r1, #40	; 0x28
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fc33 	bl	8005ef8 <lsm6dso_read_reg>
 8006692:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006694:	7b7b      	ldrb	r3, [r7, #13]
 8006696:	b21a      	sxth	r2, r3
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	021b      	lsls	r3, r3, #8
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	7b3b      	ldrb	r3, [r7, #12]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	b21a      	sxth	r2, r3
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80066b6:	7bfa      	ldrb	r2, [r7, #15]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	3302      	adds	r3, #2
 80066bc:	b212      	sxth	r2, r2
 80066be:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	3302      	adds	r3, #2
 80066c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	021b      	lsls	r3, r3, #8
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	3302      	adds	r3, #2
 80066da:	b212      	sxth	r2, r2
 80066dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80066de:	7c7a      	ldrb	r2, [r7, #17]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	3304      	adds	r3, #4
 80066e4:	b212      	sxth	r2, r2
 80066e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	3304      	adds	r3, #4
 80066ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	7c3b      	ldrb	r3, [r7, #16]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	4413      	add	r3, r2
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	3304      	adds	r3, #4
 8006702:	b212      	sxth	r2, r2
 8006704:	801a      	strh	r2, [r3, #0]

  return ret;
 8006706:	697b      	ldr	r3, [r7, #20]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 800671c:	f107 0208 	add.w	r2, r7, #8
 8006720:	2301      	movs	r3, #1
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7ff fbe7 	bl	8005ef8 <lsm6dso_read_reg>
 800672a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10f      	bne.n	8006752 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	b2da      	uxtb	r2, r3
 800673a:	7a3b      	ldrb	r3, [r7, #8]
 800673c:	f362 1387 	bfi	r3, r2, #6, #2
 8006740:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006742:	f107 0208 	add.w	r2, r7, #8
 8006746:	2301      	movs	r3, #1
 8006748:	2101      	movs	r1, #1
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fbec 	bl	8005f28 <lsm6dso_write_reg>
 8006750:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006752:	68fb      	ldr	r3, [r7, #12]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006768:	f107 0208 	add.w	r2, r7, #8
 800676c:	2301      	movs	r3, #1
 800676e:	2112      	movs	r1, #18
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fbc1 	bl	8005ef8 <lsm6dso_read_reg>
 8006776:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10f      	bne.n	800679e <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	7a3b      	ldrb	r3, [r7, #8]
 8006788:	f362 0382 	bfi	r3, r2, #2, #1
 800678c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800678e:	f107 0208 	add.w	r2, r7, #8
 8006792:	2301      	movs	r3, #1
 8006794:	2112      	movs	r1, #18
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fbc6 	bl	8005f28 <lsm6dso_write_reg>
 800679c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80067b4:	f107 020c 	add.w	r2, r7, #12
 80067b8:	2301      	movs	r3, #1
 80067ba:	2118      	movs	r1, #24
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fb9b 	bl	8005ef8 <lsm6dso_read_reg>
 80067c2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d111      	bne.n	80067ee <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	09db      	lsrs	r3, r3, #7
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	7b3b      	ldrb	r3, [r7, #12]
 80067d8:	f362 0341 	bfi	r3, r2, #1, #1
 80067dc:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80067de:	f107 020c 	add.w	r2, r7, #12
 80067e2:	2301      	movs	r3, #1
 80067e4:	2118      	movs	r1, #24
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fb9e 	bl	8005f28 <lsm6dso_write_reg>
 80067ec:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80067f4:	f107 0210 	add.w	r2, r7, #16
 80067f8:	2301      	movs	r3, #1
 80067fa:	2162      	movs	r1, #98	; 0x62
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fb7b 	bl	8005ef8 <lsm6dso_read_reg>
 8006802:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10f      	bne.n	800682a <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	b2da      	uxtb	r2, r3
 8006812:	7c3b      	ldrb	r3, [r7, #16]
 8006814:	f362 03c4 	bfi	r3, r2, #3, #2
 8006818:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800681a:	f107 0210 	add.w	r2, r7, #16
 800681e:	2301      	movs	r3, #1
 8006820:	2162      	movs	r1, #98	; 0x62
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fb80 	bl	8005f28 <lsm6dso_write_reg>
 8006828:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800682a:	697b      	ldr	r3, [r7, #20]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	460b      	mov	r3, r1
 800683e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006840:	f107 0208 	add.w	r2, r7, #8
 8006844:	2301      	movs	r3, #1
 8006846:	210a      	movs	r1, #10
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff fb55 	bl	8005ef8 <lsm6dso_read_reg>
 800684e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	b2da      	uxtb	r2, r3
 800685e:	7a3b      	ldrb	r3, [r7, #8]
 8006860:	f362 0302 	bfi	r3, r2, #0, #3
 8006864:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006866:	f107 0208 	add.w	r2, r7, #8
 800686a:	2301      	movs	r3, #1
 800686c:	210a      	movs	r1, #10
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff fb5a 	bl	8005f28 <lsm6dso_write_reg>
 8006874:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800688a:	2102      	movs	r1, #2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff ff3f 	bl	8006710 <lsm6dso_mem_bank_set>
 8006892:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 800689a:	2302      	movs	r3, #2
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	2146      	movs	r1, #70	; 0x46
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fb29 	bl	8005ef8 <lsm6dso_read_reg>
 80068a6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d104      	bne.n	80068b8 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80068ae:	2100      	movs	r1, #0
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ff2d 	bl	8006710 <lsm6dso_mem_bank_set>
 80068b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80068ce:	2102      	movs	r1, #2
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ff1d 	bl	8006710 <lsm6dso_mem_bank_set>
 80068d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d107      	bne.n	80068ee <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80068de:	f107 0208 	add.w	r2, r7, #8
 80068e2:	2301      	movs	r3, #1
 80068e4:	215f      	movs	r1, #95	; 0x5f
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fb06 	bl	8005ef8 <lsm6dso_read_reg>
 80068ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d12a      	bne.n	800694a <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 80068f4:	7a3b      	ldrb	r3, [r7, #8]
 80068f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d81b      	bhi.n	8006938 <lsm6dso_fsm_data_rate_get+0x74>
 8006900:	a201      	add	r2, pc, #4	; (adr r2, 8006908 <lsm6dso_fsm_data_rate_get+0x44>)
 8006902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006906:	bf00      	nop
 8006908:	08006919 	.word	0x08006919
 800690c:	08006921 	.word	0x08006921
 8006910:	08006929 	.word	0x08006929
 8006914:	08006931 	.word	0x08006931
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
        break;
 800691e:	e00f      	b.n	8006940 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	701a      	strb	r2, [r3, #0]
        break;
 8006926:	e00b      	b.n	8006940 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2202      	movs	r2, #2
 800692c:	701a      	strb	r2, [r3, #0]
        break;
 800692e:	e007      	b.n	8006940 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2203      	movs	r2, #3
 8006934:	701a      	strb	r2, [r3, #0]
        break;
 8006936:	e003      	b.n	8006940 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
        break;
 800693e:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fee4 	bl	8006710 <lsm6dso_mem_bank_set>
 8006948:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800694a:	68fb      	ldr	r3, [r7, #12]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800695e:	2003      	movs	r0, #3
 8006960:	f000 f960 	bl	8006c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006964:	200f      	movs	r0, #15
 8006966:	f000 f80d 	bl	8006984 <HAL_InitTick>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	71fb      	strb	r3, [r7, #7]
 8006974:	e001      	b.n	800697a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006976:	f7fd ffb3 	bl	80048e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800697a:	79fb      	ldrb	r3, [r7, #7]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006990:	4b17      	ldr	r3, [pc, #92]	; (80069f0 <HAL_InitTick+0x6c>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d023      	beq.n	80069e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <HAL_InitTick+0x70>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <HAL_InitTick+0x6c>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	4619      	mov	r1, r3
 80069a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f96d 	bl	8006c8e <HAL_SYSTICK_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10f      	bne.n	80069da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d809      	bhi.n	80069d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069c0:	2200      	movs	r2, #0
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c8:	f000 f937 	bl	8006c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80069cc:	4a0a      	ldr	r2, [pc, #40]	; (80069f8 <HAL_InitTick+0x74>)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e007      	b.n	80069e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	e004      	b.n	80069e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	73fb      	strb	r3, [r7, #15]
 80069de:	e001      	b.n	80069e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000018 	.word	0x20000018
 80069f4:	20000010 	.word	0x20000010
 80069f8:	20000014 	.word	0x20000014

080069fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <HAL_IncTick+0x20>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <HAL_IncTick+0x24>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <HAL_IncTick+0x24>)
 8006a0e:	6013      	str	r3, [r2, #0]
}
 8006a10:	bf00      	nop
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	20000018 	.word	0x20000018
 8006a20:	20000f8c 	.word	0x20000f8c

08006a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  return uwTick;
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_GetTick+0x14>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	20000f8c 	.word	0x20000f8c

08006a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a44:	f7ff ffee 	bl	8006a24 <HAL_GetTick>
 8006a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a54:	d005      	beq.n	8006a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <HAL_Delay+0x44>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a62:	bf00      	nop
 8006a64:	f7ff ffde 	bl	8006a24 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d8f7      	bhi.n	8006a64 <HAL_Delay+0x28>
  {
  }
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20000018 	.word	0x20000018

08006a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a94:	4b0c      	ldr	r3, [pc, #48]	; (8006ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ab6:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	60d3      	str	r3, [r2, #12]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	e000ed00 	.word	0xe000ed00

08006acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ad0:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	f003 0307 	and.w	r3, r3, #7
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	e000ed00 	.word	0xe000ed00

08006ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	db0b      	blt.n	8006b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	f003 021f 	and.w	r2, r3, #31
 8006b00:	4907      	ldr	r1, [pc, #28]	; (8006b20 <__NVIC_EnableIRQ+0x38>)
 8006b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	2001      	movs	r0, #1
 8006b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e100 	.word	0xe000e100

08006b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db0a      	blt.n	8006b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	490c      	ldr	r1, [pc, #48]	; (8006b70 <__NVIC_SetPriority+0x4c>)
 8006b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b42:	0112      	lsls	r2, r2, #4
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	440b      	add	r3, r1
 8006b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b4c:	e00a      	b.n	8006b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	4908      	ldr	r1, [pc, #32]	; (8006b74 <__NVIC_SetPriority+0x50>)
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	3b04      	subs	r3, #4
 8006b5c:	0112      	lsls	r2, r2, #4
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	440b      	add	r3, r1
 8006b62:	761a      	strb	r2, [r3, #24]
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	e000e100 	.word	0xe000e100
 8006b74:	e000ed00 	.word	0xe000ed00

08006b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f1c3 0307 	rsb	r3, r3, #7
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf28      	it	cs
 8006b96:	2304      	movcs	r3, #4
 8006b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d902      	bls.n	8006ba8 <NVIC_EncodePriority+0x30>
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	e000      	b.n	8006baa <NVIC_EncodePriority+0x32>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43da      	mvns	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	401a      	ands	r2, r3
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bca:	43d9      	mvns	r1, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd0:	4313      	orrs	r3, r2
         );
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3724      	adds	r7, #36	; 0x24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bf0:	d301      	bcc.n	8006bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e00f      	b.n	8006c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <SysTick_Config+0x40>)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bfe:	210f      	movs	r1, #15
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c04:	f7ff ff8e 	bl	8006b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c08:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <SysTick_Config+0x40>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SysTick_Config+0x40>)
 8006c10:	2207      	movs	r2, #7
 8006c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	e000e010 	.word	0xe000e010

08006c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff ff29 	bl	8006a84 <__NVIC_SetPriorityGrouping>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	4603      	mov	r3, r0
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c4c:	f7ff ff3e 	bl	8006acc <__NVIC_GetPriorityGrouping>
 8006c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	6978      	ldr	r0, [r7, #20]
 8006c58:	f7ff ff8e 	bl	8006b78 <NVIC_EncodePriority>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ff5d 	bl	8006b24 <__NVIC_SetPriority>
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	4603      	mov	r3, r0
 8006c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff ff31 	bl	8006ae8 <__NVIC_EnableIRQ>
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b082      	sub	sp, #8
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff ffa2 	bl	8006be0 <SysTick_Config>
 8006c9c:	4603      	mov	r3, r0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e08d      	b.n	8006dd6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b47      	ldr	r3, [pc, #284]	; (8006de0 <HAL_DMA_Init+0x138>)
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d80f      	bhi.n	8006ce6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b45      	ldr	r3, [pc, #276]	; (8006de4 <HAL_DMA_Init+0x13c>)
 8006cce:	4413      	add	r3, r2
 8006cd0:	4a45      	ldr	r2, [pc, #276]	; (8006de8 <HAL_DMA_Init+0x140>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	091b      	lsrs	r3, r3, #4
 8006cd8:	009a      	lsls	r2, r3, #2
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a42      	ldr	r2, [pc, #264]	; (8006dec <HAL_DMA_Init+0x144>)
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8006ce4:	e00e      	b.n	8006d04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	4b40      	ldr	r3, [pc, #256]	; (8006df0 <HAL_DMA_Init+0x148>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	4a3d      	ldr	r2, [pc, #244]	; (8006de8 <HAL_DMA_Init+0x140>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	091b      	lsrs	r3, r3, #4
 8006cf8:	009a      	lsls	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a3c      	ldr	r2, [pc, #240]	; (8006df4 <HAL_DMA_Init+0x14c>)
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa72 	bl	8007240 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d64:	d102      	bne.n	8006d6c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006d80:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d010      	beq.n	8006dac <HAL_DMA_Init+0x104>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d80c      	bhi.n	8006dac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa92 	bl	80072bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	e008      	b.n	8006dbe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40020407 	.word	0x40020407
 8006de4:	bffdfff8 	.word	0xbffdfff8
 8006de8:	cccccccd 	.word	0xcccccccd
 8006dec:	40020000 	.word	0x40020000
 8006df0:	bffdfbf8 	.word	0xbffdfbf8
 8006df4:	40020400 	.word	0x40020400

08006df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_DMA_Start_IT+0x20>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e066      	b.n	8006ee6 <HAL_DMA_Start_IT+0xee>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d155      	bne.n	8006ed8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0201 	bic.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f9b6 	bl	80071c2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 020e 	orr.w	r2, r2, #14
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e00f      	b.n	8006e90 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0204 	bic.w	r2, r2, #4
 8006e7e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 020a 	orr.w	r2, r2, #10
 8006e8e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d007      	beq.n	8006eae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eac:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0201 	orr.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	e005      	b.n	8006ee4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d008      	beq.n	8006f18 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e040      	b.n	8006f9a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 020e 	bic.w	r2, r2, #14
 8006f26:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f36:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f4c:	f003 021c 	and.w	r2, r3, #28
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	2101      	movs	r1, #1
 8006f56:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006f64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006f86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d005      	beq.n	8006fca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2204      	movs	r2, #4
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	e047      	b.n	800705a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 020e 	bic.w	r2, r2, #14
 8006fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ff8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	f003 021c 	and.w	r2, r3, #28
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2101      	movs	r1, #1
 8007008:	fa01 f202 	lsl.w	r2, r1, r2
 800700c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007016:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800702e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007038:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	4798      	blx	r3
    }
  }
  return status;
 800705a:	7bfb      	ldrb	r3, [r7, #15]
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007080:	f003 031c 	and.w	r3, r3, #28
 8007084:	2204      	movs	r2, #4
 8007086:	409a      	lsls	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d026      	beq.n	80070de <HAL_DMA_IRQHandler+0x7a>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d021      	beq.n	80070de <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d107      	bne.n	80070b8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0204 	bic.w	r2, r2, #4
 80070b6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070bc:	f003 021c 	and.w	r2, r3, #28
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c4:	2104      	movs	r1, #4
 80070c6:	fa01 f202 	lsl.w	r2, r1, r2
 80070ca:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d071      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80070dc:	e06c      	b.n	80071b8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e2:	f003 031c 	and.w	r3, r3, #28
 80070e6:	2202      	movs	r2, #2
 80070e8:	409a      	lsls	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d02e      	beq.n	8007150 <HAL_DMA_IRQHandler+0xec>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f003 0302 	and.w	r3, r3, #2
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d029      	beq.n	8007150 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0320 	and.w	r3, r3, #32
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 020a 	bic.w	r2, r2, #10
 8007118:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007126:	f003 021c 	and.w	r2, r3, #28
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712e:	2102      	movs	r1, #2
 8007130:	fa01 f202 	lsl.w	r2, r1, r2
 8007134:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d038      	beq.n	80071b8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800714e:	e033      	b.n	80071b8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007154:	f003 031c 	and.w	r3, r3, #28
 8007158:	2208      	movs	r2, #8
 800715a:	409a      	lsls	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02a      	beq.n	80071ba <HAL_DMA_IRQHandler+0x156>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d025      	beq.n	80071ba <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 020e 	bic.w	r2, r2, #14
 800717c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	f003 021c 	and.w	r2, r3, #28
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	2101      	movs	r1, #1
 800718c:	fa01 f202 	lsl.w	r2, r1, r2
 8007190:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
}
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80071d8:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80071ea:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f0:	f003 021c 	and.w	r2, r3, #28
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	2101      	movs	r1, #1
 80071fa:	fa01 f202 	lsl.w	r2, r1, r2
 80071fe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d108      	bne.n	8007222 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007220:	e007      	b.n	8007232 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	60da      	str	r2, [r3, #12]
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	461a      	mov	r2, r3
 800724e:	4b17      	ldr	r3, [pc, #92]	; (80072ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d80a      	bhi.n	800726a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007258:	089b      	lsrs	r3, r3, #2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007260:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	6493      	str	r3, [r2, #72]	; 0x48
 8007268:	e007      	b.n	800727a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	009a      	lsls	r2, r3, #2
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007274:	4413      	add	r3, r2
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3b08      	subs	r3, #8
 8007282:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007284:	fba2 2303 	umull	r2, r3, r2, r3
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007290:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 031f 	and.w	r3, r3, #31
 8007298:	2201      	movs	r2, #1
 800729a:	409a      	lsls	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	40020407 	.word	0x40020407
 80072b0:	4002081c 	.word	0x4002081c
 80072b4:	cccccccd 	.word	0xcccccccd
 80072b8:	40020880 	.word	0x40020880

080072bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a08      	ldr	r2, [pc, #32]	; (8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80072de:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	2201      	movs	r2, #1
 80072ea:	409a      	lsls	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	1000823f 	.word	0x1000823f
 8007300:	40020940 	.word	0x40020940

08007304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007312:	e166      	b.n	80075e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	2101      	movs	r1, #1
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	4013      	ands	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8158 	beq.w	80075dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d005      	beq.n	8007344 <HAL_GPIO_Init+0x40>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d130      	bne.n	80073a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	005b      	lsls	r3, r3, #1
 800734e:	2203      	movs	r2, #3
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800737a:	2201      	movs	r2, #1
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	fa02 f303 	lsl.w	r3, r2, r3
 8007382:	43db      	mvns	r3, r3
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4013      	ands	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	091b      	lsrs	r3, r3, #4
 8007390:	f003 0201 	and.w	r2, r3, #1
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	fa02 f303 	lsl.w	r3, r2, r3
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d017      	beq.n	80073e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	2203      	movs	r2, #3
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	43db      	mvns	r3, r3
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4013      	ands	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	693a      	ldr	r2, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d123      	bne.n	8007436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	08da      	lsrs	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3208      	adds	r2, #8
 80073f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f003 0307 	and.w	r3, r3, #7
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	220f      	movs	r2, #15
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	693a      	ldr	r2, [r7, #16]
 800740e:	4013      	ands	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	fa02 f303 	lsl.w	r3, r2, r3
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	4313      	orrs	r3, r2
 8007426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	08da      	lsrs	r2, r3, #3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3208      	adds	r2, #8
 8007430:	6939      	ldr	r1, [r7, #16]
 8007432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	005b      	lsls	r3, r3, #1
 8007440:	2203      	movs	r2, #3
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4013      	ands	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f003 0203 	and.w	r2, r3, #3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80b2 	beq.w	80075dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007478:	4b61      	ldr	r3, [pc, #388]	; (8007600 <HAL_GPIO_Init+0x2fc>)
 800747a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800747c:	4a60      	ldr	r2, [pc, #384]	; (8007600 <HAL_GPIO_Init+0x2fc>)
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	6613      	str	r3, [r2, #96]	; 0x60
 8007484:	4b5e      	ldr	r3, [pc, #376]	; (8007600 <HAL_GPIO_Init+0x2fc>)
 8007486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	60bb      	str	r3, [r7, #8]
 800748e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007490:	4a5c      	ldr	r2, [pc, #368]	; (8007604 <HAL_GPIO_Init+0x300>)
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	089b      	lsrs	r3, r3, #2
 8007496:	3302      	adds	r3, #2
 8007498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	220f      	movs	r2, #15
 80074a8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ac:	43db      	mvns	r3, r3
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	4013      	ands	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074ba:	d02b      	beq.n	8007514 <HAL_GPIO_Init+0x210>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a52      	ldr	r2, [pc, #328]	; (8007608 <HAL_GPIO_Init+0x304>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d025      	beq.n	8007510 <HAL_GPIO_Init+0x20c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a51      	ldr	r2, [pc, #324]	; (800760c <HAL_GPIO_Init+0x308>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d01f      	beq.n	800750c <HAL_GPIO_Init+0x208>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a50      	ldr	r2, [pc, #320]	; (8007610 <HAL_GPIO_Init+0x30c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d019      	beq.n	8007508 <HAL_GPIO_Init+0x204>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a4f      	ldr	r2, [pc, #316]	; (8007614 <HAL_GPIO_Init+0x310>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d013      	beq.n	8007504 <HAL_GPIO_Init+0x200>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a4e      	ldr	r2, [pc, #312]	; (8007618 <HAL_GPIO_Init+0x314>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00d      	beq.n	8007500 <HAL_GPIO_Init+0x1fc>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a4d      	ldr	r2, [pc, #308]	; (800761c <HAL_GPIO_Init+0x318>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d007      	beq.n	80074fc <HAL_GPIO_Init+0x1f8>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a4c      	ldr	r2, [pc, #304]	; (8007620 <HAL_GPIO_Init+0x31c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d101      	bne.n	80074f8 <HAL_GPIO_Init+0x1f4>
 80074f4:	2307      	movs	r3, #7
 80074f6:	e00e      	b.n	8007516 <HAL_GPIO_Init+0x212>
 80074f8:	2308      	movs	r3, #8
 80074fa:	e00c      	b.n	8007516 <HAL_GPIO_Init+0x212>
 80074fc:	2306      	movs	r3, #6
 80074fe:	e00a      	b.n	8007516 <HAL_GPIO_Init+0x212>
 8007500:	2305      	movs	r3, #5
 8007502:	e008      	b.n	8007516 <HAL_GPIO_Init+0x212>
 8007504:	2304      	movs	r3, #4
 8007506:	e006      	b.n	8007516 <HAL_GPIO_Init+0x212>
 8007508:	2303      	movs	r3, #3
 800750a:	e004      	b.n	8007516 <HAL_GPIO_Init+0x212>
 800750c:	2302      	movs	r3, #2
 800750e:	e002      	b.n	8007516 <HAL_GPIO_Init+0x212>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <HAL_GPIO_Init+0x212>
 8007514:	2300      	movs	r3, #0
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	f002 0203 	and.w	r2, r2, #3
 800751c:	0092      	lsls	r2, r2, #2
 800751e:	4093      	lsls	r3, r2
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007526:	4937      	ldr	r1, [pc, #220]	; (8007604 <HAL_GPIO_Init+0x300>)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	089b      	lsrs	r3, r3, #2
 800752c:	3302      	adds	r3, #2
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007534:	4b3b      	ldr	r3, [pc, #236]	; (8007624 <HAL_GPIO_Init+0x320>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	43db      	mvns	r3, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4013      	ands	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007558:	4a32      	ldr	r2, [pc, #200]	; (8007624 <HAL_GPIO_Init+0x320>)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800755e:	4b31      	ldr	r3, [pc, #196]	; (8007624 <HAL_GPIO_Init+0x320>)
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	43db      	mvns	r3, r3
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4013      	ands	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007582:	4a28      	ldr	r2, [pc, #160]	; (8007624 <HAL_GPIO_Init+0x320>)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <HAL_GPIO_Init+0x320>)
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	43db      	mvns	r3, r3
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4013      	ands	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80075ac:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <HAL_GPIO_Init+0x320>)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80075b2:	4b1c      	ldr	r3, [pc, #112]	; (8007624 <HAL_GPIO_Init+0x320>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4013      	ands	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80075d6:	4a13      	ldr	r2, [pc, #76]	; (8007624 <HAL_GPIO_Init+0x320>)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3301      	adds	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	fa22 f303 	lsr.w	r3, r2, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f47f ae91 	bne.w	8007314 <HAL_GPIO_Init+0x10>
  }
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	40021000 	.word	0x40021000
 8007604:	40010000 	.word	0x40010000
 8007608:	48000400 	.word	0x48000400
 800760c:	48000800 	.word	0x48000800
 8007610:	48000c00 	.word	0x48000c00
 8007614:	48001000 	.word	0x48001000
 8007618:	48001400 	.word	0x48001400
 800761c:	48001800 	.word	0x48001800
 8007620:	48001c00 	.word	0x48001c00
 8007624:	40010400 	.word	0x40010400

08007628 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007636:	e0c9      	b.n	80077cc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007638:	2201      	movs	r2, #1
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	fa02 f303 	lsl.w	r3, r2, r3
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	4013      	ands	r3, r2
 8007644:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80bc 	beq.w	80077c6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800764e:	4a66      	ldr	r2, [pc, #408]	; (80077e8 <HAL_GPIO_DeInit+0x1c0>)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	089b      	lsrs	r3, r3, #2
 8007654:	3302      	adds	r3, #2
 8007656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	220f      	movs	r2, #15
 8007666:	fa02 f303 	lsl.w	r3, r2, r3
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007676:	d02b      	beq.n	80076d0 <HAL_GPIO_DeInit+0xa8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a5c      	ldr	r2, [pc, #368]	; (80077ec <HAL_GPIO_DeInit+0x1c4>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d025      	beq.n	80076cc <HAL_GPIO_DeInit+0xa4>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a5b      	ldr	r2, [pc, #364]	; (80077f0 <HAL_GPIO_DeInit+0x1c8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d01f      	beq.n	80076c8 <HAL_GPIO_DeInit+0xa0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a5a      	ldr	r2, [pc, #360]	; (80077f4 <HAL_GPIO_DeInit+0x1cc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d019      	beq.n	80076c4 <HAL_GPIO_DeInit+0x9c>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a59      	ldr	r2, [pc, #356]	; (80077f8 <HAL_GPIO_DeInit+0x1d0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d013      	beq.n	80076c0 <HAL_GPIO_DeInit+0x98>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a58      	ldr	r2, [pc, #352]	; (80077fc <HAL_GPIO_DeInit+0x1d4>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00d      	beq.n	80076bc <HAL_GPIO_DeInit+0x94>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a57      	ldr	r2, [pc, #348]	; (8007800 <HAL_GPIO_DeInit+0x1d8>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <HAL_GPIO_DeInit+0x90>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a56      	ldr	r2, [pc, #344]	; (8007804 <HAL_GPIO_DeInit+0x1dc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d101      	bne.n	80076b4 <HAL_GPIO_DeInit+0x8c>
 80076b0:	2307      	movs	r3, #7
 80076b2:	e00e      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076b4:	2308      	movs	r3, #8
 80076b6:	e00c      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076b8:	2306      	movs	r3, #6
 80076ba:	e00a      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076bc:	2305      	movs	r3, #5
 80076be:	e008      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076c0:	2304      	movs	r3, #4
 80076c2:	e006      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076c4:	2303      	movs	r3, #3
 80076c6:	e004      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e002      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <HAL_GPIO_DeInit+0xaa>
 80076d0:	2300      	movs	r3, #0
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	f002 0203 	and.w	r2, r2, #3
 80076d8:	0092      	lsls	r2, r2, #2
 80076da:	4093      	lsls	r3, r2
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d132      	bne.n	8007748 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80076e2:	4b49      	ldr	r3, [pc, #292]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	43db      	mvns	r3, r3
 80076ea:	4947      	ldr	r1, [pc, #284]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 80076ec:	4013      	ands	r3, r2
 80076ee:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80076f0:	4b45      	ldr	r3, [pc, #276]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	4943      	ldr	r1, [pc, #268]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80076fe:	4b42      	ldr	r3, [pc, #264]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	43db      	mvns	r3, r3
 8007706:	4940      	ldr	r1, [pc, #256]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 8007708:	4013      	ands	r3, r2
 800770a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800770c:	4b3e      	ldr	r3, [pc, #248]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	43db      	mvns	r3, r3
 8007714:	493c      	ldr	r1, [pc, #240]	; (8007808 <HAL_GPIO_DeInit+0x1e0>)
 8007716:	4013      	ands	r3, r2
 8007718:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	220f      	movs	r2, #15
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800772a:	4a2f      	ldr	r2, [pc, #188]	; (80077e8 <HAL_GPIO_DeInit+0x1c0>)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	089b      	lsrs	r3, r3, #2
 8007730:	3302      	adds	r3, #2
 8007732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	43da      	mvns	r2, r3
 800773a:	482b      	ldr	r0, [pc, #172]	; (80077e8 <HAL_GPIO_DeInit+0x1c0>)
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	089b      	lsrs	r3, r3, #2
 8007740:	400a      	ands	r2, r1
 8007742:	3302      	adds	r3, #2
 8007744:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	2103      	movs	r1, #3
 8007752:	fa01 f303 	lsl.w	r3, r1, r3
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	08da      	lsrs	r2, r3, #3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3208      	adds	r2, #8
 8007764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	220f      	movs	r2, #15
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43db      	mvns	r3, r3
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	08d2      	lsrs	r2, r2, #3
 800777c:	4019      	ands	r1, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3208      	adds	r2, #8
 8007782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	2103      	movs	r1, #3
 8007790:	fa01 f303 	lsl.w	r3, r1, r3
 8007794:	43db      	mvns	r3, r3
 8007796:	401a      	ands	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	2101      	movs	r1, #1
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	fa01 f303 	lsl.w	r3, r1, r3
 80077a8:	43db      	mvns	r3, r3
 80077aa:	401a      	ands	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	2103      	movs	r1, #3
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	43db      	mvns	r3, r3
 80077c0:	401a      	ands	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	3301      	adds	r3, #1
 80077ca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	fa22 f303 	lsr.w	r3, r2, r3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f47f af2f 	bne.w	8007638 <HAL_GPIO_DeInit+0x10>
  }
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	371c      	adds	r7, #28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr
 80077e8:	40010000 	.word	0x40010000
 80077ec:	48000400 	.word	0x48000400
 80077f0:	48000800 	.word	0x48000800
 80077f4:	48000c00 	.word	0x48000c00
 80077f8:	48001000 	.word	0x48001000
 80077fc:	48001400 	.word	0x48001400
 8007800:	48001800 	.word	0x48001800
 8007804:	48001c00 	.word	0x48001c00
 8007808:	40010400 	.word	0x40010400

0800780c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
 8007828:	e001      	b.n	800782e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800782e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
 8007848:	4613      	mov	r3, r2
 800784a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800784c:	787b      	ldrb	r3, [r7, #1]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007852:	887a      	ldrh	r2, [r7, #2]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007858:	e002      	b.n	8007860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800785a:	887a      	ldrh	r2, [r7, #2]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	460b      	mov	r3, r1
 8007876:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4013      	ands	r3, r2
 8007884:	041a      	lsls	r2, r3, #16
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	43d9      	mvns	r1, r3
 800788a:	887b      	ldrh	r3, [r7, #2]
 800788c:	400b      	ands	r3, r1
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	619a      	str	r2, [r3, #24]
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e081      	b.n	80079b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fd f82e 	bl	8004928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2224      	movs	r2, #36	; 0x24
 80078d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0201 	bic.w	r2, r2, #1
 80078e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007900:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d107      	bne.n	800791a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007916:	609a      	str	r2, [r3, #8]
 8007918:	e006      	b.n	8007928 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007926:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d104      	bne.n	800793a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007938:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800794c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800795c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69d9      	ldr	r1, [r3, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1a      	ldr	r2, [r3, #32]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e021      	b.n	8007a14 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2224      	movs	r2, #36	; 0x24
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fc fffb 	bl	80049e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	607a      	str	r2, [r7, #4]
 8007a26:	461a      	mov	r2, r3
 8007a28:	460b      	mov	r3, r1
 8007a2a:	817b      	strh	r3, [r7, #10]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f040 80da 	bne.w	8007bf2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_I2C_Master_Transmit+0x30>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e0d3      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a54:	f7fe ffe6 	bl	8006a24 <HAL_GetTick>
 8007a58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	2319      	movs	r3, #25
 8007a60:	2201      	movs	r2, #1
 8007a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 fdde 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e0be      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2221      	movs	r2, #33	; 0x21
 8007a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2210      	movs	r2, #16
 8007a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	893a      	ldrh	r2, [r7, #8]
 8007a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2bff      	cmp	r3, #255	; 0xff
 8007aa6:	d90e      	bls.n	8007ac6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	22ff      	movs	r2, #255	; 0xff
 8007aac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	8979      	ldrh	r1, [r7, #10]
 8007ab6:	4b51      	ldr	r3, [pc, #324]	; (8007bfc <HAL_I2C_Master_Transmit+0x1e0>)
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 ffd4 	bl	8008a6c <I2C_TransferConfig>
 8007ac4:	e06c      	b.n	8007ba0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	8979      	ldrh	r1, [r7, #10]
 8007ad8:	4b48      	ldr	r3, [pc, #288]	; (8007bfc <HAL_I2C_Master_Transmit+0x1e0>)
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 ffc3 	bl	8008a6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ae6:	e05b      	b.n	8007ba0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	6a39      	ldr	r1, [r7, #32]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fddb 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e07b      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	1c5a      	adds	r2, r3, #1
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b24:	3b01      	subs	r3, #1
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d034      	beq.n	8007ba0 <HAL_I2C_Master_Transmit+0x184>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d130      	bne.n	8007ba0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	9300      	str	r3, [sp, #0]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	2200      	movs	r2, #0
 8007b46:	2180      	movs	r1, #128	; 0x80
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fd6d 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e04d      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2bff      	cmp	r3, #255	; 0xff
 8007b60:	d90e      	bls.n	8007b80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	22ff      	movs	r2, #255	; 0xff
 8007b66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	8979      	ldrh	r1, [r7, #10]
 8007b70:	2300      	movs	r3, #0
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 ff77 	bl	8008a6c <I2C_TransferConfig>
 8007b7e:	e00f      	b.n	8007ba0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	8979      	ldrh	r1, [r7, #10]
 8007b92:	2300      	movs	r3, #0
 8007b94:	9300      	str	r3, [sp, #0]
 8007b96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 ff66 	bl	8008a6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d19e      	bne.n	8007ae8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	6a39      	ldr	r1, [r7, #32]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 fdba 	bl	8008728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e01a      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <HAL_I2C_Master_Transmit+0x1e4>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007bf2:	2302      	movs	r3, #2
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	80002000 	.word	0x80002000
 8007c00:	fe00e800 	.word	0xfe00e800

08007c04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	460b      	mov	r3, r1
 8007c12:	817b      	strh	r3, [r7, #10]
 8007c14:	4613      	mov	r3, r2
 8007c16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b20      	cmp	r3, #32
 8007c22:	f040 80db 	bne.w	8007ddc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_I2C_Master_Receive+0x30>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e0d4      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c3c:	f7fe fef2 	bl	8006a24 <HAL_GetTick>
 8007c40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	2319      	movs	r3, #25
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 fcea 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e0bf      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2222      	movs	r2, #34	; 0x22
 8007c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2210      	movs	r2, #16
 8007c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	893a      	ldrh	r2, [r7, #8]
 8007c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2bff      	cmp	r3, #255	; 0xff
 8007c8e:	d90e      	bls.n	8007cae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	22ff      	movs	r2, #255	; 0xff
 8007c94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	8979      	ldrh	r1, [r7, #10]
 8007c9e:	4b52      	ldr	r3, [pc, #328]	; (8007de8 <HAL_I2C_Master_Receive+0x1e4>)
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 fee0 	bl	8008a6c <I2C_TransferConfig>
 8007cac:	e06d      	b.n	8007d8a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	8979      	ldrh	r1, [r7, #10]
 8007cc0:	4b49      	ldr	r3, [pc, #292]	; (8007de8 <HAL_I2C_Master_Receive+0x1e4>)
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fecf 	bl	8008a6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8007cce:	e05c      	b.n	8007d8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	6a39      	ldr	r1, [r7, #32]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f000 fd63 	bl	80087a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d001      	beq.n	8007ce4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e07c      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	b2d2      	uxtb	r2, r2
 8007cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d00:	3b01      	subs	r3, #1
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d034      	beq.n	8007d8a <HAL_I2C_Master_Receive+0x186>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d130      	bne.n	8007d8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	2180      	movs	r1, #128	; 0x80
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f000 fc78 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e04d      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2bff      	cmp	r3, #255	; 0xff
 8007d4a:	d90e      	bls.n	8007d6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	22ff      	movs	r2, #255	; 0xff
 8007d50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	8979      	ldrh	r1, [r7, #10]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fe82 	bl	8008a6c <I2C_TransferConfig>
 8007d68:	e00f      	b.n	8007d8a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	8979      	ldrh	r1, [r7, #10]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 fe71 	bl	8008a6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d19d      	bne.n	8007cd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	6a39      	ldr	r1, [r7, #32]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fcc5 	bl	8008728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e01a      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2220      	movs	r2, #32
 8007dae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <HAL_I2C_Master_Receive+0x1e8>)
 8007dbc:	400b      	ands	r3, r1
 8007dbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e000      	b.n	8007dde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007ddc:	2302      	movs	r3, #2
  }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	80002400 	.word	0x80002400
 8007dec:	fe00e800 	.word	0xfe00e800

08007df0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	4603      	mov	r3, r0
 8007e00:	817b      	strh	r3, [r7, #10]
 8007e02:	460b      	mov	r3, r1
 8007e04:	813b      	strh	r3, [r7, #8]
 8007e06:	4613      	mov	r3, r2
 8007e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b20      	cmp	r3, #32
 8007e14:	f040 80f9 	bne.w	800800a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <HAL_I2C_Mem_Write+0x34>
 8007e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0ed      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_I2C_Mem_Write+0x4e>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e0e6      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e46:	f7fe fded 	bl	8006a24 <HAL_GetTick>
 8007e4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2319      	movs	r3, #25
 8007e52:	2201      	movs	r2, #1
 8007e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 fbe5 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e0d1      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2221      	movs	r2, #33	; 0x21
 8007e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2240      	movs	r2, #64	; 0x40
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a3a      	ldr	r2, [r7, #32]
 8007e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e90:	88f8      	ldrh	r0, [r7, #6]
 8007e92:	893a      	ldrh	r2, [r7, #8]
 8007e94:	8979      	ldrh	r1, [r7, #10]
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 faf5 	bl	8008490 <I2C_RequestMemoryWrite>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e0a9      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2bff      	cmp	r3, #255	; 0xff
 8007ec0:	d90e      	bls.n	8007ee0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	22ff      	movs	r2, #255	; 0xff
 8007ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	8979      	ldrh	r1, [r7, #10]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fdc7 	bl	8008a6c <I2C_TransferConfig>
 8007ede:	e00f      	b.n	8007f00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	8979      	ldrh	r1, [r7, #10]
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 fdb6 	bl	8008a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fbcf 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e07b      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d034      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x1c8>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d130      	bne.n	8007fb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 fb61 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d001      	beq.n	8007f70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e04d      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	2bff      	cmp	r3, #255	; 0xff
 8007f78:	d90e      	bls.n	8007f98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	8979      	ldrh	r1, [r7, #10]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fd6b 	bl	8008a6c <I2C_TransferConfig>
 8007f96:	e00f      	b.n	8007fb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	8979      	ldrh	r1, [r7, #10]
 8007faa:	2300      	movs	r3, #0
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 fd5a 	bl	8008a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d19e      	bne.n	8007f00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 fbae 	bl	8008728 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d001      	beq.n	8007fd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e01a      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6859      	ldr	r1, [r3, #4]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4b0a      	ldr	r3, [pc, #40]	; (8008014 <HAL_I2C_Mem_Write+0x224>)
 8007fea:	400b      	ands	r3, r1
 8007fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e000      	b.n	800800c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800800a:	2302      	movs	r3, #2
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}
 8008014:	fe00e800 	.word	0xfe00e800

08008018 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b088      	sub	sp, #32
 800801c:	af02      	add	r7, sp, #8
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	4608      	mov	r0, r1
 8008022:	4611      	mov	r1, r2
 8008024:	461a      	mov	r2, r3
 8008026:	4603      	mov	r3, r0
 8008028:	817b      	strh	r3, [r7, #10]
 800802a:	460b      	mov	r3, r1
 800802c:	813b      	strh	r3, [r7, #8]
 800802e:	4613      	mov	r3, r2
 8008030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b20      	cmp	r3, #32
 800803c:	f040 80fd 	bne.w	800823a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_I2C_Mem_Read+0x34>
 8008046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008048:	2b00      	cmp	r3, #0
 800804a:	d105      	bne.n	8008058 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008052:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e0f1      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_I2C_Mem_Read+0x4e>
 8008062:	2302      	movs	r3, #2
 8008064:	e0ea      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800806e:	f7fe fcd9 	bl	8006a24 <HAL_GetTick>
 8008072:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2319      	movs	r3, #25
 800807a:	2201      	movs	r2, #1
 800807c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fad1 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0d5      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2222      	movs	r2, #34	; 0x22
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2240      	movs	r2, #64	; 0x40
 800809c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080b8:	88f8      	ldrh	r0, [r7, #6]
 80080ba:	893a      	ldrh	r2, [r7, #8]
 80080bc:	8979      	ldrh	r1, [r7, #10]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4603      	mov	r3, r0
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fa35 	bl	8008538 <I2C_RequestMemoryRead>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e0ad      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2bff      	cmp	r3, #255	; 0xff
 80080e8:	d90e      	bls.n	8008108 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	22ff      	movs	r2, #255	; 0xff
 80080ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	8979      	ldrh	r1, [r7, #10]
 80080f8:	4b52      	ldr	r3, [pc, #328]	; (8008244 <HAL_I2C_Mem_Read+0x22c>)
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fcb3 	bl	8008a6c <I2C_TransferConfig>
 8008106:	e00f      	b.n	8008128 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008116:	b2da      	uxtb	r2, r3
 8008118:	8979      	ldrh	r1, [r7, #10]
 800811a:	4b4a      	ldr	r3, [pc, #296]	; (8008244 <HAL_I2C_Mem_Read+0x22c>)
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fca2 	bl	8008a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812e:	2200      	movs	r2, #0
 8008130:	2104      	movs	r1, #4
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fa78 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e07c      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d034      	beq.n	80081e8 <HAL_I2C_Mem_Read+0x1d0>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008182:	2b00      	cmp	r3, #0
 8008184:	d130      	bne.n	80081e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2200      	movs	r2, #0
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fa49 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e04d      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	2bff      	cmp	r3, #255	; 0xff
 80081a8:	d90e      	bls.n	80081c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	22ff      	movs	r2, #255	; 0xff
 80081ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	8979      	ldrh	r1, [r7, #10]
 80081b8:	2300      	movs	r3, #0
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fc53 	bl	8008a6c <I2C_TransferConfig>
 80081c6:	e00f      	b.n	80081e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	8979      	ldrh	r1, [r7, #10]
 80081da:	2300      	movs	r3, #0
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f000 fc42 	bl	8008a6c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d19a      	bne.n	8008128 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fa96 	bl	8008728 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e01a      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2220      	movs	r2, #32
 800820c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6859      	ldr	r1, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <HAL_I2C_Mem_Read+0x230>)
 800821a:	400b      	ands	r3, r1
 800821c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	e000      	b.n	800823c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800823a:	2302      	movs	r3, #2
  }
}
 800823c:	4618      	mov	r0, r3
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	80002400 	.word	0x80002400
 8008248:	fe00e800 	.word	0xfe00e800

0800824c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	; 0x28
 8008250:	af02      	add	r7, sp, #8
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	607a      	str	r2, [r7, #4]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	460b      	mov	r3, r1
 800825a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b20      	cmp	r3, #32
 800826a:	f040 80f1 	bne.w	8008450 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800827c:	d101      	bne.n	8008282 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800827e:	2302      	movs	r3, #2
 8008280:	e0e7      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_I2C_IsDeviceReady+0x44>
 800828c:	2302      	movs	r3, #2
 800828e:	e0e0      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2224      	movs	r2, #36	; 0x24
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d107      	bne.n	80082be <HAL_I2C_IsDeviceReady+0x72>
 80082ae:	897b      	ldrh	r3, [r7, #10]
 80082b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082bc:	e004      	b.n	80082c8 <HAL_I2C_IsDeviceReady+0x7c>
 80082be:	897b      	ldrh	r3, [r7, #10]
 80082c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082c4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80082ce:	f7fe fba9 	bl	8006a24 <HAL_GetTick>
 80082d2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b20      	cmp	r3, #32
 80082e0:	bf0c      	ite	eq
 80082e2:	2301      	moveq	r3, #1
 80082e4:	2300      	movne	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0310 	and.w	r3, r3, #16
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008300:	e034      	b.n	800836c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008308:	d01a      	beq.n	8008340 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800830a:	f7fe fb8b 	bl	8006a24 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d302      	bcc.n	8008320 <HAL_I2C_IsDeviceReady+0xd4>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10f      	bne.n	8008340 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2220      	movs	r2, #32
 8008324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832c:	f043 0220 	orr.w	r2, r3, #32
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e088      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b20      	cmp	r3, #32
 800834c:	bf0c      	ite	eq
 800834e:	2301      	moveq	r3, #1
 8008350:	2300      	movne	r3, #0
 8008352:	b2db      	uxtb	r3, r3
 8008354:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f003 0310 	and.w	r3, r3, #16
 8008360:	2b10      	cmp	r3, #16
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800836c:	7ffb      	ldrb	r3, [r7, #31]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <HAL_I2C_IsDeviceReady+0x12c>
 8008372:	7fbb      	ldrb	r3, [r7, #30]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0c4      	beq.n	8008302 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	f003 0310 	and.w	r3, r3, #16
 8008382:	2b10      	cmp	r3, #16
 8008384:	d01a      	beq.n	80083bc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2200      	movs	r2, #0
 800838e:	2120      	movs	r1, #32
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f949 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d001      	beq.n	80083a0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e058      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2220      	movs	r2, #32
 80083a6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	e04a      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	2120      	movs	r1, #32
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 f92e 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e03d      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2210      	movs	r2, #16
 80083dc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2220      	movs	r2, #32
 80083e4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d118      	bne.n	8008420 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083fc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	2120      	movs	r1, #32
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f90d 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e01c      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2220      	movs	r2, #32
 800841e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	3301      	adds	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	429a      	cmp	r2, r3
 800842c:	f63f af3b 	bhi.w	80082a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843c:	f043 0220 	orr.w	r2, r3, #32
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008450:	2302      	movs	r3, #2
  }
}
 8008452:	4618      	mov	r0, r3
 8008454:	3720      	adds	r7, #32
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008468:	b2db      	uxtb	r3, r3
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af02      	add	r7, sp, #8
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	4608      	mov	r0, r1
 800849a:	4611      	mov	r1, r2
 800849c:	461a      	mov	r2, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	817b      	strh	r3, [r7, #10]
 80084a2:	460b      	mov	r3, r1
 80084a4:	813b      	strh	r3, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80084aa:	88fb      	ldrh	r3, [r7, #6]
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	8979      	ldrh	r1, [r7, #10]
 80084b0:	4b20      	ldr	r3, [pc, #128]	; (8008534 <I2C_RequestMemoryWrite+0xa4>)
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fad7 	bl	8008a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	69b9      	ldr	r1, [r7, #24]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f000 f8f0 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e02c      	b.n	800852c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d105      	bne.n	80084e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084d8:	893b      	ldrh	r3, [r7, #8]
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	629a      	str	r2, [r3, #40]	; 0x28
 80084e2:	e015      	b.n	8008510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084e4:	893b      	ldrh	r3, [r7, #8]
 80084e6:	0a1b      	lsrs	r3, r3, #8
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f2:	69fa      	ldr	r2, [r7, #28]
 80084f4:	69b9      	ldr	r1, [r7, #24]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f8d6 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e012      	b.n	800852c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008506:	893b      	ldrh	r3, [r7, #8]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	2200      	movs	r2, #0
 8008518:	2180      	movs	r1, #128	; 0x80
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f000 f884 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	80002000 	.word	0x80002000

08008538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	4608      	mov	r0, r1
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	4603      	mov	r3, r0
 8008548:	817b      	strh	r3, [r7, #10]
 800854a:	460b      	mov	r3, r1
 800854c:	813b      	strh	r3, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008552:	88fb      	ldrh	r3, [r7, #6]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	8979      	ldrh	r1, [r7, #10]
 8008558:	4b20      	ldr	r3, [pc, #128]	; (80085dc <I2C_RequestMemoryRead+0xa4>)
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 fa84 	bl	8008a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 f89d 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e02c      	b.n	80085d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008578:	88fb      	ldrh	r3, [r7, #6]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d105      	bne.n	800858a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800857e:	893b      	ldrh	r3, [r7, #8]
 8008580:	b2da      	uxtb	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	629a      	str	r2, [r3, #40]	; 0x28
 8008588:	e015      	b.n	80085b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800858a:	893b      	ldrh	r3, [r7, #8]
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	b29b      	uxth	r3, r3
 8008590:	b2da      	uxtb	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	69b9      	ldr	r1, [r7, #24]
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f883 	bl	80086a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e012      	b.n	80085d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085ac:	893b      	ldrh	r3, [r7, #8]
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2200      	movs	r2, #0
 80085be:	2140      	movs	r1, #64	; 0x40
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f831 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	80002000 	.word	0x80002000

080085e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d103      	bne.n	80085fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	d007      	beq.n	800861c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	619a      	str	r2, [r3, #24]
  }
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008638:	e022      	b.n	8008680 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008640:	d01e      	beq.n	8008680 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fe f9ef 	bl	8006a24 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d113      	bne.n	8008680 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2220      	movs	r2, #32
 8008668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e00f      	b.n	80086a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699a      	ldr	r2, [r3, #24]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4013      	ands	r3, r2
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	429a      	cmp	r2, r3
 800868e:	bf0c      	ite	eq
 8008690:	2301      	moveq	r3, #1
 8008692:	2300      	movne	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	429a      	cmp	r2, r3
 800869c:	d0cd      	beq.n	800863a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086b4:	e02c      	b.n	8008710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f8ea 	bl	8008894 <I2C_IsErrorOccurred>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e02a      	b.n	8008720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d0:	d01e      	beq.n	8008710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086d2:	f7fe f9a7 	bl	8006a24 <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d302      	bcc.n	80086e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d113      	bne.n	8008710 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ec:	f043 0220 	orr.w	r2, r3, #32
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e007      	b.n	8008720 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b02      	cmp	r3, #2
 800871c:	d1cb      	bne.n	80086b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008734:	e028      	b.n	8008788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f8aa 	bl	8008894 <I2C_IsErrorOccurred>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e026      	b.n	8008798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874a:	f7fe f96b 	bl	8006a24 <HAL_GetTick>
 800874e:	4602      	mov	r2, r0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	429a      	cmp	r2, r3
 8008758:	d302      	bcc.n	8008760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d113      	bne.n	8008788 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008764:	f043 0220 	orr.w	r2, r3, #32
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2220      	movs	r2, #32
 8008770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e007      	b.n	8008798 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b20      	cmp	r3, #32
 8008794:	d1cf      	bne.n	8008736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087ac:	e064      	b.n	8008878 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f86e 	bl	8008894 <I2C_IsErrorOccurred>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e062      	b.n	8008888 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d138      	bne.n	8008842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d105      	bne.n	80087ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80087e6:	2300      	movs	r3, #0
 80087e8:	e04e      	b.n	8008888 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d107      	bne.n	8008808 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2210      	movs	r2, #16
 80087fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2204      	movs	r2, #4
 8008804:	645a      	str	r2, [r3, #68]	; 0x44
 8008806:	e002      	b.n	800880e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2220      	movs	r2, #32
 8008814:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6859      	ldr	r1, [r3, #4]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8008822:	400b      	ands	r3, r1
 8008824:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e022      	b.n	8008888 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008842:	f7fe f8ef 	bl	8006a24 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	d302      	bcc.n	8008858 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10f      	bne.n	8008878 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885c:	f043 0220 	orr.w	r2, r3, #32
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2220      	movs	r2, #32
 8008868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e007      	b.n	8008888 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b04      	cmp	r3, #4
 8008884:	d193      	bne.n	80087ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	fe00e800 	.word	0xfe00e800

08008894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08a      	sub	sp, #40	; 0x28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d075      	beq.n	80089ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2210      	movs	r2, #16
 80088c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088c8:	e056      	b.n	8008978 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088d0:	d052      	beq.n	8008978 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80088d2:	f7fe f8a7 	bl	8006a24 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d302      	bcc.n	80088e8 <I2C_IsErrorOccurred+0x54>
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d147      	bne.n	8008978 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800890a:	d12e      	bne.n	800896a <I2C_IsErrorOccurred+0xd6>
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008912:	d02a      	beq.n	800896a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008914:	7cfb      	ldrb	r3, [r7, #19]
 8008916:	2b20      	cmp	r3, #32
 8008918:	d027      	beq.n	800896a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800892a:	f7fe f87b 	bl	8006a24 <HAL_GetTick>
 800892e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008930:	e01b      	b.n	800896a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008932:	f7fe f877 	bl	8006a24 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	2b19      	cmp	r3, #25
 800893e:	d914      	bls.n	800896a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b20      	cmp	r3, #32
 8008976:	d1dc      	bne.n	8008932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b20      	cmp	r3, #32
 8008984:	d003      	beq.n	800898e <I2C_IsErrorOccurred+0xfa>
 8008986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898a:	2b00      	cmp	r3, #0
 800898c:	d09d      	beq.n	80088ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800898e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008992:	2b00      	cmp	r3, #0
 8008994:	d103      	bne.n	800899e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2220      	movs	r2, #32
 800899c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	f043 0304 	orr.w	r3, r3, #4
 80089a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f043 0301 	orr.w	r3, r3, #1
 80089c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f043 0308 	orr.w	r3, r3, #8
 80089e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d00b      	beq.n	8008a1a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f043 0302 	orr.w	r3, r3, #2
 8008a08:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01c      	beq.n	8008a5c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f7ff fddc 	bl	80085e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b0d      	ldr	r3, [pc, #52]	; (8008a68 <I2C_IsErrorOccurred+0x1d4>)
 8008a34:	400b      	ands	r3, r1
 8008a36:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3728      	adds	r7, #40	; 0x28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	fe00e800 	.word	0xfe00e800

08008a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	817b      	strh	r3, [r7, #10]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a7e:	897b      	ldrh	r3, [r7, #10]
 8008a80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a84:	7a7b      	ldrb	r3, [r7, #9]
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	0d5b      	lsrs	r3, r3, #21
 8008aa6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008aaa:	4b08      	ldr	r3, [pc, #32]	; (8008acc <I2C_TransferConfig+0x60>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	ea02 0103 	and.w	r1, r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008abe:	bf00      	nop
 8008ac0:	371c      	adds	r7, #28
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	03ff63ff 	.word	0x03ff63ff

08008ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d138      	bne.n	8008b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d101      	bne.n	8008af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008af0:	2302      	movs	r3, #2
 8008af2:	e032      	b.n	8008b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2224      	movs	r2, #36	; 0x24
 8008b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6819      	ldr	r1, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	e000      	b.n	8008b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b58:	2302      	movs	r3, #2
  }
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d139      	bne.n	8008bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e033      	b.n	8008bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2224      	movs	r2, #36	; 0x24
 8008b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0201 	bic.w	r2, r2, #1
 8008ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0201 	orr.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2220      	movs	r2, #32
 8008be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	e000      	b.n	8008bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008bf0:	2302      	movs	r3, #2
  }
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c00:	b08f      	sub	sp, #60	; 0x3c
 8008c02:	af0a      	add	r7, sp, #40	; 0x28
 8008c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e116      	b.n	8008e3e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d106      	bne.n	8008c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f00f fd50 	bl	80186d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d102      	bne.n	8008c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f009 fb69 	bl	8012326 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	687e      	ldr	r6, [r7, #4]
 8008c5c:	466d      	mov	r5, sp
 8008c5e:	f106 0410 	add.w	r4, r6, #16
 8008c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c72:	1d33      	adds	r3, r6, #4
 8008c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c76:	6838      	ldr	r0, [r7, #0]
 8008c78:	f009 fa7c 	bl	8012174 <USB_CoreInit>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e0d7      	b.n	8008e3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f009 fb57 	bl	8012348 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
 8008c9e:	e04a      	b.n	8008d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008ca0:	7bfa      	ldrb	r2, [r7, #15]
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	333d      	adds	r3, #61	; 0x3d
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	6879      	ldr	r1, [r7, #4]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	440b      	add	r3, r1
 8008cc2:	333c      	adds	r3, #60	; 0x3c
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008cc8:	7bfa      	ldrb	r2, [r7, #15]
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	b298      	uxth	r0, r3
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	00db      	lsls	r3, r3, #3
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3344      	adds	r3, #68	; 0x44
 8008cdc:	4602      	mov	r2, r0
 8008cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ce0:	7bfa      	ldrb	r2, [r7, #15]
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	3340      	adds	r3, #64	; 0x40
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	00db      	lsls	r3, r3, #3
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3348      	adds	r3, #72	; 0x48
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d08:	7bfa      	ldrb	r2, [r7, #15]
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	00db      	lsls	r3, r3, #3
 8008d10:	4413      	add	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	334c      	adds	r3, #76	; 0x4c
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4613      	mov	r3, r2
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	4413      	add	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	440b      	add	r3, r1
 8008d2a:	3354      	adds	r3, #84	; 0x54
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	3301      	adds	r3, #1
 8008d34:	73fb      	strb	r3, [r7, #15]
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3af      	bcc.n	8008ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e044      	b.n	8008dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d46:	7bfa      	ldrb	r2, [r7, #15]
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	00db      	lsls	r3, r3, #3
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d5c:	7bfa      	ldrb	r2, [r7, #15]
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	440b      	add	r3, r1
 8008d6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008d6e:	7bfa      	ldrb	r2, [r7, #15]
 8008d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d72:	7bfa      	ldrb	r2, [r7, #15]
 8008d74:	6879      	ldr	r1, [r7, #4]
 8008d76:	4613      	mov	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d84:	2200      	movs	r2, #0
 8008d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d88:	7bfa      	ldrb	r2, [r7, #15]
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	4413      	add	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	6879      	ldr	r1, [r7, #4]
 8008da2:	4613      	mov	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	440b      	add	r3, r1
 8008dac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	00db      	lsls	r3, r3, #3
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
 8008dd0:	7bfa      	ldrb	r2, [r7, #15]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d3b5      	bcc.n	8008d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	603b      	str	r3, [r7, #0]
 8008de0:	687e      	ldr	r6, [r7, #4]
 8008de2:	466d      	mov	r5, sp
 8008de4:	f106 0410 	add.w	r4, r6, #16
 8008de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008df8:	1d33      	adds	r3, r6, #4
 8008dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dfc:	6838      	ldr	r0, [r7, #0]
 8008dfe:	f009 faef 	bl	80123e0 <USB_DevInit>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d005      	beq.n	8008e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e014      	b.n	8008e3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d102      	bne.n	8008e32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f881 	bl	8009f34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f00a fb77 	bl	801352a <USB_DevDisconnect>

  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d101      	bne.n	8008e62 <HAL_PCD_Start+0x1c>
 8008e5e:	2302      	movs	r3, #2
 8008e60:	e01c      	b.n	8008e9c <HAL_PCD_Start+0x56>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d105      	bne.n	8008e7e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f009 fa3e 	bl	8012304 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f00a fb2b 	bl	80134e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b08d      	sub	sp, #52	; 0x34
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f00a fbe9 	bl	8013692 <USB_GetMode>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 847e 	bne.w	80097c4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f00a fb4d 	bl	801356c <USB_ReadInterrupts>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 8474 	beq.w	80097c2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f00a fb3a 	bl	801356c <USB_ReadInterrupts>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d107      	bne.n	8008f12 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695a      	ldr	r2, [r3, #20]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f002 0202 	and.w	r2, r2, #2
 8008f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f00a fb28 	bl	801356c <USB_ReadInterrupts>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	f003 0310 	and.w	r3, r3, #16
 8008f22:	2b10      	cmp	r3, #16
 8008f24:	d161      	bne.n	8008fea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0210 	bic.w	r2, r2, #16
 8008f34:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	6a1b      	ldr	r3, [r3, #32]
 8008f3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	4613      	mov	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	0c5b      	lsrs	r3, r3, #17
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d124      	bne.n	8008fac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008f68:	4013      	ands	r3, r2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d035      	beq.n	8008fda <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	091b      	lsrs	r3, r3, #4
 8008f76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6a38      	ldr	r0, [r7, #32]
 8008f82:	f00a f95f 	bl	8013244 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f92:	441a      	add	r2, r3
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	6a1a      	ldr	r2, [r3, #32]
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	091b      	lsrs	r3, r3, #4
 8008fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fa4:	441a      	add	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	621a      	str	r2, [r3, #32]
 8008faa:	e016      	b.n	8008fda <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	0c5b      	lsrs	r3, r3, #17
 8008fb0:	f003 030f 	and.w	r3, r3, #15
 8008fb4:	2b06      	cmp	r3, #6
 8008fb6:	d110      	bne.n	8008fda <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6a38      	ldr	r0, [r7, #32]
 8008fc4:	f00a f93e 	bl	8013244 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	6a1a      	ldr	r2, [r3, #32]
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	091b      	lsrs	r3, r3, #4
 8008fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fd4:	441a      	add	r2, r3
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699a      	ldr	r2, [r3, #24]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0210 	orr.w	r2, r2, #16
 8008fe8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f00a fabc 	bl	801356c <USB_ReadInterrupts>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ffa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ffe:	f040 80a7 	bne.w	8009150 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f00a fac1 	bl	8013592 <USB_ReadDevAllOutEpInterrupt>
 8009010:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009012:	e099      	b.n	8009148 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 808e 	beq.w	800913c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f00a fae5 	bl	80135fa <USB_ReadDevOutEPInterrupt>
 8009030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00c      	beq.n	8009056 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009048:	461a      	mov	r2, r3
 800904a:	2301      	movs	r3, #1
 800904c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800904e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fe95 	bl	8009d80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00c      	beq.n	800907a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906c:	461a      	mov	r2, r3
 800906e:	2308      	movs	r3, #8
 8009070:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009072:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fed1 	bl	8009e1c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b00      	cmp	r3, #0
 8009082:	d008      	beq.n	8009096 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	461a      	mov	r2, r3
 8009092:	2310      	movs	r3, #16
 8009094:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d030      	beq.n	8009102 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a8:	2b80      	cmp	r3, #128	; 0x80
 80090aa:	d109      	bne.n	80090c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	69fa      	ldr	r2, [r7, #28]
 80090b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80090be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80090c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c2:	4613      	mov	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	4413      	add	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	3304      	adds	r3, #4
 80090d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	78db      	ldrb	r3, [r3, #3]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d108      	bne.n	80090f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f00f fc34 	bl	8018958 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	461a      	mov	r2, r3
 80090fe:	2302      	movs	r3, #2
 8009100:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800910c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009118:	461a      	mov	r2, r3
 800911a:	2320      	movs	r3, #32
 800911c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d009      	beq.n	800913c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009134:	461a      	mov	r2, r3
 8009136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800913a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	3301      	adds	r3, #1
 8009140:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009144:	085b      	lsrs	r3, r3, #1
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	f47f af62 	bne.w	8009014 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4618      	mov	r0, r3
 8009156:	f00a fa09 	bl	801356c <USB_ReadInterrupts>
 800915a:	4603      	mov	r3, r0
 800915c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009164:	f040 80a4 	bne.w	80092b0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f00a fa2a 	bl	80135c6 <USB_ReadDevAllInEpInterrupt>
 8009172:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009178:	e096      	b.n	80092a8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 808b 	beq.w	800929c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	4611      	mov	r1, r2
 8009190:	4618      	mov	r0, r3
 8009192:	f00a fa50 	bl	8013636 <USB_ReadDevInEPInterrupt>
 8009196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d020      	beq.n	80091e4 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	2201      	movs	r2, #1
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	43db      	mvns	r3, r3
 80091bc:	69f9      	ldr	r1, [r7, #28]
 80091be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091c2:	4013      	ands	r3, r2
 80091c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d2:	461a      	mov	r2, r3
 80091d4:	2301      	movs	r3, #1
 80091d6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f00f fb25 	bl	801882e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f003 0308 	and.w	r3, r3, #8
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d008      	beq.n	8009200 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	461a      	mov	r2, r3
 80091fc:	2308      	movs	r3, #8
 80091fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f003 0310 	and.w	r3, r3, #16
 8009206:	2b00      	cmp	r3, #0
 8009208:	d008      	beq.n	800921c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	461a      	mov	r2, r3
 8009218:	2310      	movs	r3, #16
 800921a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d008      	beq.n	8009238 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009232:	461a      	mov	r2, r3
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d023      	beq.n	800928a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009244:	6a38      	ldr	r0, [r7, #32]
 8009246:	f009 fa17 	bl	8012678 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800924a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924c:	4613      	mov	r3, r2
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	3338      	adds	r3, #56	; 0x38
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	3304      	adds	r3, #4
 800925c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	78db      	ldrb	r3, [r3, #3]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d108      	bne.n	8009278 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2200      	movs	r2, #0
 800926a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	b2db      	uxtb	r3, r3
 8009270:	4619      	mov	r1, r3
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f00f fb82 	bl	801897c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009284:	461a      	mov	r2, r3
 8009286:	2302      	movs	r3, #2
 8009288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009290:	2b00      	cmp	r3, #0
 8009292:	d003      	beq.n	800929c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fcea 	bl	8009c70 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	3301      	adds	r3, #1
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	085b      	lsrs	r3, r3, #1
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f47f af65 	bne.w	800917a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00a f959 	bl	801356c <USB_ReadInterrupts>
 80092ba:	4603      	mov	r3, r0
 80092bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092c4:	d122      	bne.n	800930c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	69fa      	ldr	r2, [r7, #28]
 80092d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d108      	bne.n	80092f6 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80092ec:	2100      	movs	r1, #0
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fe44 	bl	8009f7c <HAL_PCDEx_LPM_Callback>
 80092f4:	e002      	b.n	80092fc <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f00f fb06 	bl	8018908 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	695a      	ldr	r2, [r3, #20]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800930a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4618      	mov	r0, r3
 8009312:	f00a f92b 	bl	801356c <USB_ReadInterrupts>
 8009316:	4603      	mov	r3, r0
 8009318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800931c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009320:	d112      	bne.n	8009348 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b01      	cmp	r3, #1
 8009330:	d102      	bne.n	8009338 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f00f fac2 	bl	80188bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009346:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f00a f90d 	bl	801356c <USB_ReadInterrupts>
 8009352:	4603      	mov	r3, r0
 8009354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800935c:	d121      	bne.n	80093a2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	695a      	ldr	r2, [r3, #20]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800936c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d111      	bne.n	800939c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009386:	089b      	lsrs	r3, r3, #2
 8009388:	f003 020f 	and.w	r2, r3, #15
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009392:	2101      	movs	r1, #1
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fdf1 	bl	8009f7c <HAL_PCDEx_LPM_Callback>
 800939a:	e002      	b.n	80093a2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f00f fa8d 	bl	80188bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4618      	mov	r0, r3
 80093a8:	f00a f8e0 	bl	801356c <USB_ReadInterrupts>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093b6:	f040 80b5 	bne.w	8009524 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	69fa      	ldr	r2, [r7, #28]
 80093c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093c8:	f023 0301 	bic.w	r3, r3, #1
 80093cc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2110      	movs	r1, #16
 80093d4:	4618      	mov	r0, r3
 80093d6:	f009 f94f 	bl	8012678 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093da:	2300      	movs	r3, #0
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093de:	e046      	b.n	800946e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	461a      	mov	r2, r3
 80093ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093f2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	015a      	lsls	r2, r3, #5
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	4413      	add	r3, r2
 80093fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009404:	0151      	lsls	r1, r2, #5
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	440a      	add	r2, r1
 800940a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009412:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009420:	461a      	mov	r2, r3
 8009422:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009426:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	440a      	add	r2, r1
 800943e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009442:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009446:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009458:	0151      	lsls	r1, r2, #5
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	440a      	add	r2, r1
 800945e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009462:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009466:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946a:	3301      	adds	r3, #1
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009474:	429a      	cmp	r2, r3
 8009476:	d3b3      	bcc.n	80093e0 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009486:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800948a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009490:	2b00      	cmp	r3, #0
 8009492:	d016      	beq.n	80094c2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800949a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094a4:	f043 030b 	orr.w	r3, r3, #11
 80094a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ba:	f043 030b 	orr.w	r3, r3, #11
 80094be:	6453      	str	r3, [r2, #68]	; 0x44
 80094c0:	e015      	b.n	80094ee <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	69fa      	ldr	r2, [r7, #28]
 80094cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80094d4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80094d8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094e8:	f043 030b 	orr.w	r3, r3, #11
 80094ec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009500:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f00a f8f0 	bl	80136f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695a      	ldr	r2, [r3, #20]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4618      	mov	r0, r3
 800952a:	f00a f81f 	bl	801356c <USB_ReadInterrupts>
 800952e:	4603      	mov	r3, r0
 8009530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009538:	d124      	bne.n	8009584 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4618      	mov	r0, r3
 8009540:	f00a f8b5 	bl	80136ae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4618      	mov	r0, r3
 800954a:	f009 f912 	bl	8012772 <USB_GetDevSpeed>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681c      	ldr	r4, [r3, #0]
 800955a:	f001 fbcf 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800955e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009564:	b2db      	uxtb	r3, r3
 8009566:	461a      	mov	r2, r3
 8009568:	4620      	mov	r0, r4
 800956a:	f008 fe2f 	bl	80121cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f00f f985 	bl	801887e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695a      	ldr	r2, [r3, #20]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009582:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f009 ffef 	bl	801356c <USB_ReadInterrupts>
 800958e:	4603      	mov	r3, r0
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d10a      	bne.n	80095ae <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f00f f962 	bl	8018862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695a      	ldr	r2, [r3, #20]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f002 0208 	and.w	r2, r2, #8
 80095ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f009 ffda 	bl	801356c <USB_ReadInterrupts>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095be:	2b80      	cmp	r3, #128	; 0x80
 80095c0:	d122      	bne.n	8009608 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095ce:	2301      	movs	r3, #1
 80095d0:	627b      	str	r3, [r7, #36]	; 0x24
 80095d2:	e014      	b.n	80095fe <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d8:	4613      	mov	r3, r2
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d105      	bne.n	80095f8 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80095ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fb0b 	bl	8009c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	3301      	adds	r3, #1
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009604:	429a      	cmp	r2, r3
 8009606:	d3e5      	bcc.n	80095d4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4618      	mov	r0, r3
 800960e:	f009 ffad 	bl	801356c <USB_ReadInterrupts>
 8009612:	4603      	mov	r3, r0
 8009614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800961c:	d13b      	bne.n	8009696 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800961e:	2301      	movs	r3, #1
 8009620:	627b      	str	r3, [r7, #36]	; 0x24
 8009622:	e02b      	b.n	800967c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009634:	6879      	ldr	r1, [r7, #4]
 8009636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009638:	4613      	mov	r3, r2
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	4413      	add	r3, r2
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	440b      	add	r3, r1
 8009642:	3340      	adds	r3, #64	; 0x40
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d115      	bne.n	8009676 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800964a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800964c:	2b00      	cmp	r3, #0
 800964e:	da12      	bge.n	8009676 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	440b      	add	r3, r1
 800965e:	333f      	adds	r3, #63	; 0x3f
 8009660:	2201      	movs	r2, #1
 8009662:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 facc 	bl	8009c0e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	3301      	adds	r3, #1
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	429a      	cmp	r2, r3
 8009684:	d3ce      	bcc.n	8009624 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695a      	ldr	r2, [r3, #20]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009694:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f009 ff66 	bl	801356c <USB_ReadInterrupts>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096aa:	d155      	bne.n	8009758 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80096ac:	2301      	movs	r3, #1
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
 80096b0:	e045      	b.n	800973e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	015a      	lsls	r2, r3, #5
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	4413      	add	r3, r2
 80096ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c6:	4613      	mov	r3, r2
 80096c8:	00db      	lsls	r3, r3, #3
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	440b      	add	r3, r1
 80096d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d12e      	bne.n	8009738 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80096da:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da2b      	bge.n	8009738 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80096e0:	69bb      	ldr	r3, [r7, #24]
 80096e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80096ec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d121      	bne.n	8009738 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f8:	4613      	mov	r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009706:	2201      	movs	r2, #1
 8009708:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009730:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009734:	6053      	str	r3, [r2, #4]
            break;
 8009736:	e007      	b.n	8009748 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	3301      	adds	r3, #1
 800973c:	627b      	str	r3, [r7, #36]	; 0x24
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009744:	429a      	cmp	r2, r3
 8009746:	d3b4      	bcc.n	80096b2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	695a      	ldr	r2, [r3, #20]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009756:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f009 ff05 	bl	801356c <USB_ReadInterrupts>
 8009762:	4603      	mov	r3, r0
 8009764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800976c:	d10a      	bne.n	8009784 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f00f f916 	bl	80189a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009782:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4618      	mov	r0, r3
 800978a:	f009 feef 	bl	801356c <USB_ReadInterrupts>
 800978e:	4603      	mov	r3, r0
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	2b04      	cmp	r3, #4
 8009796:	d115      	bne.n	80097c4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f00f f906 	bl	80189bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	430a      	orrs	r2, r1
 80097be:	605a      	str	r2, [r3, #4]
 80097c0:	e000      	b.n	80097c4 <HAL_PCD_IRQHandler+0x920>
      return;
 80097c2:	bf00      	nop
    }
  }
}
 80097c4:	3734      	adds	r7, #52	; 0x34
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd90      	pop	{r4, r7, pc}

080097ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b082      	sub	sp, #8
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_PCD_SetAddress+0x1a>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e013      	b.n	800980c <HAL_PCD_SetAddress+0x42>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	4611      	mov	r1, r2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f009 fe4d 	bl	801349c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	4608      	mov	r0, r1
 800981e:	4611      	mov	r1, r2
 8009820:	461a      	mov	r2, r3
 8009822:	4603      	mov	r3, r0
 8009824:	70fb      	strb	r3, [r7, #3]
 8009826:	460b      	mov	r3, r1
 8009828:	803b      	strh	r3, [r7, #0]
 800982a:	4613      	mov	r3, r2
 800982c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	da0f      	bge.n	800985a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	f003 020f 	and.w	r2, r3, #15
 8009840:	4613      	mov	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	3338      	adds	r3, #56	; 0x38
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	3304      	adds	r3, #4
 8009850:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	705a      	strb	r2, [r3, #1]
 8009858:	e00f      	b.n	800987a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f003 020f 	and.w	r2, r3, #15
 8009860:	4613      	mov	r3, r2
 8009862:	00db      	lsls	r3, r3, #3
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	4413      	add	r3, r2
 8009870:	3304      	adds	r3, #4
 8009872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2200      	movs	r2, #0
 8009878:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800987a:	78fb      	ldrb	r3, [r7, #3]
 800987c:	f003 030f 	and.w	r3, r3, #15
 8009880:	b2da      	uxtb	r2, r3
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009886:	883a      	ldrh	r2, [r7, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	78ba      	ldrb	r2, [r7, #2]
 8009890:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	785b      	ldrb	r3, [r3, #1]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80098a4:	78bb      	ldrb	r3, [r7, #2]
 80098a6:	2b02      	cmp	r3, #2
 80098a8:	d102      	bne.n	80098b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d101      	bne.n	80098be <HAL_PCD_EP_Open+0xaa>
 80098ba:	2302      	movs	r3, #2
 80098bc:	e00e      	b.n	80098dc <HAL_PCD_EP_Open+0xc8>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f008 ff6f 	bl	80127b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80098da:	7afb      	ldrb	r3, [r7, #11]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80098f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	da0f      	bge.n	8009918 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098f8:	78fb      	ldrb	r3, [r7, #3]
 80098fa:	f003 020f 	and.w	r2, r3, #15
 80098fe:	4613      	mov	r3, r2
 8009900:	00db      	lsls	r3, r3, #3
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	3338      	adds	r3, #56	; 0x38
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	4413      	add	r3, r2
 800990c:	3304      	adds	r3, #4
 800990e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2201      	movs	r2, #1
 8009914:	705a      	strb	r2, [r3, #1]
 8009916:	e00f      	b.n	8009938 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009918:	78fb      	ldrb	r3, [r7, #3]
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	4613      	mov	r3, r2
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	4413      	add	r3, r2
 800992e:	3304      	adds	r3, #4
 8009930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	b2da      	uxtb	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_PCD_EP_Close+0x6e>
 800994e:	2302      	movs	r3, #2
 8009950:	e00e      	b.n	8009970 <HAL_PCD_EP_Close+0x8c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	4618      	mov	r0, r3
 8009962:	f008 ffad 	bl	80128c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	607a      	str	r2, [r7, #4]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	460b      	mov	r3, r1
 8009986:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009988:	7afb      	ldrb	r3, [r7, #11]
 800998a:	f003 020f 	and.w	r2, r3, #15
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	3304      	adds	r3, #4
 80099a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2200      	movs	r2, #0
 80099b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2200      	movs	r2, #0
 80099b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	f003 030f 	and.w	r3, r3, #15
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6979      	ldr	r1, [r7, #20]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f009 fa2e 	bl	8012e38 <USB_EP0StartXfer>
 80099dc:	e005      	b.n	80099ea <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6979      	ldr	r1, [r7, #20]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f009 f847 	bl	8012a78 <USB_EPStartXfer>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	f003 020f 	and.w	r2, r3, #15
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	4413      	add	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009a16:	681b      	ldr	r3, [r3, #0]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	460b      	mov	r3, r1
 8009a32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	f003 020f 	and.w	r2, r3, #15
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	4413      	add	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	3338      	adds	r3, #56	; 0x38
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	3304      	adds	r3, #4
 8009a4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	683a      	ldr	r2, [r7, #0]
 8009a56:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2201      	movs	r2, #1
 8009a62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6979      	ldr	r1, [r7, #20]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f009 f9d9 	bl	8012e38 <USB_EP0StartXfer>
 8009a86:	e005      	b.n	8009a94 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6979      	ldr	r1, [r7, #20]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f008 fff2 	bl	8012a78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	f003 020f 	and.w	r2, r3, #15
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d901      	bls.n	8009abc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e04e      	b.n	8009b5a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da0f      	bge.n	8009ae4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	f003 020f 	and.w	r2, r3, #15
 8009aca:	4613      	mov	r3, r2
 8009acc:	00db      	lsls	r3, r3, #3
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	3338      	adds	r3, #56	; 0x38
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	705a      	strb	r2, [r3, #1]
 8009ae2:	e00d      	b.n	8009b00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b06:	78fb      	ldrb	r3, [r7, #3]
 8009b08:	f003 030f 	and.w	r3, r3, #15
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_PCD_EP_SetStall+0x82>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e01c      	b.n	8009b5a <HAL_PCD_EP_SetStall+0xbc>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68f9      	ldr	r1, [r7, #12]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f009 fbe0 	bl	80132f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b34:	78fb      	ldrb	r3, [r7, #3]
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b48:	4619      	mov	r1, r3
 8009b4a:	4610      	mov	r0, r2
 8009b4c:	f009 fdd2 	bl	80136f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009b6e:	78fb      	ldrb	r3, [r7, #3]
 8009b70:	f003 020f 	and.w	r2, r3, #15
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d901      	bls.n	8009b80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e042      	b.n	8009c06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da0f      	bge.n	8009ba8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	4613      	mov	r3, r2
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	3338      	adds	r3, #56	; 0x38
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	705a      	strb	r2, [r3, #1]
 8009ba6:	e00f      	b.n	8009bc8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	f003 020f 	and.w	r2, r3, #15
 8009bae:	4613      	mov	r3, r2
 8009bb0:	00db      	lsls	r3, r3, #3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	4413      	add	r3, r2
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	f003 030f 	and.w	r3, r3, #15
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d101      	bne.n	8009be8 <HAL_PCD_EP_ClrStall+0x86>
 8009be4:	2302      	movs	r3, #2
 8009be6:	e00e      	b.n	8009c06 <HAL_PCD_EP_ClrStall+0xa4>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68f9      	ldr	r1, [r7, #12]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f009 fbea 	bl	80133d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	460b      	mov	r3, r1
 8009c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da0c      	bge.n	8009c3c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	4613      	mov	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	3338      	adds	r3, #56	; 0x38
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4413      	add	r3, r2
 8009c36:	3304      	adds	r3, #4
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	e00c      	b.n	8009c56 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c3c:	78fb      	ldrb	r3, [r7, #3]
 8009c3e:	f003 020f 	and.w	r2, r3, #15
 8009c42:	4613      	mov	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	4413      	add	r3, r2
 8009c52:	3304      	adds	r3, #4
 8009c54:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f009 fa0d 	bl	801307c <USB_EPStopXfer>
 8009c62:	4603      	mov	r3, r0
 8009c64:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009c66:	7afb      	ldrb	r3, [r7, #11]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	4613      	mov	r3, r2
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	3338      	adds	r3, #56	; 0x38
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	4413      	add	r3, r2
 8009c94:	3304      	adds	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a1a      	ldr	r2, [r3, #32]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d901      	bls.n	8009ca8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e067      	b.n	8009d78 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	6a1b      	ldr	r3, [r3, #32]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d902      	bls.n	8009cc4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	3303      	adds	r3, #3
 8009cc8:	089b      	lsrs	r3, r3, #2
 8009cca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009ccc:	e026      	b.n	8009d1c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	69fa      	ldr	r2, [r7, #28]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d902      	bls.n	8009cea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	3303      	adds	r3, #3
 8009cee:	089b      	lsrs	r3, r3, #2
 8009cf0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6919      	ldr	r1, [r3, #16]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	6978      	ldr	r0, [r7, #20]
 8009d00:	f009 fa66 	bl	80131d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a1a      	ldr	r2, [r3, #32]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	441a      	add	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	69ba      	ldr	r2, [r7, #24]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d809      	bhi.n	8009d46 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a1a      	ldr	r2, [r3, #32]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d203      	bcs.n	8009d46 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	699b      	ldr	r3, [r3, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1c3      	bne.n	8009cce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	699a      	ldr	r2, [r3, #24]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d811      	bhi.n	8009d76 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	2201      	movs	r2, #1
 8009d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	43db      	mvns	r3, r3
 8009d6c:	6939      	ldr	r1, [r7, #16]
 8009d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d72:	4013      	ands	r3, r2
 8009d74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3720      	adds	r7, #32
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	333c      	adds	r3, #60	; 0x3c
 8009d98:	3304      	adds	r3, #4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	015a      	lsls	r2, r3, #5
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	4413      	add	r3, r2
 8009da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4a19      	ldr	r2, [pc, #100]	; (8009e18 <PCD_EP_OutXfrComplete_int+0x98>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d124      	bne.n	8009e00 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd2:	6093      	str	r3, [r2, #8]
 8009dd4:	e01a      	b.n	8009e0c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f003 0320 	and.w	r3, r3, #32
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d008      	beq.n	8009df2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dec:	461a      	mov	r2, r3
 8009dee:	2320      	movs	r3, #32
 8009df0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f00e fcfd 	bl	80187f8 <HAL_PCD_DataOutStageCallback>
 8009dfe:	e005      	b.n	8009e0c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f00e fcf6 	bl	80187f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	4f54310a 	.word	0x4f54310a

08009e1c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	333c      	adds	r3, #60	; 0x3c
 8009e34:	3304      	adds	r3, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <PCD_EP_OutSetupPacket_int+0x64>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d90e      	bls.n	8009e70 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d009      	beq.n	8009e70 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e68:	461a      	mov	r2, r3
 8009e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e6e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f00e fcaf 	bl	80187d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	4f54300a 	.word	0x4f54300a

08009e84 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	70fb      	strb	r3, [r7, #3]
 8009e90:	4613      	mov	r3, r2
 8009e92:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d107      	bne.n	8009eb2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009ea2:	883b      	ldrh	r3, [r7, #0]
 8009ea4:	0419      	lsls	r1, r3, #16
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	629a      	str	r2, [r3, #40]	; 0x28
 8009eb0:	e028      	b.n	8009f04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	73fb      	strb	r3, [r7, #15]
 8009ec4:	e00d      	b.n	8009ee2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	3340      	adds	r3, #64	; 0x40
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	0c1b      	lsrs	r3, r3, #16
 8009ed6:	68ba      	ldr	r2, [r7, #8]
 8009ed8:	4413      	add	r3, r2
 8009eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009edc:	7bfb      	ldrb	r3, [r7, #15]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	73fb      	strb	r3, [r7, #15]
 8009ee2:	7bfa      	ldrb	r2, [r7, #15]
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	3b01      	subs	r3, #1
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d3ec      	bcc.n	8009ec6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009eec:	883b      	ldrh	r3, [r7, #0]
 8009eee:	0418      	lsls	r0, r3, #16
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	4302      	orrs	r2, r0
 8009efc:	3340      	adds	r3, #64	; 0x40
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	440b      	add	r3, r1
 8009f02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	887a      	ldrh	r2, [r7, #2]
 8009f24:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f66:	f043 0303 	orr.w	r3, r3, #3
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa4:	d102      	bne.n	8009fac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8009fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009faa:	e00b      	b.n	8009fc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8009fac:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8009fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d102      	bne.n	8009fc2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8009fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fc0:	e000      	b.n	8009fc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8009fc2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	40007000 	.word	0x40007000

08009fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d141      	bne.n	800a066 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009fe2:	4b4b      	ldr	r3, [pc, #300]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fee:	d131      	bne.n	800a054 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ff0:	4b47      	ldr	r3, [pc, #284]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ff6:	4a46      	ldr	r2, [pc, #280]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ffc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a000:	4b43      	ldr	r3, [pc, #268]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a008:	4a41      	ldr	r2, [pc, #260]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a00a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a00e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a010:	4b40      	ldr	r3, [pc, #256]	; (800a114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2232      	movs	r2, #50	; 0x32
 800a016:	fb02 f303 	mul.w	r3, r2, r3
 800a01a:	4a3f      	ldr	r2, [pc, #252]	; (800a118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a01c:	fba2 2303 	umull	r2, r3, r2, r3
 800a020:	0c9b      	lsrs	r3, r3, #18
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a026:	e002      	b.n	800a02e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a02e:	4b38      	ldr	r3, [pc, #224]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a03a:	d102      	bne.n	800a042 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f2      	bne.n	800a028 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a042:	4b33      	ldr	r3, [pc, #204]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a04e:	d158      	bne.n	800a102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e057      	b.n	800a104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a054:	4b2e      	ldr	r3, [pc, #184]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a05a:	4a2d      	ldr	r2, [pc, #180]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a05c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a064:	e04d      	b.n	800a102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a06c:	d141      	bne.n	800a0f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a06e:	4b28      	ldr	r3, [pc, #160]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a07a:	d131      	bne.n	800a0e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a07c:	4b24      	ldr	r3, [pc, #144]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a082:	4a23      	ldr	r2, [pc, #140]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a08c:	4b20      	ldr	r3, [pc, #128]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a094:	4a1e      	ldr	r2, [pc, #120]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a09a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800a09c:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2232      	movs	r2, #50	; 0x32
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	4a1c      	ldr	r2, [pc, #112]	; (800a118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ac:	0c9b      	lsrs	r3, r3, #18
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0b2:	e002      	b.n	800a0ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0c6:	d102      	bne.n	800a0ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1f2      	bne.n	800a0b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0ce:	4b10      	ldr	r3, [pc, #64]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0da:	d112      	bne.n	800a102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e011      	b.n	800a104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0e6:	4a0a      	ldr	r2, [pc, #40]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a0f0:	e007      	b.n	800a102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a0f2:	4b07      	ldr	r3, [pc, #28]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a0fa:	4a05      	ldr	r2, [pc, #20]	; (800a110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a100:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	40007000 	.word	0x40007000
 800a114:	20000010 	.word	0x20000010
 800a118:	431bde83 	.word	0x431bde83

0800a11c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a120:	4b05      	ldr	r3, [pc, #20]	; (800a138 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4a04      	ldr	r2, [pc, #16]	; (800a138 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a12a:	6053      	str	r3, [r2, #4]
}
 800a12c:	bf00      	nop
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	40007000 	.word	0x40007000

0800a13c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d102      	bne.n	800a150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f000 bc08 	b.w	800a960 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a150:	4b96      	ldr	r3, [pc, #600]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f003 030c 	and.w	r3, r3, #12
 800a158:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a15a:	4b94      	ldr	r3, [pc, #592]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80e4 	beq.w	800a33a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d007      	beq.n	800a188 <HAL_RCC_OscConfig+0x4c>
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	2b0c      	cmp	r3, #12
 800a17c:	f040 808b 	bne.w	800a296 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2b01      	cmp	r3, #1
 800a184:	f040 8087 	bne.w	800a296 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a188:	4b88      	ldr	r3, [pc, #544]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0302 	and.w	r3, r3, #2
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x64>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e3df      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1a      	ldr	r2, [r3, #32]
 800a1a4:	4b81      	ldr	r3, [pc, #516]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <HAL_RCC_OscConfig+0x7e>
 800a1b0:	4b7e      	ldr	r3, [pc, #504]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1b8:	e005      	b.n	800a1c6 <HAL_RCC_OscConfig+0x8a>
 800a1ba:	4b7c      	ldr	r3, [pc, #496]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1c0:	091b      	lsrs	r3, r3, #4
 800a1c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d223      	bcs.n	800a212 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fdf8 	bl	800adc4 <RCC_SetFlashLatencyFromMSIRange>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e3c0      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a1de:	4b73      	ldr	r3, [pc, #460]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a72      	ldr	r2, [pc, #456]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1e4:	f043 0308 	orr.w	r3, r3, #8
 800a1e8:	6013      	str	r3, [r2, #0]
 800a1ea:	4b70      	ldr	r3, [pc, #448]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a1b      	ldr	r3, [r3, #32]
 800a1f6:	496d      	ldr	r1, [pc, #436]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a1fc:	4b6b      	ldr	r3, [pc, #428]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	4968      	ldr	r1, [pc, #416]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	604b      	str	r3, [r1, #4]
 800a210:	e025      	b.n	800a25e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a212:	4b66      	ldr	r3, [pc, #408]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a65      	ldr	r2, [pc, #404]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a218:	f043 0308 	orr.w	r3, r3, #8
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	4b63      	ldr	r3, [pc, #396]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	4960      	ldr	r1, [pc, #384]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a230:	4b5e      	ldr	r3, [pc, #376]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	021b      	lsls	r3, r3, #8
 800a23e:	495b      	ldr	r1, [pc, #364]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a240:	4313      	orrs	r3, r2
 800a242:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fdb8 	bl	800adc4 <RCC_SetFlashLatencyFromMSIRange>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e380      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a25e:	f000 fcc1 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800a262:	4602      	mov	r2, r0
 800a264:	4b51      	ldr	r3, [pc, #324]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	091b      	lsrs	r3, r3, #4
 800a26a:	f003 030f 	and.w	r3, r3, #15
 800a26e:	4950      	ldr	r1, [pc, #320]	; (800a3b0 <HAL_RCC_OscConfig+0x274>)
 800a270:	5ccb      	ldrb	r3, [r1, r3]
 800a272:	f003 031f 	and.w	r3, r3, #31
 800a276:	fa22 f303 	lsr.w	r3, r2, r3
 800a27a:	4a4e      	ldr	r2, [pc, #312]	; (800a3b4 <HAL_RCC_OscConfig+0x278>)
 800a27c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a27e:	4b4e      	ldr	r3, [pc, #312]	; (800a3b8 <HAL_RCC_OscConfig+0x27c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7fc fb7e 	bl	8006984 <HAL_InitTick>
 800a288:	4603      	mov	r3, r0
 800a28a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d052      	beq.n	800a338 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	e364      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d032      	beq.n	800a304 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a29e:	4b43      	ldr	r3, [pc, #268]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a42      	ldr	r2, [pc, #264]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2a4:	f043 0301 	orr.w	r3, r3, #1
 800a2a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a2aa:	f7fc fbbb 	bl	8006a24 <HAL_GetTick>
 800a2ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2b0:	e008      	b.n	800a2c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a2b2:	f7fc fbb7 	bl	8006a24 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d901      	bls.n	800a2c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e34d      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a2c4:	4b39      	ldr	r3, [pc, #228]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0302 	and.w	r3, r3, #2
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d0f0      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a2d0:	4b36      	ldr	r3, [pc, #216]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a35      	ldr	r2, [pc, #212]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2d6:	f043 0308 	orr.w	r3, r3, #8
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	4b33      	ldr	r3, [pc, #204]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	4930      	ldr	r1, [pc, #192]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a2ee:	4b2f      	ldr	r3, [pc, #188]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	492b      	ldr	r1, [pc, #172]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	604b      	str	r3, [r1, #4]
 800a302:	e01a      	b.n	800a33a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a304:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a28      	ldr	r2, [pc, #160]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a30a:	f023 0301 	bic.w	r3, r3, #1
 800a30e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a310:	f7fc fb88 	bl	8006a24 <HAL_GetTick>
 800a314:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a318:	f7fc fb84 	bl	8006a24 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e31a      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a32a:	4b20      	ldr	r3, [pc, #128]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f0      	bne.n	800a318 <HAL_RCC_OscConfig+0x1dc>
 800a336:	e000      	b.n	800a33a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a338:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d073      	beq.n	800a42e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d005      	beq.n	800a358 <HAL_RCC_OscConfig+0x21c>
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2b0c      	cmp	r3, #12
 800a350:	d10e      	bne.n	800a370 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	2b03      	cmp	r3, #3
 800a356:	d10b      	bne.n	800a370 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a358:	4b14      	ldr	r3, [pc, #80]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d063      	beq.n	800a42c <HAL_RCC_OscConfig+0x2f0>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d15f      	bne.n	800a42c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e2f7      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a378:	d106      	bne.n	800a388 <HAL_RCC_OscConfig+0x24c>
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a0b      	ldr	r2, [pc, #44]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	e025      	b.n	800a3d4 <HAL_RCC_OscConfig+0x298>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a390:	d114      	bne.n	800a3bc <HAL_RCC_OscConfig+0x280>
 800a392:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a05      	ldr	r2, [pc, #20]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a02      	ldr	r2, [pc, #8]	; (800a3ac <HAL_RCC_OscConfig+0x270>)
 800a3a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	e013      	b.n	800a3d4 <HAL_RCC_OscConfig+0x298>
 800a3ac:	40021000 	.word	0x40021000
 800a3b0:	0801c180 	.word	0x0801c180
 800a3b4:	20000010 	.word	0x20000010
 800a3b8:	20000014 	.word	0x20000014
 800a3bc:	4ba0      	ldr	r3, [pc, #640]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a9f      	ldr	r2, [pc, #636]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a3c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3c6:	6013      	str	r3, [r2, #0]
 800a3c8:	4b9d      	ldr	r3, [pc, #628]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a9c      	ldr	r2, [pc, #624]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a3ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d013      	beq.n	800a404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3dc:	f7fc fb22 	bl	8006a24 <HAL_GetTick>
 800a3e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3e2:	e008      	b.n	800a3f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3e4:	f7fc fb1e 	bl	8006a24 <HAL_GetTick>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	2b64      	cmp	r3, #100	; 0x64
 800a3f0:	d901      	bls.n	800a3f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a3f2:	2303      	movs	r3, #3
 800a3f4:	e2b4      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a3f6:	4b92      	ldr	r3, [pc, #584]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0f0      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x2a8>
 800a402:	e014      	b.n	800a42e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a404:	f7fc fb0e 	bl	8006a24 <HAL_GetTick>
 800a408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a40a:	e008      	b.n	800a41e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a40c:	f7fc fb0a 	bl	8006a24 <HAL_GetTick>
 800a410:	4602      	mov	r2, r0
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	2b64      	cmp	r3, #100	; 0x64
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e2a0      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a41e:	4b88      	ldr	r3, [pc, #544]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f0      	bne.n	800a40c <HAL_RCC_OscConfig+0x2d0>
 800a42a:	e000      	b.n	800a42e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a42c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0302 	and.w	r3, r3, #2
 800a436:	2b00      	cmp	r3, #0
 800a438:	d060      	beq.n	800a4fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d005      	beq.n	800a44c <HAL_RCC_OscConfig+0x310>
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	2b0c      	cmp	r3, #12
 800a444:	d119      	bne.n	800a47a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d116      	bne.n	800a47a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a44c:	4b7c      	ldr	r3, [pc, #496]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a454:	2b00      	cmp	r3, #0
 800a456:	d005      	beq.n	800a464 <HAL_RCC_OscConfig+0x328>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d101      	bne.n	800a464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e27d      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a464:	4b76      	ldr	r3, [pc, #472]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	061b      	lsls	r3, r3, #24
 800a472:	4973      	ldr	r1, [pc, #460]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a474:	4313      	orrs	r3, r2
 800a476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a478:	e040      	b.n	800a4fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68db      	ldr	r3, [r3, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d023      	beq.n	800a4ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a482:	4b6f      	ldr	r3, [pc, #444]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a6e      	ldr	r2, [pc, #440]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a48c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48e:	f7fc fac9 	bl	8006a24 <HAL_GetTick>
 800a492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a494:	e008      	b.n	800a4a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a496:	f7fc fac5 	bl	8006a24 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b02      	cmp	r3, #2
 800a4a2:	d901      	bls.n	800a4a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e25b      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4a8:	4b65      	ldr	r3, [pc, #404]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d0f0      	beq.n	800a496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4b4:	4b62      	ldr	r3, [pc, #392]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	061b      	lsls	r3, r3, #24
 800a4c2:	495f      	ldr	r1, [pc, #380]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	604b      	str	r3, [r1, #4]
 800a4c8:	e018      	b.n	800a4fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4ca:	4b5d      	ldr	r3, [pc, #372]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a5c      	ldr	r2, [pc, #368]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4d6:	f7fc faa5 	bl	8006a24 <HAL_GetTick>
 800a4da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4dc:	e008      	b.n	800a4f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4de:	f7fc faa1 	bl	8006a24 <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d901      	bls.n	800a4f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e237      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a4f0:	4b53      	ldr	r3, [pc, #332]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f0      	bne.n	800a4de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0308 	and.w	r3, r3, #8
 800a504:	2b00      	cmp	r3, #0
 800a506:	d03c      	beq.n	800a582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01c      	beq.n	800a54a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a510:	4b4b      	ldr	r3, [pc, #300]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a516:	4a4a      	ldr	r2, [pc, #296]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a518:	f043 0301 	orr.w	r3, r3, #1
 800a51c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a520:	f7fc fa80 	bl	8006a24 <HAL_GetTick>
 800a524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a528:	f7fc fa7c 	bl	8006a24 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e212      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a53a:	4b41      	ldr	r3, [pc, #260]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d0ef      	beq.n	800a528 <HAL_RCC_OscConfig+0x3ec>
 800a548:	e01b      	b.n	800a582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a54a:	4b3d      	ldr	r3, [pc, #244]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a54c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a550:	4a3b      	ldr	r2, [pc, #236]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a552:	f023 0301 	bic.w	r3, r3, #1
 800a556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a55a:	f7fc fa63 	bl	8006a24 <HAL_GetTick>
 800a55e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a560:	e008      	b.n	800a574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a562:	f7fc fa5f 	bl	8006a24 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d901      	bls.n	800a574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e1f5      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a574:	4b32      	ldr	r3, [pc, #200]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1ef      	bne.n	800a562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0304 	and.w	r3, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 80a6 	beq.w	800a6dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a590:	2300      	movs	r3, #0
 800a592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a594:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10d      	bne.n	800a5bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5a0:	4b27      	ldr	r3, [pc, #156]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a4:	4a26      	ldr	r2, [pc, #152]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5aa:	6593      	str	r3, [r2, #88]	; 0x58
 800a5ac:	4b24      	ldr	r3, [pc, #144]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a5ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b4:	60bb      	str	r3, [r7, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5bc:	4b21      	ldr	r3, [pc, #132]	; (800a644 <HAL_RCC_OscConfig+0x508>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d118      	bne.n	800a5fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5c8:	4b1e      	ldr	r3, [pc, #120]	; (800a644 <HAL_RCC_OscConfig+0x508>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1d      	ldr	r2, [pc, #116]	; (800a644 <HAL_RCC_OscConfig+0x508>)
 800a5ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5d4:	f7fc fa26 	bl	8006a24 <HAL_GetTick>
 800a5d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5da:	e008      	b.n	800a5ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5dc:	f7fc fa22 	bl	8006a24 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	d901      	bls.n	800a5ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e1b8      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5ee:	4b15      	ldr	r3, [pc, #84]	; (800a644 <HAL_RCC_OscConfig+0x508>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f0      	beq.n	800a5dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d108      	bne.n	800a614 <HAL_RCC_OscConfig+0x4d8>
 800a602:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a608:	4a0d      	ldr	r2, [pc, #52]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a60a:	f043 0301 	orr.w	r3, r3, #1
 800a60e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a612:	e029      	b.n	800a668 <HAL_RCC_OscConfig+0x52c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b05      	cmp	r3, #5
 800a61a:	d115      	bne.n	800a648 <HAL_RCC_OscConfig+0x50c>
 800a61c:	4b08      	ldr	r3, [pc, #32]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a622:	4a07      	ldr	r2, [pc, #28]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a624:	f043 0304 	orr.w	r3, r3, #4
 800a628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a62c:	4b04      	ldr	r3, [pc, #16]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a632:	4a03      	ldr	r2, [pc, #12]	; (800a640 <HAL_RCC_OscConfig+0x504>)
 800a634:	f043 0301 	orr.w	r3, r3, #1
 800a638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a63c:	e014      	b.n	800a668 <HAL_RCC_OscConfig+0x52c>
 800a63e:	bf00      	nop
 800a640:	40021000 	.word	0x40021000
 800a644:	40007000 	.word	0x40007000
 800a648:	4b9d      	ldr	r3, [pc, #628]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a64a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a64e:	4a9c      	ldr	r2, [pc, #624]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a650:	f023 0301 	bic.w	r3, r3, #1
 800a654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a658:	4b99      	ldr	r3, [pc, #612]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65e:	4a98      	ldr	r2, [pc, #608]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a660:	f023 0304 	bic.w	r3, r3, #4
 800a664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d016      	beq.n	800a69e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a670:	f7fc f9d8 	bl	8006a24 <HAL_GetTick>
 800a674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a676:	e00a      	b.n	800a68e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a678:	f7fc f9d4 	bl	8006a24 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	f241 3288 	movw	r2, #5000	; 0x1388
 800a686:	4293      	cmp	r3, r2
 800a688:	d901      	bls.n	800a68e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e168      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a68e:	4b8c      	ldr	r3, [pc, #560]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0ed      	beq.n	800a678 <HAL_RCC_OscConfig+0x53c>
 800a69c:	e015      	b.n	800a6ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a69e:	f7fc f9c1 	bl	8006a24 <HAL_GetTick>
 800a6a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6a4:	e00a      	b.n	800a6bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6a6:	f7fc f9bd 	bl	8006a24 <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d901      	bls.n	800a6bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e151      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a6bc:	4b80      	ldr	r3, [pc, #512]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c2:	f003 0302 	and.w	r3, r3, #2
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1ed      	bne.n	800a6a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6ca:	7ffb      	ldrb	r3, [r7, #31]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d105      	bne.n	800a6dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6d0:	4b7b      	ldr	r3, [pc, #492]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d4:	4a7a      	ldr	r2, [pc, #488]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a6d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 0320 	and.w	r3, r3, #32
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d03c      	beq.n	800a762 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01c      	beq.n	800a72a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6f0:	4b73      	ldr	r3, [pc, #460]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6f6:	4a72      	ldr	r2, [pc, #456]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a6f8:	f043 0301 	orr.w	r3, r3, #1
 800a6fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a700:	f7fc f990 	bl	8006a24 <HAL_GetTick>
 800a704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a706:	e008      	b.n	800a71a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a708:	f7fc f98c 	bl	8006a24 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e122      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a71a:	4b69      	ldr	r3, [pc, #420]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a71c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0ef      	beq.n	800a708 <HAL_RCC_OscConfig+0x5cc>
 800a728:	e01b      	b.n	800a762 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a72a:	4b65      	ldr	r3, [pc, #404]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a72c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a730:	4a63      	ldr	r2, [pc, #396]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a732:	f023 0301 	bic.w	r3, r3, #1
 800a736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a73a:	f7fc f973 	bl	8006a24 <HAL_GetTick>
 800a73e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a740:	e008      	b.n	800a754 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a742:	f7fc f96f 	bl	8006a24 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d901      	bls.n	800a754 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e105      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a754:	4b5a      	ldr	r3, [pc, #360]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1ef      	bne.n	800a742 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a766:	2b00      	cmp	r3, #0
 800a768:	f000 80f9 	beq.w	800a95e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a770:	2b02      	cmp	r3, #2
 800a772:	f040 80cf 	bne.w	800a914 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a776:	4b52      	ldr	r3, [pc, #328]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f003 0203 	and.w	r2, r3, #3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a786:	429a      	cmp	r2, r3
 800a788:	d12c      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	3b01      	subs	r3, #1
 800a796:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a798:	429a      	cmp	r2, r3
 800a79a:	d123      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d113      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d109      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d071      	beq.n	800a8c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	2b0c      	cmp	r3, #12
 800a7e8:	d068      	beq.n	800a8bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a7ea:	4b35      	ldr	r3, [pc, #212]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d105      	bne.n	800a802 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800a7f6:	4b32      	ldr	r3, [pc, #200]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e0ac      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a806:	4b2e      	ldr	r3, [pc, #184]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a2d      	ldr	r2, [pc, #180]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a80c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a810:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a812:	f7fc f907 	bl	8006a24 <HAL_GetTick>
 800a816:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a818:	e008      	b.n	800a82c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a81a:	f7fc f903 	bl	8006a24 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	2b02      	cmp	r3, #2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e099      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a82c:	4b24      	ldr	r3, [pc, #144]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f0      	bne.n	800a81a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a838:	4b21      	ldr	r3, [pc, #132]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	4b21      	ldr	r3, [pc, #132]	; (800a8c4 <HAL_RCC_OscConfig+0x788>)
 800a83e:	4013      	ands	r3, r2
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a848:	3a01      	subs	r2, #1
 800a84a:	0112      	lsls	r2, r2, #4
 800a84c:	4311      	orrs	r1, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a852:	0212      	lsls	r2, r2, #8
 800a854:	4311      	orrs	r1, r2
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a85a:	0852      	lsrs	r2, r2, #1
 800a85c:	3a01      	subs	r2, #1
 800a85e:	0552      	lsls	r2, r2, #21
 800a860:	4311      	orrs	r1, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a866:	0852      	lsrs	r2, r2, #1
 800a868:	3a01      	subs	r2, #1
 800a86a:	0652      	lsls	r2, r2, #25
 800a86c:	4311      	orrs	r1, r2
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a872:	06d2      	lsls	r2, r2, #27
 800a874:	430a      	orrs	r2, r1
 800a876:	4912      	ldr	r1, [pc, #72]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a87c:	4b10      	ldr	r3, [pc, #64]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a0f      	ldr	r2, [pc, #60]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a886:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a888:	4b0d      	ldr	r3, [pc, #52]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	4a0c      	ldr	r2, [pc, #48]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a88e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a892:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a894:	f7fc f8c6 	bl	8006a24 <HAL_GetTick>
 800a898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a89a:	e008      	b.n	800a8ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a89c:	f7fc f8c2 	bl	8006a24 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d901      	bls.n	800a8ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e058      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8ae:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <HAL_RCC_OscConfig+0x784>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d0f0      	beq.n	800a89c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a8ba:	e050      	b.n	800a95e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e04f      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
 800a8c0:	40021000 	.word	0x40021000
 800a8c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8c8:	4b27      	ldr	r3, [pc, #156]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d144      	bne.n	800a95e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a8d4:	4b24      	ldr	r3, [pc, #144]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a23      	ldr	r2, [pc, #140]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a8da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a8e0:	4b21      	ldr	r3, [pc, #132]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	4a20      	ldr	r2, [pc, #128]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a8e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a8ec:	f7fc f89a 	bl	8006a24 <HAL_GetTick>
 800a8f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8f4:	f7fc f896 	bl	8006a24 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e02c      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a906:	4b18      	ldr	r3, [pc, #96]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x7b8>
 800a912:	e024      	b.n	800a95e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b0c      	cmp	r3, #12
 800a918:	d01f      	beq.n	800a95a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a91a:	4b13      	ldr	r3, [pc, #76]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a12      	ldr	r2, [pc, #72]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a926:	f7fc f87d 	bl	8006a24 <HAL_GetTick>
 800a92a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a92c:	e008      	b.n	800a940 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a92e:	f7fc f879 	bl	8006a24 <HAL_GetTick>
 800a932:	4602      	mov	r2, r0
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b02      	cmp	r3, #2
 800a93a:	d901      	bls.n	800a940 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800a93c:	2303      	movs	r3, #3
 800a93e:	e00f      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a940:	4b09      	ldr	r3, [pc, #36]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1f0      	bne.n	800a92e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a94e:	68da      	ldr	r2, [r3, #12]
 800a950:	4905      	ldr	r1, [pc, #20]	; (800a968 <HAL_RCC_OscConfig+0x82c>)
 800a952:	4b06      	ldr	r3, [pc, #24]	; (800a96c <HAL_RCC_OscConfig+0x830>)
 800a954:	4013      	ands	r3, r2
 800a956:	60cb      	str	r3, [r1, #12]
 800a958:	e001      	b.n	800a95e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	40021000 	.word	0x40021000
 800a96c:	feeefffc 	.word	0xfeeefffc

0800a970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a97a:	2300      	movs	r3, #0
 800a97c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e11d      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a988:	4b90      	ldr	r3, [pc, #576]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 030f 	and.w	r3, r3, #15
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d910      	bls.n	800a9b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a996:	4b8d      	ldr	r3, [pc, #564]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f023 020f 	bic.w	r2, r3, #15
 800a99e:	498b      	ldr	r1, [pc, #556]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9a6:	4b89      	ldr	r3, [pc, #548]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 030f 	and.w	r3, r3, #15
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d001      	beq.n	800a9b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e105      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0302 	and.w	r3, r3, #2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d010      	beq.n	800a9e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	4b81      	ldr	r3, [pc, #516]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d908      	bls.n	800a9e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9d4:	4b7e      	ldr	r3, [pc, #504]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	497b      	ldr	r1, [pc, #492]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0301 	and.w	r3, r3, #1
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d079      	beq.n	800aae6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d11e      	bne.n	800aa38 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a9fa:	4b75      	ldr	r3, [pc, #468]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d101      	bne.n	800aa0a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e0dc      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800aa0a:	f000 fa35 	bl	800ae78 <RCC_GetSysClockFreqFromPLLSource>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4a70      	ldr	r2, [pc, #448]	; (800abd4 <HAL_RCC_ClockConfig+0x264>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d946      	bls.n	800aaa4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800aa16:	4b6e      	ldr	r3, [pc, #440]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d140      	bne.n	800aaa4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aa22:	4b6b      	ldr	r3, [pc, #428]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa2a:	4a69      	ldr	r2, [pc, #420]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aa32:	2380      	movs	r3, #128	; 0x80
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e035      	b.n	800aaa4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa40:	4b63      	ldr	r3, [pc, #396]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d115      	bne.n	800aa78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e0b9      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d107      	bne.n	800aa68 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800aa58:	4b5d      	ldr	r3, [pc, #372]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d109      	bne.n	800aa78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e0ad      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aa68:	4b59      	ldr	r3, [pc, #356]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e0a5      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800aa78:	f000 f8b4 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	4a55      	ldr	r2, [pc, #340]	; (800abd4 <HAL_RCC_ClockConfig+0x264>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d90f      	bls.n	800aaa4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800aa84:	4b52      	ldr	r3, [pc, #328]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa86:	689b      	ldr	r3, [r3, #8]
 800aa88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aa90:	4b4f      	ldr	r3, [pc, #316]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa98:	4a4d      	ldr	r2, [pc, #308]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aa9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa9e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800aaa0:	2380      	movs	r3, #128	; 0x80
 800aaa2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aaa4:	4b4a      	ldr	r3, [pc, #296]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f023 0203 	bic.w	r2, r3, #3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	4947      	ldr	r1, [pc, #284]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aab6:	f7fb ffb5 	bl	8006a24 <HAL_GetTick>
 800aaba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aabc:	e00a      	b.n	800aad4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aabe:	f7fb ffb1 	bl	8006a24 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aacc:	4293      	cmp	r3, r2
 800aace:	d901      	bls.n	800aad4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e077      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aad4:	4b3e      	ldr	r3, [pc, #248]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f003 020c 	and.w	r2, r3, #12
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d1eb      	bne.n	800aabe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b80      	cmp	r3, #128	; 0x80
 800aaea:	d105      	bne.n	800aaf8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800aaec:	4b38      	ldr	r3, [pc, #224]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	4a37      	ldr	r2, [pc, #220]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800aaf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaf6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d010      	beq.n	800ab26 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d208      	bcs.n	800ab26 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab14:	4b2e      	ldr	r3, [pc, #184]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	492b      	ldr	r1, [pc, #172]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab22:	4313      	orrs	r3, r2
 800ab24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ab26:	4b29      	ldr	r3, [pc, #164]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 030f 	and.w	r3, r3, #15
 800ab2e:	683a      	ldr	r2, [r7, #0]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d210      	bcs.n	800ab56 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab34:	4b25      	ldr	r3, [pc, #148]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f023 020f 	bic.w	r2, r3, #15
 800ab3c:	4923      	ldr	r1, [pc, #140]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab44:	4b21      	ldr	r3, [pc, #132]	; (800abcc <HAL_RCC_ClockConfig+0x25c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d001      	beq.n	800ab56 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	e036      	b.n	800abc4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0304 	and.w	r3, r3, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d008      	beq.n	800ab74 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab62:	4b1b      	ldr	r3, [pc, #108]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	4918      	ldr	r1, [pc, #96]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab70:	4313      	orrs	r3, r2
 800ab72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0308 	and.w	r3, r3, #8
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d009      	beq.n	800ab94 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ab80:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	00db      	lsls	r3, r3, #3
 800ab8e:	4910      	ldr	r1, [pc, #64]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ab94:	f000 f826 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	; (800abd0 <HAL_RCC_ClockConfig+0x260>)
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	091b      	lsrs	r3, r3, #4
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	490c      	ldr	r1, [pc, #48]	; (800abd8 <HAL_RCC_ClockConfig+0x268>)
 800aba6:	5ccb      	ldrb	r3, [r1, r3]
 800aba8:	f003 031f 	and.w	r3, r3, #31
 800abac:	fa22 f303 	lsr.w	r3, r2, r3
 800abb0:	4a0a      	ldr	r2, [pc, #40]	; (800abdc <HAL_RCC_ClockConfig+0x26c>)
 800abb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <HAL_RCC_ClockConfig+0x270>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fb fee3 	bl	8006984 <HAL_InitTick>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73fb      	strb	r3, [r7, #15]

  return status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	40022000 	.word	0x40022000
 800abd0:	40021000 	.word	0x40021000
 800abd4:	04c4b400 	.word	0x04c4b400
 800abd8:	0801c180 	.word	0x0801c180
 800abdc:	20000010 	.word	0x20000010
 800abe0:	20000014 	.word	0x20000014

0800abe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	; 0x24
 800abe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	61fb      	str	r3, [r7, #28]
 800abee:	2300      	movs	r3, #0
 800abf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abf2:	4b3e      	ldr	r3, [pc, #248]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f003 030c 	and.w	r3, r3, #12
 800abfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800abfc:	4b3b      	ldr	r3, [pc, #236]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	f003 0303 	and.w	r3, r3, #3
 800ac04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <HAL_RCC_GetSysClockFreq+0x34>
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	2b0c      	cmp	r3, #12
 800ac10:	d121      	bne.n	800ac56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d11e      	bne.n	800ac56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ac18:	4b34      	ldr	r3, [pc, #208]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0308 	and.w	r3, r3, #8
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d107      	bne.n	800ac34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ac24:	4b31      	ldr	r3, [pc, #196]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800ac26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	f003 030f 	and.w	r3, r3, #15
 800ac30:	61fb      	str	r3, [r7, #28]
 800ac32:	e005      	b.n	800ac40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ac34:	4b2d      	ldr	r3, [pc, #180]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	091b      	lsrs	r3, r3, #4
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800ac40:	4a2b      	ldr	r2, [pc, #172]	; (800acf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10d      	bne.n	800ac6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800ac50:	69fb      	ldr	r3, [r7, #28]
 800ac52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ac54:	e00a      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d102      	bne.n	800ac62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ac5c:	4b25      	ldr	r3, [pc, #148]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac5e:	61bb      	str	r3, [r7, #24]
 800ac60:	e004      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d101      	bne.n	800ac6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ac68:	4b23      	ldr	r3, [pc, #140]	; (800acf8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2b0c      	cmp	r3, #12
 800ac70:	d134      	bne.n	800acdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ac72:	4b1e      	ldr	r3, [pc, #120]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d003      	beq.n	800ac8a <HAL_RCC_GetSysClockFreq+0xa6>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d003      	beq.n	800ac90 <HAL_RCC_GetSysClockFreq+0xac>
 800ac88:	e005      	b.n	800ac96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800ac8a:	4b1a      	ldr	r3, [pc, #104]	; (800acf4 <HAL_RCC_GetSysClockFreq+0x110>)
 800ac8c:	617b      	str	r3, [r7, #20]
      break;
 800ac8e:	e005      	b.n	800ac9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800ac90:	4b19      	ldr	r3, [pc, #100]	; (800acf8 <HAL_RCC_GetSysClockFreq+0x114>)
 800ac92:	617b      	str	r3, [r7, #20]
      break;
 800ac94:	e002      	b.n	800ac9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	617b      	str	r3, [r7, #20]
      break;
 800ac9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ac9c:	4b13      	ldr	r3, [pc, #76]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	091b      	lsrs	r3, r3, #4
 800aca2:	f003 030f 	and.w	r3, r3, #15
 800aca6:	3301      	adds	r3, #1
 800aca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800acaa:	4b10      	ldr	r3, [pc, #64]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	0a1b      	lsrs	r3, r3, #8
 800acb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	fb03 f202 	mul.w	r2, r3, r2
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800acc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800acc2:	4b0a      	ldr	r3, [pc, #40]	; (800acec <HAL_RCC_GetSysClockFreq+0x108>)
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	0e5b      	lsrs	r3, r3, #25
 800acc8:	f003 0303 	and.w	r3, r3, #3
 800accc:	3301      	adds	r3, #1
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800acdc:	69bb      	ldr	r3, [r7, #24]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3724      	adds	r7, #36	; 0x24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	40021000 	.word	0x40021000
 800acf0:	0801c198 	.word	0x0801c198
 800acf4:	00f42400 	.word	0x00f42400
 800acf8:	007a1200 	.word	0x007a1200

0800acfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acfc:	b480      	push	{r7}
 800acfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad00:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad02:	681b      	ldr	r3, [r3, #0]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	20000010 	.word	0x20000010

0800ad14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ad18:	f7ff fff0 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	4b06      	ldr	r3, [pc, #24]	; (800ad38 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	f003 0307 	and.w	r3, r3, #7
 800ad28:	4904      	ldr	r1, [pc, #16]	; (800ad3c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ad2a:	5ccb      	ldrb	r3, [r1, r3]
 800ad2c:	f003 031f 	and.w	r3, r3, #31
 800ad30:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	40021000 	.word	0x40021000
 800ad3c:	0801c190 	.word	0x0801c190

0800ad40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ad44:	f7ff ffda 	bl	800acfc <HAL_RCC_GetHCLKFreq>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	4b06      	ldr	r3, [pc, #24]	; (800ad64 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	0adb      	lsrs	r3, r3, #11
 800ad50:	f003 0307 	and.w	r3, r3, #7
 800ad54:	4904      	ldr	r1, [pc, #16]	; (800ad68 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ad56:	5ccb      	ldrb	r3, [r1, r3]
 800ad58:	f003 031f 	and.w	r3, r3, #31
 800ad5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	40021000 	.word	0x40021000
 800ad68:	0801c190 	.word	0x0801c190

0800ad6c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800ad70:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <HAL_RCC_EnableCSS+0x1c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a04      	ldr	r2, [pc, #16]	; (800ad88 <HAL_RCC_EnableCSS+0x1c>)
 800ad76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad7a:	6013      	str	r3, [r2, #0]
}
 800ad7c:	bf00      	nop
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	40021000 	.word	0x40021000

0800ad8c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9c:	d105      	bne.n	800adaa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ad9e:	f000 f809 	bl	800adb4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ada2:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ada4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ada8:	621a      	str	r2, [r3, #32]
  }
}
 800adaa:	bf00      	nop
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	40021000 	.word	0x40021000

0800adb4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800adcc:	2300      	movs	r3, #0
 800adce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800add0:	4b27      	ldr	r3, [pc, #156]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800add2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800addc:	f7ff f8da 	bl	8009f94 <HAL_PWREx_GetVoltageRange>
 800ade0:	6178      	str	r0, [r7, #20]
 800ade2:	e014      	b.n	800ae0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800ade4:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ade6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade8:	4a21      	ldr	r2, [pc, #132]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800adea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800adee:	6593      	str	r3, [r2, #88]	; 0x58
 800adf0:	4b1f      	ldr	r3, [pc, #124]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800adf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800adfc:	f7ff f8ca 	bl	8009f94 <HAL_PWREx_GetVoltageRange>
 800ae00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800ae02:	4b1b      	ldr	r3, [pc, #108]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ae04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae06:	4a1a      	ldr	r2, [pc, #104]	; (800ae70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800ae08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae14:	d10b      	bne.n	800ae2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b80      	cmp	r3, #128	; 0x80
 800ae1a:	d913      	bls.n	800ae44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2ba0      	cmp	r3, #160	; 0xa0
 800ae20:	d902      	bls.n	800ae28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800ae22:	2302      	movs	r3, #2
 800ae24:	613b      	str	r3, [r7, #16]
 800ae26:	e00d      	b.n	800ae44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae28:	2301      	movs	r3, #1
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	e00a      	b.n	800ae44 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b7f      	cmp	r3, #127	; 0x7f
 800ae32:	d902      	bls.n	800ae3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800ae34:	2302      	movs	r3, #2
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	e004      	b.n	800ae44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2b70      	cmp	r3, #112	; 0x70
 800ae3e:	d101      	bne.n	800ae44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800ae40:	2301      	movs	r3, #1
 800ae42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800ae44:	4b0b      	ldr	r3, [pc, #44]	; (800ae74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f023 020f 	bic.w	r2, r3, #15
 800ae4c:	4909      	ldr	r1, [pc, #36]	; (800ae74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800ae54:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 030f 	and.w	r3, r3, #15
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d001      	beq.n	800ae66 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	40021000 	.word	0x40021000
 800ae74:	40022000 	.word	0x40022000

0800ae78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b087      	sub	sp, #28
 800ae7c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ae7e:	4b2d      	ldr	r3, [pc, #180]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f003 0303 	and.w	r3, r3, #3
 800ae86:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d00b      	beq.n	800aea6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d825      	bhi.n	800aee0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d008      	beq.n	800aeac <RCC_GetSysClockFreqFromPLLSource+0x34>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d11f      	bne.n	800aee0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800aea0:	4b25      	ldr	r3, [pc, #148]	; (800af38 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800aea2:	613b      	str	r3, [r7, #16]
    break;
 800aea4:	e01f      	b.n	800aee6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800aea6:	4b25      	ldr	r3, [pc, #148]	; (800af3c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800aea8:	613b      	str	r3, [r7, #16]
    break;
 800aeaa:	e01c      	b.n	800aee6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800aeac:	4b21      	ldr	r3, [pc, #132]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d107      	bne.n	800aec8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800aeb8:	4b1e      	ldr	r3, [pc, #120]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aeba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aebe:	0a1b      	lsrs	r3, r3, #8
 800aec0:	f003 030f 	and.w	r3, r3, #15
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	e005      	b.n	800aed4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800aec8:	4b1a      	ldr	r3, [pc, #104]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	091b      	lsrs	r3, r3, #4
 800aece:	f003 030f 	and.w	r3, r3, #15
 800aed2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800aed4:	4a1a      	ldr	r2, [pc, #104]	; (800af40 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aedc:	613b      	str	r3, [r7, #16]
    break;
 800aede:	e002      	b.n	800aee6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	613b      	str	r3, [r7, #16]
    break;
 800aee4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aee6:	4b13      	ldr	r3, [pc, #76]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	091b      	lsrs	r3, r3, #4
 800aeec:	f003 030f 	and.w	r3, r3, #15
 800aef0:	3301      	adds	r3, #1
 800aef2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800aef4:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	0a1b      	lsrs	r3, r3, #8
 800aefa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	fb03 f202 	mul.w	r2, r3, r2
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800af0c:	4b09      	ldr	r3, [pc, #36]	; (800af34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	0e5b      	lsrs	r3, r3, #25
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	3301      	adds	r3, #1
 800af18:	005b      	lsls	r3, r3, #1
 800af1a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	fbb2 f3f3 	udiv	r3, r2, r3
 800af24:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800af26:	683b      	ldr	r3, [r7, #0]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	371c      	adds	r7, #28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr
 800af34:	40021000 	.word	0x40021000
 800af38:	00f42400 	.word	0x00f42400
 800af3c:	007a1200 	.word	0x007a1200
 800af40:	0801c198 	.word	0x0801c198

0800af44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af4c:	2300      	movs	r3, #0
 800af4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af50:	2300      	movs	r3, #0
 800af52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d040      	beq.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2b80      	cmp	r3, #128	; 0x80
 800af66:	d02a      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af68:	2b80      	cmp	r3, #128	; 0x80
 800af6a:	d825      	bhi.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800af6c:	2b60      	cmp	r3, #96	; 0x60
 800af6e:	d026      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800af70:	2b60      	cmp	r3, #96	; 0x60
 800af72:	d821      	bhi.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800af74:	2b40      	cmp	r3, #64	; 0x40
 800af76:	d006      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800af78:	2b40      	cmp	r3, #64	; 0x40
 800af7a:	d81d      	bhi.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d009      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800af80:	2b20      	cmp	r3, #32
 800af82:	d010      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 800af84:	e018      	b.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800af86:	4b89      	ldr	r3, [pc, #548]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	4a88      	ldr	r2, [pc, #544]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800af8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af90:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800af92:	e015      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3304      	adds	r3, #4
 800af98:	2100      	movs	r1, #0
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 fa24 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800afa0:	4603      	mov	r3, r0
 800afa2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800afa4:	e00c      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3320      	adds	r3, #32
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f001 fb0f 	bl	800c5d0 <RCCEx_PLLSAI2_Config>
 800afb2:	4603      	mov	r3, r0
 800afb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800afb6:	e003      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	74fb      	strb	r3, [r7, #19]
      break;
 800afbc:	e000      	b.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800afbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afc0:	7cfb      	ldrb	r3, [r7, #19]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10b      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afc6:	4b79      	ldr	r3, [pc, #484]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800afcc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd4:	4975      	ldr	r1, [pc, #468]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800afd6:	4313      	orrs	r3, r2
 800afd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800afdc:	e001      	b.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afde:	7cfb      	ldrb	r3, [r7, #19]
 800afe0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afea:	2b00      	cmp	r3, #0
 800afec:	d047      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aff6:	d030      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800affc:	d82a      	bhi.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800affe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b002:	d02a      	beq.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800b004:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b008:	d824      	bhi.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b00a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b00e:	d008      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0xde>
 800b010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b014:	d81e      	bhi.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800b01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b01e:	d010      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b020:	e018      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b022:	4b62      	ldr	r3, [pc, #392]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	4a61      	ldr	r2, [pc, #388]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b02c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b02e:	e015      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	3304      	adds	r3, #4
 800b034:	2100      	movs	r1, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f001 f9d6 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800b03c:	4603      	mov	r3, r0
 800b03e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b040:	e00c      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3320      	adds	r3, #32
 800b046:	2100      	movs	r1, #0
 800b048:	4618      	mov	r0, r3
 800b04a:	f001 fac1 	bl	800c5d0 <RCCEx_PLLSAI2_Config>
 800b04e:	4603      	mov	r3, r0
 800b050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b052:	e003      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	74fb      	strb	r3, [r7, #19]
      break;
 800b058:	e000      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800b05a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b05c:	7cfb      	ldrb	r3, [r7, #19]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10b      	bne.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b062:	4b52      	ldr	r3, [pc, #328]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b064:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b068:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b070:	494e      	ldr	r1, [pc, #312]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b072:	4313      	orrs	r3, r2
 800b074:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800b078:	e001      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b07a:	7cfb      	ldrb	r3, [r7, #19]
 800b07c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b086:	2b00      	cmp	r3, #0
 800b088:	f000 809f 	beq.w	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b08c:	2300      	movs	r3, #0
 800b08e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b090:	4b46      	ldr	r3, [pc, #280]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e000      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00d      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0a6:	4b41      	ldr	r3, [pc, #260]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b0a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0aa:	4a40      	ldr	r2, [pc, #256]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b0ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b0b2:	4b3e      	ldr	r3, [pc, #248]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b0b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ba:	60bb      	str	r3, [r7, #8]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0c2:	4b3b      	ldr	r3, [pc, #236]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a3a      	ldr	r2, [pc, #232]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b0c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b0ce:	f7fb fca9 	bl	8006a24 <HAL_GetTick>
 800b0d2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b0d4:	e009      	b.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0d6:	f7fb fca5 	bl	8006a24 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	2b02      	cmp	r3, #2
 800b0e2:	d902      	bls.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	74fb      	strb	r3, [r7, #19]
        break;
 800b0e8:	e005      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b0ea:	4b31      	ldr	r3, [pc, #196]	; (800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d0ef      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800b0f6:	7cfb      	ldrb	r3, [r7, #19]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d15b      	bne.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b0fc:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b106:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d01f      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	429a      	cmp	r2, r3
 800b118:	d019      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b11a:	4b24      	ldr	r3, [pc, #144]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b126:	4b21      	ldr	r3, [pc, #132]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12c:	4a1f      	ldr	r2, [pc, #124]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b12e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b136:	4b1d      	ldr	r3, [pc, #116]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b13c:	4a1b      	ldr	r2, [pc, #108]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b13e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b146:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d016      	beq.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b158:	f7fb fc64 	bl	8006a24 <HAL_GetTick>
 800b15c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b15e:	e00b      	b.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b160:	f7fb fc60 	bl	8006a24 <HAL_GetTick>
 800b164:	4602      	mov	r2, r0
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16e:	4293      	cmp	r3, r2
 800b170:	d902      	bls.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	74fb      	strb	r3, [r7, #19]
            break;
 800b176:	e006      	b.n	800b186 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0ec      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800b186:	7cfb      	ldrb	r3, [r7, #19]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10c      	bne.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b18c:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b18e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b19c:	4903      	ldr	r1, [pc, #12]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b1a4:	e008      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b1a6:	7cfb      	ldrb	r3, [r7, #19]
 800b1a8:	74bb      	strb	r3, [r7, #18]
 800b1aa:	e005      	b.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800b1ac:	40021000 	.word	0x40021000
 800b1b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b4:	7cfb      	ldrb	r3, [r7, #19]
 800b1b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1b8:	7c7b      	ldrb	r3, [r7, #17]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d105      	bne.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1be:	4ba0      	ldr	r3, [pc, #640]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c2:	4a9f      	ldr	r2, [pc, #636]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b1d6:	4b9a      	ldr	r3, [pc, #616]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1dc:	f023 0203 	bic.w	r2, r3, #3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1e4:	4996      	ldr	r1, [pc, #600]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b1f8:	4b91      	ldr	r3, [pc, #580]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b1fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1fe:	f023 020c 	bic.w	r2, r3, #12
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b206:	498e      	ldr	r1, [pc, #568]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b21a:	4b89      	ldr	r3, [pc, #548]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b228:	4985      	ldr	r1, [pc, #532]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0308 	and.w	r3, r3, #8
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b23c:	4b80      	ldr	r3, [pc, #512]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b24a:	497d      	ldr	r1, [pc, #500]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0310 	and.w	r3, r3, #16
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b25e:	4b78      	ldr	r3, [pc, #480]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26c:	4974      	ldr	r1, [pc, #464]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0320 	and.w	r3, r3, #32
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b280:	4b6f      	ldr	r3, [pc, #444]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b286:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28e:	496c      	ldr	r1, [pc, #432]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b290:	4313      	orrs	r3, r2
 800b292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2a2:	4b67      	ldr	r3, [pc, #412]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2b0:	4963      	ldr	r1, [pc, #396]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b2c4:	4b5e      	ldr	r3, [pc, #376]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2d2:	495b      	ldr	r1, [pc, #364]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b2e6:	4b56      	ldr	r3, [pc, #344]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f4:	4952      	ldr	r1, [pc, #328]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b308:	4b4d      	ldr	r3, [pc, #308]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b316:	494a      	ldr	r1, [pc, #296]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b32a:	4b45      	ldr	r3, [pc, #276]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b338:	4941      	ldr	r1, [pc, #260]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b34c:	4b3c      	ldr	r3, [pc, #240]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b34e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b352:	f023 0203 	bic.w	r2, r3, #3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b35a:	4939      	ldr	r1, [pc, #228]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d028      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b36e:	4b34      	ldr	r3, [pc, #208]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37c:	4930      	ldr	r1, [pc, #192]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b38c:	d106      	bne.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b38e:	4b2c      	ldr	r3, [pc, #176]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	4a2b      	ldr	r2, [pc, #172]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b398:	60d3      	str	r3, [r2, #12]
 800b39a:	e011      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3a4:	d10c      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f001 f81b 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b3b6:	7cfb      	ldrb	r3, [r7, #19]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800b3bc:	7cfb      	ldrb	r3, [r7, #19]
 800b3be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d04d      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b3d4:	d108      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800b3d6:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3dc:	4a18      	ldr	r2, [pc, #96]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b3e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b3e6:	e012      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800b3e8:	4b15      	ldr	r3, [pc, #84]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3ee:	4a14      	ldr	r2, [pc, #80]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b3f8:	4b11      	ldr	r3, [pc, #68]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b406:	490e      	ldr	r1, [pc, #56]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b416:	d106      	bne.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b418:	4b09      	ldr	r3, [pc, #36]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	4a08      	ldr	r2, [pc, #32]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b41e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b422:	60d3      	str	r3, [r2, #12]
 800b424:	e020      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b42a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b42e:	d109      	bne.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b430:	4b03      	ldr	r3, [pc, #12]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	4a02      	ldr	r2, [pc, #8]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800b436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b43a:	60d3      	str	r3, [r2, #12]
 800b43c:	e014      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b43e:	bf00      	nop
 800b440:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b44c:	d10c      	bne.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3304      	adds	r3, #4
 800b452:	2101      	movs	r1, #1
 800b454:	4618      	mov	r0, r3
 800b456:	f000 ffc7 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800b45a:	4603      	mov	r3, r0
 800b45c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b45e:	7cfb      	ldrb	r3, [r7, #19]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800b464:	7cfb      	ldrb	r3, [r7, #19]
 800b466:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d028      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b474:	4b4a      	ldr	r3, [pc, #296]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b482:	4947      	ldr	r1, [pc, #284]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b484:	4313      	orrs	r3, r2
 800b486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b48e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b492:	d106      	bne.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b494:	4b42      	ldr	r3, [pc, #264]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	4a41      	ldr	r2, [pc, #260]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b49a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b49e:	60d3      	str	r3, [r2, #12]
 800b4a0:	e011      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4aa:	d10c      	bne.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3304      	adds	r3, #4
 800b4b0:	2101      	movs	r1, #1
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 ff98 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b4bc:	7cfb      	ldrb	r3, [r7, #19]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d001      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800b4c2:	7cfb      	ldrb	r3, [r7, #19]
 800b4c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d01e      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4d2:	4b33      	ldr	r3, [pc, #204]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4e2:	492f      	ldr	r1, [pc, #188]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4f4:	d10c      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 ff73 	bl	800c3e8 <RCCEx_PLLSAI1_Config>
 800b502:	4603      	mov	r3, r0
 800b504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b506:	7cfb      	ldrb	r3, [r7, #19]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800b50c:	7cfb      	ldrb	r3, [r7, #19]
 800b50e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b51c:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b51e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b522:	f023 0204 	bic.w	r2, r3, #4
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52c:	491c      	ldr	r1, [pc, #112]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b540:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b546:	f023 0218 	bic.w	r2, r3, #24
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b550:	4913      	ldr	r1, [pc, #76]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b552:	4313      	orrs	r3, r2
 800b554:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d017      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b56a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b574:	490a      	ldr	r1, [pc, #40]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b576:	4313      	orrs	r3, r2
 800b578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b586:	d105      	bne.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b588:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b58e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b592:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b594:	7cbb      	ldrb	r3, [r7, #18]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	40021000 	.word	0x40021000

0800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b088      	sub	sp, #32
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5b6:	d13e      	bne.n	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b5b8:	4bb6      	ldr	r3, [pc, #728]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ca:	d028      	beq.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d2:	f200 86f4 	bhi.w	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5dc:	d005      	beq.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e4:	d00e      	beq.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800b5e6:	f000 beea 	b.w	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b5ea:	4baa      	ldr	r3, [pc, #680]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b5ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	f040 86e4 	bne.w	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800b5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5fe:	61fb      	str	r3, [r7, #28]
      break;
 800b600:	f000 bedf 	b.w	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800b604:	4ba3      	ldr	r3, [pc, #652]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	2b02      	cmp	r3, #2
 800b610:	f040 86d9 	bne.w	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 800b614:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b618:	61fb      	str	r3, [r7, #28]
      break;
 800b61a:	f000 bed4 	b.w	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b61e:	4b9d      	ldr	r3, [pc, #628]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b62a:	f040 86ce 	bne.w	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800b62e:	4b9a      	ldr	r3, [pc, #616]	; (800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800b630:	61fb      	str	r3, [r7, #28]
      break;
 800b632:	f000 beca 	b.w	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b636:	4b97      	ldr	r3, [pc, #604]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f003 0303 	and.w	r3, r3, #3
 800b63e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b03      	cmp	r3, #3
 800b644:	d036      	beq.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d840      	bhi.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d003      	beq.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b02      	cmp	r3, #2
 800b656:	d020      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800b658:	e039      	b.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b65a:	4b8e      	ldr	r3, [pc, #568]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 0302 	and.w	r3, r3, #2
 800b662:	2b02      	cmp	r3, #2
 800b664:	d116      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b666:	4b8b      	ldr	r3, [pc, #556]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0308 	and.w	r3, r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d005      	beq.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800b672:	4b88      	ldr	r3, [pc, #544]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	091b      	lsrs	r3, r3, #4
 800b678:	f003 030f 	and.w	r3, r3, #15
 800b67c:	e005      	b.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800b67e:	4b85      	ldr	r3, [pc, #532]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b684:	0a1b      	lsrs	r3, r3, #8
 800b686:	f003 030f 	and.w	r3, r3, #15
 800b68a:	4a84      	ldr	r2, [pc, #528]	; (800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800b68c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b690:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800b692:	e01f      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800b694:	2300      	movs	r3, #0
 800b696:	61bb      	str	r3, [r7, #24]
      break;
 800b698:	e01c      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b69a:	4b7e      	ldr	r3, [pc, #504]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6a6:	d102      	bne.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 800b6a8:	4b7d      	ldr	r3, [pc, #500]	; (800b8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800b6aa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800b6ac:	e012      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	61bb      	str	r3, [r7, #24]
      break;
 800b6b2:	e00f      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6b4:	4b77      	ldr	r3, [pc, #476]	; (800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800b6c2:	4b78      	ldr	r3, [pc, #480]	; (800b8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800b6c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800b6c6:	e005      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	61bb      	str	r3, [r7, #24]
      break;
 800b6cc:	e002      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	61bb      	str	r3, [r7, #24]
      break;
 800b6d2:	bf00      	nop
    }

    switch(PeriphClk)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6da:	f000 8606 	beq.w	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6e4:	f200 8673 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ee:	f000 8469 	beq.w	800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6f8:	f200 8669 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b702:	f000 8531 	beq.w	800c168 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b70c:	f200 865f 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b716:	f000 8187 	beq.w	800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b720:	f200 8655 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b72a:	f000 80cd 	beq.w	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b734:	f200 864b 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b73e:	f000 8430 	beq.w	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b748:	f200 8641 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b752:	f000 83e4 	beq.w	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b75c:	f200 8637 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b766:	f000 80af 	beq.w	800b8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b770:	f200 862d 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b77a:	f000 809d 	beq.w	800b8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b784:	f200 8623 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b78e:	f000 808b 	beq.w	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b798:	f200 8619 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7a2:	f000 8554 	beq.w	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ac:	f200 860f 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b6:	f000 8500 	beq.w	800c1ba <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7c0:	f200 8605 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ca:	f000 84a1 	beq.w	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d4:	f200 85fb 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b80      	cmp	r3, #128	; 0x80
 800b7dc:	f000 846c 	beq.w	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b80      	cmp	r3, #128	; 0x80
 800b7e4:	f200 85f3 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b20      	cmp	r3, #32
 800b7ec:	d84c      	bhi.n	800b888 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 85ec 	beq.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	2b1f      	cmp	r3, #31
 800b7fc:	f200 85e7 	bhi.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800bc1d 	.word	0x0800bc1d
 800b80c:	0800bc8b 	.word	0x0800bc8b
 800b810:	0800c3cf 	.word	0x0800c3cf
 800b814:	0800bd1f 	.word	0x0800bd1f
 800b818:	0800c3cf 	.word	0x0800c3cf
 800b81c:	0800c3cf 	.word	0x0800c3cf
 800b820:	0800c3cf 	.word	0x0800c3cf
 800b824:	0800bd97 	.word	0x0800bd97
 800b828:	0800c3cf 	.word	0x0800c3cf
 800b82c:	0800c3cf 	.word	0x0800c3cf
 800b830:	0800c3cf 	.word	0x0800c3cf
 800b834:	0800c3cf 	.word	0x0800c3cf
 800b838:	0800c3cf 	.word	0x0800c3cf
 800b83c:	0800c3cf 	.word	0x0800c3cf
 800b840:	0800c3cf 	.word	0x0800c3cf
 800b844:	0800be1b 	.word	0x0800be1b
 800b848:	0800c3cf 	.word	0x0800c3cf
 800b84c:	0800c3cf 	.word	0x0800c3cf
 800b850:	0800c3cf 	.word	0x0800c3cf
 800b854:	0800c3cf 	.word	0x0800c3cf
 800b858:	0800c3cf 	.word	0x0800c3cf
 800b85c:	0800c3cf 	.word	0x0800c3cf
 800b860:	0800c3cf 	.word	0x0800c3cf
 800b864:	0800c3cf 	.word	0x0800c3cf
 800b868:	0800c3cf 	.word	0x0800c3cf
 800b86c:	0800c3cf 	.word	0x0800c3cf
 800b870:	0800c3cf 	.word	0x0800c3cf
 800b874:	0800c3cf 	.word	0x0800c3cf
 800b878:	0800c3cf 	.word	0x0800c3cf
 800b87c:	0800c3cf 	.word	0x0800c3cf
 800b880:	0800c3cf 	.word	0x0800c3cf
 800b884:	0800be9d 	.word	0x0800be9d
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b40      	cmp	r3, #64	; 0x40
 800b88c:	f000 83e8 	beq.w	800c060 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800b890:	f000 bd9d 	b.w	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800b894:	40021000 	.word	0x40021000
 800b898:	0003d090 	.word	0x0003d090
 800b89c:	0801c198 	.word	0x0801c198
 800b8a0:	00f42400 	.word	0x00f42400
 800b8a4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800b8a8:	69b9      	ldr	r1, [r7, #24]
 800b8aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b8ae:	f000 ff83 	bl	800c7b8 <RCCEx_GetSAIxPeriphCLKFreq>
 800b8b2:	61f8      	str	r0, [r7, #28]
      break;
 800b8b4:	f000 bd8e 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800b8b8:	69b9      	ldr	r1, [r7, #24]
 800b8ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b8be:	f000 ff7b 	bl	800c7b8 <RCCEx_GetSAIxPeriphCLKFreq>
 800b8c2:	61f8      	str	r0, [r7, #28]
      break;
 800b8c4:	f000 bd86 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800b8c8:	4b9a      	ldr	r3, [pc, #616]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ce:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8da:	d015      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8e2:	f200 8092 	bhi.w	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8ec:	d029      	beq.n	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8f4:	f200 8089 	bhi.w	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d07b      	beq.n	800b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b904:	d04a      	beq.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 800b906:	e080      	b.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800b908:	4b8a      	ldr	r3, [pc, #552]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 0302 	and.w	r3, r3, #2
 800b910:	2b02      	cmp	r3, #2
 800b912:	d17d      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800b914:	4b87      	ldr	r3, [pc, #540]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0308 	and.w	r3, r3, #8
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 800b920:	4b84      	ldr	r3, [pc, #528]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	091b      	lsrs	r3, r3, #4
 800b926:	f003 030f 	and.w	r3, r3, #15
 800b92a:	e005      	b.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800b92c:	4b81      	ldr	r3, [pc, #516]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b92e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	f003 030f 	and.w	r3, r3, #15
 800b938:	4a7f      	ldr	r2, [pc, #508]	; (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b93e:	61fb      	str	r3, [r7, #28]
          break;
 800b940:	e066      	b.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800b942:	4b7c      	ldr	r3, [pc, #496]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b94a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b94e:	d162      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800b950:	4b78      	ldr	r3, [pc, #480]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b95c:	d15b      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800b95e:	4b75      	ldr	r3, [pc, #468]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	0a1b      	lsrs	r3, r3, #8
 800b964:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b968:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	fb03 f202 	mul.w	r2, r3, r2
 800b972:	4b70      	ldr	r3, [pc, #448]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	091b      	lsrs	r3, r3, #4
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	3301      	adds	r3, #1
 800b97e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b982:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800b984:	4b6b      	ldr	r3, [pc, #428]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	0d5b      	lsrs	r3, r3, #21
 800b98a:	f003 0303 	and.w	r3, r3, #3
 800b98e:	3301      	adds	r3, #1
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	fbb2 f3f3 	udiv	r3, r2, r3
 800b998:	61fb      	str	r3, [r7, #28]
          break;
 800b99a:	e03c      	b.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800b99c:	4b65      	ldr	r3, [pc, #404]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9a8:	d138      	bne.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800b9aa:	4b62      	ldr	r3, [pc, #392]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b6:	d131      	bne.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800b9b8:	4b5e      	ldr	r3, [pc, #376]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	0a1b      	lsrs	r3, r3, #8
 800b9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9c2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	fb03 f202 	mul.w	r2, r3, r2
 800b9cc:	4b59      	ldr	r3, [pc, #356]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	091b      	lsrs	r3, r3, #4
 800b9d2:	f003 030f 	and.w	r3, r3, #15
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9dc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800b9de:	4b55      	ldr	r3, [pc, #340]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	0d5b      	lsrs	r3, r3, #21
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	005b      	lsls	r3, r3, #1
 800b9ec:	69ba      	ldr	r2, [r7, #24]
 800b9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f2:	61fb      	str	r3, [r7, #28]
          break;
 800b9f4:	e012      	b.n	800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800b9f6:	4b4f      	ldr	r3, [pc, #316]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b9f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9fc:	f003 0302 	and.w	r3, r3, #2
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d10e      	bne.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 800ba04:	4b4d      	ldr	r3, [pc, #308]	; (800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800ba06:	61fb      	str	r3, [r7, #28]
          break;
 800ba08:	e00b      	b.n	800ba22 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800ba0a:	bf00      	nop
 800ba0c:	f000 bce2 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ba10:	bf00      	nop
 800ba12:	f000 bcdf 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ba16:	bf00      	nop
 800ba18:	f000 bcdc 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ba1c:	bf00      	nop
 800ba1e:	f000 bcd9 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800ba22:	bf00      	nop
        break;
 800ba24:	f000 bcd6 	b.w	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 800ba28:	4b42      	ldr	r3, [pc, #264]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba36:	d13d      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800ba38:	4b3e      	ldr	r3, [pc, #248]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba44:	f040 84c5 	bne.w	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 800ba48:	4b3a      	ldr	r3, [pc, #232]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba54:	f040 84bd 	bne.w	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ba58:	4b36      	ldr	r3, [pc, #216]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	0a1b      	lsrs	r3, r3, #8
 800ba5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba62:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	fb03 f202 	mul.w	r2, r3, r2
 800ba6c:	4b31      	ldr	r3, [pc, #196]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	091b      	lsrs	r3, r3, #4
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	3301      	adds	r3, #1
 800ba78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba7c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800ba7e:	4b2d      	ldr	r3, [pc, #180]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	0edb      	lsrs	r3, r3, #27
 800ba84:	f003 031f 	and.w	r3, r3, #31
 800ba88:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800ba90:	4b28      	ldr	r3, [pc, #160]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800ba9c:	2311      	movs	r3, #17
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	e001      	b.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 800baa2:	2307      	movs	r3, #7
 800baa4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800baae:	61fb      	str	r3, [r7, #28]
      break;
 800bab0:	f000 bc8f 	b.w	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 800bab4:	4b1f      	ldr	r3, [pc, #124]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bac6:	d016      	beq.n	800baf6 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800bace:	f200 809b 	bhi.w	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bad8:	d032      	beq.n	800bb40 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bae0:	f200 8092 	bhi.w	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f000 8084 	beq.w	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800baf2:	d052      	beq.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 800baf4:	e088      	b.n	800bc08 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800baf6:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 0302 	and.w	r3, r3, #2
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	f040 8084 	bne.w	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800bb04:	4b0b      	ldr	r3, [pc, #44]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0308 	and.w	r3, r3, #8
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d005      	beq.n	800bb1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800bb10:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	091b      	lsrs	r3, r3, #4
 800bb16:	f003 030f 	and.w	r3, r3, #15
 800bb1a:	e005      	b.n	800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800bb1c:	4b05      	ldr	r3, [pc, #20]	; (800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800bb1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb22:	0a1b      	lsrs	r3, r3, #8
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	4a03      	ldr	r2, [pc, #12]	; (800bb38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800bb2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb2e:	61fb      	str	r3, [r7, #28]
          break;
 800bb30:	e06c      	b.n	800bc0c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800bb32:	bf00      	nop
 800bb34:	40021000 	.word	0x40021000
 800bb38:	0801c198 	.word	0x0801c198
 800bb3c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800bb40:	4ba5      	ldr	r3, [pc, #660]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb4c:	d160      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800bb4e:	4ba2      	ldr	r3, [pc, #648]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb5a:	d159      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800bb5c:	4b9e      	ldr	r3, [pc, #632]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	0a1b      	lsrs	r3, r3, #8
 800bb62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb66:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	fb03 f202 	mul.w	r2, r3, r2
 800bb70:	4b99      	ldr	r3, [pc, #612]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	091b      	lsrs	r3, r3, #4
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb80:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800bb82:	4b95      	ldr	r3, [pc, #596]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	0d5b      	lsrs	r3, r3, #21
 800bb88:	f003 0303 	and.w	r3, r3, #3
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	005b      	lsls	r3, r3, #1
 800bb90:	69ba      	ldr	r2, [r7, #24]
 800bb92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb96:	61fb      	str	r3, [r7, #28]
          break;
 800bb98:	e03a      	b.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800bb9a:	4b8f      	ldr	r3, [pc, #572]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bba6:	d135      	bne.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800bba8:	4b8b      	ldr	r3, [pc, #556]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbaa:	691b      	ldr	r3, [r3, #16]
 800bbac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbb4:	d12e      	bne.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bbb6:	4b88      	ldr	r3, [pc, #544]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbc0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	fb03 f202 	mul.w	r2, r3, r2
 800bbca:	4b83      	ldr	r3, [pc, #524]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	091b      	lsrs	r3, r3, #4
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbda:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800bbdc:	4b7e      	ldr	r3, [pc, #504]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	0d5b      	lsrs	r3, r3, #21
 800bbe2:	f003 0303 	and.w	r3, r3, #3
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf0:	61fb      	str	r3, [r7, #28]
          break;
 800bbf2:	e00f      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 800bbf4:	4b78      	ldr	r3, [pc, #480]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbfa:	f003 0302 	and.w	r3, r3, #2
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d10a      	bne.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 800bc02:	4b76      	ldr	r3, [pc, #472]	; (800bddc <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bc04:	61fb      	str	r3, [r7, #28]
          break;
 800bc06:	e007      	b.n	800bc18 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 800bc08:	bf00      	nop
 800bc0a:	e3e2      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800bc0c:	bf00      	nop
 800bc0e:	e3e0      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800bc10:	bf00      	nop
 800bc12:	e3de      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800bc14:	bf00      	nop
 800bc16:	e3dc      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800bc18:	bf00      	nop
      break;
 800bc1a:	e3da      	b.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800bc1c:	4b6e      	ldr	r3, [pc, #440]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bc1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc22:	f003 0303 	and.w	r3, r3, #3
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d827      	bhi.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800bc2e:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4d 	.word	0x0800bc4d
 800bc3c:	0800bc55 	.word	0x0800bc55
 800bc40:	0800bc69 	.word	0x0800bc69
          frequency = HAL_RCC_GetPCLK2Freq();
 800bc44:	f7ff f87c 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 800bc48:	61f8      	str	r0, [r7, #28]
          break;
 800bc4a:	e01d      	b.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800bc4c:	f7fe ffca 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bc50:	61f8      	str	r0, [r7, #28]
          break;
 800bc52:	e019      	b.n	800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc54:	4b60      	ldr	r3, [pc, #384]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc60:	d10f      	bne.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 800bc62:	4b5f      	ldr	r3, [pc, #380]	; (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bc64:	61fb      	str	r3, [r7, #28]
          break;
 800bc66:	e00c      	b.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bc68:	4b5b      	ldr	r3, [pc, #364]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bc6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b02      	cmp	r3, #2
 800bc74:	d107      	bne.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 800bc76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc7a:	61fb      	str	r3, [r7, #28]
          break;
 800bc7c:	e003      	b.n	800bc86 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800bc7e:	bf00      	nop
 800bc80:	e3a8      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bc82:	bf00      	nop
 800bc84:	e3a6      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bc86:	bf00      	nop
        break;
 800bc88:	e3a4      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800bc8a:	4b53      	ldr	r3, [pc, #332]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bc8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc90:	f003 030c 	and.w	r3, r3, #12
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b0c      	cmp	r3, #12
 800bc9a:	d83a      	bhi.n	800bd12 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800bc9c:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800bc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca2:	bf00      	nop
 800bca4:	0800bcd9 	.word	0x0800bcd9
 800bca8:	0800bd13 	.word	0x0800bd13
 800bcac:	0800bd13 	.word	0x0800bd13
 800bcb0:	0800bd13 	.word	0x0800bd13
 800bcb4:	0800bce1 	.word	0x0800bce1
 800bcb8:	0800bd13 	.word	0x0800bd13
 800bcbc:	0800bd13 	.word	0x0800bd13
 800bcc0:	0800bd13 	.word	0x0800bd13
 800bcc4:	0800bce9 	.word	0x0800bce9
 800bcc8:	0800bd13 	.word	0x0800bd13
 800bccc:	0800bd13 	.word	0x0800bd13
 800bcd0:	0800bd13 	.word	0x0800bd13
 800bcd4:	0800bcfd 	.word	0x0800bcfd
          frequency = HAL_RCC_GetPCLK1Freq();
 800bcd8:	f7ff f81c 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800bcdc:	61f8      	str	r0, [r7, #28]
          break;
 800bcde:	e01d      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 800bce0:	f7fe ff80 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bce4:	61f8      	str	r0, [r7, #28]
          break;
 800bce6:	e019      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bce8:	4b3b      	ldr	r3, [pc, #236]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcf4:	d10f      	bne.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 800bcf6:	4b3a      	ldr	r3, [pc, #232]	; (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bcf8:	61fb      	str	r3, [r7, #28]
          break;
 800bcfa:	e00c      	b.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bcfc:	4b36      	ldr	r3, [pc, #216]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d107      	bne.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800bd0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd0e:	61fb      	str	r3, [r7, #28]
          break;
 800bd10:	e003      	b.n	800bd1a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 800bd12:	bf00      	nop
 800bd14:	e35e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bd16:	bf00      	nop
 800bd18:	e35c      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bd1a:	bf00      	nop
        break;
 800bd1c:	e35a      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bd1e:	4b2e      	ldr	r3, [pc, #184]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd28:	60fb      	str	r3, [r7, #12]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2b30      	cmp	r3, #48	; 0x30
 800bd2e:	d021      	beq.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b30      	cmp	r3, #48	; 0x30
 800bd34:	d829      	bhi.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b20      	cmp	r3, #32
 800bd3a:	d011      	beq.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	d823      	bhi.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2b10      	cmp	r3, #16
 800bd4c:	d004      	beq.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800bd4e:	e01c      	b.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd50:	f7fe ffe0 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800bd54:	61f8      	str	r0, [r7, #28]
          break;
 800bd56:	e01d      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800bd58:	f7fe ff44 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bd5c:	61f8      	str	r0, [r7, #28]
          break;
 800bd5e:	e019      	b.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd60:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd6c:	d10f      	bne.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800bd6e:	4b1c      	ldr	r3, [pc, #112]	; (800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bd70:	61fb      	str	r3, [r7, #28]
          break;
 800bd72:	e00c      	b.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bd74:	4b18      	ldr	r3, [pc, #96]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7a:	f003 0302 	and.w	r3, r3, #2
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d107      	bne.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 800bd82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd86:	61fb      	str	r3, [r7, #28]
          break;
 800bd88:	e003      	b.n	800bd92 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800bd8a:	bf00      	nop
 800bd8c:	e322      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bd8e:	bf00      	nop
 800bd90:	e320      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bd92:	bf00      	nop
        break;
 800bd94:	e31e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800bd96:	4b10      	ldr	r3, [pc, #64]	; (800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bd98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bda0:	60fb      	str	r3, [r7, #12]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2bc0      	cmp	r3, #192	; 0xc0
 800bda6:	d027      	beq.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2bc0      	cmp	r3, #192	; 0xc0
 800bdac:	d82f      	bhi.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b80      	cmp	r3, #128	; 0x80
 800bdb2:	d017      	beq.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b80      	cmp	r3, #128	; 0x80
 800bdb8:	d829      	bhi.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b40      	cmp	r3, #64	; 0x40
 800bdc4:	d004      	beq.n	800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 800bdc6:	e022      	b.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdc8:	f7fe ffa4 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800bdcc:	61f8      	str	r0, [r7, #28]
          break;
 800bdce:	e023      	b.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 800bdd0:	f7fe ff08 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bdd4:	61f8      	str	r0, [r7, #28]
          break;
 800bdd6:	e01f      	b.n	800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 800bdd8:	40021000 	.word	0x40021000
 800bddc:	02dc6c00 	.word	0x02dc6c00
 800bde0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bde4:	4b9b      	ldr	r3, [pc, #620]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdf0:	d10f      	bne.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 800bdf2:	4b99      	ldr	r3, [pc, #612]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800bdf4:	61fb      	str	r3, [r7, #28]
          break;
 800bdf6:	e00c      	b.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bdf8:	4b96      	ldr	r3, [pc, #600]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfe:	f003 0302 	and.w	r3, r3, #2
 800be02:	2b02      	cmp	r3, #2
 800be04:	d107      	bne.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 800be06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be0a:	61fb      	str	r3, [r7, #28]
          break;
 800be0c:	e003      	b.n	800be16 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 800be0e:	bf00      	nop
 800be10:	e2e0      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800be12:	bf00      	nop
 800be14:	e2de      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800be16:	bf00      	nop
        break;
 800be18:	e2dc      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800be1a:	4b8e      	ldr	r3, [pc, #568]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800be1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be24:	60fb      	str	r3, [r7, #12]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be2c:	d025      	beq.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be34:	d82c      	bhi.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be3c:	d013      	beq.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be44:	d824      	bhi.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d004      	beq.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be52:	d004      	beq.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800be54:	e01c      	b.n	800be90 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 800be56:	f7fe ff5d 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800be5a:	61f8      	str	r0, [r7, #28]
          break;
 800be5c:	e01d      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800be5e:	f7fe fec1 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800be62:	61f8      	str	r0, [r7, #28]
          break;
 800be64:	e019      	b.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800be66:	4b7b      	ldr	r3, [pc, #492]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be72:	d10f      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 800be74:	4b78      	ldr	r3, [pc, #480]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800be76:	61fb      	str	r3, [r7, #28]
          break;
 800be78:	e00c      	b.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800be7a:	4b76      	ldr	r3, [pc, #472]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800be7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be80:	f003 0302 	and.w	r3, r3, #2
 800be84:	2b02      	cmp	r3, #2
 800be86:	d107      	bne.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 800be88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be8c:	61fb      	str	r3, [r7, #28]
          break;
 800be8e:	e003      	b.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 800be90:	bf00      	nop
 800be92:	e29f      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800be94:	bf00      	nop
 800be96:	e29d      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800be98:	bf00      	nop
        break;
 800be9a:	e29b      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800be9c:	4b6d      	ldr	r3, [pc, #436]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800be9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beae:	d025      	beq.n	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800beb6:	d82c      	bhi.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bebe:	d013      	beq.n	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec6:	d824      	bhi.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d004      	beq.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed4:	d004      	beq.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 800bed6:	e01c      	b.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800bed8:	f7fe ff1c 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800bedc:	61f8      	str	r0, [r7, #28]
          break;
 800bede:	e01d      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 800bee0:	f7fe fe80 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bee4:	61f8      	str	r0, [r7, #28]
          break;
 800bee6:	e019      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bee8:	4b5a      	ldr	r3, [pc, #360]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef4:	d10f      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 800bef6:	4b58      	ldr	r3, [pc, #352]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800bef8:	61fb      	str	r3, [r7, #28]
          break;
 800befa:	e00c      	b.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800befc:	4b55      	ldr	r3, [pc, #340]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800befe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b02      	cmp	r3, #2
 800bf08:	d107      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 800bf0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf0e:	61fb      	str	r3, [r7, #28]
          break;
 800bf10:	e003      	b.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 800bf12:	bf00      	nop
 800bf14:	e25e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bf16:	bf00      	nop
 800bf18:	e25c      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bf1a:	bf00      	nop
        break;
 800bf1c:	e25a      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bf1e:	4b4d      	ldr	r3, [pc, #308]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf28:	60fb      	str	r3, [r7, #12]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf30:	d007      	beq.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf38:	d12f      	bne.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 800bf3a:	f7fe fe53 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bf3e:	61f8      	str	r0, [r7, #28]
          break;
 800bf40:	e02e      	b.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800bf42:	4b44      	ldr	r3, [pc, #272]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf4e:	d126      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800bf50:	4b40      	ldr	r3, [pc, #256]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d020      	beq.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800bf5c:	4b3d      	ldr	r3, [pc, #244]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf66:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	fb03 f202 	mul.w	r2, r3, r2
 800bf70:	4b38      	ldr	r3, [pc, #224]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	091b      	lsrs	r3, r3, #4
 800bf76:	f003 030f 	and.w	r3, r3, #15
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf80:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800bf82:	4b34      	ldr	r3, [pc, #208]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	0e5b      	lsrs	r3, r3, #25
 800bf88:	f003 0303 	and.w	r3, r3, #3
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	005b      	lsls	r3, r3, #1
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf96:	61fb      	str	r3, [r7, #28]
          break;
 800bf98:	e001      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 800bf9a:	bf00      	nop
 800bf9c:	e21a      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800bf9e:	bf00      	nop
        break;
 800bfa0:	e218      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 800bfa2:	4b2c      	ldr	r3, [pc, #176]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bfa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d103      	bne.n	800bfbc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 800bfb4:	f7fe fec4 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 800bfb8:	61f8      	str	r0, [r7, #28]
        break;
 800bfba:	e20b      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 800bfbc:	f7fe fe12 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800bfc0:	61f8      	str	r0, [r7, #28]
        break;
 800bfc2:	e207      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 800bfc4:	4b23      	ldr	r3, [pc, #140]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bfc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bfca:	f003 0318 	and.w	r3, r3, #24
 800bfce:	60fb      	str	r3, [r7, #12]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2b10      	cmp	r3, #16
 800bfd4:	d010      	beq.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b10      	cmp	r3, #16
 800bfda:	d834      	bhi.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d003      	beq.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b08      	cmp	r3, #8
 800bfe6:	d024      	beq.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 800bfe8:	e02d      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800bfea:	69b9      	ldr	r1, [r7, #24]
 800bfec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bff0:	f000 fbe2 	bl	800c7b8 <RCCEx_GetSAIxPeriphCLKFreq>
 800bff4:	61f8      	str	r0, [r7, #28]
          break;
 800bff6:	e02b      	b.n	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800bff8:	4b16      	ldr	r3, [pc, #88]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b02      	cmp	r3, #2
 800c002:	d122      	bne.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c004:	4b13      	ldr	r3, [pc, #76]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0308 	and.w	r3, r3, #8
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800c010:	4b10      	ldr	r3, [pc, #64]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	091b      	lsrs	r3, r3, #4
 800c016:	f003 030f 	and.w	r3, r3, #15
 800c01a:	e005      	b.n	800c028 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 800c01c:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c01e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c022:	0a1b      	lsrs	r3, r3, #8
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	4a0c      	ldr	r2, [pc, #48]	; (800c05c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800c02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02e:	61fb      	str	r3, [r7, #28]
          break;
 800c030:	e00b      	b.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c032:	4b08      	ldr	r3, [pc, #32]	; (800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c03a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c03e:	d106      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800c042:	61fb      	str	r3, [r7, #28]
          break;
 800c044:	e003      	b.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 800c046:	bf00      	nop
 800c048:	e1c4      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c04a:	bf00      	nop
 800c04c:	e1c2      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c04e:	bf00      	nop
        break;
 800c050:	e1c0      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 800c052:	bf00      	nop
 800c054:	40021000 	.word	0x40021000
 800c058:	00f42400 	.word	0x00f42400
 800c05c:	0801c198 	.word	0x0801c198
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c060:	4b96      	ldr	r3, [pc, #600]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c066:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c072:	d013      	beq.n	800c09c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c07a:	d819      	bhi.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c088:	d004      	beq.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 800c08a:	e011      	b.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c08c:	f7fe fe42 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c090:	61f8      	str	r0, [r7, #28]
          break;
 800c092:	e010      	b.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 800c094:	f7fe fda6 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800c098:	61f8      	str	r0, [r7, #28]
          break;
 800c09a:	e00c      	b.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c09c:	4b87      	ldr	r3, [pc, #540]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0a8:	d104      	bne.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 800c0aa:	4b85      	ldr	r3, [pc, #532]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c0ac:	61fb      	str	r3, [r7, #28]
          break;
 800c0ae:	e001      	b.n	800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 800c0b0:	bf00      	nop
 800c0b2:	e18f      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c0b4:	bf00      	nop
        break;
 800c0b6:	e18d      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c0b8:	4b80      	ldr	r3, [pc, #512]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0ca:	d013      	beq.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0d2:	d819      	bhi.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d004      	beq.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0e0:	d004      	beq.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 800c0e2:	e011      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c0e4:	f7fe fe16 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c0e8:	61f8      	str	r0, [r7, #28]
          break;
 800c0ea:	e010      	b.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 800c0ec:	f7fe fd7a 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800c0f0:	61f8      	str	r0, [r7, #28]
          break;
 800c0f2:	e00c      	b.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c0f4:	4b71      	ldr	r3, [pc, #452]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c100:	d104      	bne.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 800c102:	4b6f      	ldr	r3, [pc, #444]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c104:	61fb      	str	r3, [r7, #28]
          break;
 800c106:	e001      	b.n	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 800c108:	bf00      	nop
 800c10a:	e163      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c10c:	bf00      	nop
        break;
 800c10e:	e161      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c110:	4b6a      	ldr	r3, [pc, #424]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c122:	d013      	beq.n	800c14c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c12a:	d819      	bhi.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c138:	d004      	beq.n	800c144 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 800c13a:	e011      	b.n	800c160 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c13c:	f7fe fdea 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c140:	61f8      	str	r0, [r7, #28]
          break;
 800c142:	e010      	b.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 800c144:	f7fe fd4e 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800c148:	61f8      	str	r0, [r7, #28]
          break;
 800c14a:	e00c      	b.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c14c:	4b5b      	ldr	r3, [pc, #364]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c158:	d104      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 800c15a:	4b59      	ldr	r3, [pc, #356]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c15c:	61fb      	str	r3, [r7, #28]
          break;
 800c15e:	e001      	b.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 800c160:	bf00      	nop
 800c162:	e137      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c164:	bf00      	nop
        break;
 800c166:	e135      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c168:	4b54      	ldr	r3, [pc, #336]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c16a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c16e:	f003 0303 	and.w	r3, r3, #3
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b02      	cmp	r3, #2
 800c178:	d011      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d818      	bhi.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d004      	beq.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 800c18c:	e011      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c18e:	f7fe fdc1 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c192:	61f8      	str	r0, [r7, #28]
          break;
 800c194:	e010      	b.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 800c196:	f7fe fd25 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800c19a:	61f8      	str	r0, [r7, #28]
          break;
 800c19c:	e00c      	b.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c19e:	4b47      	ldr	r3, [pc, #284]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1aa:	d104      	bne.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 800c1ac:	4b44      	ldr	r3, [pc, #272]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c1ae:	61fb      	str	r3, [r7, #28]
          break;
 800c1b0:	e001      	b.n	800c1b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 800c1b2:	bf00      	nop
 800c1b4:	e10e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c1b6:	bf00      	nop
        break;
 800c1b8:	e10c      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c1ba:	4b40      	ldr	r3, [pc, #256]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c1cc:	d02c      	beq.n	800c228 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c1d4:	d833      	bhi.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1dc:	d01a      	beq.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c1e4:	d82b      	bhi.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1f2:	d004      	beq.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 800c1f4:	e023      	b.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c1f6:	f7fe fd8d 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c1fa:	61f8      	str	r0, [r7, #28]
          break;
 800c1fc:	e026      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c1fe:	4b2f      	ldr	r3, [pc, #188]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	2b02      	cmp	r3, #2
 800c20a:	d11a      	bne.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 800c20c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c210:	61fb      	str	r3, [r7, #28]
          break;
 800c212:	e016      	b.n	800c242 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c214:	4b29      	ldr	r3, [pc, #164]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c21c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c220:	d111      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 800c222:	4b27      	ldr	r3, [pc, #156]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c224:	61fb      	str	r3, [r7, #28]
          break;
 800c226:	e00e      	b.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c228:	4b24      	ldr	r3, [pc, #144]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c22e:	f003 0302 	and.w	r3, r3, #2
 800c232:	2b02      	cmp	r3, #2
 800c234:	d109      	bne.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 800c236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c23a:	61fb      	str	r3, [r7, #28]
          break;
 800c23c:	e005      	b.n	800c24a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 800c23e:	bf00      	nop
 800c240:	e0c8      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c242:	bf00      	nop
 800c244:	e0c6      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c246:	bf00      	nop
 800c248:	e0c4      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c24a:	bf00      	nop
        break;
 800c24c:	e0c2      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c24e:	4b1b      	ldr	r3, [pc, #108]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c254:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c260:	d030      	beq.n	800c2c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c268:	d837      	bhi.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c270:	d01a      	beq.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c278:	d82f      	bhi.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d004      	beq.n	800c28a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c286:	d004      	beq.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 800c288:	e027      	b.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 800c28a:	f7fe fd43 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 800c28e:	61f8      	str	r0, [r7, #28]
          break;
 800c290:	e02a      	b.n	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800c292:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c298:	f003 0302 	and.w	r3, r3, #2
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d11e      	bne.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 800c2a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c2a4:	61fb      	str	r3, [r7, #28]
          break;
 800c2a6:	e01a      	b.n	800c2de <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c2a8:	4b04      	ldr	r3, [pc, #16]	; (800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2b4:	d115      	bne.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 800c2b6:	4b02      	ldr	r3, [pc, #8]	; (800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 800c2b8:	61fb      	str	r3, [r7, #28]
          break;
 800c2ba:	e012      	b.n	800c2e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800c2bc:	40021000 	.word	0x40021000
 800c2c0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c2c4:	4b46      	ldr	r3, [pc, #280]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d109      	bne.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 800c2d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2d6:	61fb      	str	r3, [r7, #28]
          break;
 800c2d8:	e005      	b.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 800c2da:	bf00      	nop
 800c2dc:	e07a      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c2de:	bf00      	nop
 800c2e0:	e078      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c2e2:	bf00      	nop
 800c2e4:	e076      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c2e6:	bf00      	nop
        break;
 800c2e8:	e074      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c2ea:	4b3d      	ldr	r3, [pc, #244]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c2ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c2f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c2fc:	d02c      	beq.n	800c358 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c304:	d855      	bhi.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d004      	beq.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c312:	d004      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 800c314:	e04d      	b.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 800c316:	f7fe fc65 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 800c31a:	61f8      	str	r0, [r7, #28]
          break;
 800c31c:	e04e      	b.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800c31e:	4b30      	ldr	r3, [pc, #192]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b02      	cmp	r3, #2
 800c328:	d145      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800c32a:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0308 	and.w	r3, r3, #8
 800c332:	2b00      	cmp	r3, #0
 800c334:	d005      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800c336:	4b2a      	ldr	r3, [pc, #168]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	091b      	lsrs	r3, r3, #4
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	e005      	b.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 800c342:	4b27      	ldr	r3, [pc, #156]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c348:	0a1b      	lsrs	r3, r3, #8
 800c34a:	f003 030f 	and.w	r3, r3, #15
 800c34e:	4a25      	ldr	r2, [pc, #148]	; (800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 800c350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c354:	61fb      	str	r3, [r7, #28]
          break;
 800c356:	e02e      	b.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800c358:	4b21      	ldr	r3, [pc, #132]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c364:	d129      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800c366:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c372:	d122      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c374:	4b1a      	ldr	r3, [pc, #104]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c37e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	fb03 f202 	mul.w	r2, r3, r2
 800c388:	4b15      	ldr	r3, [pc, #84]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	091b      	lsrs	r3, r3, #4
 800c38e:	f003 030f 	and.w	r3, r3, #15
 800c392:	3301      	adds	r3, #1
 800c394:	fbb2 f3f3 	udiv	r3, r2, r3
 800c398:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800c39a:	4b11      	ldr	r3, [pc, #68]	; (800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	0d5b      	lsrs	r3, r3, #21
 800c3a0:	f003 0303 	and.w	r3, r3, #3
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3ae:	61fb      	str	r3, [r7, #28]
          break;
 800c3b0:	e003      	b.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 800c3b2:	bf00      	nop
 800c3b4:	e00e      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c3b6:	bf00      	nop
 800c3b8:	e00c      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800c3ba:	bf00      	nop
        break;
 800c3bc:	e00a      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3be:	bf00      	nop
 800c3c0:	e008      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3c2:	bf00      	nop
 800c3c4:	e006      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3c6:	bf00      	nop
 800c3c8:	e004      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3ca:	bf00      	nop
 800c3cc:	e002      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3ce:	bf00      	nop
 800c3d0:	e000      	b.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 800c3d2:	bf00      	nop
    }
  }

  return(frequency);
 800c3d4:	69fb      	ldr	r3, [r7, #28]
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3720      	adds	r7, #32
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	40021000 	.word	0x40021000
 800c3e4:	0801c198 	.word	0x0801c198

0800c3e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c3f6:	4b72      	ldr	r3, [pc, #456]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	f003 0303 	and.w	r3, r3, #3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00e      	beq.n	800c420 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c402:	4b6f      	ldr	r3, [pc, #444]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	f003 0203 	and.w	r2, r3, #3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d103      	bne.n	800c41a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
       ||
 800c416:	2b00      	cmp	r3, #0
 800c418:	d142      	bne.n	800c4a0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800c41a:	2301      	movs	r3, #1
 800c41c:	73fb      	strb	r3, [r7, #15]
 800c41e:	e03f      	b.n	800c4a0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b03      	cmp	r3, #3
 800c426:	d018      	beq.n	800c45a <RCCEx_PLLSAI1_Config+0x72>
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d825      	bhi.n	800c478 <RCCEx_PLLSAI1_Config+0x90>
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d002      	beq.n	800c436 <RCCEx_PLLSAI1_Config+0x4e>
 800c430:	2b02      	cmp	r3, #2
 800c432:	d009      	beq.n	800c448 <RCCEx_PLLSAI1_Config+0x60>
 800c434:	e020      	b.n	800c478 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c436:	4b62      	ldr	r3, [pc, #392]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d11d      	bne.n	800c47e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c446:	e01a      	b.n	800c47e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c448:	4b5d      	ldr	r3, [pc, #372]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c450:	2b00      	cmp	r3, #0
 800c452:	d116      	bne.n	800c482 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c458:	e013      	b.n	800c482 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c45a:	4b59      	ldr	r3, [pc, #356]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10f      	bne.n	800c486 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c466:	4b56      	ldr	r3, [pc, #344]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d109      	bne.n	800c486 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c476:	e006      	b.n	800c486 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
      break;
 800c47c:	e004      	b.n	800c488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c47e:	bf00      	nop
 800c480:	e002      	b.n	800c488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c482:	bf00      	nop
 800c484:	e000      	b.n	800c488 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800c486:	bf00      	nop
    }

    if(status == HAL_OK)
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d108      	bne.n	800c4a0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800c48e:	4b4c      	ldr	r3, [pc, #304]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	f023 0203 	bic.w	r2, r3, #3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4949      	ldr	r1, [pc, #292]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c49c:	4313      	orrs	r3, r2
 800c49e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f040 8086 	bne.w	800c5b4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c4a8:	4b45      	ldr	r3, [pc, #276]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4a44      	ldr	r2, [pc, #272]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c4ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c4b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4b4:	f7fa fab6 	bl	8006a24 <HAL_GetTick>
 800c4b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c4ba:	e009      	b.n	800c4d0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c4bc:	f7fa fab2 	bl	8006a24 <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	d902      	bls.n	800c4d0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	73fb      	strb	r3, [r7, #15]
        break;
 800c4ce:	e005      	b.n	800c4dc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c4d0:	4b3b      	ldr	r3, [pc, #236]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1ef      	bne.n	800c4bc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d168      	bne.n	800c5b4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d113      	bne.n	800c510 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c4e8:	4b35      	ldr	r3, [pc, #212]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c4ea:	691a      	ldr	r2, [r3, #16]
 800c4ec:	4b35      	ldr	r3, [pc, #212]	; (800c5c4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	6892      	ldr	r2, [r2, #8]
 800c4f4:	0211      	lsls	r1, r2, #8
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	68d2      	ldr	r2, [r2, #12]
 800c4fa:	06d2      	lsls	r2, r2, #27
 800c4fc:	4311      	orrs	r1, r2
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6852      	ldr	r2, [r2, #4]
 800c502:	3a01      	subs	r2, #1
 800c504:	0112      	lsls	r2, r2, #4
 800c506:	430a      	orrs	r2, r1
 800c508:	492d      	ldr	r1, [pc, #180]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c50a:	4313      	orrs	r3, r2
 800c50c:	610b      	str	r3, [r1, #16]
 800c50e:	e02d      	b.n	800c56c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d115      	bne.n	800c542 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c516:	4b2a      	ldr	r3, [pc, #168]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c518:	691a      	ldr	r2, [r3, #16]
 800c51a:	4b2b      	ldr	r3, [pc, #172]	; (800c5c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	6892      	ldr	r2, [r2, #8]
 800c522:	0211      	lsls	r1, r2, #8
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	6912      	ldr	r2, [r2, #16]
 800c528:	0852      	lsrs	r2, r2, #1
 800c52a:	3a01      	subs	r2, #1
 800c52c:	0552      	lsls	r2, r2, #21
 800c52e:	4311      	orrs	r1, r2
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	6852      	ldr	r2, [r2, #4]
 800c534:	3a01      	subs	r2, #1
 800c536:	0112      	lsls	r2, r2, #4
 800c538:	430a      	orrs	r2, r1
 800c53a:	4921      	ldr	r1, [pc, #132]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c53c:	4313      	orrs	r3, r2
 800c53e:	610b      	str	r3, [r1, #16]
 800c540:	e014      	b.n	800c56c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c542:	4b1f      	ldr	r3, [pc, #124]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c544:	691a      	ldr	r2, [r3, #16]
 800c546:	4b21      	ldr	r3, [pc, #132]	; (800c5cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800c548:	4013      	ands	r3, r2
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	6892      	ldr	r2, [r2, #8]
 800c54e:	0211      	lsls	r1, r2, #8
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	6952      	ldr	r2, [r2, #20]
 800c554:	0852      	lsrs	r2, r2, #1
 800c556:	3a01      	subs	r2, #1
 800c558:	0652      	lsls	r2, r2, #25
 800c55a:	4311      	orrs	r1, r2
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	6852      	ldr	r2, [r2, #4]
 800c560:	3a01      	subs	r2, #1
 800c562:	0112      	lsls	r2, r2, #4
 800c564:	430a      	orrs	r2, r1
 800c566:	4916      	ldr	r1, [pc, #88]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c56c:	4b14      	ldr	r3, [pc, #80]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a13      	ldr	r2, [pc, #76]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c572:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c578:	f7fa fa54 	bl	8006a24 <HAL_GetTick>
 800c57c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c57e:	e009      	b.n	800c594 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c580:	f7fa fa50 	bl	8006a24 <HAL_GetTick>
 800c584:	4602      	mov	r2, r0
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	d902      	bls.n	800c594 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800c58e:	2303      	movs	r3, #3
 800c590:	73fb      	strb	r3, [r7, #15]
          break;
 800c592:	e005      	b.n	800c5a0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c594:	4b0a      	ldr	r3, [pc, #40]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d0ef      	beq.n	800c580 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d106      	bne.n	800c5b4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c5a6:	4b06      	ldr	r3, [pc, #24]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c5a8:	691a      	ldr	r2, [r3, #16]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	4904      	ldr	r1, [pc, #16]	; (800c5c0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	40021000 	.word	0x40021000
 800c5c4:	07ff800f 	.word	0x07ff800f
 800c5c8:	ff9f800f 	.word	0xff9f800f
 800c5cc:	f9ff800f 	.word	0xf9ff800f

0800c5d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c5de:	4b72      	ldr	r3, [pc, #456]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00e      	beq.n	800c608 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c5ea:	4b6f      	ldr	r3, [pc, #444]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	f003 0203 	and.w	r2, r3, #3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d103      	bne.n	800c602 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
       ||
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d142      	bne.n	800c688 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	73fb      	strb	r3, [r7, #15]
 800c606:	e03f      	b.n	800c688 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d018      	beq.n	800c642 <RCCEx_PLLSAI2_Config+0x72>
 800c610:	2b03      	cmp	r3, #3
 800c612:	d825      	bhi.n	800c660 <RCCEx_PLLSAI2_Config+0x90>
 800c614:	2b01      	cmp	r3, #1
 800c616:	d002      	beq.n	800c61e <RCCEx_PLLSAI2_Config+0x4e>
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d009      	beq.n	800c630 <RCCEx_PLLSAI2_Config+0x60>
 800c61c:	e020      	b.n	800c660 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c61e:	4b62      	ldr	r3, [pc, #392]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f003 0302 	and.w	r3, r3, #2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d11d      	bne.n	800c666 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c62e:	e01a      	b.n	800c666 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c630:	4b5d      	ldr	r3, [pc, #372]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d116      	bne.n	800c66a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c640:	e013      	b.n	800c66a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c642:	4b59      	ldr	r3, [pc, #356]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10f      	bne.n	800c66e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c64e:	4b56      	ldr	r3, [pc, #344]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c656:	2b00      	cmp	r3, #0
 800c658:	d109      	bne.n	800c66e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c65e:	e006      	b.n	800c66e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	73fb      	strb	r3, [r7, #15]
      break;
 800c664:	e004      	b.n	800c670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c666:	bf00      	nop
 800c668:	e002      	b.n	800c670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c66a:	bf00      	nop
 800c66c:	e000      	b.n	800c670 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800c66e:	bf00      	nop
    }

    if(status == HAL_OK)
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d108      	bne.n	800c688 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800c676:	4b4c      	ldr	r3, [pc, #304]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f023 0203 	bic.w	r2, r3, #3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4949      	ldr	r1, [pc, #292]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c684:	4313      	orrs	r3, r2
 800c686:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800c688:	7bfb      	ldrb	r3, [r7, #15]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f040 8086 	bne.w	800c79c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c690:	4b45      	ldr	r3, [pc, #276]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a44      	ldr	r2, [pc, #272]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c69a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c69c:	f7fa f9c2 	bl	8006a24 <HAL_GetTick>
 800c6a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c6a2:	e009      	b.n	800c6b8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c6a4:	f7fa f9be 	bl	8006a24 <HAL_GetTick>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d902      	bls.n	800c6b8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800c6b2:	2303      	movs	r3, #3
 800c6b4:	73fb      	strb	r3, [r7, #15]
        break;
 800c6b6:	e005      	b.n	800c6c4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c6b8:	4b3b      	ldr	r3, [pc, #236]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1ef      	bne.n	800c6a4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d168      	bne.n	800c79c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d113      	bne.n	800c6f8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c6d0:	4b35      	ldr	r3, [pc, #212]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c6d2:	695a      	ldr	r2, [r3, #20]
 800c6d4:	4b35      	ldr	r3, [pc, #212]	; (800c7ac <RCCEx_PLLSAI2_Config+0x1dc>)
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	6892      	ldr	r2, [r2, #8]
 800c6dc:	0211      	lsls	r1, r2, #8
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68d2      	ldr	r2, [r2, #12]
 800c6e2:	06d2      	lsls	r2, r2, #27
 800c6e4:	4311      	orrs	r1, r2
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	6852      	ldr	r2, [r2, #4]
 800c6ea:	3a01      	subs	r2, #1
 800c6ec:	0112      	lsls	r2, r2, #4
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	492d      	ldr	r1, [pc, #180]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	614b      	str	r3, [r1, #20]
 800c6f6:	e02d      	b.n	800c754 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d115      	bne.n	800c72a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c6fe:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c700:	695a      	ldr	r2, [r3, #20]
 800c702:	4b2b      	ldr	r3, [pc, #172]	; (800c7b0 <RCCEx_PLLSAI2_Config+0x1e0>)
 800c704:	4013      	ands	r3, r2
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	6892      	ldr	r2, [r2, #8]
 800c70a:	0211      	lsls	r1, r2, #8
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6912      	ldr	r2, [r2, #16]
 800c710:	0852      	lsrs	r2, r2, #1
 800c712:	3a01      	subs	r2, #1
 800c714:	0552      	lsls	r2, r2, #21
 800c716:	4311      	orrs	r1, r2
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	6852      	ldr	r2, [r2, #4]
 800c71c:	3a01      	subs	r2, #1
 800c71e:	0112      	lsls	r2, r2, #4
 800c720:	430a      	orrs	r2, r1
 800c722:	4921      	ldr	r1, [pc, #132]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c724:	4313      	orrs	r3, r2
 800c726:	614b      	str	r3, [r1, #20]
 800c728:	e014      	b.n	800c754 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c72a:	4b1f      	ldr	r3, [pc, #124]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c72c:	695a      	ldr	r2, [r3, #20]
 800c72e:	4b21      	ldr	r3, [pc, #132]	; (800c7b4 <RCCEx_PLLSAI2_Config+0x1e4>)
 800c730:	4013      	ands	r3, r2
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	6892      	ldr	r2, [r2, #8]
 800c736:	0211      	lsls	r1, r2, #8
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	6952      	ldr	r2, [r2, #20]
 800c73c:	0852      	lsrs	r2, r2, #1
 800c73e:	3a01      	subs	r2, #1
 800c740:	0652      	lsls	r2, r2, #25
 800c742:	4311      	orrs	r1, r2
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	6852      	ldr	r2, [r2, #4]
 800c748:	3a01      	subs	r2, #1
 800c74a:	0112      	lsls	r2, r2, #4
 800c74c:	430a      	orrs	r2, r1
 800c74e:	4916      	ldr	r1, [pc, #88]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c750:	4313      	orrs	r3, r2
 800c752:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c754:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a13      	ldr	r2, [pc, #76]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c75a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c75e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c760:	f7fa f960 	bl	8006a24 <HAL_GetTick>
 800c764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c766:	e009      	b.n	800c77c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c768:	f7fa f95c 	bl	8006a24 <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b02      	cmp	r3, #2
 800c774:	d902      	bls.n	800c77c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	73fb      	strb	r3, [r7, #15]
          break;
 800c77a:	e005      	b.n	800c788 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0ef      	beq.n	800c768 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d106      	bne.n	800c79c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c78e:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c790:	695a      	ldr	r2, [r3, #20]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	4904      	ldr	r1, [pc, #16]	; (800c7a8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800c798:	4313      	orrs	r3, r2
 800c79a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	40021000 	.word	0x40021000
 800c7ac:	07ff800f 	.word	0x07ff800f
 800c7b0:	ff9f800f 	.word	0xff9f800f
 800c7b4:	f9ff800f 	.word	0xf9ff800f

0800c7b8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b089      	sub	sp, #36	; 0x24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c7d4:	d10b      	bne.n	800c7ee <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800c7d6:	4b7e      	ldr	r3, [pc, #504]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c7d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7dc:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800c7e0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b60      	cmp	r3, #96	; 0x60
 800c7e6:	d112      	bne.n	800c80e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800c7e8:	4b7a      	ldr	r3, [pc, #488]	; (800c9d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	e00f      	b.n	800c80e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f4:	d10b      	bne.n	800c80e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800c7f6:	4b76      	ldr	r3, [pc, #472]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c7f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c800:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c808:	d101      	bne.n	800c80e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800c80a:	4b72      	ldr	r3, [pc, #456]	; (800c9d4 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800c80c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	2b00      	cmp	r3, #0
 800c812:	f040 80d6 	bne.w	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	2b40      	cmp	r3, #64	; 0x40
 800c81e:	d003      	beq.n	800c828 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c826:	d13b      	bne.n	800c8a0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800c828:	4b69      	ldr	r3, [pc, #420]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c830:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c834:	f040 80c4 	bne.w	800c9c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800c838:	4b65      	ldr	r3, [pc, #404]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 80bd 	beq.w	800c9c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800c846:	4b62      	ldr	r3, [pc, #392]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	091b      	lsrs	r3, r3, #4
 800c84c:	f003 030f 	and.w	r3, r3, #15
 800c850:	3301      	adds	r3, #1
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	fbb2 f3f3 	udiv	r3, r2, r3
 800c858:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800c85a:	4b5d      	ldr	r3, [pc, #372]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	0a1b      	lsrs	r3, r3, #8
 800c860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c864:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800c866:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	0edb      	lsrs	r3, r3, #27
 800c86c:	f003 031f 	and.w	r3, r3, #31
 800c870:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d10a      	bne.n	800c88e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800c878:	4b55      	ldr	r3, [pc, #340]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c880:	2b00      	cmp	r3, #0
 800c882:	d002      	beq.n	800c88a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800c884:	2311      	movs	r3, #17
 800c886:	617b      	str	r3, [r7, #20]
 800c888:	e001      	b.n	800c88e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800c88a:	2307      	movs	r3, #7
 800c88c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	fb03 f202 	mul.w	r2, r3, r2
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	fbb2 f3f3 	udiv	r3, r2, r3
 800c89c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800c89e:	e08f      	b.n	800c9c0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d13a      	bne.n	800c91c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800c8a6:	4b4a      	ldr	r3, [pc, #296]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8b2:	f040 8086 	bne.w	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800c8b6:	4b46      	ldr	r3, [pc, #280]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d07f      	beq.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800c8c2:	4b43      	ldr	r3, [pc, #268]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8c4:	691b      	ldr	r3, [r3, #16]
 800c8c6:	091b      	lsrs	r3, r3, #4
 800c8c8:	f003 030f 	and.w	r3, r3, #15
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8d4:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800c8d6:	4b3e      	ldr	r3, [pc, #248]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	0a1b      	lsrs	r3, r3, #8
 800c8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8e0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800c8e2:	4b3b      	ldr	r3, [pc, #236]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	0edb      	lsrs	r3, r3, #27
 800c8e8:	f003 031f 	and.w	r3, r3, #31
 800c8ec:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d10a      	bne.n	800c90a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800c8f4:	4b36      	ldr	r3, [pc, #216]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800c900:	2311      	movs	r3, #17
 800c902:	617b      	str	r3, [r7, #20]
 800c904:	e001      	b.n	800c90a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800c906:	2307      	movs	r3, #7
 800c908:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	fb03 f202 	mul.w	r2, r3, r2
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	fbb2 f3f3 	udiv	r3, r2, r3
 800c918:	61fb      	str	r3, [r7, #28]
 800c91a:	e052      	b.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	2b80      	cmp	r3, #128	; 0x80
 800c920:	d003      	beq.n	800c92a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c928:	d109      	bne.n	800c93e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c92a:	4b29      	ldr	r3, [pc, #164]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c936:	d144      	bne.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800c938:	4b27      	ldr	r3, [pc, #156]	; (800c9d8 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800c93a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c93c:	e041      	b.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800c93e:	69bb      	ldr	r3, [r7, #24]
 800c940:	2b20      	cmp	r3, #32
 800c942:	d003      	beq.n	800c94c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c94a:	d13a      	bne.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800c94c:	4b20      	ldr	r3, [pc, #128]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c958:	d133      	bne.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800c95a:	4b1d      	ldr	r3, [pc, #116]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c962:	2b00      	cmp	r3, #0
 800c964:	d02d      	beq.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800c966:	4b1a      	ldr	r3, [pc, #104]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	091b      	lsrs	r3, r3, #4
 800c96c:	f003 030f 	and.w	r3, r3, #15
 800c970:	3301      	adds	r3, #1
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	fbb2 f3f3 	udiv	r3, r2, r3
 800c978:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800c97a:	4b15      	ldr	r3, [pc, #84]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c97c:	695b      	ldr	r3, [r3, #20]
 800c97e:	0a1b      	lsrs	r3, r3, #8
 800c980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c984:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800c986:	4b12      	ldr	r3, [pc, #72]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	0edb      	lsrs	r3, r3, #27
 800c98c:	f003 031f 	and.w	r3, r3, #31
 800c990:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10a      	bne.n	800c9ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800c998:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800c99a:	695b      	ldr	r3, [r3, #20]
 800c99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800c9a4:	2311      	movs	r3, #17
 800c9a6:	617b      	str	r3, [r7, #20]
 800c9a8:	e001      	b.n	800c9ae <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800c9aa:	2307      	movs	r3, #7
 800c9ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	68fa      	ldr	r2, [r7, #12]
 800c9b2:	fb03 f202 	mul.w	r2, r3, r2
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	e000      	b.n	800c9c2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800c9c0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800c9c2:	69fb      	ldr	r3, [r7, #28]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3724      	adds	r7, #36	; 0x24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr
 800c9d0:	40021000 	.word	0x40021000
 800c9d4:	001fff68 	.word	0x001fff68
 800c9d8:	00f42400 	.word	0x00f42400

0800c9dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b08a      	sub	sp, #40	; 0x28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e078      	b.n	800cae0 <HAL_SD_Init+0x104>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d105      	bne.n	800ca06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7f8 f811 	bl	8004a28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2203      	movs	r2, #3
 800ca0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 f86a 	bl	800cae8 <HAL_SD_InitCard>
 800ca14:	4603      	mov	r3, r0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d001      	beq.n	800ca1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e060      	b.n	800cae0 <HAL_SD_Init+0x104>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ca1e:	f107 0308 	add.w	r3, r7, #8
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fdcd 	bl	800d5c4 <HAL_SD_GetCardStatus>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e055      	b.n	800cae0 <HAL_SD_Init+0x104>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ca34:	7e3b      	ldrb	r3, [r7, #24]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ca3a:	7e7b      	ldrb	r3, [r7, #25]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d10a      	bne.n	800ca5e <HAL_SD_Init+0x82>
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d102      	bne.n	800ca54 <HAL_SD_Init+0x78>
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d004      	beq.n	800ca5e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca5a:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca5c:	e00b      	b.n	800ca76 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d104      	bne.n	800ca70 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca6e:	e002      	b.n	800ca76 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 fe83 	bl	800d788 <HAL_SD_ConfigWideBusOperation>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	e029      	b.n	800cae0 <HAL_SD_Init+0x104>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800ca8c:	f7f9 ffca 	bl	8006a24 <HAL_GetTick>
 800ca90:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800ca92:	e014      	b.n	800cabe <HAL_SD_Init+0xe2>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800ca94:	f7f9 ffc6 	bl	8006a24 <HAL_GetTick>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	1ad3      	subs	r3, r2, r3
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa2:	d10c      	bne.n	800cabe <HAL_SD_Init+0xe2>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800caba:	2303      	movs	r3, #3
 800cabc:	e010      	b.n	800cae0 <HAL_SD_Init+0x104>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 ff76 	bl	800d9b0 <HAL_SD_GetCardState>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d1e4      	bne.n	800ca94 <HAL_SD_Init+0xb8>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3728      	adds	r7, #40	; 0x28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cae8:	b5b0      	push	{r4, r5, r7, lr}
 800caea:	b08e      	sub	sp, #56	; 0x38
 800caec:	af04      	add	r7, sp, #16
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800caf0:	2300      	movs	r3, #0
 800caf2:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800caf8:	2300      	movs	r3, #0
 800cafa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800cb00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cb04:	f7fe fd4e 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb08:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800cb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <HAL_SD_InitCard+0x3c>
  {
      hsd->State = HAL_SD_STATE_READY;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2201      	movs	r2, #1
 800cb14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cb1e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e079      	b.n	800cc18 <HAL_SD_InitCard+0x130>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
#else
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800cb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb26:	0a1b      	lsrs	r3, r3, #8
 800cb28:	4a3d      	ldr	r2, [pc, #244]	; (800cc20 <HAL_SD_InitCard+0x138>)
 800cb2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2e:	091b      	lsrs	r3, r3, #4
 800cb30:	61bb      	str	r3, [r7, #24]
#endif

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  Init.Transceiver = hsd->Init.Transceiver;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	61fb      	str	r3, [r7, #28]
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d107      	bne.n	800cb50 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f042 0210 	orr.w	r2, r2, #16
 800cb4e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681d      	ldr	r5, [r3, #0]
 800cb54:	466c      	mov	r4, sp
 800cb56:	f107 0314 	add.w	r3, r7, #20
 800cb5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb62:	f107 0308 	add.w	r3, r7, #8
 800cb66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb68:	4628      	mov	r0, r5
 800cb6a:	f004 fd1d 	bl	80115a8 <SDMMC_Init>
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f004 fd60 	bl	8011638 <SDMMC_PowerState_ON>
  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb82:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cb84:	4a27      	ldr	r2, [pc, #156]	; (800cc24 <HAL_SD_InitCard+0x13c>)
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7f9 ff54 	bl	8006a3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 ffeb 	bl	800db70 <SD_PowerON>
 800cb9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	431a      	orrs	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e02e      	b.n	800cc18 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 ff18 	bl	800d9f0 <SD_InitCard>
 800cbc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00b      	beq.n	800cbe0 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd4:	6a3b      	ldr	r3, [r7, #32]
 800cbd6:	431a      	orrs	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e01b      	b.n	800cc18 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f004 fdbb 	bl	8011764 <SDMMC_CmdBlockLength>
 800cbee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d00f      	beq.n	800cc16 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a0b      	ldr	r2, [pc, #44]	; (800cc28 <HAL_SD_InitCard+0x140>)
 800cbfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	431a      	orrs	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e000      	b.n	800cc18 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3728      	adds	r7, #40	; 0x28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc20:	014f8b59 	.word	0x014f8b59
 800cc24:	00012110 	.word	0x00012110
 800cc28:	1fe00fff 	.word	0x1fe00fff

0800cc2c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b092      	sub	sp, #72	; 0x48
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc3a:	f7f9 fef3 	bl	8006a24 <HAL_GetTick>
 800cc3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d107      	bne.n	800cc5e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e170      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	f040 8163 	bne.w	800cf32 <HAL_SD_ReadBlocks+0x306>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	441a      	add	r2, r3
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d907      	bls.n	800cc90 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc84:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e157      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2203      	movs	r2, #3
 800cc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d002      	beq.n	800ccae <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	025b      	lsls	r3, r3, #9
 800ccac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccb2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	025b      	lsls	r3, r3, #9
 800ccb8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ccba:	2390      	movs	r3, #144	; 0x90
 800ccbc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	62bb      	str	r3, [r7, #40]	; 0x28
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f107 0214 	add.w	r2, r7, #20
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f004 fd19 	bl	801170c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68da      	ldr	r2, [r3, #12]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cce8:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d90a      	bls.n	800cd06 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f004 fd77 	bl	80117f0 <SDMMC_CmdReadMultiBlock>
 800cd02:	6478      	str	r0, [r7, #68]	; 0x44
 800cd04:	e009      	b.n	800cd1a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd12:	4618      	mov	r0, r3
 800cd14:	f004 fd49 	bl	80117aa <SDMMC_CmdReadSingleBlock>
 800cd18:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d012      	beq.n	800cd46 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a88      	ldr	r2, [pc, #544]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800cd26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd2e:	431a      	orrs	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2201      	movs	r2, #1
 800cd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e0fc      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd4a:	e061      	b.n	800ce10 <HAL_SD_ReadBlocks+0x1e4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d03c      	beq.n	800cdd4 <HAL_SD_ReadBlocks+0x1a8>
 800cd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d039      	beq.n	800cdd4 <HAL_SD_ReadBlocks+0x1a8>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cd60:	2300      	movs	r3, #0
 800cd62:	643b      	str	r3, [r7, #64]	; 0x40
 800cd64:	e033      	b.n	800cdce <HAL_SD_ReadBlocks+0x1a2>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f004 fc46 	bl	80115fc <SDMMC_ReadFIFO>
 800cd70:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd82:	3b01      	subs	r3, #1
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	0a1b      	lsrs	r3, r3, #8
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	3301      	adds	r3, #1
 800cd94:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	0c1b      	lsrs	r3, r3, #16
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda8:	3301      	adds	r3, #1
 800cdaa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cdac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdae:	3b01      	subs	r3, #1
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	0e1b      	lsrs	r3, r3, #24
 800cdb6:	b2da      	uxtb	r2, r3
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cdc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800cdc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdca:	3301      	adds	r3, #1
 800cdcc:	643b      	str	r3, [r7, #64]	; 0x40
 800cdce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdd0:	2b07      	cmp	r3, #7
 800cdd2:	d9c8      	bls.n	800cd66 <HAL_SD_ReadBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cdd4:	f7f9 fe26 	bl	8006a24 <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d902      	bls.n	800cdea <HAL_SD_ReadBlocks+0x1be>
 800cde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d112      	bne.n	800ce10 <HAL_SD_ReadBlocks+0x1e4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a56      	ldr	r2, [pc, #344]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800cdf0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e097      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce16:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d096      	beq.n	800cd4c <HAL_SD_ReadBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	68da      	ldr	r2, [r3, #12]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce2c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d022      	beq.n	800ce82 <HAL_SD_ReadBlocks+0x256>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b01      	cmp	r3, #1
 800ce40:	d91f      	bls.n	800ce82 <HAL_SD_ReadBlocks+0x256>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d01b      	beq.n	800ce82 <HAL_SD_ReadBlocks+0x256>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f004 fd38 	bl	80118c4 <SDMMC_CmdStopTransfer>
 800ce54:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d012      	beq.n	800ce82 <HAL_SD_ReadBlocks+0x256>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a39      	ldr	r2, [pc, #228]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800ce62:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e05e      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce88:	f003 0308 	and.w	r3, r3, #8
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d012      	beq.n	800ceb6 <HAL_SD_ReadBlocks+0x28a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a2c      	ldr	r2, [pc, #176]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce9c:	f043 0208 	orr.w	r2, r3, #8
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	e044      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebc:	f003 0302 	and.w	r3, r3, #2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d012      	beq.n	800ceea <HAL_SD_ReadBlocks+0x2be>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a1f      	ldr	r2, [pc, #124]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800ceca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	f043 0202 	orr.w	r2, r3, #2
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e02a      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef0:	f003 0320 	and.w	r3, r3, #32
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d012      	beq.n	800cf1e <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a12      	ldr	r2, [pc, #72]	; (800cf48 <HAL_SD_ReadBlocks+0x31c>)
 800cefe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf04:	f043 0220 	orr.w	r2, r3, #32
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e010      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a0a      	ldr	r2, [pc, #40]	; (800cf4c <HAL_SD_ReadBlocks+0x320>)
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e006      	b.n	800cf40 <HAL_SD_ReadBlocks+0x314>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
  }
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3748      	adds	r7, #72	; 0x48
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	1fe00fff 	.word	0x1fe00fff
 800cf4c:	18000f3a 	.word	0x18000f3a

0800cf50 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b092      	sub	sp, #72	; 0x48
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
 800cf5c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf5e:	f7f9 fd61 	bl	8006a24 <HAL_GetTick>
 800cf62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d107      	bne.n	800cf82 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e174      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	f040 8167 	bne.w	800d25e <HAL_SD_WriteBlocks+0x30e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2200      	movs	r2, #0
 800cf94:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cf96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	441a      	add	r2, r3
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d907      	bls.n	800cfb4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	e15b      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2203      	movs	r2, #3
 800cfb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d002      	beq.n	800cfd2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	025b      	lsls	r3, r3, #9
 800cfd0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cfd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfd6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	025b      	lsls	r3, r3, #9
 800cfdc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cfde:	2390      	movs	r3, #144	; 0x90
 800cfe0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f107 0218 	add.w	r2, r7, #24
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f004 fb87 	bl	801170c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	68da      	ldr	r2, [r3, #12]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d00c:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d90a      	bls.n	800d02a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2220      	movs	r2, #32
 800d018:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d020:	4618      	mov	r0, r3
 800d022:	f004 fc2b 	bl	801187c <SDMMC_CmdWriteMultiBlock>
 800d026:	6478      	str	r0, [r7, #68]	; 0x44
 800d028:	e009      	b.n	800d03e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2210      	movs	r2, #16
 800d02e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d036:	4618      	mov	r0, r3
 800d038:	f004 fbfd 	bl	8011836 <SDMMC_CmdWriteSingleBlock>
 800d03c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d03e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d040:	2b00      	cmp	r3, #0
 800d042:	d012      	beq.n	800d06a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a8a      	ldr	r2, [pc, #552]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d04a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d052:	431a      	orrs	r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	e100      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d06e:	e065      	b.n	800d13c <HAL_SD_WriteBlocks+0x1ec>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d040      	beq.n	800d100 <HAL_SD_WriteBlocks+0x1b0>
 800d07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d080:	2b00      	cmp	r3, #0
 800d082:	d03d      	beq.n	800d100 <HAL_SD_WriteBlocks+0x1b0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d084:	2300      	movs	r3, #0
 800d086:	643b      	str	r3, [r7, #64]	; 0x40
 800d088:	e037      	b.n	800d0fa <HAL_SD_WriteBlocks+0x1aa>
        {
          data = (uint32_t)(*tempbuff);
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d092:	3301      	adds	r3, #1
 800d094:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d098:	3b01      	subs	r3, #1
 800d09a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	021a      	lsls	r2, r3, #8
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	041a      	lsls	r2, r3, #16
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	061a      	lsls	r2, r3, #24
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0da:	3301      	adds	r3, #1
 800d0dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f107 0214 	add.w	r2, r7, #20
 800d0ec:	4611      	mov	r1, r2
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f004 fa91 	bl	8011616 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d0f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	643b      	str	r3, [r7, #64]	; 0x40
 800d0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0fc:	2b07      	cmp	r3, #7
 800d0fe:	d9c4      	bls.n	800d08a <HAL_SD_WriteBlocks+0x13a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d100:	f7f9 fc90 	bl	8006a24 <HAL_GetTick>
 800d104:	4602      	mov	r2, r0
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d902      	bls.n	800d116 <HAL_SD_WriteBlocks+0x1c6>
 800d110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d112:	2b00      	cmp	r3, #0
 800d114:	d112      	bne.n	800d13c <HAL_SD_WriteBlocks+0x1ec>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4a56      	ldr	r2, [pc, #344]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d124:	431a      	orrs	r2, r3
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d138:	2303      	movs	r3, #3
 800d13a:	e097      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d142:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d146:	2b00      	cmp	r3, #0
 800d148:	d092      	beq.n	800d070 <HAL_SD_WriteBlocks+0x120>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	68da      	ldr	r2, [r3, #12]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d158:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d164:	2b00      	cmp	r3, #0
 800d166:	d022      	beq.n	800d1ae <HAL_SD_WriteBlocks+0x25e>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d91f      	bls.n	800d1ae <HAL_SD_WriteBlocks+0x25e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d172:	2b03      	cmp	r3, #3
 800d174:	d01b      	beq.n	800d1ae <HAL_SD_WriteBlocks+0x25e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f004 fba2 	bl	80118c4 <SDMMC_CmdStopTransfer>
 800d180:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d184:	2b00      	cmp	r3, #0
 800d186:	d012      	beq.n	800d1ae <HAL_SD_WriteBlocks+0x25e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a39      	ldr	r2, [pc, #228]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d18e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d196:	431a      	orrs	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e05e      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b4:	f003 0308 	and.w	r3, r3, #8
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d012      	beq.n	800d1e2 <HAL_SD_WriteBlocks+0x292>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a2c      	ldr	r2, [pc, #176]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d1c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c8:	f043 0208 	orr.w	r2, r3, #8
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e044      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d012      	beq.n	800d216 <HAL_SD_WriteBlocks+0x2c6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a1f      	ldr	r2, [pc, #124]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fc:	f043 0202 	orr.w	r2, r3, #2
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e02a      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21c:	f003 0310 	and.w	r3, r3, #16
 800d220:	2b00      	cmp	r3, #0
 800d222:	d012      	beq.n	800d24a <HAL_SD_WriteBlocks+0x2fa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a12      	ldr	r2, [pc, #72]	; (800d274 <HAL_SD_WriteBlocks+0x324>)
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d230:	f043 0210 	orr.w	r2, r3, #16
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e010      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a0a      	ldr	r2, [pc, #40]	; (800d278 <HAL_SD_WriteBlocks+0x328>)
 800d250:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e006      	b.n	800d26c <HAL_SD_WriteBlocks+0x31c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
  }
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3748      	adds	r7, #72	; 0x48
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	1fe00fff 	.word	0x1fe00fff
 800d278:	18000f3a 	.word	0x18000f3a

0800d27c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d28a:	0f9b      	lsrs	r3, r3, #30
 800d28c:	b2da      	uxtb	r2, r3
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d296:	0e9b      	lsrs	r3, r3, #26
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	f003 030f 	and.w	r3, r3, #15
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2a8:	0e1b      	lsrs	r3, r3, #24
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	f003 0303 	and.w	r3, r3, #3
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2ba:	0c1b      	lsrs	r3, r3, #16
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2c6:	0a1b      	lsrs	r3, r3, #8
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2dc:	0d1b      	lsrs	r3, r3, #20
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2e8:	0c1b      	lsrs	r3, r3, #16
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	f003 030f 	and.w	r3, r3, #15
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d2fa:	0bdb      	lsrs	r3, r3, #15
 800d2fc:	b2db      	uxtb	r3, r3
 800d2fe:	f003 0301 	and.w	r3, r3, #1
 800d302:	b2da      	uxtb	r2, r3
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d30c:	0b9b      	lsrs	r3, r3, #14
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	b2da      	uxtb	r2, r3
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d31e:	0b5b      	lsrs	r3, r3, #13
 800d320:	b2db      	uxtb	r3, r3
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	b2da      	uxtb	r2, r3
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d330:	0b1b      	lsrs	r3, r3, #12
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 0301 	and.w	r3, r3, #1
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2200      	movs	r2, #0
 800d342:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d163      	bne.n	800d414 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d350:	009a      	lsls	r2, r3, #2
 800d352:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d356:	4013      	ands	r3, r2
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d35c:	0f92      	lsrs	r2, r2, #30
 800d35e:	431a      	orrs	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d368:	0edb      	lsrs	r3, r3, #27
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	f003 0307 	and.w	r3, r3, #7
 800d370:	b2da      	uxtb	r2, r3
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d37a:	0e1b      	lsrs	r3, r3, #24
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 0307 	and.w	r3, r3, #7
 800d382:	b2da      	uxtb	r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d38c:	0d5b      	lsrs	r3, r3, #21
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	f003 0307 	and.w	r3, r3, #7
 800d394:	b2da      	uxtb	r2, r3
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d39e:	0c9b      	lsrs	r3, r3, #18
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	f003 0307 	and.w	r3, r3, #7
 800d3a6:	b2da      	uxtb	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3b0:	0bdb      	lsrs	r3, r3, #15
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	f003 0307 	and.w	r3, r3, #7
 800d3b8:	b2da      	uxtb	r2, r3
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	7e1b      	ldrb	r3, [r3, #24]
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d3da:	687a      	ldr	r2, [r7, #4]
 800d3dc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d3de:	fb03 f202 	mul.w	r2, r3, r2
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	7a1b      	ldrb	r3, [r3, #8]
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	f003 030f 	and.w	r3, r3, #15
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	409a      	lsls	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d400:	0a52      	lsrs	r2, r2, #9
 800d402:	fb03 f202 	mul.w	r2, r3, r2
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d410:	659a      	str	r2, [r3, #88]	; 0x58
 800d412:	e031      	b.n	800d478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d11d      	bne.n	800d458 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d420:	041b      	lsls	r3, r3, #16
 800d422:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d42a:	0c1b      	lsrs	r3, r3, #16
 800d42c:	431a      	orrs	r2, r3
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	3301      	adds	r3, #1
 800d438:	029a      	lsls	r2, r3, #10
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d44c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	659a      	str	r2, [r3, #88]	; 0x58
 800d456:	e00f      	b.n	800d478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a58      	ldr	r2, [pc, #352]	; (800d5c0 <HAL_SD_GetCardCSD+0x344>)
 800d45e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2201      	movs	r2, #1
 800d470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	e09d      	b.n	800d5b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d47c:	0b9b      	lsrs	r3, r3, #14
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	b2da      	uxtb	r2, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d48e:	09db      	lsrs	r3, r3, #7
 800d490:	b2db      	uxtb	r3, r3
 800d492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d496:	b2da      	uxtb	r2, r3
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4b0:	0fdb      	lsrs	r3, r3, #31
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4bc:	0f5b      	lsrs	r3, r3, #29
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	f003 0303 	and.w	r3, r3, #3
 800d4c4:	b2da      	uxtb	r2, r3
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ce:	0e9b      	lsrs	r3, r3, #26
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	f003 0307 	and.w	r3, r3, #7
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4e0:	0d9b      	lsrs	r3, r3, #22
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	f003 030f 	and.w	r3, r3, #15
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4f2:	0d5b      	lsrs	r3, r3, #21
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50e:	0c1b      	lsrs	r3, r3, #16
 800d510:	b2db      	uxtb	r3, r3
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d522:	0bdb      	lsrs	r3, r3, #15
 800d524:	b2db      	uxtb	r3, r3
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d536:	0b9b      	lsrs	r3, r3, #14
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d54a:	0b5b      	lsrs	r3, r3, #13
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	b2da      	uxtb	r2, r3
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d55e:	0b1b      	lsrs	r3, r3, #12
 800d560:	b2db      	uxtb	r3, r3
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	b2da      	uxtb	r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d572:	0a9b      	lsrs	r3, r3, #10
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f003 0303 	and.w	r3, r3, #3
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d586:	0a1b      	lsrs	r3, r3, #8
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	f003 0303 	and.w	r3, r3, #3
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d59a:	085b      	lsrs	r3, r3, #1
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	370c      	adds	r7, #12
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	1fe00fff 	.word	0x1fe00fff

0800d5c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b094      	sub	sp, #80	; 0x50
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d5d4:	f107 0308 	add.w	r3, r7, #8
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fbd4 	bl	800dd88 <SD_SendSDStatus>
 800d5e0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d011      	beq.n	800d60c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a4f      	ldr	r2, [pc, #316]	; (800d72c <HAL_SD_GetCardStatus+0x168>)
 800d5ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5f6:	431a      	orrs	r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2201      	movs	r2, #1
 800d600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d60a:	e070      	b.n	800d6ee <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	099b      	lsrs	r3, r3, #6
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0303 	and.w	r3, r3, #3
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	095b      	lsrs	r3, r3, #5
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	b2da      	uxtb	r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	0a1b      	lsrs	r3, r3, #8
 800d630:	b29b      	uxth	r3, r3
 800d632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d636:	b29a      	uxth	r2, r3
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	0e1b      	lsrs	r3, r3, #24
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	4313      	orrs	r3, r2
 800d640:	b29a      	uxth	r2, r3
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	061a      	lsls	r2, r3, #24
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d652:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	0a1b      	lsrs	r3, r3, #8
 800d658:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d65c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	0e1b      	lsrs	r3, r3, #24
 800d662:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	0a1b      	lsrs	r3, r3, #8
 800d674:	b2da      	uxtb	r2, r3
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	0d1b      	lsrs	r3, r3, #20
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	b2da      	uxtb	r2, r3
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	0c1b      	lsrs	r3, r3, #16
 800d68e:	b29b      	uxth	r3, r3
 800d690:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d694:	b29a      	uxth	r2, r3
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	b29b      	uxth	r3, r3
 800d69a:	b2db      	uxtb	r3, r3
 800d69c:	b29b      	uxth	r3, r3
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	0a9b      	lsrs	r3, r3, #10
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	0a1b      	lsrs	r3, r3, #8
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	f003 0303 	and.w	r3, r3, #3
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	73da      	strb	r2, [r3, #15]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d6c6:	697b      	ldr	r3, [r7, #20]
 800d6c8:	091b      	lsrs	r3, r3, #4
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	f003 030f 	and.w	r3, r3, #15
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	f003 030f 	and.w	r3, r3, #15
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	0e1b      	lsrs	r3, r3, #24
 800d6e8:	b2da      	uxtb	r2, r3
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	749a      	strb	r2, [r3, #18]
#endif
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f004 f834 	bl	8011764 <SDMMC_CmdBlockLength>
 800d6fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00d      	beq.n	800d720 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a08      	ldr	r2, [pc, #32]	; (800d72c <HAL_SD_GetCardStatus+0x168>)
 800d70a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d710:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d71a:	2301      	movs	r3, #1
 800d71c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800d720:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d724:	4618      	mov	r0, r3
 800d726:	3750      	adds	r7, #80	; 0x50
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	1fe00fff 	.word	0x1fe00fff

0800d730 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	370c      	adds	r7, #12
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d788:	b5b0      	push	{r4, r5, r7, lr}
 800d78a:	b090      	sub	sp, #64	; 0x40
 800d78c:	af04      	add	r7, sp, #16
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2203      	movs	r2, #3
 800d79c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d02e      	beq.n	800d806 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ae:	d106      	bne.n	800d7be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38
 800d7bc:	e029      	b.n	800d812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7c4:	d10a      	bne.n	800d7dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fbd6 	bl	800df78 <SD_WideBus_Enable>
 800d7cc:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	431a      	orrs	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	639a      	str	r2, [r3, #56]	; 0x38
 800d7da:	e01a      	b.n	800d812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fc13 	bl	800e00e <SD_WideBus_Disable>
 800d7e8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	431a      	orrs	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
 800d7f6:	e00c      	b.n	800d812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	639a      	str	r2, [r3, #56]	; 0x38
 800d804:	e005      	b.n	800d812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d816:	2b00      	cmp	r3, #0
 800d818:	d007      	beq.n	800d82a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	4a60      	ldr	r2, [pc, #384]	; (800d9a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d820:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d828:	e097      	b.n	800d95a <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800d82a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800d82e:	f7fd feb9 	bl	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d832:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	2b00      	cmp	r3, #0
 800d838:	f000 8086 	beq.w	800d948 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	695a      	ldr	r2, [r3, #20]
 800d856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d858:	4952      	ldr	r1, [pc, #328]	; (800d9a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d85a:	fba1 1303 	umull	r1, r3, r1, r3
 800d85e:	0e1b      	lsrs	r3, r3, #24
 800d860:	429a      	cmp	r2, r3
 800d862:	d303      	bcc.n	800d86c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	61fb      	str	r3, [r7, #28]
 800d86a:	e05a      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d874:	d103      	bne.n	800d87e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	61fb      	str	r3, [r7, #28]
 800d87c:	e051      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d886:	d126      	bne.n	800d8d6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	695b      	ldr	r3, [r3, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10e      	bne.n	800d8ae <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d892:	4a45      	ldr	r2, [pc, #276]	; (800d9a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d906      	bls.n	800d8a6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	4a42      	ldr	r2, [pc, #264]	; (800d9a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d89c:	fba2 2303 	umull	r2, r3, r2, r3
 800d8a0:	0e5b      	lsrs	r3, r3, #25
 800d8a2:	61fb      	str	r3, [r7, #28]
 800d8a4:	e03d      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	695b      	ldr	r3, [r3, #20]
 800d8aa:	61fb      	str	r3, [r7, #28]
 800d8ac:	e039      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	005b      	lsls	r3, r3, #1
 800d8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ba:	4a3b      	ldr	r2, [pc, #236]	; (800d9a8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d906      	bls.n	800d8ce <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	4a38      	ldr	r2, [pc, #224]	; (800d9a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d8c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c8:	0e5b      	lsrs	r3, r3, #25
 800d8ca:	61fb      	str	r3, [r7, #28]
 800d8cc:	e029      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	695b      	ldr	r3, [r3, #20]
 800d8d2:	61fb      	str	r3, [r7, #28]
 800d8d4:	e025      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	695b      	ldr	r3, [r3, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10e      	bne.n	800d8fc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e0:	4a32      	ldr	r2, [pc, #200]	; (800d9ac <HAL_SD_ConfigWideBusOperation+0x224>)
 800d8e2:	4293      	cmp	r3, r2
 800d8e4:	d906      	bls.n	800d8f4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	4a2e      	ldr	r2, [pc, #184]	; (800d9a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ee:	0e1b      	lsrs	r3, r3, #24
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	e016      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	61fb      	str	r3, [r7, #28]
 800d8fa:	e012      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	695b      	ldr	r3, [r3, #20]
 800d900:	005b      	lsls	r3, r3, #1
 800d902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d904:	fbb2 f3f3 	udiv	r3, r2, r3
 800d908:	4a28      	ldr	r2, [pc, #160]	; (800d9ac <HAL_SD_ConfigWideBusOperation+0x224>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d906      	bls.n	800d91c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	4a24      	ldr	r2, [pc, #144]	; (800d9a4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d912:	fba2 2303 	umull	r2, r3, r2, r3
 800d916:	0e1b      	lsrs	r3, r3, #24
 800d918:	61fb      	str	r3, [r7, #28]
 800d91a:	e002      	b.n	800d922 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	623b      	str	r3, [r7, #32]
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681d      	ldr	r5, [r3, #0]
 800d92c:	466c      	mov	r4, sp
 800d92e:	f107 0318 	add.w	r3, r7, #24
 800d932:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d936:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d93a:	f107 030c 	add.w	r3, r7, #12
 800d93e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d940:	4628      	mov	r0, r5
 800d942:	f003 fe31 	bl	80115a8 <SDMMC_Init>
 800d946:	e008      	b.n	800d95a <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d962:	4618      	mov	r0, r3
 800d964:	f003 fefe 	bl	8011764 <SDMMC_CmdBlockLength>
 800d968:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00c      	beq.n	800d98a <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a0a      	ldr	r2, [pc, #40]	; (800d9a0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97e:	431a      	orrs	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d996:	4618      	mov	r0, r3
 800d998:	3730      	adds	r7, #48	; 0x30
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bdb0      	pop	{r4, r5, r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	1fe00fff 	.word	0x1fe00fff
 800d9a4:	55e63b89 	.word	0x55e63b89
 800d9a8:	02faf080 	.word	0x02faf080
 800d9ac:	017d7840 	.word	0x017d7840

0800d9b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d9bc:	f107 030c 	add.w	r3, r7, #12
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fab0 	bl	800df28 <SD_SendStatus>
 800d9c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d005      	beq.n	800d9dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	431a      	orrs	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	0a5b      	lsrs	r3, r3, #9
 800d9e0:	f003 030f 	and.w	r3, r3, #15
 800d9e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d9e6:	693b      	ldr	r3, [r7, #16]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d9f0:	b5b0      	push	{r4, r5, r7, lr}
 800d9f2:	b090      	sub	sp, #64	; 0x40
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4618      	mov	r0, r3
 800da02:	f003 fe2b 	bl	801165c <SDMMC_GetPowerState>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d102      	bne.n	800da12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800da0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800da10:	e0a9      	b.n	800db66 <SD_InitCard+0x176>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da16:	2b03      	cmp	r3, #3
 800da18:	d02e      	beq.n	800da78 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	f004 f870 	bl	8011b04 <SDMMC_CmdSendCID>
 800da24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <SD_InitCard+0x40>
    {
      return errorstate;
 800da2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2e:	e09a      	b.n	800db66 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2100      	movs	r1, #0
 800da36:	4618      	mov	r0, r3
 800da38:	f003 fe55 	bl	80116e6 <SDMMC_GetResponse>
 800da3c:	4602      	mov	r2, r0
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2104      	movs	r1, #4
 800da48:	4618      	mov	r0, r3
 800da4a:	f003 fe4c 	bl	80116e6 <SDMMC_GetResponse>
 800da4e:	4602      	mov	r2, r0
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	2108      	movs	r1, #8
 800da5a:	4618      	mov	r0, r3
 800da5c:	f003 fe43 	bl	80116e6 <SDMMC_GetResponse>
 800da60:	4602      	mov	r2, r0
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	210c      	movs	r1, #12
 800da6c:	4618      	mov	r0, r3
 800da6e:	f003 fe3a 	bl	80116e6 <SDMMC_GetResponse>
 800da72:	4602      	mov	r2, r0
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da7c:	2b03      	cmp	r3, #3
 800da7e:	d00d      	beq.n	800da9c <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f107 020e 	add.w	r2, r7, #14
 800da88:	4611      	mov	r1, r2
 800da8a:	4618      	mov	r0, r3
 800da8c:	f004 f879 	bl	8011b82 <SDMMC_CmdSetRelAdd>
 800da90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800da92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da94:	2b00      	cmp	r3, #0
 800da96:	d001      	beq.n	800da9c <SD_InitCard+0xac>
    {
      return errorstate;
 800da98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9a:	e064      	b.n	800db66 <SD_InitCard+0x176>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa0:	2b03      	cmp	r3, #3
 800daa2:	d036      	beq.n	800db12 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	461a      	mov	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dab4:	041b      	lsls	r3, r3, #16
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f004 f842 	bl	8011b42 <SDMMC_CmdSendCSD>
 800dabe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <SD_InitCard+0xda>
    {
      return errorstate;
 800dac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac8:	e04d      	b.n	800db66 <SD_InitCard+0x176>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2100      	movs	r1, #0
 800dad0:	4618      	mov	r0, r3
 800dad2:	f003 fe08 	bl	80116e6 <SDMMC_GetResponse>
 800dad6:	4602      	mov	r2, r0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2104      	movs	r1, #4
 800dae2:	4618      	mov	r0, r3
 800dae4:	f003 fdff 	bl	80116e6 <SDMMC_GetResponse>
 800dae8:	4602      	mov	r2, r0
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2108      	movs	r1, #8
 800daf4:	4618      	mov	r0, r3
 800daf6:	f003 fdf6 	bl	80116e6 <SDMMC_GetResponse>
 800dafa:	4602      	mov	r2, r0
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	210c      	movs	r1, #12
 800db06:	4618      	mov	r0, r3
 800db08:	f003 fded 	bl	80116e6 <SDMMC_GetResponse>
 800db0c:	4602      	mov	r2, r0
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2104      	movs	r1, #4
 800db18:	4618      	mov	r0, r3
 800db1a:	f003 fde4 	bl	80116e6 <SDMMC_GetResponse>
 800db1e:	4603      	mov	r3, r0
 800db20:	0d1a      	lsrs	r2, r3, #20
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800db26:	f107 0310 	add.w	r3, r7, #16
 800db2a:	4619      	mov	r1, r3
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f7ff fba5 	bl	800d27c <HAL_SD_GetCardCSD>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db3c:	e013      	b.n	800db66 <SD_InitCard+0x176>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6819      	ldr	r1, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db46:	041b      	lsls	r3, r3, #16
 800db48:	2200      	movs	r2, #0
 800db4a:	461c      	mov	r4, r3
 800db4c:	4615      	mov	r5, r2
 800db4e:	4622      	mov	r2, r4
 800db50:	462b      	mov	r3, r5
 800db52:	4608      	mov	r0, r1
 800db54:	f003 feec 	bl	8011930 <SDMMC_CmdSelDesel>
 800db58:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800db5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <SD_InitCard+0x174>
  {
    return errorstate;
 800db60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db62:	e000      	b.n	800db66 <SD_InitCard+0x176>
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3740      	adds	r7, #64	; 0x40
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800db70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	61fb      	str	r3, [r7, #28]
 800db80:	2300      	movs	r3, #0
 800db82:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
 800db84:	f7f8 ff4e 	bl	8006a24 <HAL_GetTick>
 800db88:	6178      	str	r0, [r7, #20]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4618      	mov	r0, r3
 800db90:	f003 fef2 	bl	8011978 <SDMMC_CmdGoIdleState>
 800db94:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <SD_PowerON+0x30>
  {
    return errorstate;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	e0ed      	b.n	800dd7c <SD_PowerON+0x20c>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4618      	mov	r0, r3
 800dba6:	f003 ff05 	bl	80119b4 <SDMMC_CmdOperCond>
 800dbaa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00d      	beq.n	800dbce <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f003 fedb 	bl	8011978 <SDMMC_CmdGoIdleState>
 800dbc2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d004      	beq.n	800dbd4 <SD_PowerON+0x64>
    {
      return errorstate;
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	e0d6      	b.n	800dd7c <SD_PowerON+0x20c>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d137      	bne.n	800dc4c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f003 ff06 	bl	80119f4 <SDMMC_CmdAppCommand>
 800dbe8:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d02d      	beq.n	800dc4c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dbf4:	e0c2      	b.n	800dd7c <SD_PowerON+0x20c>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2100      	movs	r1, #0
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f003 fef9 	bl	80119f4 <SDMMC_CmdAppCommand>
 800dc02:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d001      	beq.n	800dc0e <SD_PowerON+0x9e>
    {
      return errorstate;
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	e0b6      	b.n	800dd7c <SD_PowerON+0x20c>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	495c      	ldr	r1, [pc, #368]	; (800dd84 <SD_PowerON+0x214>)
 800dc14:	4618      	mov	r0, r3
 800dc16:	f003 ff10 	bl	8011a3a <SDMMC_CmdAppOperCommand>
 800dc1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dc26:	e0a9      	b.n	800dd7c <SD_PowerON+0x20c>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f003 fd59 	bl	80116e6 <SDMMC_GetResponse>
 800dc34:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	0fdb      	lsrs	r3, r3, #31
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d101      	bne.n	800dc42 <SD_PowerON+0xd2>
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e000      	b.n	800dc44 <SD_PowerON+0xd4>
 800dc42:	2300      	movs	r3, #0
 800dc44:	61bb      	str	r3, [r7, #24]

    count++;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d802      	bhi.n	800dc5c <SD_PowerON+0xec>
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d0cc      	beq.n	800dbf6 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d902      	bls.n	800dc6c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dc66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc6a:	e087      	b.n	800dd7c <SD_PowerON+0x20c>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d07e      	beq.n	800dd74 <SD_PowerON+0x204>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	63da      	str	r2, [r3, #60]	; 0x3c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d17a      	bne.n	800dd7a <SD_PowerON+0x20a>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d075      	beq.n	800dd7a <SD_PowerON+0x20a>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc94:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f042 0208 	orr.w	r2, r2, #8
 800dca4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f003 ffd0 	bl	8011c50 <SDMMC_CmdVoltageSwitch>
 800dcb0:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d00c      	beq.n	800dcd2 <SD_PowerON+0x162>
        {
          return errorstate;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	e05f      	b.n	800dd7c <SD_PowerON+0x20c>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcbc:	f7f8 feb2 	bl	8006a24 <HAL_GetTick>
 800dcc0:	4602      	mov	r2, r0
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcca:	d102      	bne.n	800dcd2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800dccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcd0:	e054      	b.n	800dd7c <SD_PowerON+0x20c>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dcdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dce0:	d1ec      	bne.n	800dcbc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcfa:	d002      	beq.n	800dd02 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800dcfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dd00:	e03c      	b.n	800dd7c <SD_PowerON+0x20c>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800dd02:	2001      	movs	r0, #1
 800dd04:	f000 fa9e 	bl	800e244 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
#endif

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0204 	orr.w	r2, r2, #4
 800dd16:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800dd18:	e00a      	b.n	800dd30 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd1a:	f7f8 fe83 	bl	8006a24 <HAL_GetTick>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd28:	d102      	bne.n	800dd30 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800dd2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd2e:	e025      	b.n	800dd7c <SD_PowerON+0x20c>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dd3e:	d1ec      	bne.n	800dd1a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dd54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd58:	d102      	bne.n	800dd60 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dd5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd5e:	e00d      	b.n	800dd7c <SD_PowerON+0x20c>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2213      	movs	r2, #19
 800dd66:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd70:	639a      	str	r2, [r3, #56]	; 0x38
 800dd72:	e002      	b.n	800dd7a <SD_PowerON+0x20a>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	63da      	str	r2, [r3, #60]	; 0x3c
  }


  return HAL_SD_ERROR_NONE;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3720      	adds	r7, #32
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	c1100000 	.word	0xc1100000

0800dd88 <SD_SendSDStatus>:
  * @param  pSDstatus Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b08c      	sub	sp, #48	; 0x30
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd92:	f7f8 fe47 	bl	8006a24 <HAL_GetTick>
 800dd96:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2100      	movs	r1, #0
 800dda2:	4618      	mov	r0, r3
 800dda4:	f003 fc9f 	bl	80116e6 <SDMMC_GetResponse>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddb2:	d102      	bne.n	800ddba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ddb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddb8:	e0b0      	b.n	800df1c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2140      	movs	r1, #64	; 0x40
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f003 fccf 	bl	8011764 <SDMMC_CmdBlockLength>
 800ddc6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddc8:	6a3b      	ldr	r3, [r7, #32]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d005      	beq.n	800ddda <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	e0a0      	b.n	800df1c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dde2:	041b      	lsls	r3, r3, #16
 800dde4:	4619      	mov	r1, r3
 800dde6:	4610      	mov	r0, r2
 800dde8:	f003 fe04 	bl	80119f4 <SDMMC_CmdAppCommand>
 800ddec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d005      	beq.n	800de00 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	e08d      	b.n	800df1c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800de00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de04:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800de06:	2340      	movs	r3, #64	; 0x40
 800de08:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800de0a:	2360      	movs	r3, #96	; 0x60
 800de0c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800de0e:	2302      	movs	r3, #2
 800de10:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800de12:	2300      	movs	r3, #0
 800de14:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800de16:	2301      	movs	r3, #1
 800de18:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f107 0208 	add.w	r2, r7, #8
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f003 fc71 	bl	801170c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f003 feec 	bl	8011c0c <SDMMC_CmdStatusRegister>
 800de34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d02b      	beq.n	800de94 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800de44:	6a3b      	ldr	r3, [r7, #32]
 800de46:	e069      	b.n	800df1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d013      	beq.n	800de7e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800de56:	2300      	movs	r3, #0
 800de58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de5a:	e00d      	b.n	800de78 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4618      	mov	r0, r3
 800de62:	f003 fbcb 	bl	80115fc <SDMMC_ReadFIFO>
 800de66:	4602      	mov	r2, r0
 800de68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6a:	601a      	str	r2, [r3, #0]
        pData++;
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	3304      	adds	r3, #4
 800de70:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800de72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de74:	3301      	adds	r3, #1
 800de76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	2b07      	cmp	r3, #7
 800de7c:	d9ee      	bls.n	800de5c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800de7e:	f7f8 fdd1 	bl	8006a24 <HAL_GetTick>
 800de82:	4602      	mov	r2, r0
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	1ad3      	subs	r3, r2, r3
 800de88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de8c:	d102      	bne.n	800de94 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800de8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de92:	e043      	b.n	800df1c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de9a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d0d2      	beq.n	800de48 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea8:	f003 0308 	and.w	r3, r3, #8
 800deac:	2b00      	cmp	r3, #0
 800deae:	d001      	beq.n	800deb4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800deb0:	2308      	movs	r3, #8
 800deb2:	e033      	b.n	800df1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deba:	f003 0302 	and.w	r3, r3, #2
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dec2:	2302      	movs	r3, #2
 800dec4:	e02a      	b.n	800df1c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800decc:	f003 0320 	and.w	r3, r3, #32
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d017      	beq.n	800df04 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ded4:	2320      	movs	r3, #32
 800ded6:	e021      	b.n	800df1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
#else
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f003 fb8d 	bl	80115fc <SDMMC_ReadFIFO>
 800dee2:	4602      	mov	r2, r0
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	601a      	str	r2, [r3, #0]
    pData++;
 800dee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deea:	3304      	adds	r3, #4
 800deec:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800deee:	f7f8 fd99 	bl	8006a24 <HAL_GetTick>
 800def2:	4602      	mov	r2, r0
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800defc:	d102      	bne.n	800df04 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800defe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800df02:	e00b      	b.n	800df1c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e2      	bne.n	800ded8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a03      	ldr	r2, [pc, #12]	; (800df24 <SD_SendSDStatus+0x19c>)
 800df18:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3730      	adds	r7, #48	; 0x30
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	18000f3a 	.word	0x18000f3a

0800df28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d102      	bne.n	800df3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800df38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df3c:	e018      	b.n	800df70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df46:	041b      	lsls	r3, r3, #16
 800df48:	4619      	mov	r1, r3
 800df4a:	4610      	mov	r0, r2
 800df4c:	f003 fe3b 	bl	8011bc6 <SDMMC_CmdSendStatus>
 800df50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d001      	beq.n	800df5c <SD_SendStatus+0x34>
  {
    return errorstate;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	e009      	b.n	800df70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2100      	movs	r1, #0
 800df62:	4618      	mov	r0, r3
 800df64:	f003 fbbf 	bl	80116e6 <SDMMC_GetResponse>
 800df68:	4602      	mov	r2, r0
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800df80:	2300      	movs	r3, #0
 800df82:	60fb      	str	r3, [r7, #12]
 800df84:	2300      	movs	r3, #0
 800df86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2100      	movs	r1, #0
 800df8e:	4618      	mov	r0, r3
 800df90:	f003 fba9 	bl	80116e6 <SDMMC_GetResponse>
 800df94:	4603      	mov	r3, r0
 800df96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df9e:	d102      	bne.n	800dfa6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dfa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfa4:	e02f      	b.n	800e006 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dfa6:	f107 030c 	add.w	r3, r7, #12
 800dfaa:	4619      	mov	r1, r3
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f879 	bl	800e0a4 <SD_FindSCR>
 800dfb2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	e023      	b.n	800e006 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01c      	beq.n	800e002 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfd0:	041b      	lsls	r3, r3, #16
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	f003 fd0d 	bl	80119f4 <SDMMC_CmdAppCommand>
 800dfda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	e00f      	b.n	800e006 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2102      	movs	r1, #2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f003 fd44 	bl	8011a7a <SDMMC_CmdBusWidth>
 800dff2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	e003      	b.n	800e006 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dffe:	2300      	movs	r3, #0
 800e000:	e001      	b.n	800e006 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e002:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e006:	4618      	mov	r0, r3
 800e008:	3718      	adds	r7, #24
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b086      	sub	sp, #24
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
 800e01a:	2300      	movs	r3, #0
 800e01c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2100      	movs	r1, #0
 800e024:	4618      	mov	r0, r3
 800e026:	f003 fb5e 	bl	80116e6 <SDMMC_GetResponse>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e034:	d102      	bne.n	800e03c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e036:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e03a:	e02f      	b.n	800e09c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e03c:	f107 030c 	add.w	r3, r7, #12
 800e040:	4619      	mov	r1, r3
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f82e 	bl	800e0a4 <SD_FindSCR>
 800e048:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	e023      	b.n	800e09c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d01c      	beq.n	800e098 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e066:	041b      	lsls	r3, r3, #16
 800e068:	4619      	mov	r1, r3
 800e06a:	4610      	mov	r0, r2
 800e06c:	f003 fcc2 	bl	80119f4 <SDMMC_CmdAppCommand>
 800e070:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	e00f      	b.n	800e09c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2100      	movs	r1, #0
 800e082:	4618      	mov	r0, r3
 800e084:	f003 fcf9 	bl	8011a7a <SDMMC_CmdBusWidth>
 800e088:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d001      	beq.n	800e094 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	e003      	b.n	800e09c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e094:	2300      	movs	r3, #0
 800e096:	e001      	b.n	800e09c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e098:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08e      	sub	sp, #56	; 0x38
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e0ae:	f7f8 fcb9 	bl	8006a24 <HAL_GetTick>
 800e0b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60bb      	str	r3, [r7, #8]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	2108      	movs	r1, #8
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f003 fb4a 	bl	8011764 <SDMMC_CmdBlockLength>
 800e0d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <SD_FindSCR+0x38>
  {
    return errorstate;
 800e0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0da:	e0ad      	b.n	800e238 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e4:	041b      	lsls	r3, r3, #16
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f003 fc83 	bl	80119f4 <SDMMC_CmdAppCommand>
 800e0ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <SD_FindSCR+0x56>
  {
    return errorstate;
 800e0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f8:	e09e      	b.n	800e238 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e100:	2308      	movs	r3, #8
 800e102:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e104:	2330      	movs	r3, #48	; 0x30
 800e106:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e108:	2302      	movs	r3, #2
 800e10a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e10c:	2300      	movs	r3, #0
 800e10e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e110:	2301      	movs	r3, #1
 800e112:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f107 0210 	add.w	r2, r7, #16
 800e11c:	4611      	mov	r1, r2
 800e11e:	4618      	mov	r0, r3
 800e120:	f003 faf4 	bl	801170c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f003 fcc9 	bl	8011ac0 <SDMMC_CmdSendSCR>
 800e12e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	2b00      	cmp	r3, #0
 800e134:	d027      	beq.n	800e186 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e138:	e07e      	b.n	800e238 <SD_FindSCR+0x194>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e144:	2b00      	cmp	r3, #0
 800e146:	d113      	bne.n	800e170 <SD_FindSCR+0xcc>
 800e148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d110      	bne.n	800e170 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4618      	mov	r0, r3
 800e154:	f003 fa52 	bl	80115fc <SDMMC_ReadFIFO>
 800e158:	4603      	mov	r3, r0
 800e15a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4618      	mov	r0, r3
 800e162:	f003 fa4b 	bl	80115fc <SDMMC_ReadFIFO>
 800e166:	4603      	mov	r3, r0
 800e168:	60fb      	str	r3, [r7, #12]
      index++;
 800e16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16c:	3301      	adds	r3, #1
 800e16e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e170:	f7f8 fc58 	bl	8006a24 <HAL_GetTick>
 800e174:	4602      	mov	r2, r0
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	1ad3      	subs	r3, r2, r3
 800e17a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e17e:	d102      	bne.n	800e186 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e184:	e058      	b.n	800e238 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e18c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e190:	4013      	ands	r3, r2
 800e192:	2b00      	cmp	r3, #0
 800e194:	d0d1      	beq.n	800e13a <SD_FindSCR+0x96>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19c:	f003 0308 	and.w	r3, r3, #8
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d005      	beq.n	800e1b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	2208      	movs	r2, #8
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	e043      	b.n	800e238 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1b6:	f003 0302 	and.w	r3, r3, #2
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d005      	beq.n	800e1ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	e036      	b.n	800e238 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1d0:	f003 0320 	and.w	r3, r3, #32
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d005      	beq.n	800e1e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2220      	movs	r2, #32
 800e1de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e1e0:	2320      	movs	r3, #32
 800e1e2:	e029      	b.n	800e238 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a15      	ldr	r2, [pc, #84]	; (800e240 <SD_FindSCR+0x19c>)
 800e1ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	061a      	lsls	r2, r3, #24
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	021b      	lsls	r3, r3, #8
 800e1f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	0a1b      	lsrs	r3, r3, #8
 800e1fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e202:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	0e1b      	lsrs	r3, r3, #24
 800e208:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	601a      	str	r2, [r3, #0]
    scr++;
 800e20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e210:	3304      	adds	r3, #4
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	061a      	lsls	r2, r3, #24
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	021b      	lsls	r3, r3, #8
 800e21c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e220:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	0a1b      	lsrs	r3, r3, #8
 800e226:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e22a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	0e1b      	lsrs	r3, r3, #24
 800e230:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e234:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3738      	adds	r7, #56	; 0x38
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	18000f3a 	.word	0x18000f3a

0800e244 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800e24e:	bf00      	nop
 800e250:	370c      	adds	r7, #12
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b084      	sub	sp, #16
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d101      	bne.n	800e26c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	e095      	b.n	800e398 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	d108      	bne.n	800e286 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e27c:	d009      	beq.n	800e292 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	61da      	str	r2, [r3, #28]
 800e284:	e005      	b.n	800e292 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d106      	bne.n	800e2b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f7f6 fc3f 	bl	8004b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68db      	ldr	r3, [r3, #12]
 800e2ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2d2:	d902      	bls.n	800e2da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e002      	b.n	800e2e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e2da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e2de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e2e8:	d007      	beq.n	800e2fa <HAL_SPI_Init+0xa0>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e2f2:	d002      	beq.n	800e2fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800e30a:	431a      	orrs	r2, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	f003 0302 	and.w	r3, r3, #2
 800e314:	431a      	orrs	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	695b      	ldr	r3, [r3, #20]
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	431a      	orrs	r2, r3
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e328:	431a      	orrs	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	69db      	ldr	r3, [r3, #28]
 800e32e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e332:	431a      	orrs	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6a1b      	ldr	r3, [r3, #32]
 800e338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e33c:	ea42 0103 	orr.w	r1, r2, r3
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	430a      	orrs	r2, r1
 800e34e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	0c1b      	lsrs	r3, r3, #16
 800e356:	f003 0204 	and.w	r2, r3, #4
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35e:	f003 0310 	and.w	r3, r3, #16
 800e362:	431a      	orrs	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e368:	f003 0308 	and.w	r3, r3, #8
 800e36c:	431a      	orrs	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800e376:	ea42 0103 	orr.w	r1, r2, r3
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	430a      	orrs	r2, r1
 800e386:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e396:	2300      	movs	r3, #0
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	60b9      	str	r1, [r7, #8]
 800e3aa:	603b      	str	r3, [r7, #0]
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d101      	bne.n	800e3c2 <HAL_SPI_Transmit+0x22>
 800e3be:	2302      	movs	r3, #2
 800e3c0:	e158      	b.n	800e674 <HAL_SPI_Transmit+0x2d4>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3ca:	f7f8 fb2b 	bl	8006a24 <HAL_GetTick>
 800e3ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e3d0:	88fb      	ldrh	r3, [r7, #6]
 800e3d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d002      	beq.n	800e3e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e3e4:	e13d      	b.n	800e662 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d002      	beq.n	800e3f2 <HAL_SPI_Transmit+0x52>
 800e3ec:	88fb      	ldrh	r3, [r7, #6]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d102      	bne.n	800e3f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e3f6:	e134      	b.n	800e662 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2203      	movs	r2, #3
 800e3fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	68ba      	ldr	r2, [r7, #8]
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	88fa      	ldrh	r2, [r7, #6]
 800e410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	88fa      	ldrh	r2, [r7, #6]
 800e416:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	2200      	movs	r2, #0
 800e41c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2200      	movs	r2, #0
 800e42a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e442:	d10f      	bne.n	800e464 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e452:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	681a      	ldr	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e462:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e46e:	2b40      	cmp	r3, #64	; 0x40
 800e470:	d007      	beq.n	800e482 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e48a:	d94b      	bls.n	800e524 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <HAL_SPI_Transmit+0xfa>
 800e494:	8afb      	ldrh	r3, [r7, #22]
 800e496:	2b01      	cmp	r3, #1
 800e498:	d13e      	bne.n	800e518 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	881a      	ldrh	r2, [r3, #0]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4aa:	1c9a      	adds	r2, r3, #2
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e4be:	e02b      	b.n	800e518 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	f003 0302 	and.w	r3, r3, #2
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d112      	bne.n	800e4f4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d2:	881a      	ldrh	r2, [r3, #0]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4de:	1c9a      	adds	r2, r3, #2
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	b29a      	uxth	r2, r3
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e4f2:	e011      	b.n	800e518 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4f4:	f7f8 fa96 	bl	8006a24 <HAL_GetTick>
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	429a      	cmp	r2, r3
 800e502:	d803      	bhi.n	800e50c <HAL_SPI_Transmit+0x16c>
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e50a:	d102      	bne.n	800e512 <HAL_SPI_Transmit+0x172>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d102      	bne.n	800e518 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e516:	e0a4      	b.n	800e662 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1ce      	bne.n	800e4c0 <HAL_SPI_Transmit+0x120>
 800e522:	e07c      	b.n	800e61e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <HAL_SPI_Transmit+0x192>
 800e52c:	8afb      	ldrh	r3, [r7, #22]
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d170      	bne.n	800e614 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e536:	b29b      	uxth	r3, r3
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d912      	bls.n	800e562 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e540:	881a      	ldrh	r2, [r3, #0]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e54c:	1c9a      	adds	r2, r3, #2
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e556:	b29b      	uxth	r3, r3
 800e558:	3b02      	subs	r3, #2
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e560:	e058      	b.n	800e614 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	330c      	adds	r3, #12
 800e56c:	7812      	ldrb	r2, [r2, #0]
 800e56e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e57e:	b29b      	uxth	r3, r3
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e588:	e044      	b.n	800e614 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	f003 0302 	and.w	r3, r3, #2
 800e594:	2b02      	cmp	r3, #2
 800e596:	d12b      	bne.n	800e5f0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d912      	bls.n	800e5c8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5a6:	881a      	ldrh	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	1c9a      	adds	r2, r3, #2
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	3b02      	subs	r3, #2
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5c6:	e025      	b.n	800e614 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	330c      	adds	r3, #12
 800e5d2:	7812      	ldrb	r2, [r2, #0]
 800e5d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5da:	1c5a      	adds	r2, r3, #1
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e5ee:	e011      	b.n	800e614 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e5f0:	f7f8 fa18 	bl	8006a24 <HAL_GetTick>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	69bb      	ldr	r3, [r7, #24]
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d803      	bhi.n	800e608 <HAL_SPI_Transmit+0x268>
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e606:	d102      	bne.n	800e60e <HAL_SPI_Transmit+0x26e>
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d102      	bne.n	800e614 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800e60e:	2303      	movs	r3, #3
 800e610:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e612:	e026      	b.n	800e662 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e618:	b29b      	uxth	r3, r3
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1b5      	bne.n	800e58a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e61e:	69ba      	ldr	r2, [r7, #24]
 800e620:	6839      	ldr	r1, [r7, #0]
 800e622:	68f8      	ldr	r0, [r7, #12]
 800e624:	f000 fe78 	bl	800f318 <SPI_EndRxTxTransaction>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d002      	beq.n	800e634 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2220      	movs	r2, #32
 800e632:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10a      	bne.n	800e652 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e63c:	2300      	movs	r3, #0
 800e63e:	613b      	str	r3, [r7, #16]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	613b      	str	r3, [r7, #16]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	613b      	str	r3, [r7, #16]
 800e650:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e656:	2b00      	cmp	r3, #0
 800e658:	d002      	beq.n	800e660 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800e65a:	2301      	movs	r3, #1
 800e65c:	77fb      	strb	r3, [r7, #31]
 800e65e:	e000      	b.n	800e662 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800e660:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2201      	movs	r2, #1
 800e666:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e672:	7ffb      	ldrb	r3, [r7, #31]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3720      	adds	r7, #32
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b088      	sub	sp, #32
 800e680:	af02      	add	r7, sp, #8
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	603b      	str	r3, [r7, #0]
 800e688:	4613      	mov	r3, r2
 800e68a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e68c:	2300      	movs	r3, #0
 800e68e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e698:	d112      	bne.n	800e6c0 <HAL_SPI_Receive+0x44>
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10e      	bne.n	800e6c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2204      	movs	r2, #4
 800e6a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e6aa:	88fa      	ldrh	r2, [r7, #6]
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 f910 	bl	800e8dc <HAL_SPI_TransmitReceive>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	e109      	b.n	800e8d4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d101      	bne.n	800e6ce <HAL_SPI_Receive+0x52>
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	e102      	b.n	800e8d4 <HAL_SPI_Receive+0x258>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6d6:	f7f8 f9a5 	bl	8006a24 <HAL_GetTick>
 800e6da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d002      	beq.n	800e6ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e6ec:	e0e9      	b.n	800e8c2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <HAL_SPI_Receive+0x7e>
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d102      	bne.n	800e700 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e6fe:	e0e0      	b.n	800e8c2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2204      	movs	r2, #4
 800e704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	68ba      	ldr	r2, [r7, #8]
 800e712:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	88fa      	ldrh	r2, [r7, #6]
 800e718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	88fa      	ldrh	r2, [r7, #6]
 800e720:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e74a:	d908      	bls.n	800e75e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e75a:	605a      	str	r2, [r3, #4]
 800e75c:	e007      	b.n	800e76e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e76c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e776:	d10f      	bne.n	800e798 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e786:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e796:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7a2:	2b40      	cmp	r3, #64	; 0x40
 800e7a4:	d007      	beq.n	800e7b6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e7be:	d867      	bhi.n	800e890 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e7c0:	e030      	b.n	800e824 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d117      	bne.n	800e800 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f103 020c 	add.w	r2, r3, #12
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7dc:	7812      	ldrb	r2, [r2, #0]
 800e7de:	b2d2      	uxtb	r2, r2
 800e7e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e7fe:	e011      	b.n	800e824 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e800:	f7f8 f910 	bl	8006a24 <HAL_GetTick>
 800e804:	4602      	mov	r2, r0
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	683a      	ldr	r2, [r7, #0]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d803      	bhi.n	800e818 <HAL_SPI_Receive+0x19c>
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e816:	d102      	bne.n	800e81e <HAL_SPI_Receive+0x1a2>
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d102      	bne.n	800e824 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800e81e:	2303      	movs	r3, #3
 800e820:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e822:	e04e      	b.n	800e8c2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1c8      	bne.n	800e7c2 <HAL_SPI_Receive+0x146>
 800e830:	e034      	b.n	800e89c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	f003 0301 	and.w	r3, r3, #1
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d115      	bne.n	800e86c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	68da      	ldr	r2, [r3, #12]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84a:	b292      	uxth	r2, r2
 800e84c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	1c9a      	adds	r2, r3, #2
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800e86a:	e011      	b.n	800e890 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e86c:	f7f8 f8da 	bl	8006a24 <HAL_GetTick>
 800e870:	4602      	mov	r2, r0
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	1ad3      	subs	r3, r2, r3
 800e876:	683a      	ldr	r2, [r7, #0]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d803      	bhi.n	800e884 <HAL_SPI_Receive+0x208>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e882:	d102      	bne.n	800e88a <HAL_SPI_Receive+0x20e>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d102      	bne.n	800e890 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800e88a:	2303      	movs	r3, #3
 800e88c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e88e:	e018      	b.n	800e8c2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800e896:	b29b      	uxth	r3, r3
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d1ca      	bne.n	800e832 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e89c:	693a      	ldr	r2, [r7, #16]
 800e89e:	6839      	ldr	r1, [r7, #0]
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 fce1 	bl	800f268 <SPI_EndRxTransaction>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d002      	beq.n	800e8b2 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2220      	movs	r2, #32
 800e8b0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	75fb      	strb	r3, [r7, #23]
 800e8be:	e000      	b.n	800e8c2 <HAL_SPI_Receive+0x246>
  }

error :
 800e8c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800e8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3718      	adds	r7, #24
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	; 0x28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	d101      	bne.n	800e902 <HAL_SPI_TransmitReceive+0x26>
 800e8fe:	2302      	movs	r3, #2
 800e900:	e1fb      	b.n	800ecfa <HAL_SPI_TransmitReceive+0x41e>
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	2201      	movs	r2, #1
 800e906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e90a:	f7f8 f88b 	bl	8006a24 <HAL_GetTick>
 800e90e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e916:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800e91e:	887b      	ldrh	r3, [r7, #2]
 800e920:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800e922:	887b      	ldrh	r3, [r7, #2]
 800e924:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e926:	7efb      	ldrb	r3, [r7, #27]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d00e      	beq.n	800e94a <HAL_SPI_TransmitReceive+0x6e>
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e932:	d106      	bne.n	800e942 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d102      	bne.n	800e942 <HAL_SPI_TransmitReceive+0x66>
 800e93c:	7efb      	ldrb	r3, [r7, #27]
 800e93e:	2b04      	cmp	r3, #4
 800e940:	d003      	beq.n	800e94a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800e942:	2302      	movs	r3, #2
 800e944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e948:	e1cd      	b.n	800ece6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d005      	beq.n	800e95c <HAL_SPI_TransmitReceive+0x80>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <HAL_SPI_TransmitReceive+0x80>
 800e956:	887b      	ldrh	r3, [r7, #2]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d103      	bne.n	800e964 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800e962:	e1c0      	b.n	800ece6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b04      	cmp	r3, #4
 800e96e:	d003      	beq.n	800e978 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2205      	movs	r2, #5
 800e974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2200      	movs	r2, #0
 800e97c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	887a      	ldrh	r2, [r7, #2]
 800e988:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	887a      	ldrh	r2, [r7, #2]
 800e990:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	887a      	ldrh	r2, [r7, #2]
 800e99e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	887a      	ldrh	r2, [r7, #2]
 800e9a4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e9ba:	d802      	bhi.n	800e9c2 <HAL_SPI_TransmitReceive+0xe6>
 800e9bc:	8a3b      	ldrh	r3, [r7, #16]
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d908      	bls.n	800e9d4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	685a      	ldr	r2, [r3, #4]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e9d0:	605a      	str	r2, [r3, #4]
 800e9d2:	e007      	b.n	800e9e4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	685a      	ldr	r2, [r3, #4]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ee:	2b40      	cmp	r3, #64	; 0x40
 800e9f0:	d007      	beq.n	800ea02 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ea0a:	d97c      	bls.n	800eb06 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	685b      	ldr	r3, [r3, #4]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <HAL_SPI_TransmitReceive+0x13e>
 800ea14:	8a7b      	ldrh	r3, [r7, #18]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d169      	bne.n	800eaee <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1e:	881a      	ldrh	r2, [r3, #0]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2a:	1c9a      	adds	r2, r3, #2
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea34:	b29b      	uxth	r3, r3
 800ea36:	3b01      	subs	r3, #1
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ea3e:	e056      	b.n	800eaee <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	f003 0302 	and.w	r3, r3, #2
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d11b      	bne.n	800ea86 <HAL_SPI_TransmitReceive+0x1aa>
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d016      	beq.n	800ea86 <HAL_SPI_TransmitReceive+0x1aa>
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d113      	bne.n	800ea86 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea62:	881a      	ldrh	r2, [r3, #0]
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6e:	1c9a      	adds	r2, r3, #2
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ea82:	2300      	movs	r3, #0
 800ea84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	f003 0301 	and.w	r3, r3, #1
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d11c      	bne.n	800eace <HAL_SPI_TransmitReceive+0x1f2>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d016      	beq.n	800eace <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	68da      	ldr	r2, [r3, #12]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaaa:	b292      	uxth	r2, r2
 800eaac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab2:	1c9a      	adds	r2, r3, #2
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	3b01      	subs	r3, #1
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eaca:	2301      	movs	r3, #1
 800eacc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800eace:	f7f7 ffa9 	bl	8006a24 <HAL_GetTick>
 800ead2:	4602      	mov	r2, r0
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eada:	429a      	cmp	r2, r3
 800eadc:	d807      	bhi.n	800eaee <HAL_SPI_TransmitReceive+0x212>
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eae4:	d003      	beq.n	800eaee <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800eaec:	e0fb      	b.n	800ece6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1a3      	bne.n	800ea40 <HAL_SPI_TransmitReceive+0x164>
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d19d      	bne.n	800ea40 <HAL_SPI_TransmitReceive+0x164>
 800eb04:	e0df      	b.n	800ecc6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <HAL_SPI_TransmitReceive+0x23a>
 800eb0e:	8a7b      	ldrh	r3, [r7, #18]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	f040 80cb 	bne.w	800ecac <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d912      	bls.n	800eb46 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	881a      	ldrh	r2, [r3, #0]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb30:	1c9a      	adds	r2, r3, #2
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	3b02      	subs	r3, #2
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb44:	e0b2      	b.n	800ecac <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	330c      	adds	r3, #12
 800eb50:	7812      	ldrb	r2, [r2, #0]
 800eb52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3b01      	subs	r3, #1
 800eb66:	b29a      	uxth	r2, r3
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb6c:	e09e      	b.n	800ecac <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	f003 0302 	and.w	r3, r3, #2
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d134      	bne.n	800ebe6 <HAL_SPI_TransmitReceive+0x30a>
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb80:	b29b      	uxth	r3, r3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d02f      	beq.n	800ebe6 <HAL_SPI_TransmitReceive+0x30a>
 800eb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d12c      	bne.n	800ebe6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	2b01      	cmp	r3, #1
 800eb94:	d912      	bls.n	800ebbc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb9a:	881a      	ldrh	r2, [r3, #0]
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	1c9a      	adds	r2, r3, #2
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	3b02      	subs	r3, #2
 800ebb4:	b29a      	uxth	r2, r3
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebba:	e012      	b.n	800ebe2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	330c      	adds	r3, #12
 800ebc6:	7812      	ldrb	r2, [r2, #0]
 800ebc8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebce:	1c5a      	adds	r2, r3, #1
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f003 0301 	and.w	r3, r3, #1
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d148      	bne.n	800ec86 <HAL_SPI_TransmitReceive+0x3aa>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d042      	beq.n	800ec86 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d923      	bls.n	800ec54 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68da      	ldr	r2, [r3, #12]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec16:	b292      	uxth	r2, r2
 800ec18:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec1e:	1c9a      	adds	r2, r3, #2
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	3b02      	subs	r3, #2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	2b01      	cmp	r3, #1
 800ec40:	d81f      	bhi.n	800ec82 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685a      	ldr	r2, [r3, #4]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ec50:	605a      	str	r2, [r3, #4]
 800ec52:	e016      	b.n	800ec82 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	f103 020c 	add.w	r2, r3, #12
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec60:	7812      	ldrb	r2, [r2, #0]
 800ec62:	b2d2      	uxtb	r2, r2
 800ec64:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec6a:	1c5a      	adds	r2, r3, #1
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	3b01      	subs	r3, #1
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec82:	2301      	movs	r3, #1
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ec86:	f7f7 fecd 	bl	8006a24 <HAL_GetTick>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d803      	bhi.n	800ec9e <HAL_SPI_TransmitReceive+0x3c2>
 800ec96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec9c:	d102      	bne.n	800eca4 <HAL_SPI_TransmitReceive+0x3c8>
 800ec9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d103      	bne.n	800ecac <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800eca4:	2303      	movs	r3, #3
 800eca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ecaa:	e01c      	b.n	800ece6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f47f af5b 	bne.w	800eb6e <HAL_SPI_TransmitReceive+0x292>
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f47f af54 	bne.w	800eb6e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ecc6:	69fa      	ldr	r2, [r7, #28]
 800ecc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f000 fb24 	bl	800f318 <SPI_EndRxTxTransaction>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d006      	beq.n	800ece4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2220      	movs	r2, #32
 800ece0:	661a      	str	r2, [r3, #96]	; 0x60
 800ece2:	e000      	b.n	800ece6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ece4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ecf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3728      	adds	r7, #40	; 0x28
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
	...

0800ed04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b086      	sub	sp, #24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d101      	bne.n	800ed24 <HAL_SPI_Transmit_DMA+0x20>
 800ed20:	2302      	movs	r3, #2
 800ed22:	e0d8      	b.n	800eed6 <HAL_SPI_Transmit_DMA+0x1d2>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d002      	beq.n	800ed3e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800ed38:	2302      	movs	r3, #2
 800ed3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ed3c:	e0c6      	b.n	800eecc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <HAL_SPI_Transmit_DMA+0x46>
 800ed44:	88fb      	ldrh	r3, [r7, #6]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ed4e:	e0bd      	b.n	800eecc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2203      	movs	r2, #3
 800ed54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	68ba      	ldr	r2, [r7, #8]
 800ed62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	88fa      	ldrh	r2, [r7, #6]
 800ed68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	88fa      	ldrh	r2, [r7, #6]
 800ed6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2200      	movs	r2, #0
 800ed74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed9a:	d10f      	bne.n	800edbc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681a      	ldr	r2, [r3, #0]
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc0:	4a47      	ldr	r2, [pc, #284]	; (800eee0 <HAL_SPI_Transmit_DMA+0x1dc>)
 800edc2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc8:	4a46      	ldr	r2, [pc, #280]	; (800eee4 <HAL_SPI_Transmit_DMA+0x1e0>)
 800edca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd0:	4a45      	ldr	r2, [pc, #276]	; (800eee8 <HAL_SPI_Transmit_DMA+0x1e4>)
 800edd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edd8:	2200      	movs	r2, #0
 800edda:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	685a      	ldr	r2, [r3, #4]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800edea:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800edf4:	d82d      	bhi.n	800ee52 <HAL_SPI_Transmit_DMA+0x14e>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee00:	d127      	bne.n	800ee52 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	f003 0301 	and.w	r3, r3, #1
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d10f      	bne.n	800ee30 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ee1e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	085b      	lsrs	r3, r3, #1
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee2e:	e010      	b.n	800ee52 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	685a      	ldr	r2, [r3, #4]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee3e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	085b      	lsrs	r3, r3, #1
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	b29a      	uxth	r2, r3
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	330c      	adds	r3, #12
 800ee62:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ee6a:	f7f7 ffc5 	bl	8006df8 <HAL_DMA_Start_IT>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00c      	beq.n	800ee8e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ee78:	f043 0210 	orr.w	r2, r3, #16
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ee80:	2301      	movs	r3, #1
 800ee82:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ee8c:	e01e      	b.n	800eecc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee98:	2b40      	cmp	r3, #64	; 0x40
 800ee9a:	d007      	beq.n	800eeac <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eeaa:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685a      	ldr	r2, [r3, #4]
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f042 0220 	orr.w	r2, r2, #32
 800eeba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	685a      	ldr	r2, [r3, #4]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f042 0202 	orr.w	r2, r2, #2
 800eeca:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800eed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3718      	adds	r7, #24
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	0800efcf 	.word	0x0800efcf
 800eee4:	0800ef29 	.word	0x0800ef29
 800eee8:	0800efeb 	.word	0x0800efeb

0800eeec <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800eef4:	bf00      	nop
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ef1c:	bf00      	nop
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr

0800ef28 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef34:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef36:	f7f7 fd75 	bl	8006a24 <HAL_GetTick>
 800ef3a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0320 	and.w	r3, r3, #32
 800ef46:	2b20      	cmp	r3, #32
 800ef48:	d03b      	beq.n	800efc2 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	685a      	ldr	r2, [r3, #4]
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f022 0220 	bic.w	r2, r2, #32
 800ef58:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ef5a:	697b      	ldr	r3, [r7, #20]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f022 0202 	bic.w	r2, r2, #2
 800ef68:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ef6a:	693a      	ldr	r2, [r7, #16]
 800ef6c:	2164      	movs	r1, #100	; 0x64
 800ef6e:	6978      	ldr	r0, [r7, #20]
 800ef70:	f000 f9d2 	bl	800f318 <SPI_EndRxTxTransaction>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef7e:	f043 0220 	orr.w	r2, r3, #32
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d10a      	bne.n	800efa4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	60fb      	str	r3, [r7, #12]
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	60fb      	str	r3, [r7, #12]
 800efa2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	2200      	movs	r2, #0
 800efa8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	2201      	movs	r2, #1
 800efae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d003      	beq.n	800efc2 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800efba:	6978      	ldr	r0, [r7, #20]
 800efbc:	f7ff ffaa 	bl	800ef14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800efc0:	e002      	b.n	800efc8 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800efc2:	6978      	ldr	r0, [r7, #20]
 800efc4:	f7ff ff92 	bl	800eeec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efc8:	3718      	adds	r7, #24
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b084      	sub	sp, #16
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efda:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f7ff ff8f 	bl	800ef00 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800efe2:	bf00      	nop
 800efe4:	3710      	adds	r7, #16
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b084      	sub	sp, #16
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	685a      	ldr	r2, [r3, #4]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f022 0203 	bic.w	r2, r2, #3
 800f006:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f00c:	f043 0210 	orr.w	r2, r3, #16
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	f7ff ff79 	bl	800ef14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f022:	bf00      	nop
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	603b      	str	r3, [r7, #0]
 800f038:	4613      	mov	r3, r2
 800f03a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f03c:	f7f7 fcf2 	bl	8006a24 <HAL_GetTick>
 800f040:	4602      	mov	r2, r0
 800f042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f044:	1a9b      	subs	r3, r3, r2
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	4413      	add	r3, r2
 800f04a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f04c:	f7f7 fcea 	bl	8006a24 <HAL_GetTick>
 800f050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f052:	4b39      	ldr	r3, [pc, #228]	; (800f138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	015b      	lsls	r3, r3, #5
 800f058:	0d1b      	lsrs	r3, r3, #20
 800f05a:	69fa      	ldr	r2, [r7, #28]
 800f05c:	fb02 f303 	mul.w	r3, r2, r3
 800f060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f062:	e054      	b.n	800f10e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f06a:	d050      	beq.n	800f10e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f06c:	f7f7 fcda 	bl	8006a24 <HAL_GetTick>
 800f070:	4602      	mov	r2, r0
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	1ad3      	subs	r3, r2, r3
 800f076:	69fa      	ldr	r2, [r7, #28]
 800f078:	429a      	cmp	r2, r3
 800f07a:	d902      	bls.n	800f082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d13d      	bne.n	800f0fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f09a:	d111      	bne.n	800f0c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0a4:	d004      	beq.n	800f0b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f0ae:	d107      	bne.n	800f0c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0c8:	d10f      	bne.n	800f0ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f0e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2201      	movs	r2, #1
 800f0ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f0fa:	2303      	movs	r3, #3
 800f0fc:	e017      	b.n	800f12e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f104:	2300      	movs	r3, #0
 800f106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	689a      	ldr	r2, [r3, #8]
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	4013      	ands	r3, r2
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	bf0c      	ite	eq
 800f11e:	2301      	moveq	r3, #1
 800f120:	2300      	movne	r3, #0
 800f122:	b2db      	uxtb	r3, r3
 800f124:	461a      	mov	r2, r3
 800f126:	79fb      	ldrb	r3, [r7, #7]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d19b      	bne.n	800f064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f12c:	2300      	movs	r3, #0
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
 800f136:	bf00      	nop
 800f138:	20000010 	.word	0x20000010

0800f13c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b08a      	sub	sp, #40	; 0x28
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]
 800f148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f14e:	f7f7 fc69 	bl	8006a24 <HAL_GetTick>
 800f152:	4602      	mov	r2, r0
 800f154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f156:	1a9b      	subs	r3, r3, r2
 800f158:	683a      	ldr	r2, [r7, #0]
 800f15a:	4413      	add	r3, r2
 800f15c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f15e:	f7f7 fc61 	bl	8006a24 <HAL_GetTick>
 800f162:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	330c      	adds	r3, #12
 800f16a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f16c:	4b3d      	ldr	r3, [pc, #244]	; (800f264 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	4613      	mov	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	4413      	add	r3, r2
 800f176:	00da      	lsls	r2, r3, #3
 800f178:	1ad3      	subs	r3, r2, r3
 800f17a:	0d1b      	lsrs	r3, r3, #20
 800f17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f17e:	fb02 f303 	mul.w	r3, r2, r3
 800f182:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f184:	e060      	b.n	800f248 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f18c:	d107      	bne.n	800f19e <SPI_WaitFifoStateUntilTimeout+0x62>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f19c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1a4:	d050      	beq.n	800f248 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f1a6:	f7f7 fc3d 	bl	8006a24 <HAL_GetTick>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	6a3b      	ldr	r3, [r7, #32]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d902      	bls.n	800f1bc <SPI_WaitFifoStateUntilTimeout+0x80>
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d13d      	bne.n	800f238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	685a      	ldr	r2, [r3, #4]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f1ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f1d4:	d111      	bne.n	800f1fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1de:	d004      	beq.n	800f1ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1e8:	d107      	bne.n	800f1fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f202:	d10f      	bne.n	800f224 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f212:	601a      	str	r2, [r3, #0]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2200      	movs	r2, #0
 800f230:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f234:	2303      	movs	r3, #3
 800f236:	e010      	b.n	800f25a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f23e:	2300      	movs	r3, #0
 800f240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	3b01      	subs	r3, #1
 800f246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	689a      	ldr	r2, [r3, #8]
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	4013      	ands	r3, r2
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	429a      	cmp	r2, r3
 800f256:	d196      	bne.n	800f186 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3728      	adds	r7, #40	; 0x28
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20000010 	.word	0x20000010

0800f268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af02      	add	r7, sp, #8
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f27c:	d111      	bne.n	800f2a2 <SPI_EndRxTransaction+0x3a>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f286:	d004      	beq.n	800f292 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	689b      	ldr	r3, [r3, #8]
 800f28c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f290:	d107      	bne.n	800f2a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f2a0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	9300      	str	r3, [sp, #0]
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	2180      	movs	r1, #128	; 0x80
 800f2ac:	68f8      	ldr	r0, [r7, #12]
 800f2ae:	f7ff febd 	bl	800f02c <SPI_WaitFlagStateUntilTimeout>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d007      	beq.n	800f2c8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2bc:	f043 0220 	orr.w	r2, r3, #32
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	e023      	b.n	800f310 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f2d0:	d11d      	bne.n	800f30e <SPI_EndRxTransaction+0xa6>
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f2da:	d004      	beq.n	800f2e6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2e4:	d113      	bne.n	800f30e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f7ff ff22 	bl	800f13c <SPI_WaitFifoStateUntilTimeout>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d007      	beq.n	800f30e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f302:	f043 0220 	orr.w	r2, r3, #32
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f30a:	2303      	movs	r3, #3
 800f30c:	e000      	b.n	800f310 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f30e:	2300      	movs	r3, #0
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b086      	sub	sp, #24
 800f31c:	af02      	add	r7, sp, #8
 800f31e:	60f8      	str	r0, [r7, #12]
 800f320:	60b9      	str	r1, [r7, #8]
 800f322:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	9300      	str	r3, [sp, #0]
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7ff ff03 	bl	800f13c <SPI_WaitFifoStateUntilTimeout>
 800f336:	4603      	mov	r3, r0
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d007      	beq.n	800f34c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f340:	f043 0220 	orr.w	r2, r3, #32
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f348:	2303      	movs	r3, #3
 800f34a:	e027      	b.n	800f39c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	9300      	str	r3, [sp, #0]
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2200      	movs	r2, #0
 800f354:	2180      	movs	r1, #128	; 0x80
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	f7ff fe68 	bl	800f02c <SPI_WaitFlagStateUntilTimeout>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d007      	beq.n	800f372 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f366:	f043 0220 	orr.w	r2, r3, #32
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f36e:	2303      	movs	r3, #3
 800f370:	e014      	b.n	800f39c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	9300      	str	r3, [sp, #0]
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	2200      	movs	r2, #0
 800f37a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f37e:	68f8      	ldr	r0, [r7, #12]
 800f380:	f7ff fedc 	bl	800f13c <SPI_WaitFifoStateUntilTimeout>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d007      	beq.n	800f39a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f38e:	f043 0220 	orr.w	r2, r3, #32
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f396:	2303      	movs	r3, #3
 800f398:	e000      	b.n	800f39c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f39a:	2300      	movs	r3, #0
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	3710      	adds	r7, #16
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e049      	b.n	800f44a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7f5 fbf2 	bl	8004bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2202      	movs	r2, #2
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	3304      	adds	r3, #4
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	f000 fad2 	bl	800f98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2201      	movs	r2, #1
 800f404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2201      	movs	r2, #1
 800f414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2201      	movs	r2, #1
 800f41c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2201      	movs	r2, #1
 800f424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2201      	movs	r2, #1
 800f434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f448:	2300      	movs	r3, #0
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
	...

0800f454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b01      	cmp	r3, #1
 800f466:	d001      	beq.n	800f46c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f468:	2301      	movs	r3, #1
 800f46a:	e04f      	b.n	800f50c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2202      	movs	r2, #2
 800f470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	68da      	ldr	r2, [r3, #12]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f042 0201 	orr.w	r2, r2, #1
 800f482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a23      	ldr	r2, [pc, #140]	; (800f518 <HAL_TIM_Base_Start_IT+0xc4>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d01d      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f496:	d018      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a1f      	ldr	r2, [pc, #124]	; (800f51c <HAL_TIM_Base_Start_IT+0xc8>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d013      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a1e      	ldr	r2, [pc, #120]	; (800f520 <HAL_TIM_Base_Start_IT+0xcc>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d00e      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	4a1c      	ldr	r2, [pc, #112]	; (800f524 <HAL_TIM_Base_Start_IT+0xd0>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d009      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4a1b      	ldr	r2, [pc, #108]	; (800f528 <HAL_TIM_Base_Start_IT+0xd4>)
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d004      	beq.n	800f4ca <HAL_TIM_Base_Start_IT+0x76>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	4a19      	ldr	r2, [pc, #100]	; (800f52c <HAL_TIM_Base_Start_IT+0xd8>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d115      	bne.n	800f4f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	689a      	ldr	r2, [r3, #8]
 800f4d0:	4b17      	ldr	r3, [pc, #92]	; (800f530 <HAL_TIM_Base_Start_IT+0xdc>)
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2b06      	cmp	r3, #6
 800f4da:	d015      	beq.n	800f508 <HAL_TIM_Base_Start_IT+0xb4>
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4e2:	d011      	beq.n	800f508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f042 0201 	orr.w	r2, r2, #1
 800f4f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f4f4:	e008      	b.n	800f508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f042 0201 	orr.w	r2, r2, #1
 800f504:	601a      	str	r2, [r3, #0]
 800f506:	e000      	b.n	800f50a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f508:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f50a:	2300      	movs	r3, #0
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr
 800f518:	40012c00 	.word	0x40012c00
 800f51c:	40000400 	.word	0x40000400
 800f520:	40000800 	.word	0x40000800
 800f524:	40000c00 	.word	0x40000c00
 800f528:	40013400 	.word	0x40013400
 800f52c:	40014000 	.word	0x40014000
 800f530:	00010007 	.word	0x00010007

0800f534 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d101      	bne.n	800f546 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	e049      	b.n	800f5da <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f841 	bl	800f5e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3304      	adds	r3, #4
 800f570:	4619      	mov	r1, r3
 800f572:	4610      	mov	r0, r2
 800f574:	f000 fa0a 	bl	800f98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2201      	movs	r2, #1
 800f584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2201      	movs	r2, #1
 800f58c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2201      	movs	r2, #1
 800f594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2201      	movs	r2, #1
 800f59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f5d8:	2300      	movs	r3, #0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3708      	adds	r7, #8
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f5e2:	b480      	push	{r7}
 800f5e4:	b083      	sub	sp, #12
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f5ea:	bf00      	nop
 800f5ec:	370c      	adds	r7, #12
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	f003 0302 	and.w	r3, r3, #2
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d122      	bne.n	800f652 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	f003 0302 	and.w	r3, r3, #2
 800f616:	2b02      	cmp	r3, #2
 800f618:	d11b      	bne.n	800f652 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f06f 0202 	mvn.w	r2, #2
 800f622:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	699b      	ldr	r3, [r3, #24]
 800f630:	f003 0303 	and.w	r3, r3, #3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d003      	beq.n	800f640 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 f989 	bl	800f950 <HAL_TIM_IC_CaptureCallback>
 800f63e:	e005      	b.n	800f64c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f97b 	bl	800f93c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 f98c 	bl	800f964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	f003 0304 	and.w	r3, r3, #4
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	d122      	bne.n	800f6a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	f003 0304 	and.w	r3, r3, #4
 800f66a:	2b04      	cmp	r3, #4
 800f66c:	d11b      	bne.n	800f6a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f06f 0204 	mvn.w	r2, #4
 800f676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2202      	movs	r2, #2
 800f67c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	699b      	ldr	r3, [r3, #24]
 800f684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d003      	beq.n	800f694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 f95f 	bl	800f950 <HAL_TIM_IC_CaptureCallback>
 800f692:	e005      	b.n	800f6a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 f951 	bl	800f93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f962 	bl	800f964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	691b      	ldr	r3, [r3, #16]
 800f6ac:	f003 0308 	and.w	r3, r3, #8
 800f6b0:	2b08      	cmp	r3, #8
 800f6b2:	d122      	bne.n	800f6fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	f003 0308 	and.w	r3, r3, #8
 800f6be:	2b08      	cmp	r3, #8
 800f6c0:	d11b      	bne.n	800f6fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f06f 0208 	mvn.w	r2, #8
 800f6ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2204      	movs	r2, #4
 800f6d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69db      	ldr	r3, [r3, #28]
 800f6d8:	f003 0303 	and.w	r3, r3, #3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d003      	beq.n	800f6e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 f935 	bl	800f950 <HAL_TIM_IC_CaptureCallback>
 800f6e6:	e005      	b.n	800f6f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 f927 	bl	800f93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f938 	bl	800f964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	f003 0310 	and.w	r3, r3, #16
 800f704:	2b10      	cmp	r3, #16
 800f706:	d122      	bne.n	800f74e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	f003 0310 	and.w	r3, r3, #16
 800f712:	2b10      	cmp	r3, #16
 800f714:	d11b      	bne.n	800f74e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f06f 0210 	mvn.w	r2, #16
 800f71e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2208      	movs	r2, #8
 800f724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	69db      	ldr	r3, [r3, #28]
 800f72c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f730:	2b00      	cmp	r3, #0
 800f732:	d003      	beq.n	800f73c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 f90b 	bl	800f950 <HAL_TIM_IC_CaptureCallback>
 800f73a:	e005      	b.n	800f748 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 f8fd 	bl	800f93c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f90e 	bl	800f964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	691b      	ldr	r3, [r3, #16]
 800f754:	f003 0301 	and.w	r3, r3, #1
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d10e      	bne.n	800f77a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	f003 0301 	and.w	r3, r3, #1
 800f766:	2b01      	cmp	r3, #1
 800f768:	d107      	bne.n	800f77a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f06f 0201 	mvn.w	r2, #1
 800f772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f8d7 	bl	800f928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f784:	2b80      	cmp	r3, #128	; 0x80
 800f786:	d10e      	bne.n	800f7a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68db      	ldr	r3, [r3, #12]
 800f78e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f792:	2b80      	cmp	r3, #128	; 0x80
 800f794:	d107      	bne.n	800f7a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f79e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f000 fceb 	bl	801017c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	691b      	ldr	r3, [r3, #16]
 800f7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7b4:	d10e      	bne.n	800f7d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7c0:	2b80      	cmp	r3, #128	; 0x80
 800f7c2:	d107      	bne.n	800f7d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 fcde 	bl	8010190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7de:	2b40      	cmp	r3, #64	; 0x40
 800f7e0:	d10e      	bne.n	800f800 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7ec:	2b40      	cmp	r3, #64	; 0x40
 800f7ee:	d107      	bne.n	800f800 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 f8bc 	bl	800f978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	691b      	ldr	r3, [r3, #16]
 800f806:	f003 0320 	and.w	r3, r3, #32
 800f80a:	2b20      	cmp	r3, #32
 800f80c:	d10e      	bne.n	800f82c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	f003 0320 	and.w	r3, r3, #32
 800f818:	2b20      	cmp	r3, #32
 800f81a:	d107      	bne.n	800f82c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f06f 0220 	mvn.w	r2, #32
 800f824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f000 fc9e 	bl	8010168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b086      	sub	sp, #24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d101      	bne.n	800f852 <HAL_TIM_OC_ConfigChannel+0x1e>
 800f84e:	2302      	movs	r3, #2
 800f850:	e066      	b.n	800f920 <HAL_TIM_OC_ConfigChannel+0xec>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2201      	movs	r2, #1
 800f856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b14      	cmp	r3, #20
 800f85e:	d857      	bhi.n	800f910 <HAL_TIM_OC_ConfigChannel+0xdc>
 800f860:	a201      	add	r2, pc, #4	; (adr r2, 800f868 <HAL_TIM_OC_ConfigChannel+0x34>)
 800f862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f866:	bf00      	nop
 800f868:	0800f8bd 	.word	0x0800f8bd
 800f86c:	0800f911 	.word	0x0800f911
 800f870:	0800f911 	.word	0x0800f911
 800f874:	0800f911 	.word	0x0800f911
 800f878:	0800f8cb 	.word	0x0800f8cb
 800f87c:	0800f911 	.word	0x0800f911
 800f880:	0800f911 	.word	0x0800f911
 800f884:	0800f911 	.word	0x0800f911
 800f888:	0800f8d9 	.word	0x0800f8d9
 800f88c:	0800f911 	.word	0x0800f911
 800f890:	0800f911 	.word	0x0800f911
 800f894:	0800f911 	.word	0x0800f911
 800f898:	0800f8e7 	.word	0x0800f8e7
 800f89c:	0800f911 	.word	0x0800f911
 800f8a0:	0800f911 	.word	0x0800f911
 800f8a4:	0800f911 	.word	0x0800f911
 800f8a8:	0800f8f5 	.word	0x0800f8f5
 800f8ac:	0800f911 	.word	0x0800f911
 800f8b0:	0800f911 	.word	0x0800f911
 800f8b4:	0800f911 	.word	0x0800f911
 800f8b8:	0800f903 	.word	0x0800f903
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	68b9      	ldr	r1, [r7, #8]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f000 f8fc 	bl	800fac0 <TIM_OC1_SetConfig>
      break;
 800f8c8:	e025      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 f985 	bl	800fbe0 <TIM_OC2_SetConfig>
      break;
 800f8d6:	e01e      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68b9      	ldr	r1, [r7, #8]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f000 fa08 	bl	800fcf4 <TIM_OC3_SetConfig>
      break;
 800f8e4:	e017      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68b9      	ldr	r1, [r7, #8]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f000 fa89 	bl	800fe04 <TIM_OC4_SetConfig>
      break;
 800f8f2:	e010      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 faec 	bl	800fed8 <TIM_OC5_SetConfig>
      break;
 800f900:	e009      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68b9      	ldr	r1, [r7, #8]
 800f908:	4618      	mov	r0, r3
 800f90a:	f000 fb49 	bl	800ffa0 <TIM_OC6_SetConfig>
      break;
 800f90e:	e002      	b.n	800f916 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	75fb      	strb	r3, [r7, #23]
      break;
 800f914:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f920:	4618      	mov	r0, r3
 800f922:	3718      	adds	r7, #24
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f96c:	bf00      	nop
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	4a40      	ldr	r2, [pc, #256]	; (800faa0 <TIM_Base_SetConfig+0x114>)
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d013      	beq.n	800f9cc <TIM_Base_SetConfig+0x40>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9aa:	d00f      	beq.n	800f9cc <TIM_Base_SetConfig+0x40>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	4a3d      	ldr	r2, [pc, #244]	; (800faa4 <TIM_Base_SetConfig+0x118>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d00b      	beq.n	800f9cc <TIM_Base_SetConfig+0x40>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	4a3c      	ldr	r2, [pc, #240]	; (800faa8 <TIM_Base_SetConfig+0x11c>)
 800f9b8:	4293      	cmp	r3, r2
 800f9ba:	d007      	beq.n	800f9cc <TIM_Base_SetConfig+0x40>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	4a3b      	ldr	r2, [pc, #236]	; (800faac <TIM_Base_SetConfig+0x120>)
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	d003      	beq.n	800f9cc <TIM_Base_SetConfig+0x40>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a3a      	ldr	r2, [pc, #232]	; (800fab0 <TIM_Base_SetConfig+0x124>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d108      	bne.n	800f9de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4a2f      	ldr	r2, [pc, #188]	; (800faa0 <TIM_Base_SetConfig+0x114>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d01f      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9ec:	d01b      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a2c      	ldr	r2, [pc, #176]	; (800faa4 <TIM_Base_SetConfig+0x118>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d017      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4a2b      	ldr	r2, [pc, #172]	; (800faa8 <TIM_Base_SetConfig+0x11c>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d013      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	4a2a      	ldr	r2, [pc, #168]	; (800faac <TIM_Base_SetConfig+0x120>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	d00f      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a29      	ldr	r2, [pc, #164]	; (800fab0 <TIM_Base_SetConfig+0x124>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d00b      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a28      	ldr	r2, [pc, #160]	; (800fab4 <TIM_Base_SetConfig+0x128>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d007      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a27      	ldr	r2, [pc, #156]	; (800fab8 <TIM_Base_SetConfig+0x12c>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d003      	beq.n	800fa26 <TIM_Base_SetConfig+0x9a>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a26      	ldr	r2, [pc, #152]	; (800fabc <TIM_Base_SetConfig+0x130>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d108      	bne.n	800fa38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	695b      	ldr	r3, [r3, #20]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	689a      	ldr	r2, [r3, #8]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	4a10      	ldr	r2, [pc, #64]	; (800faa0 <TIM_Base_SetConfig+0x114>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d00f      	beq.n	800fa84 <TIM_Base_SetConfig+0xf8>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4a12      	ldr	r2, [pc, #72]	; (800fab0 <TIM_Base_SetConfig+0x124>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d00b      	beq.n	800fa84 <TIM_Base_SetConfig+0xf8>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4a11      	ldr	r2, [pc, #68]	; (800fab4 <TIM_Base_SetConfig+0x128>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d007      	beq.n	800fa84 <TIM_Base_SetConfig+0xf8>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a10      	ldr	r2, [pc, #64]	; (800fab8 <TIM_Base_SetConfig+0x12c>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d003      	beq.n	800fa84 <TIM_Base_SetConfig+0xf8>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a0f      	ldr	r2, [pc, #60]	; (800fabc <TIM_Base_SetConfig+0x130>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d103      	bne.n	800fa8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	691a      	ldr	r2, [r3, #16]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	615a      	str	r2, [r3, #20]
}
 800fa92:	bf00      	nop
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	40012c00 	.word	0x40012c00
 800faa4:	40000400 	.word	0x40000400
 800faa8:	40000800 	.word	0x40000800
 800faac:	40000c00 	.word	0x40000c00
 800fab0:	40013400 	.word	0x40013400
 800fab4:	40014000 	.word	0x40014000
 800fab8:	40014400 	.word	0x40014400
 800fabc:	40014800 	.word	0x40014800

0800fac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b087      	sub	sp, #28
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	f023 0201 	bic.w	r2, r3, #1
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	699b      	ldr	r3, [r3, #24]
 800fae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800faee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f023 0303 	bic.w	r3, r3, #3
 800fafa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	f023 0302 	bic.w	r3, r3, #2
 800fb0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a2c      	ldr	r2, [pc, #176]	; (800fbcc <TIM_OC1_SetConfig+0x10c>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d00f      	beq.n	800fb40 <TIM_OC1_SetConfig+0x80>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a2b      	ldr	r2, [pc, #172]	; (800fbd0 <TIM_OC1_SetConfig+0x110>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d00b      	beq.n	800fb40 <TIM_OC1_SetConfig+0x80>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a2a      	ldr	r2, [pc, #168]	; (800fbd4 <TIM_OC1_SetConfig+0x114>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d007      	beq.n	800fb40 <TIM_OC1_SetConfig+0x80>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a29      	ldr	r2, [pc, #164]	; (800fbd8 <TIM_OC1_SetConfig+0x118>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d003      	beq.n	800fb40 <TIM_OC1_SetConfig+0x80>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a28      	ldr	r2, [pc, #160]	; (800fbdc <TIM_OC1_SetConfig+0x11c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d10c      	bne.n	800fb5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f023 0308 	bic.w	r3, r3, #8
 800fb46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f023 0304 	bic.w	r3, r3, #4
 800fb58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a1b      	ldr	r2, [pc, #108]	; (800fbcc <TIM_OC1_SetConfig+0x10c>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d00f      	beq.n	800fb82 <TIM_OC1_SetConfig+0xc2>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a1a      	ldr	r2, [pc, #104]	; (800fbd0 <TIM_OC1_SetConfig+0x110>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d00b      	beq.n	800fb82 <TIM_OC1_SetConfig+0xc2>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a19      	ldr	r2, [pc, #100]	; (800fbd4 <TIM_OC1_SetConfig+0x114>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d007      	beq.n	800fb82 <TIM_OC1_SetConfig+0xc2>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a18      	ldr	r2, [pc, #96]	; (800fbd8 <TIM_OC1_SetConfig+0x118>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d003      	beq.n	800fb82 <TIM_OC1_SetConfig+0xc2>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4a17      	ldr	r2, [pc, #92]	; (800fbdc <TIM_OC1_SetConfig+0x11c>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d111      	bne.n	800fba6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	693a      	ldr	r2, [r7, #16]
 800fb98:	4313      	orrs	r3, r2
 800fb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	693a      	ldr	r2, [r7, #16]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	685a      	ldr	r2, [r3, #4]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	697a      	ldr	r2, [r7, #20]
 800fbbe:	621a      	str	r2, [r3, #32]
}
 800fbc0:	bf00      	nop
 800fbc2:	371c      	adds	r7, #28
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr
 800fbcc:	40012c00 	.word	0x40012c00
 800fbd0:	40013400 	.word	0x40013400
 800fbd4:	40014000 	.word	0x40014000
 800fbd8:	40014400 	.word	0x40014400
 800fbdc:	40014800 	.word	0x40014800

0800fbe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b087      	sub	sp, #28
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
 800fbe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6a1b      	ldr	r3, [r3, #32]
 800fbee:	f023 0210 	bic.w	r2, r3, #16
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	685b      	ldr	r3, [r3, #4]
 800fc00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	699b      	ldr	r3, [r3, #24]
 800fc06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	021b      	lsls	r3, r3, #8
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	f023 0320 	bic.w	r3, r3, #32
 800fc2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	689b      	ldr	r3, [r3, #8]
 800fc34:	011b      	lsls	r3, r3, #4
 800fc36:	697a      	ldr	r2, [r7, #20]
 800fc38:	4313      	orrs	r3, r2
 800fc3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a28      	ldr	r2, [pc, #160]	; (800fce0 <TIM_OC2_SetConfig+0x100>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d003      	beq.n	800fc4c <TIM_OC2_SetConfig+0x6c>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4a27      	ldr	r2, [pc, #156]	; (800fce4 <TIM_OC2_SetConfig+0x104>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d10d      	bne.n	800fc68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	011b      	lsls	r3, r3, #4
 800fc5a:	697a      	ldr	r2, [r7, #20]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a1d      	ldr	r2, [pc, #116]	; (800fce0 <TIM_OC2_SetConfig+0x100>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d00f      	beq.n	800fc90 <TIM_OC2_SetConfig+0xb0>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a1c      	ldr	r2, [pc, #112]	; (800fce4 <TIM_OC2_SetConfig+0x104>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d00b      	beq.n	800fc90 <TIM_OC2_SetConfig+0xb0>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4a1b      	ldr	r2, [pc, #108]	; (800fce8 <TIM_OC2_SetConfig+0x108>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d007      	beq.n	800fc90 <TIM_OC2_SetConfig+0xb0>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a1a      	ldr	r2, [pc, #104]	; (800fcec <TIM_OC2_SetConfig+0x10c>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d003      	beq.n	800fc90 <TIM_OC2_SetConfig+0xb0>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a19      	ldr	r2, [pc, #100]	; (800fcf0 <TIM_OC2_SetConfig+0x110>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d113      	bne.n	800fcb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	695b      	ldr	r3, [r3, #20]
 800fca4:	009b      	lsls	r3, r3, #2
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	4313      	orrs	r3, r2
 800fcb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	693a      	ldr	r2, [r7, #16]
 800fcbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	68fa      	ldr	r2, [r7, #12]
 800fcc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	697a      	ldr	r2, [r7, #20]
 800fcd0:	621a      	str	r2, [r3, #32]
}
 800fcd2:	bf00      	nop
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	40012c00 	.word	0x40012c00
 800fce4:	40013400 	.word	0x40013400
 800fce8:	40014000 	.word	0x40014000
 800fcec:	40014400 	.word	0x40014400
 800fcf0:	40014800 	.word	0x40014800

0800fcf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b087      	sub	sp, #28
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6a1b      	ldr	r3, [r3, #32]
 800fd0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	69db      	ldr	r3, [r3, #28]
 800fd1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	f023 0303 	bic.w	r3, r3, #3
 800fd2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	4313      	orrs	r3, r2
 800fd38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fd40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd42:	683b      	ldr	r3, [r7, #0]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	021b      	lsls	r3, r3, #8
 800fd48:	697a      	ldr	r2, [r7, #20]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	4a27      	ldr	r2, [pc, #156]	; (800fdf0 <TIM_OC3_SetConfig+0xfc>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d003      	beq.n	800fd5e <TIM_OC3_SetConfig+0x6a>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	4a26      	ldr	r2, [pc, #152]	; (800fdf4 <TIM_OC3_SetConfig+0x100>)
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d10d      	bne.n	800fd7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	021b      	lsls	r3, r3, #8
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a1c      	ldr	r2, [pc, #112]	; (800fdf0 <TIM_OC3_SetConfig+0xfc>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00f      	beq.n	800fda2 <TIM_OC3_SetConfig+0xae>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a1b      	ldr	r2, [pc, #108]	; (800fdf4 <TIM_OC3_SetConfig+0x100>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d00b      	beq.n	800fda2 <TIM_OC3_SetConfig+0xae>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a1a      	ldr	r2, [pc, #104]	; (800fdf8 <TIM_OC3_SetConfig+0x104>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d007      	beq.n	800fda2 <TIM_OC3_SetConfig+0xae>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a19      	ldr	r2, [pc, #100]	; (800fdfc <TIM_OC3_SetConfig+0x108>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d003      	beq.n	800fda2 <TIM_OC3_SetConfig+0xae>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	4a18      	ldr	r2, [pc, #96]	; (800fe00 <TIM_OC3_SetConfig+0x10c>)
 800fd9e:	4293      	cmp	r3, r2
 800fda0:	d113      	bne.n	800fdca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fda8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fdb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	011b      	lsls	r3, r3, #4
 800fdb8:	693a      	ldr	r2, [r7, #16]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	699b      	ldr	r3, [r3, #24]
 800fdc2:	011b      	lsls	r3, r3, #4
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	685a      	ldr	r2, [r3, #4]
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	697a      	ldr	r2, [r7, #20]
 800fde2:	621a      	str	r2, [r3, #32]
}
 800fde4:	bf00      	nop
 800fde6:	371c      	adds	r7, #28
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	40012c00 	.word	0x40012c00
 800fdf4:	40013400 	.word	0x40013400
 800fdf8:	40014000 	.word	0x40014000
 800fdfc:	40014400 	.word	0x40014400
 800fe00:	40014800 	.word	0x40014800

0800fe04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b087      	sub	sp, #28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6a1b      	ldr	r3, [r3, #32]
 800fe12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6a1b      	ldr	r3, [r3, #32]
 800fe1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	685b      	ldr	r3, [r3, #4]
 800fe24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	69db      	ldr	r3, [r3, #28]
 800fe2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fe3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	021b      	lsls	r3, r3, #8
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	031b      	lsls	r3, r3, #12
 800fe5a:	693a      	ldr	r2, [r7, #16]
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	4a18      	ldr	r2, [pc, #96]	; (800fec4 <TIM_OC4_SetConfig+0xc0>)
 800fe64:	4293      	cmp	r3, r2
 800fe66:	d00f      	beq.n	800fe88 <TIM_OC4_SetConfig+0x84>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4a17      	ldr	r2, [pc, #92]	; (800fec8 <TIM_OC4_SetConfig+0xc4>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d00b      	beq.n	800fe88 <TIM_OC4_SetConfig+0x84>
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	4a16      	ldr	r2, [pc, #88]	; (800fecc <TIM_OC4_SetConfig+0xc8>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d007      	beq.n	800fe88 <TIM_OC4_SetConfig+0x84>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	4a15      	ldr	r2, [pc, #84]	; (800fed0 <TIM_OC4_SetConfig+0xcc>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d003      	beq.n	800fe88 <TIM_OC4_SetConfig+0x84>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a14      	ldr	r2, [pc, #80]	; (800fed4 <TIM_OC4_SetConfig+0xd0>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d109      	bne.n	800fe9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fe8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	695b      	ldr	r3, [r3, #20]
 800fe94:	019b      	lsls	r3, r3, #6
 800fe96:	697a      	ldr	r2, [r7, #20]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	697a      	ldr	r2, [r7, #20]
 800fea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	621a      	str	r2, [r3, #32]
}
 800feb6:	bf00      	nop
 800feb8:	371c      	adds	r7, #28
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	40012c00 	.word	0x40012c00
 800fec8:	40013400 	.word	0x40013400
 800fecc:	40014000 	.word	0x40014000
 800fed0:	40014400 	.word	0x40014400
 800fed4:	40014800 	.word	0x40014800

0800fed8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ff1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	041b      	lsls	r3, r3, #16
 800ff24:	693a      	ldr	r2, [r7, #16]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4a17      	ldr	r2, [pc, #92]	; (800ff8c <TIM_OC5_SetConfig+0xb4>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d00f      	beq.n	800ff52 <TIM_OC5_SetConfig+0x7a>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a16      	ldr	r2, [pc, #88]	; (800ff90 <TIM_OC5_SetConfig+0xb8>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d00b      	beq.n	800ff52 <TIM_OC5_SetConfig+0x7a>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4a15      	ldr	r2, [pc, #84]	; (800ff94 <TIM_OC5_SetConfig+0xbc>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d007      	beq.n	800ff52 <TIM_OC5_SetConfig+0x7a>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4a14      	ldr	r2, [pc, #80]	; (800ff98 <TIM_OC5_SetConfig+0xc0>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d003      	beq.n	800ff52 <TIM_OC5_SetConfig+0x7a>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a13      	ldr	r2, [pc, #76]	; (800ff9c <TIM_OC5_SetConfig+0xc4>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d109      	bne.n	800ff66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	695b      	ldr	r3, [r3, #20]
 800ff5e:	021b      	lsls	r3, r3, #8
 800ff60:	697a      	ldr	r2, [r7, #20]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	697a      	ldr	r2, [r7, #20]
 800ff6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	68fa      	ldr	r2, [r7, #12]
 800ff70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	685a      	ldr	r2, [r3, #4]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	621a      	str	r2, [r3, #32]
}
 800ff80:	bf00      	nop
 800ff82:	371c      	adds	r7, #28
 800ff84:	46bd      	mov	sp, r7
 800ff86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8a:	4770      	bx	lr
 800ff8c:	40012c00 	.word	0x40012c00
 800ff90:	40013400 	.word	0x40013400
 800ff94:	40014000 	.word	0x40014000
 800ff98:	40014400 	.word	0x40014400
 800ff9c:	40014800 	.word	0x40014800

0800ffa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a1b      	ldr	r3, [r3, #32]
 800ffba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ffce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	021b      	lsls	r3, r3, #8
 800ffda:	68fa      	ldr	r2, [r7, #12]
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ffe6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	689b      	ldr	r3, [r3, #8]
 800ffec:	051b      	lsls	r3, r3, #20
 800ffee:	693a      	ldr	r2, [r7, #16]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	4a18      	ldr	r2, [pc, #96]	; (8010058 <TIM_OC6_SetConfig+0xb8>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d00f      	beq.n	801001c <TIM_OC6_SetConfig+0x7c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4a17      	ldr	r2, [pc, #92]	; (801005c <TIM_OC6_SetConfig+0xbc>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d00b      	beq.n	801001c <TIM_OC6_SetConfig+0x7c>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	4a16      	ldr	r2, [pc, #88]	; (8010060 <TIM_OC6_SetConfig+0xc0>)
 8010008:	4293      	cmp	r3, r2
 801000a:	d007      	beq.n	801001c <TIM_OC6_SetConfig+0x7c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	4a15      	ldr	r2, [pc, #84]	; (8010064 <TIM_OC6_SetConfig+0xc4>)
 8010010:	4293      	cmp	r3, r2
 8010012:	d003      	beq.n	801001c <TIM_OC6_SetConfig+0x7c>
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	4a14      	ldr	r2, [pc, #80]	; (8010068 <TIM_OC6_SetConfig+0xc8>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d109      	bne.n	8010030 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010022:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	695b      	ldr	r3, [r3, #20]
 8010028:	029b      	lsls	r3, r3, #10
 801002a:	697a      	ldr	r2, [r7, #20]
 801002c:	4313      	orrs	r3, r2
 801002e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	697a      	ldr	r2, [r7, #20]
 8010034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	685a      	ldr	r2, [r3, #4]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	621a      	str	r2, [r3, #32]
}
 801004a:	bf00      	nop
 801004c:	371c      	adds	r7, #28
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	40012c00 	.word	0x40012c00
 801005c:	40013400 	.word	0x40013400
 8010060:	40014000 	.word	0x40014000
 8010064:	40014400 	.word	0x40014400
 8010068:	40014800 	.word	0x40014800

0801006c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010080:	2b01      	cmp	r3, #1
 8010082:	d101      	bne.n	8010088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010084:	2302      	movs	r3, #2
 8010086:	e065      	b.n	8010154 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2201      	movs	r2, #1
 801008c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	68db      	ldr	r3, [r3, #12]
 801009a:	4313      	orrs	r3, r2
 801009c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	4313      	orrs	r3, r2
 80100aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	685b      	ldr	r3, [r3, #4]
 80100b6:	4313      	orrs	r3, r2
 80100b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4313      	orrs	r3, r2
 80100c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	4313      	orrs	r3, r2
 80100d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ee:	4313      	orrs	r3, r2
 80100f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	699b      	ldr	r3, [r3, #24]
 80100fc:	041b      	lsls	r3, r3, #16
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a16      	ldr	r2, [pc, #88]	; (8010160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d004      	beq.n	8010116 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	4a14      	ldr	r2, [pc, #80]	; (8010164 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d115      	bne.n	8010142 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010120:	051b      	lsls	r3, r3, #20
 8010122:	4313      	orrs	r3, r2
 8010124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	69db      	ldr	r3, [r3, #28]
 8010130:	4313      	orrs	r3, r2
 8010132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	6a1b      	ldr	r3, [r3, #32]
 801013e:	4313      	orrs	r3, r2
 8010140:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	68fa      	ldr	r2, [r7, #12]
 8010148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010152:	2300      	movs	r3, #0
}
 8010154:	4618      	mov	r0, r3
 8010156:	3714      	adds	r7, #20
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr
 8010160:	40012c00 	.word	0x40012c00
 8010164:	40013400 	.word	0x40013400

08010168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010168:	b480      	push	{r7}
 801016a:	b083      	sub	sp, #12
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010170:	bf00      	nop
 8010172:	370c      	adds	r7, #12
 8010174:	46bd      	mov	sp, r7
 8010176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017a:	4770      	bx	lr

0801017c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010198:	bf00      	nop
 801019a:	370c      	adds	r7, #12
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80101b2:	2301      	movs	r3, #1
 80101b4:	e042      	b.n	801023c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f4 fd13 	bl	8004bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2224      	movs	r2, #36	; 0x24
 80101d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f022 0201 	bic.w	r2, r2, #1
 80101e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 fb64 	bl	80108b4 <UART_SetConfig>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d101      	bne.n	80101f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80101f2:	2301      	movs	r3, #1
 80101f4:	e022      	b.n	801023c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d002      	beq.n	8010204 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fe54 	bl	8010eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	685a      	ldr	r2, [r3, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	689a      	ldr	r2, [r3, #8]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	f042 0201 	orr.w	r2, r2, #1
 8010232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fedb 	bl	8010ff0 <UART_CheckIdleState>
 801023a:	4603      	mov	r3, r0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b0ba      	sub	sp, #232	; 0xe8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69db      	ldr	r3, [r3, #28]
 8010252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801026a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801026e:	f640 030f 	movw	r3, #2063	; 0x80f
 8010272:	4013      	ands	r3, r2
 8010274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801027c:	2b00      	cmp	r3, #0
 801027e:	d11b      	bne.n	80102b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010284:	f003 0320 	and.w	r3, r3, #32
 8010288:	2b00      	cmp	r3, #0
 801028a:	d015      	beq.n	80102b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801028c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010290:	f003 0320 	and.w	r3, r3, #32
 8010294:	2b00      	cmp	r3, #0
 8010296:	d105      	bne.n	80102a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801029c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f000 82d6 	beq.w	801085a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	4798      	blx	r3
      }
      return;
 80102b6:	e2d0      	b.n	801085a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80102b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80102bc:	2b00      	cmp	r3, #0
 80102be:	f000 811f 	beq.w	8010500 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80102c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102c6:	4b8b      	ldr	r3, [pc, #556]	; (80104f4 <HAL_UART_IRQHandler+0x2b0>)
 80102c8:	4013      	ands	r3, r2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80102ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80102d2:	4b89      	ldr	r3, [pc, #548]	; (80104f8 <HAL_UART_IRQHandler+0x2b4>)
 80102d4:	4013      	ands	r3, r2
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f000 8112 	beq.w	8010500 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80102dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d011      	beq.n	801030c <HAL_UART_IRQHandler+0xc8>
 80102e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	2201      	movs	r2, #1
 80102fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010302:	f043 0201 	orr.w	r2, r3, #1
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801030c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010310:	f003 0302 	and.w	r3, r3, #2
 8010314:	2b00      	cmp	r3, #0
 8010316:	d011      	beq.n	801033c <HAL_UART_IRQHandler+0xf8>
 8010318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801031c:	f003 0301 	and.w	r3, r3, #1
 8010320:	2b00      	cmp	r3, #0
 8010322:	d00b      	beq.n	801033c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2202      	movs	r2, #2
 801032a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010332:	f043 0204 	orr.w	r2, r3, #4
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801033c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010340:	f003 0304 	and.w	r3, r3, #4
 8010344:	2b00      	cmp	r3, #0
 8010346:	d011      	beq.n	801036c <HAL_UART_IRQHandler+0x128>
 8010348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801034c:	f003 0301 	and.w	r3, r3, #1
 8010350:	2b00      	cmp	r3, #0
 8010352:	d00b      	beq.n	801036c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2204      	movs	r2, #4
 801035a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010362:	f043 0202 	orr.w	r2, r3, #2
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 801036c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010370:	f003 0308 	and.w	r3, r3, #8
 8010374:	2b00      	cmp	r3, #0
 8010376:	d017      	beq.n	80103a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801037c:	f003 0320 	and.w	r3, r3, #32
 8010380:	2b00      	cmp	r3, #0
 8010382:	d105      	bne.n	8010390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010388:	4b5a      	ldr	r3, [pc, #360]	; (80104f4 <HAL_UART_IRQHandler+0x2b0>)
 801038a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00b      	beq.n	80103a8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	2208      	movs	r2, #8
 8010396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801039e:	f043 0208 	orr.w	r2, r3, #8
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80103a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d012      	beq.n	80103da <HAL_UART_IRQHandler+0x196>
 80103b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d00c      	beq.n	80103da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80103c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103d0:	f043 0220 	orr.w	r2, r3, #32
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f000 823c 	beq.w	801085e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80103e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80103ea:	f003 0320 	and.w	r3, r3, #32
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d013      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80103f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80103f6:	f003 0320 	and.w	r3, r3, #32
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d105      	bne.n	801040a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010406:	2b00      	cmp	r3, #0
 8010408:	d007      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801040e:	2b00      	cmp	r3, #0
 8010410:	d003      	beq.n	801041a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	689b      	ldr	r3, [r3, #8]
 801042a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801042e:	2b40      	cmp	r3, #64	; 0x40
 8010430:	d005      	beq.n	801043e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801043a:	2b00      	cmp	r3, #0
 801043c:	d04f      	beq.n	80104de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 fee9 	bl	8011216 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	689b      	ldr	r3, [r3, #8]
 801044a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801044e:	2b40      	cmp	r3, #64	; 0x40
 8010450:	d141      	bne.n	80104d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3308      	adds	r3, #8
 8010458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010460:	e853 3f00 	ldrex	r3, [r3]
 8010464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801046c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801047e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801048a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801048e:	e841 2300 	strex	r3, r2, [r1]
 8010492:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1d9      	bne.n	8010452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d013      	beq.n	80104ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104aa:	4a14      	ldr	r2, [pc, #80]	; (80104fc <HAL_UART_IRQHandler+0x2b8>)
 80104ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7f6 fd77 	bl	8006fa6 <HAL_DMA_Abort_IT>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d017      	beq.n	80104ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80104c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80104c8:	4610      	mov	r0, r2
 80104ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104cc:	e00f      	b.n	80104ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f000 f9da 	bl	8010888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104d4:	e00b      	b.n	80104ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f000 f9d6 	bl	8010888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104dc:	e007      	b.n	80104ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f000 f9d2 	bl	8010888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2200      	movs	r2, #0
 80104e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80104ec:	e1b7      	b.n	801085e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104ee:	bf00      	nop
    return;
 80104f0:	e1b5      	b.n	801085e <HAL_UART_IRQHandler+0x61a>
 80104f2:	bf00      	nop
 80104f4:	10000001 	.word	0x10000001
 80104f8:	04000120 	.word	0x04000120
 80104fc:	080112e3 	.word	0x080112e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010504:	2b01      	cmp	r3, #1
 8010506:	f040 814a 	bne.w	801079e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801050a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801050e:	f003 0310 	and.w	r3, r3, #16
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 8143 	beq.w	801079e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801051c:	f003 0310 	and.w	r3, r3, #16
 8010520:	2b00      	cmp	r3, #0
 8010522:	f000 813c 	beq.w	801079e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2210      	movs	r2, #16
 801052c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	689b      	ldr	r3, [r3, #8]
 8010534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010538:	2b40      	cmp	r3, #64	; 0x40
 801053a:	f040 80b5 	bne.w	80106a8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801054a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801054e:	2b00      	cmp	r3, #0
 8010550:	f000 8187 	beq.w	8010862 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801055a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801055e:	429a      	cmp	r2, r3
 8010560:	f080 817f 	bcs.w	8010862 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801056a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f003 0320 	and.w	r3, r3, #32
 801057a:	2b00      	cmp	r3, #0
 801057c:	f040 8086 	bne.w	801068c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801058c:	e853 3f00 	ldrex	r3, [r3]
 8010590:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801059c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	461a      	mov	r2, r3
 80105a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80105b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80105ba:	e841 2300 	strex	r3, r2, [r1]
 80105be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80105c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d1da      	bne.n	8010580 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	3308      	adds	r3, #8
 80105d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80105d4:	e853 3f00 	ldrex	r3, [r3]
 80105d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80105da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105dc:	f023 0301 	bic.w	r3, r3, #1
 80105e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3308      	adds	r3, #8
 80105ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80105ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80105f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80105f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80105fa:	e841 2300 	strex	r3, r2, [r1]
 80105fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1e1      	bne.n	80105ca <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010616:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010618:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801061c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3308      	adds	r3, #8
 8010626:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801062a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801062c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010630:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010632:	e841 2300 	strex	r3, r2, [r1]
 8010636:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e3      	bne.n	8010606 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2220      	movs	r2, #32
 8010642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010654:	e853 3f00 	ldrex	r3, [r3]
 8010658:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801065a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801065c:	f023 0310 	bic.w	r3, r3, #16
 8010660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	461a      	mov	r2, r3
 801066a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801066e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010670:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010676:	e841 2300 	strex	r3, r2, [r1]
 801067a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801067c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1e4      	bne.n	801064c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010686:	4618      	mov	r0, r3
 8010688:	f7f6 fc31 	bl	8006eee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010698:	b29b      	uxth	r3, r3
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	b29b      	uxth	r3, r3
 801069e:	4619      	mov	r1, r3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f000 f8fb 	bl	801089c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106a6:	e0dc      	b.n	8010862 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	1ad3      	subs	r3, r2, r3
 80106b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106c2:	b29b      	uxth	r3, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 80ce 	beq.w	8010866 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80106ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	f000 80c9 	beq.w	8010866 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	e853 3f00 	ldrex	r3, [r3]
 80106e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	461a      	mov	r2, r3
 80106f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80106f6:	647b      	str	r3, [r7, #68]	; 0x44
 80106f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80106fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106fe:	e841 2300 	strex	r3, r2, [r1]
 8010702:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1e4      	bne.n	80106d4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	3308      	adds	r3, #8
 8010710:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	e853 3f00 	ldrex	r3, [r3]
 8010718:	623b      	str	r3, [r7, #32]
   return(result);
 801071a:	6a3b      	ldr	r3, [r7, #32]
 801071c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010720:	f023 0301 	bic.w	r3, r3, #1
 8010724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	3308      	adds	r3, #8
 801072e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010732:	633a      	str	r2, [r7, #48]	; 0x30
 8010734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801073a:	e841 2300 	strex	r3, r2, [r1]
 801073e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1e1      	bne.n	801070a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	2220      	movs	r2, #32
 801074a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	e853 3f00 	ldrex	r3, [r3]
 8010766:	60fb      	str	r3, [r7, #12]
   return(result);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f023 0310 	bic.w	r3, r3, #16
 801076e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	461a      	mov	r2, r3
 8010778:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801077c:	61fb      	str	r3, [r7, #28]
 801077e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010780:	69b9      	ldr	r1, [r7, #24]
 8010782:	69fa      	ldr	r2, [r7, #28]
 8010784:	e841 2300 	strex	r3, r2, [r1]
 8010788:	617b      	str	r3, [r7, #20]
   return(result);
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1e4      	bne.n	801075a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010794:	4619      	mov	r1, r3
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	f000 f880 	bl	801089c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801079c:	e063      	b.n	8010866 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801079e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00e      	beq.n	80107c8 <HAL_UART_IRQHandler+0x584>
 80107aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d008      	beq.n	80107c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80107be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f000 fdcf 	bl	8011364 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107c6:	e051      	b.n	801086c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80107c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d014      	beq.n	80107fe <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80107d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d105      	bne.n	80107ec <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80107e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80107e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d008      	beq.n	80107fe <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d03a      	beq.n	801086a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	4798      	blx	r3
    }
    return;
 80107fc:	e035      	b.n	801086a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80107fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010806:	2b00      	cmp	r3, #0
 8010808:	d009      	beq.n	801081e <HAL_UART_IRQHandler+0x5da>
 801080a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010812:	2b00      	cmp	r3, #0
 8010814:	d003      	beq.n	801081e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fd79 	bl	801130e <UART_EndTransmit_IT>
    return;
 801081c:	e026      	b.n	801086c <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801081e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010826:	2b00      	cmp	r3, #0
 8010828:	d009      	beq.n	801083e <HAL_UART_IRQHandler+0x5fa>
 801082a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801082e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fda8 	bl	801138c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801083c:	e016      	b.n	801086c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801083e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010846:	2b00      	cmp	r3, #0
 8010848:	d010      	beq.n	801086c <HAL_UART_IRQHandler+0x628>
 801084a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801084e:	2b00      	cmp	r3, #0
 8010850:	da0c      	bge.n	801086c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 fd90 	bl	8011378 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010858:	e008      	b.n	801086c <HAL_UART_IRQHandler+0x628>
      return;
 801085a:	bf00      	nop
 801085c:	e006      	b.n	801086c <HAL_UART_IRQHandler+0x628>
    return;
 801085e:	bf00      	nop
 8010860:	e004      	b.n	801086c <HAL_UART_IRQHandler+0x628>
      return;
 8010862:	bf00      	nop
 8010864:	e002      	b.n	801086c <HAL_UART_IRQHandler+0x628>
      return;
 8010866:	bf00      	nop
 8010868:	e000      	b.n	801086c <HAL_UART_IRQHandler+0x628>
    return;
 801086a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 801086c:	37e8      	adds	r7, #232	; 0xe8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop

08010874 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801087c:	bf00      	nop
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr

08010888 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80108a8:	bf00      	nop
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80108b8:	b08c      	sub	sp, #48	; 0x30
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	689a      	ldr	r2, [r3, #8]
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	431a      	orrs	r2, r3
 80108ce:	697b      	ldr	r3, [r7, #20]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	431a      	orrs	r2, r3
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	69db      	ldr	r3, [r3, #28]
 80108d8:	4313      	orrs	r3, r2
 80108da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	4baa      	ldr	r3, [pc, #680]	; (8010b8c <UART_SetConfig+0x2d8>)
 80108e4:	4013      	ands	r3, r2
 80108e6:	697a      	ldr	r2, [r7, #20]
 80108e8:	6812      	ldr	r2, [r2, #0]
 80108ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108ec:	430b      	orrs	r3, r1
 80108ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	68da      	ldr	r2, [r3, #12]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	430a      	orrs	r2, r1
 8010904:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	699b      	ldr	r3, [r3, #24]
 801090a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	4a9f      	ldr	r2, [pc, #636]	; (8010b90 <UART_SetConfig+0x2dc>)
 8010912:	4293      	cmp	r3, r2
 8010914:	d004      	beq.n	8010920 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	6a1b      	ldr	r3, [r3, #32]
 801091a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801091c:	4313      	orrs	r3, r2
 801091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801092a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801092e:	697a      	ldr	r2, [r7, #20]
 8010930:	6812      	ldr	r2, [r2, #0]
 8010932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010934:	430b      	orrs	r3, r1
 8010936:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093e:	f023 010f 	bic.w	r1, r3, #15
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	430a      	orrs	r2, r1
 801094c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4a90      	ldr	r2, [pc, #576]	; (8010b94 <UART_SetConfig+0x2e0>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d125      	bne.n	80109a4 <UART_SetConfig+0xf0>
 8010958:	4b8f      	ldr	r3, [pc, #572]	; (8010b98 <UART_SetConfig+0x2e4>)
 801095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801095e:	f003 0303 	and.w	r3, r3, #3
 8010962:	2b03      	cmp	r3, #3
 8010964:	d81a      	bhi.n	801099c <UART_SetConfig+0xe8>
 8010966:	a201      	add	r2, pc, #4	; (adr r2, 801096c <UART_SetConfig+0xb8>)
 8010968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096c:	0801097d 	.word	0x0801097d
 8010970:	0801098d 	.word	0x0801098d
 8010974:	08010985 	.word	0x08010985
 8010978:	08010995 	.word	0x08010995
 801097c:	2301      	movs	r3, #1
 801097e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010982:	e116      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010984:	2302      	movs	r3, #2
 8010986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801098a:	e112      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 801098c:	2304      	movs	r3, #4
 801098e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010992:	e10e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010994:	2308      	movs	r3, #8
 8010996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801099a:	e10a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 801099c:	2310      	movs	r3, #16
 801099e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109a2:	e106      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a7c      	ldr	r2, [pc, #496]	; (8010b9c <UART_SetConfig+0x2e8>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d138      	bne.n	8010a20 <UART_SetConfig+0x16c>
 80109ae:	4b7a      	ldr	r3, [pc, #488]	; (8010b98 <UART_SetConfig+0x2e4>)
 80109b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109b4:	f003 030c 	and.w	r3, r3, #12
 80109b8:	2b0c      	cmp	r3, #12
 80109ba:	d82d      	bhi.n	8010a18 <UART_SetConfig+0x164>
 80109bc:	a201      	add	r2, pc, #4	; (adr r2, 80109c4 <UART_SetConfig+0x110>)
 80109be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c2:	bf00      	nop
 80109c4:	080109f9 	.word	0x080109f9
 80109c8:	08010a19 	.word	0x08010a19
 80109cc:	08010a19 	.word	0x08010a19
 80109d0:	08010a19 	.word	0x08010a19
 80109d4:	08010a09 	.word	0x08010a09
 80109d8:	08010a19 	.word	0x08010a19
 80109dc:	08010a19 	.word	0x08010a19
 80109e0:	08010a19 	.word	0x08010a19
 80109e4:	08010a01 	.word	0x08010a01
 80109e8:	08010a19 	.word	0x08010a19
 80109ec:	08010a19 	.word	0x08010a19
 80109f0:	08010a19 	.word	0x08010a19
 80109f4:	08010a11 	.word	0x08010a11
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80109fe:	e0d8      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a00:	2302      	movs	r3, #2
 8010a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a06:	e0d4      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a0e:	e0d0      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a10:	2308      	movs	r3, #8
 8010a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a16:	e0cc      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a18:	2310      	movs	r3, #16
 8010a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a1e:	e0c8      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a5e      	ldr	r2, [pc, #376]	; (8010ba0 <UART_SetConfig+0x2ec>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d125      	bne.n	8010a76 <UART_SetConfig+0x1c2>
 8010a2a:	4b5b      	ldr	r3, [pc, #364]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010a34:	2b30      	cmp	r3, #48	; 0x30
 8010a36:	d016      	beq.n	8010a66 <UART_SetConfig+0x1b2>
 8010a38:	2b30      	cmp	r3, #48	; 0x30
 8010a3a:	d818      	bhi.n	8010a6e <UART_SetConfig+0x1ba>
 8010a3c:	2b20      	cmp	r3, #32
 8010a3e:	d00a      	beq.n	8010a56 <UART_SetConfig+0x1a2>
 8010a40:	2b20      	cmp	r3, #32
 8010a42:	d814      	bhi.n	8010a6e <UART_SetConfig+0x1ba>
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d002      	beq.n	8010a4e <UART_SetConfig+0x19a>
 8010a48:	2b10      	cmp	r3, #16
 8010a4a:	d008      	beq.n	8010a5e <UART_SetConfig+0x1aa>
 8010a4c:	e00f      	b.n	8010a6e <UART_SetConfig+0x1ba>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a54:	e0ad      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a56:	2302      	movs	r3, #2
 8010a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a5c:	e0a9      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a5e:	2304      	movs	r3, #4
 8010a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a64:	e0a5      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a66:	2308      	movs	r3, #8
 8010a68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a6c:	e0a1      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a6e:	2310      	movs	r3, #16
 8010a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010a74:	e09d      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a4a      	ldr	r2, [pc, #296]	; (8010ba4 <UART_SetConfig+0x2f0>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d125      	bne.n	8010acc <UART_SetConfig+0x218>
 8010a80:	4b45      	ldr	r3, [pc, #276]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010a8a:	2bc0      	cmp	r3, #192	; 0xc0
 8010a8c:	d016      	beq.n	8010abc <UART_SetConfig+0x208>
 8010a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8010a90:	d818      	bhi.n	8010ac4 <UART_SetConfig+0x210>
 8010a92:	2b80      	cmp	r3, #128	; 0x80
 8010a94:	d00a      	beq.n	8010aac <UART_SetConfig+0x1f8>
 8010a96:	2b80      	cmp	r3, #128	; 0x80
 8010a98:	d814      	bhi.n	8010ac4 <UART_SetConfig+0x210>
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <UART_SetConfig+0x1f0>
 8010a9e:	2b40      	cmp	r3, #64	; 0x40
 8010aa0:	d008      	beq.n	8010ab4 <UART_SetConfig+0x200>
 8010aa2:	e00f      	b.n	8010ac4 <UART_SetConfig+0x210>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aaa:	e082      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010aac:	2302      	movs	r3, #2
 8010aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ab2:	e07e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010ab4:	2304      	movs	r3, #4
 8010ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aba:	e07a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010abc:	2308      	movs	r3, #8
 8010abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010ac2:	e076      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010ac4:	2310      	movs	r3, #16
 8010ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010aca:	e072      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a35      	ldr	r2, [pc, #212]	; (8010ba8 <UART_SetConfig+0x2f4>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d12a      	bne.n	8010b2c <UART_SetConfig+0x278>
 8010ad6:	4b30      	ldr	r3, [pc, #192]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ae4:	d01a      	beq.n	8010b1c <UART_SetConfig+0x268>
 8010ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010aea:	d81b      	bhi.n	8010b24 <UART_SetConfig+0x270>
 8010aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010af0:	d00c      	beq.n	8010b0c <UART_SetConfig+0x258>
 8010af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010af6:	d815      	bhi.n	8010b24 <UART_SetConfig+0x270>
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d003      	beq.n	8010b04 <UART_SetConfig+0x250>
 8010afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b00:	d008      	beq.n	8010b14 <UART_SetConfig+0x260>
 8010b02:	e00f      	b.n	8010b24 <UART_SetConfig+0x270>
 8010b04:	2300      	movs	r3, #0
 8010b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b0a:	e052      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b0c:	2302      	movs	r3, #2
 8010b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b12:	e04e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b14:	2304      	movs	r3, #4
 8010b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b1a:	e04a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b1c:	2308      	movs	r3, #8
 8010b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b22:	e046      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b24:	2310      	movs	r3, #16
 8010b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b2a:	e042      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4a17      	ldr	r2, [pc, #92]	; (8010b90 <UART_SetConfig+0x2dc>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d13a      	bne.n	8010bac <UART_SetConfig+0x2f8>
 8010b36:	4b18      	ldr	r3, [pc, #96]	; (8010b98 <UART_SetConfig+0x2e4>)
 8010b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010b40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b44:	d01a      	beq.n	8010b7c <UART_SetConfig+0x2c8>
 8010b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b4a:	d81b      	bhi.n	8010b84 <UART_SetConfig+0x2d0>
 8010b4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b50:	d00c      	beq.n	8010b6c <UART_SetConfig+0x2b8>
 8010b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b56:	d815      	bhi.n	8010b84 <UART_SetConfig+0x2d0>
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <UART_SetConfig+0x2b0>
 8010b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b60:	d008      	beq.n	8010b74 <UART_SetConfig+0x2c0>
 8010b62:	e00f      	b.n	8010b84 <UART_SetConfig+0x2d0>
 8010b64:	2300      	movs	r3, #0
 8010b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b6a:	e022      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b6c:	2302      	movs	r3, #2
 8010b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b72:	e01e      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b74:	2304      	movs	r3, #4
 8010b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b7a:	e01a      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b82:	e016      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b84:	2310      	movs	r3, #16
 8010b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010b8a:	e012      	b.n	8010bb2 <UART_SetConfig+0x2fe>
 8010b8c:	cfff69f3 	.word	0xcfff69f3
 8010b90:	40008000 	.word	0x40008000
 8010b94:	40013800 	.word	0x40013800
 8010b98:	40021000 	.word	0x40021000
 8010b9c:	40004400 	.word	0x40004400
 8010ba0:	40004800 	.word	0x40004800
 8010ba4:	40004c00 	.word	0x40004c00
 8010ba8:	40005000 	.word	0x40005000
 8010bac:	2310      	movs	r3, #16
 8010bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010bb2:	697b      	ldr	r3, [r7, #20]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	4aae      	ldr	r2, [pc, #696]	; (8010e70 <UART_SetConfig+0x5bc>)
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	f040 8097 	bne.w	8010cec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010bc2:	2b08      	cmp	r3, #8
 8010bc4:	d823      	bhi.n	8010c0e <UART_SetConfig+0x35a>
 8010bc6:	a201      	add	r2, pc, #4	; (adr r2, 8010bcc <UART_SetConfig+0x318>)
 8010bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bcc:	08010bf1 	.word	0x08010bf1
 8010bd0:	08010c0f 	.word	0x08010c0f
 8010bd4:	08010bf9 	.word	0x08010bf9
 8010bd8:	08010c0f 	.word	0x08010c0f
 8010bdc:	08010bff 	.word	0x08010bff
 8010be0:	08010c0f 	.word	0x08010c0f
 8010be4:	08010c0f 	.word	0x08010c0f
 8010be8:	08010c0f 	.word	0x08010c0f
 8010bec:	08010c07 	.word	0x08010c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010bf0:	f7fa f890 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 8010bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010bf6:	e010      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010bf8:	4b9e      	ldr	r3, [pc, #632]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010bfc:	e00d      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010bfe:	f7f9 fff1 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 8010c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010c04:	e009      	b.n	8010c1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010c0c:	e005      	b.n	8010c1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010c12:	2301      	movs	r3, #1
 8010c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	f000 8130 	beq.w	8010e82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c26:	4a94      	ldr	r2, [pc, #592]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	685a      	ldr	r2, [r3, #4]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	005b      	lsls	r3, r3, #1
 8010c3e:	4413      	add	r3, r2
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d305      	bcc.n	8010c52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010c4c:	69ba      	ldr	r2, [r7, #24]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d903      	bls.n	8010c5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010c52:	2301      	movs	r3, #1
 8010c54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010c58:	e113      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	60bb      	str	r3, [r7, #8]
 8010c60:	60fa      	str	r2, [r7, #12]
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c66:	4a84      	ldr	r2, [pc, #528]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	2200      	movs	r2, #0
 8010c70:	603b      	str	r3, [r7, #0]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c7c:	f7ef fffc 	bl	8000c78 <__aeabi_uldivmod>
 8010c80:	4602      	mov	r2, r0
 8010c82:	460b      	mov	r3, r1
 8010c84:	4610      	mov	r0, r2
 8010c86:	4619      	mov	r1, r3
 8010c88:	f04f 0200 	mov.w	r2, #0
 8010c8c:	f04f 0300 	mov.w	r3, #0
 8010c90:	020b      	lsls	r3, r1, #8
 8010c92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c96:	0202      	lsls	r2, r0, #8
 8010c98:	6979      	ldr	r1, [r7, #20]
 8010c9a:	6849      	ldr	r1, [r1, #4]
 8010c9c:	0849      	lsrs	r1, r1, #1
 8010c9e:	2000      	movs	r0, #0
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	eb12 0804 	adds.w	r8, r2, r4
 8010ca8:	eb43 0905 	adc.w	r9, r3, r5
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	469a      	mov	sl, r3
 8010cb4:	4693      	mov	fp, r2
 8010cb6:	4652      	mov	r2, sl
 8010cb8:	465b      	mov	r3, fp
 8010cba:	4640      	mov	r0, r8
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	f7ef ffdb 	bl	8000c78 <__aeabi_uldivmod>
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4613      	mov	r3, r2
 8010cc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cca:	6a3b      	ldr	r3, [r7, #32]
 8010ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010cd0:	d308      	bcc.n	8010ce4 <UART_SetConfig+0x430>
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cd8:	d204      	bcs.n	8010ce4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6a3a      	ldr	r2, [r7, #32]
 8010ce0:	60da      	str	r2, [r3, #12]
 8010ce2:	e0ce      	b.n	8010e82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010cea:	e0ca      	b.n	8010e82 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cec:	697b      	ldr	r3, [r7, #20]
 8010cee:	69db      	ldr	r3, [r3, #28]
 8010cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010cf4:	d166      	bne.n	8010dc4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010cfa:	2b08      	cmp	r3, #8
 8010cfc:	d827      	bhi.n	8010d4e <UART_SetConfig+0x49a>
 8010cfe:	a201      	add	r2, pc, #4	; (adr r2, 8010d04 <UART_SetConfig+0x450>)
 8010d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d04:	08010d29 	.word	0x08010d29
 8010d08:	08010d31 	.word	0x08010d31
 8010d0c:	08010d39 	.word	0x08010d39
 8010d10:	08010d4f 	.word	0x08010d4f
 8010d14:	08010d3f 	.word	0x08010d3f
 8010d18:	08010d4f 	.word	0x08010d4f
 8010d1c:	08010d4f 	.word	0x08010d4f
 8010d20:	08010d4f 	.word	0x08010d4f
 8010d24:	08010d47 	.word	0x08010d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d28:	f7f9 fff4 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 8010d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d2e:	e014      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d30:	f7fa f806 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 8010d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d36:	e010      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d38:	4b4e      	ldr	r3, [pc, #312]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d3c:	e00d      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d3e:	f7f9 ff51 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 8010d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010d44:	e009      	b.n	8010d5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010d4c:	e005      	b.n	8010d5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010d52:	2301      	movs	r3, #1
 8010d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010d58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 8090 	beq.w	8010e82 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	4a44      	ldr	r2, [pc, #272]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8010d74:	005a      	lsls	r2, r3, #1
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	085b      	lsrs	r3, r3, #1
 8010d7c:	441a      	add	r2, r3
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d86:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d88:	6a3b      	ldr	r3, [r7, #32]
 8010d8a:	2b0f      	cmp	r3, #15
 8010d8c:	d916      	bls.n	8010dbc <UART_SetConfig+0x508>
 8010d8e:	6a3b      	ldr	r3, [r7, #32]
 8010d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d94:	d212      	bcs.n	8010dbc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	f023 030f 	bic.w	r3, r3, #15
 8010d9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	085b      	lsrs	r3, r3, #1
 8010da4:	b29b      	uxth	r3, r3
 8010da6:	f003 0307 	and.w	r3, r3, #7
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	8bfb      	ldrh	r3, [r7, #30]
 8010dae:	4313      	orrs	r3, r2
 8010db0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	8bfa      	ldrh	r2, [r7, #30]
 8010db8:	60da      	str	r2, [r3, #12]
 8010dba:	e062      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8010dc2:	e05e      	b.n	8010e82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010dc8:	2b08      	cmp	r3, #8
 8010dca:	d828      	bhi.n	8010e1e <UART_SetConfig+0x56a>
 8010dcc:	a201      	add	r2, pc, #4	; (adr r2, 8010dd4 <UART_SetConfig+0x520>)
 8010dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dd2:	bf00      	nop
 8010dd4:	08010df9 	.word	0x08010df9
 8010dd8:	08010e01 	.word	0x08010e01
 8010ddc:	08010e09 	.word	0x08010e09
 8010de0:	08010e1f 	.word	0x08010e1f
 8010de4:	08010e0f 	.word	0x08010e0f
 8010de8:	08010e1f 	.word	0x08010e1f
 8010dec:	08010e1f 	.word	0x08010e1f
 8010df0:	08010e1f 	.word	0x08010e1f
 8010df4:	08010e17 	.word	0x08010e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010df8:	f7f9 ff8c 	bl	800ad14 <HAL_RCC_GetPCLK1Freq>
 8010dfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010dfe:	e014      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e00:	f7f9 ff9e 	bl	800ad40 <HAL_RCC_GetPCLK2Freq>
 8010e04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e06:	e010      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010e08:	4b1a      	ldr	r3, [pc, #104]	; (8010e74 <UART_SetConfig+0x5c0>)
 8010e0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e0c:	e00d      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e0e:	f7f9 fee9 	bl	800abe4 <HAL_RCC_GetSysClockFreq>
 8010e12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010e14:	e009      	b.n	8010e2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8010e1c:	e005      	b.n	8010e2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010e22:	2301      	movs	r3, #1
 8010e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010e28:	bf00      	nop
    }

    if (pclk != 0U)
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d028      	beq.n	8010e82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e34:	4a10      	ldr	r2, [pc, #64]	; (8010e78 <UART_SetConfig+0x5c4>)
 8010e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	085b      	lsrs	r3, r3, #1
 8010e48:	441a      	add	r2, r3
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e54:	6a3b      	ldr	r3, [r7, #32]
 8010e56:	2b0f      	cmp	r3, #15
 8010e58:	d910      	bls.n	8010e7c <UART_SetConfig+0x5c8>
 8010e5a:	6a3b      	ldr	r3, [r7, #32]
 8010e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e60:	d20c      	bcs.n	8010e7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010e62:	6a3b      	ldr	r3, [r7, #32]
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	60da      	str	r2, [r3, #12]
 8010e6c:	e009      	b.n	8010e82 <UART_SetConfig+0x5ce>
 8010e6e:	bf00      	nop
 8010e70:	40008000 	.word	0x40008000
 8010e74:	00f42400 	.word	0x00f42400
 8010e78:	0801c1c8 	.word	0x0801c1c8
      }
      else
      {
        ret = HAL_ERROR;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	2201      	movs	r2, #1
 8010e86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	2200      	movs	r2, #0
 8010e96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010e9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3730      	adds	r7, #48	; 0x30
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00a      	beq.n	8010ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	430a      	orrs	r2, r1
 8010ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010eda:	f003 0302 	and.w	r3, r3, #2
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	430a      	orrs	r2, r1
 8010ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010efc:	f003 0304 	and.w	r3, r3, #4
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d00a      	beq.n	8010f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	430a      	orrs	r2, r1
 8010f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f1e:	f003 0308 	and.w	r3, r3, #8
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	685b      	ldr	r3, [r3, #4]
 8010f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	430a      	orrs	r2, r1
 8010f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f40:	f003 0310 	and.w	r3, r3, #16
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00a      	beq.n	8010f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	430a      	orrs	r2, r1
 8010f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f62:	f003 0320 	and.w	r3, r3, #32
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00a      	beq.n	8010f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	430a      	orrs	r2, r1
 8010f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d01a      	beq.n	8010fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	430a      	orrs	r2, r1
 8010fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010faa:	d10a      	bne.n	8010fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	685b      	ldr	r3, [r3, #4]
 8010fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	430a      	orrs	r2, r1
 8010fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00a      	beq.n	8010fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	430a      	orrs	r2, r1
 8010fe2:	605a      	str	r2, [r3, #4]
  }
}
 8010fe4:	bf00      	nop
 8010fe6:	370c      	adds	r7, #12
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fee:	4770      	bx	lr

08010ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b086      	sub	sp, #24
 8010ff4:	af02      	add	r7, sp, #8
 8010ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011000:	f7f5 fd10 	bl	8006a24 <HAL_GetTick>
 8011004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f003 0308 	and.w	r3, r3, #8
 8011010:	2b08      	cmp	r3, #8
 8011012:	d10e      	bne.n	8011032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2200      	movs	r2, #0
 801101e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f82f 	bl	8011086 <UART_WaitOnFlagUntilTimeout>
 8011028:	4603      	mov	r3, r0
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801102e:	2303      	movs	r3, #3
 8011030:	e025      	b.n	801107e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f003 0304 	and.w	r3, r3, #4
 801103c:	2b04      	cmp	r3, #4
 801103e:	d10e      	bne.n	801105e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011044:	9300      	str	r3, [sp, #0]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	2200      	movs	r2, #0
 801104a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f819 	bl	8011086 <UART_WaitOnFlagUntilTimeout>
 8011054:	4603      	mov	r3, r0
 8011056:	2b00      	cmp	r3, #0
 8011058:	d001      	beq.n	801105e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801105a:	2303      	movs	r3, #3
 801105c:	e00f      	b.n	801107e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2220      	movs	r2, #32
 8011062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2220      	movs	r2, #32
 801106a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2200      	movs	r2, #0
 8011078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801107c:	2300      	movs	r3, #0
}
 801107e:	4618      	mov	r0, r3
 8011080:	3710      	adds	r7, #16
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}

08011086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b09c      	sub	sp, #112	; 0x70
 801108a:	af00      	add	r7, sp, #0
 801108c:	60f8      	str	r0, [r7, #12]
 801108e:	60b9      	str	r1, [r7, #8]
 8011090:	603b      	str	r3, [r7, #0]
 8011092:	4613      	mov	r3, r2
 8011094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011096:	e0a9      	b.n	80111ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801109a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801109e:	f000 80a5 	beq.w	80111ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110a2:	f7f5 fcbf 	bl	8006a24 <HAL_GetTick>
 80110a6:	4602      	mov	r2, r0
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	1ad3      	subs	r3, r2, r3
 80110ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d302      	bcc.n	80110b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80110b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d140      	bne.n	801113a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110c0:	e853 3f00 	ldrex	r3, [r3]
 80110c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80110c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80110cc:	667b      	str	r3, [r7, #100]	; 0x64
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80110d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80110dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80110de:	e841 2300 	strex	r3, r2, [r1]
 80110e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80110e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d1e6      	bne.n	80110b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	3308      	adds	r3, #8
 80110f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f4:	e853 3f00 	ldrex	r3, [r3]
 80110f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80110fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110fc:	f023 0301 	bic.w	r3, r3, #1
 8011100:	663b      	str	r3, [r7, #96]	; 0x60
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	3308      	adds	r3, #8
 8011108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801110a:	64ba      	str	r2, [r7, #72]	; 0x48
 801110c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801110e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011112:	e841 2300 	strex	r3, r2, [r1]
 8011116:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801111a:	2b00      	cmp	r3, #0
 801111c:	d1e5      	bne.n	80110ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2220      	movs	r2, #32
 8011122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2220      	movs	r2, #32
 801112a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	2200      	movs	r2, #0
 8011132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011136:	2303      	movs	r3, #3
 8011138:	e069      	b.n	801120e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f003 0304 	and.w	r3, r3, #4
 8011144:	2b00      	cmp	r3, #0
 8011146:	d051      	beq.n	80111ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	69db      	ldr	r3, [r3, #28]
 801114e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011156:	d149      	bne.n	80111ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011160:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116a:	e853 3f00 	ldrex	r3, [r3]
 801116e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011176:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	461a      	mov	r2, r3
 801117e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011180:	637b      	str	r3, [r7, #52]	; 0x34
 8011182:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011186:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011188:	e841 2300 	strex	r3, r2, [r1]
 801118c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011190:	2b00      	cmp	r3, #0
 8011192:	d1e6      	bne.n	8011162 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3308      	adds	r3, #8
 801119a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	e853 3f00 	ldrex	r3, [r3]
 80111a2:	613b      	str	r3, [r7, #16]
   return(result);
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	f023 0301 	bic.w	r3, r3, #1
 80111aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	3308      	adds	r3, #8
 80111b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80111b4:	623a      	str	r2, [r7, #32]
 80111b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111b8:	69f9      	ldr	r1, [r7, #28]
 80111ba:	6a3a      	ldr	r2, [r7, #32]
 80111bc:	e841 2300 	strex	r3, r2, [r1]
 80111c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80111c2:	69bb      	ldr	r3, [r7, #24]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d1e5      	bne.n	8011194 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2220      	movs	r2, #32
 80111cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2220      	movs	r2, #32
 80111d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2220      	movs	r2, #32
 80111dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2200      	movs	r2, #0
 80111e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80111e8:	2303      	movs	r3, #3
 80111ea:	e010      	b.n	801120e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	69da      	ldr	r2, [r3, #28]
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	4013      	ands	r3, r2
 80111f6:	68ba      	ldr	r2, [r7, #8]
 80111f8:	429a      	cmp	r2, r3
 80111fa:	bf0c      	ite	eq
 80111fc:	2301      	moveq	r3, #1
 80111fe:	2300      	movne	r3, #0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	461a      	mov	r2, r3
 8011204:	79fb      	ldrb	r3, [r7, #7]
 8011206:	429a      	cmp	r2, r3
 8011208:	f43f af46 	beq.w	8011098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3770      	adds	r7, #112	; 0x70
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011216:	b480      	push	{r7}
 8011218:	b095      	sub	sp, #84	; 0x54
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011226:	e853 3f00 	ldrex	r3, [r3]
 801122a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801123c:	643b      	str	r3, [r7, #64]	; 0x40
 801123e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011240:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011244:	e841 2300 	strex	r3, r2, [r1]
 8011248:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1e6      	bne.n	801121e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	3308      	adds	r3, #8
 8011256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011258:	6a3b      	ldr	r3, [r7, #32]
 801125a:	e853 3f00 	ldrex	r3, [r3]
 801125e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011266:	f023 0301 	bic.w	r3, r3, #1
 801126a:	64bb      	str	r3, [r7, #72]	; 0x48
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	3308      	adds	r3, #8
 8011272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801127a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801127c:	e841 2300 	strex	r3, r2, [r1]
 8011280:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011284:	2b00      	cmp	r3, #0
 8011286:	d1e3      	bne.n	8011250 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801128c:	2b01      	cmp	r3, #1
 801128e:	d118      	bne.n	80112c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	e853 3f00 	ldrex	r3, [r3]
 801129c:	60bb      	str	r3, [r7, #8]
   return(result);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	f023 0310 	bic.w	r3, r3, #16
 80112a4:	647b      	str	r3, [r7, #68]	; 0x44
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	461a      	mov	r2, r3
 80112ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112ae:	61bb      	str	r3, [r7, #24]
 80112b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b2:	6979      	ldr	r1, [r7, #20]
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	e841 2300 	strex	r3, r2, [r1]
 80112ba:	613b      	str	r3, [r7, #16]
   return(result);
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1e6      	bne.n	8011290 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2220      	movs	r2, #32
 80112c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 80112d6:	bf00      	nop
 80112d8:	3754      	adds	r7, #84	; 0x54
 80112da:	46bd      	mov	sp, r7
 80112dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e0:	4770      	bx	lr

080112e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80112e2:	b580      	push	{r7, lr}
 80112e4:	b084      	sub	sp, #16
 80112e6:	af00      	add	r7, sp, #0
 80112e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2200      	movs	r2, #0
 80112fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7ff fac1 	bl	8010888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b088      	sub	sp, #32
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	e853 3f00 	ldrex	r3, [r3]
 8011322:	60bb      	str	r3, [r7, #8]
   return(result);
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801132a:	61fb      	str	r3, [r7, #28]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	461a      	mov	r2, r3
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	61bb      	str	r3, [r7, #24]
 8011336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011338:	6979      	ldr	r1, [r7, #20]
 801133a:	69ba      	ldr	r2, [r7, #24]
 801133c:	e841 2300 	strex	r3, r2, [r1]
 8011340:	613b      	str	r3, [r7, #16]
   return(result);
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d1e6      	bne.n	8011316 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2220      	movs	r2, #32
 801134c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7ff fa8c 	bl	8010874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801135c:	bf00      	nop
 801135e:	3720      	adds	r7, #32
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801136c:	bf00      	nop
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011380:	bf00      	nop
 8011382:	370c      	adds	r7, #12
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr

0801138c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011394:	bf00      	nop
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80113a0:	b480      	push	{r7}
 80113a2:	b085      	sub	sp, #20
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80113ae:	2b01      	cmp	r3, #1
 80113b0:	d101      	bne.n	80113b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80113b2:	2302      	movs	r3, #2
 80113b4:	e027      	b.n	8011406 <HAL_UARTEx_DisableFifoMode+0x66>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2201      	movs	r2, #1
 80113ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2224      	movs	r2, #36	; 0x24
 80113c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	f022 0201 	bic.w	r2, r2, #1
 80113dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80113e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	68fa      	ldr	r2, [r7, #12]
 80113f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2220      	movs	r2, #32
 80113f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011404:	2300      	movs	r3, #0
}
 8011406:	4618      	mov	r0, r3
 8011408:	3714      	adds	r7, #20
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr

08011412 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b084      	sub	sp, #16
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
 801141a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011422:	2b01      	cmp	r3, #1
 8011424:	d101      	bne.n	801142a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011426:	2302      	movs	r3, #2
 8011428:	e02d      	b.n	8011486 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2201      	movs	r2, #1
 801142e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2224      	movs	r2, #36	; 0x24
 8011436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f022 0201 	bic.w	r2, r2, #1
 8011450:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	683a      	ldr	r2, [r7, #0]
 8011462:	430a      	orrs	r2, r1
 8011464:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f850 	bl	801150c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2220      	movs	r2, #32
 8011478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2200      	movs	r2, #0
 8011480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b084      	sub	sp, #16
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80114a2:	2302      	movs	r3, #2
 80114a4:	e02d      	b.n	8011502 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2201      	movs	r2, #1
 80114aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2224      	movs	r2, #36	; 0x24
 80114b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f022 0201 	bic.w	r2, r2, #1
 80114cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	689b      	ldr	r3, [r3, #8]
 80114d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	683a      	ldr	r2, [r7, #0]
 80114de:	430a      	orrs	r2, r1
 80114e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f812 	bl	801150c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	68fa      	ldr	r2, [r7, #12]
 80114ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2220      	movs	r2, #32
 80114f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011500:	2300      	movs	r3, #0
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
	...

0801150c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011518:	2b00      	cmp	r3, #0
 801151a:	d108      	bne.n	801152e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2201      	movs	r2, #1
 8011520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2201      	movs	r2, #1
 8011528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801152c:	e031      	b.n	8011592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801152e:	2308      	movs	r3, #8
 8011530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011532:	2308      	movs	r3, #8
 8011534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	0e5b      	lsrs	r3, r3, #25
 801153e:	b2db      	uxtb	r3, r3
 8011540:	f003 0307 	and.w	r3, r3, #7
 8011544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	689b      	ldr	r3, [r3, #8]
 801154c:	0f5b      	lsrs	r3, r3, #29
 801154e:	b2db      	uxtb	r3, r3
 8011550:	f003 0307 	and.w	r3, r3, #7
 8011554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011556:	7bbb      	ldrb	r3, [r7, #14]
 8011558:	7b3a      	ldrb	r2, [r7, #12]
 801155a:	4911      	ldr	r1, [pc, #68]	; (80115a0 <UARTEx_SetNbDataToProcess+0x94>)
 801155c:	5c8a      	ldrb	r2, [r1, r2]
 801155e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011562:	7b3a      	ldrb	r2, [r7, #12]
 8011564:	490f      	ldr	r1, [pc, #60]	; (80115a4 <UARTEx_SetNbDataToProcess+0x98>)
 8011566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011568:	fb93 f3f2 	sdiv	r3, r3, r2
 801156c:	b29a      	uxth	r2, r3
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011574:	7bfb      	ldrb	r3, [r7, #15]
 8011576:	7b7a      	ldrb	r2, [r7, #13]
 8011578:	4909      	ldr	r1, [pc, #36]	; (80115a0 <UARTEx_SetNbDataToProcess+0x94>)
 801157a:	5c8a      	ldrb	r2, [r1, r2]
 801157c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011580:	7b7a      	ldrb	r2, [r7, #13]
 8011582:	4908      	ldr	r1, [pc, #32]	; (80115a4 <UARTEx_SetNbDataToProcess+0x98>)
 8011584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011586:	fb93 f3f2 	sdiv	r3, r3, r2
 801158a:	b29a      	uxth	r2, r3
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011592:	bf00      	nop
 8011594:	3714      	adds	r7, #20
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	0801c1e0 	.word	0x0801c1e0
 80115a4:	0801c1e8 	.word	0x0801c1e8

080115a8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80115a8:	b084      	sub	sp, #16
 80115aa:	b480      	push	{r7}
 80115ac:	b085      	sub	sp, #20
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	f107 001c 	add.w	r0, r7, #28
 80115b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80115ba:	2300      	movs	r3, #0
 80115bc:	60fb      	str	r3, [r7, #12]

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 80115be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80115c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80115c2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80115c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 80115c6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 80115ca:	431a      	orrs	r2, r3
             Init.ClockDiv
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 80115ce:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	685a      	ldr	r2, [r3, #4]
 80115da:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <SDMMC_Init+0x50>)
 80115dc:	4013      	ands	r3, r2
 80115de:	68fa      	ldr	r2, [r7, #12]
 80115e0:	431a      	orrs	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80115e6:	2300      	movs	r3, #0
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3714      	adds	r7, #20
 80115ec:	46bd      	mov	sp, r7
 80115ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f2:	b004      	add	sp, #16
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	ffc02c00 	.word	0xffc02c00

080115fc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80115fc:	b480      	push	{r7}
 80115fe:	b083      	sub	sp, #12
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801160a:	4618      	mov	r0, r3
 801160c:	370c      	adds	r7, #12
 801160e:	46bd      	mov	sp, r7
 8011610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011614:	4770      	bx	lr

08011616 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011616:	b480      	push	{r7}
 8011618:	b083      	sub	sp, #12
 801161a:	af00      	add	r7, sp, #0
 801161c:	6078      	str	r0, [r7, #4]
 801161e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	370c      	adds	r7, #12
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr

08011638 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f043 0203 	orr.w	r2, r3, #3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	601a      	str	r2, [r3, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801164c:	2002      	movs	r0, #2
 801164e:	f7f5 f9f5 	bl	8006a3c <HAL_Delay>

  return HAL_OK;
 8011652:	2300      	movs	r3, #0
}
 8011654:	4618      	mov	r0, r3
 8011656:	3708      	adds	r7, #8
 8011658:	46bd      	mov	sp, r7
 801165a:	bd80      	pop	{r7, pc}

0801165c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f003 0303 	and.w	r3, r3, #3
}
 801166c:	4618      	mov	r0, r3
 801166e:	370c      	adds	r7, #12
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011678:	b480      	push	{r7}
 801167a:	b085      	sub	sp, #20
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011686:	683b      	ldr	r3, [r7, #0]
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011696:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801169c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80116a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	4313      	orrs	r3, r2
 80116a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	68da      	ldr	r2, [r3, #12]
 80116ae:	4b06      	ldr	r3, [pc, #24]	; (80116c8 <SDMMC_SendCommand+0x50>)
 80116b0:	4013      	ands	r3, r2
 80116b2:	68fa      	ldr	r2, [r7, #12]
 80116b4:	431a      	orrs	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80116ba:	2300      	movs	r3, #0
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3714      	adds	r7, #20
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	fffee0c0 	.word	0xfffee0c0

080116cc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80116cc:	b480      	push	{r7}
 80116ce:	b083      	sub	sp, #12
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	b2db      	uxtb	r3, r3
}
 80116da:	4618      	mov	r0, r3
 80116dc:	370c      	adds	r7, #12
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr

080116e6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80116e6:	b480      	push	{r7}
 80116e8:	b085      	sub	sp, #20
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	3314      	adds	r3, #20
 80116f4:	461a      	mov	r2, r3
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	4413      	add	r3, r2
 80116fa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
}
 8011700:	4618      	mov	r0, r3
 8011702:	3714      	adds	r7, #20
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	681a      	ldr	r2, [r3, #0]
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	685a      	ldr	r2, [r3, #4]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011732:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011738:	431a      	orrs	r2, r3
                       Data->DPSM);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801173e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	4313      	orrs	r3, r2
 8011744:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801174a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	431a      	orrs	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011756:	2300      	movs	r3, #0

}
 8011758:	4618      	mov	r0, r3
 801175a:	3714      	adds	r7, #20
 801175c:	46bd      	mov	sp, r7
 801175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011762:	4770      	bx	lr

08011764 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b088      	sub	sp, #32
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011772:	2310      	movs	r3, #16
 8011774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011776:	f44f 7380 	mov.w	r3, #256	; 0x100
 801177a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801177c:	2300      	movs	r3, #0
 801177e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011786:	f107 0308 	add.w	r3, r7, #8
 801178a:	4619      	mov	r1, r3
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7ff ff73 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011792:	f241 3288 	movw	r2, #5000	; 0x1388
 8011796:	2110      	movs	r1, #16
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 fa7b 	bl	8011c94 <SDMMC_GetCmdResp1>
 801179e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117a0:	69fb      	ldr	r3, [r7, #28]
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	3720      	adds	r7, #32
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}

080117aa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80117aa:	b580      	push	{r7, lr}
 80117ac:	b088      	sub	sp, #32
 80117ae:	af00      	add	r7, sp, #0
 80117b0:	6078      	str	r0, [r7, #4]
 80117b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80117b8:	2311      	movs	r3, #17
 80117ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80117bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80117c2:	2300      	movs	r3, #0
 80117c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80117c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80117ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80117cc:	f107 0308 	add.w	r3, r7, #8
 80117d0:	4619      	mov	r1, r3
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7ff ff50 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80117d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80117dc:	2111      	movs	r1, #17
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f000 fa58 	bl	8011c94 <SDMMC_GetCmdResp1>
 80117e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80117e6:	69fb      	ldr	r3, [r7, #28]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3720      	adds	r7, #32
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80117fe:	2312      	movs	r3, #18
 8011800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011808:	2300      	movs	r3, #0
 801180a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801180c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011812:	f107 0308 	add.w	r3, r7, #8
 8011816:	4619      	mov	r1, r3
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f7ff ff2d 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011822:	2112      	movs	r1, #18
 8011824:	6878      	ldr	r0, [r7, #4]
 8011826:	f000 fa35 	bl	8011c94 <SDMMC_GetCmdResp1>
 801182a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801182c:	69fb      	ldr	r3, [r7, #28]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3720      	adds	r7, #32
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}

08011836 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011836:	b580      	push	{r7, lr}
 8011838:	b088      	sub	sp, #32
 801183a:	af00      	add	r7, sp, #0
 801183c:	6078      	str	r0, [r7, #4]
 801183e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011844:	2318      	movs	r3, #24
 8011846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011848:	f44f 7380 	mov.w	r3, #256	; 0x100
 801184c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801184e:	2300      	movs	r3, #0
 8011850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011856:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011858:	f107 0308 	add.w	r3, r7, #8
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f7ff ff0a 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011864:	f241 3288 	movw	r2, #5000	; 0x1388
 8011868:	2118      	movs	r1, #24
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 fa12 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011872:	69fb      	ldr	r3, [r7, #28]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3720      	adds	r7, #32
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b088      	sub	sp, #32
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801188a:	2319      	movs	r3, #25
 801188c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801188e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011894:	2300      	movs	r3, #0
 8011896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801189c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801189e:	f107 0308 	add.w	r3, r7, #8
 80118a2:	4619      	mov	r1, r3
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7ff fee7 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80118aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80118ae:	2119      	movs	r1, #25
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 f9ef 	bl	8011c94 <SDMMC_GetCmdResp1>
 80118b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80118b8:	69fb      	ldr	r3, [r7, #28]
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3720      	adds	r7, #32
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
	...

080118c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b088      	sub	sp, #32
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80118cc:	2300      	movs	r3, #0
 80118ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80118d0:	230c      	movs	r3, #12
 80118d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80118d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80118da:	2300      	movs	r3, #0
 80118dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80118de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118e2:	61bb      	str	r3, [r7, #24]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80118fc:	f107 0308 	add.w	r3, r7, #8
 8011900:	4619      	mov	r1, r3
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7ff feb8 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011908:	4a08      	ldr	r2, [pc, #32]	; (801192c <SDMMC_CmdStopTransfer+0x68>)
 801190a:	210c      	movs	r1, #12
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f000 f9c1 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011912:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	60da      	str	r2, [r3, #12]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8011920:	69fb      	ldr	r3, [r7, #28]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3720      	adds	r7, #32
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	05f5e100 	.word	0x05f5e100

08011930 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b08a      	sub	sp, #40	; 0x28
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011940:	2307      	movs	r3, #7
 8011942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011948:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801194a:	2300      	movs	r3, #0
 801194c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801194e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011952:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011954:	f107 0310 	add.w	r3, r7, #16
 8011958:	4619      	mov	r1, r3
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f7ff fe8c 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011960:	f241 3288 	movw	r2, #5000	; 0x1388
 8011964:	2107      	movs	r1, #7
 8011966:	68f8      	ldr	r0, [r7, #12]
 8011968:	f000 f994 	bl	8011c94 <SDMMC_GetCmdResp1>
 801196c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011970:	4618      	mov	r0, r3
 8011972:	3728      	adds	r7, #40	; 0x28
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b088      	sub	sp, #32
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011980:	2300      	movs	r3, #0
 8011982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011984:	2300      	movs	r3, #0
 8011986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011988:	2300      	movs	r3, #0
 801198a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801198c:	2300      	movs	r3, #0
 801198e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011996:	f107 0308 	add.w	r3, r7, #8
 801199a:	4619      	mov	r1, r3
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f7ff fe6b 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f000 fbb8 	bl	8012118 <SDMMC_GetCmdError>
 80119a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119aa:	69fb      	ldr	r3, [r7, #28]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3720      	adds	r7, #32
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}

080119b4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b088      	sub	sp, #32
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80119bc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80119c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80119c2:	2308      	movs	r3, #8
 80119c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119cc:	2300      	movs	r3, #0
 80119ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119d6:	f107 0308 	add.w	r3, r7, #8
 80119da:	4619      	mov	r1, r3
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff fe4b 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f000 fb4a 	bl	801207c <SDMMC_GetCmdResp7>
 80119e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119ea:	69fb      	ldr	r3, [r7, #28]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3720      	adds	r7, #32
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b088      	sub	sp, #32
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011a02:	2337      	movs	r3, #55	; 0x37
 8011a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a16:	f107 0308 	add.w	r3, r7, #8
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7ff fe2b 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a26:	2137      	movs	r1, #55	; 0x37
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f000 f933 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011a2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a30:	69fb      	ldr	r3, [r7, #28]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	3720      	adds	r7, #32
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b088      	sub	sp, #32
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
 8011a42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	60bb      	str	r3, [r7, #8]
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011a48:	2329      	movs	r3, #41	; 0x29
 8011a4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a52:	2300      	movs	r3, #0
 8011a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a5c:	f107 0308 	add.w	r3, r7, #8
 8011a60:	4619      	mov	r1, r3
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7ff fe08 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f000 fa4f 	bl	8011f0c <SDMMC_GetCmdResp3>
 8011a6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a70:	69fb      	ldr	r3, [r7, #28]
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3720      	adds	r7, #32
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b088      	sub	sp, #32
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
 8011a82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011a88:	2306      	movs	r3, #6
 8011a8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a92:	2300      	movs	r3, #0
 8011a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a9c:	f107 0308 	add.w	r3, r7, #8
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff fde8 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011aac:	2106      	movs	r1, #6
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 f8f0 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ab6:	69fb      	ldr	r3, [r7, #28]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3720      	adds	r7, #32
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b088      	sub	sp, #32
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011acc:	2333      	movs	r3, #51	; 0x33
 8011ace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ae0:	f107 0308 	add.w	r3, r7, #8
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff fdc6 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8011af0:	2133      	movs	r1, #51	; 0x33
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 f8ce 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011afa:	69fb      	ldr	r3, [r7, #28]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3720      	adds	r7, #32
 8011b00:	46bd      	mov	sp, r7
 8011b02:	bd80      	pop	{r7, pc}

08011b04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b088      	sub	sp, #32
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011b10:	2302      	movs	r3, #2
 8011b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011b14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b24:	f107 0308 	add.w	r3, r7, #8
 8011b28:	4619      	mov	r1, r3
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7ff fda4 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f000 f9a1 	bl	8011e78 <SDMMC_GetCmdResp2>
 8011b36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b38:	69fb      	ldr	r3, [r7, #28]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3720      	adds	r7, #32
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b088      	sub	sp, #32
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
 8011b4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011b50:	2309      	movs	r3, #9
 8011b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011b54:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011b58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b64:	f107 0308 	add.w	r3, r7, #8
 8011b68:	4619      	mov	r1, r3
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7ff fd84 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 f981 	bl	8011e78 <SDMMC_GetCmdResp2>
 8011b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b78:	69fb      	ldr	r3, [r7, #28]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3720      	adds	r7, #32
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b088      	sub	sp, #32
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
 8011b8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011b90:	2303      	movs	r3, #3
 8011b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ba4:	f107 0308 	add.w	r3, r7, #8
 8011ba8:	4619      	mov	r1, r3
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7ff fd64 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011bb0:	683a      	ldr	r2, [r7, #0]
 8011bb2:	2103      	movs	r1, #3
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f000 f9e9 	bl	8011f8c <SDMMC_GetCmdResp6>
 8011bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bbc:	69fb      	ldr	r3, [r7, #28]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3720      	adds	r7, #32
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b088      	sub	sp, #32
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011bd4:	230d      	movs	r3, #13
 8011bd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bde:	2300      	movs	r3, #0
 8011be0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011be6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011be8:	f107 0308 	add.w	r3, r7, #8
 8011bec:	4619      	mov	r1, r3
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f7ff fd42 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bf8:	210d      	movs	r1, #13
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f000 f84a 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c02:	69fb      	ldr	r3, [r7, #28]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3720      	adds	r7, #32
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b088      	sub	sp, #32
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011c14:	2300      	movs	r3, #0
 8011c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011c18:	230d      	movs	r3, #13
 8011c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c22:	2300      	movs	r3, #0
 8011c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c2c:	f107 0308 	add.w	r3, r7, #8
 8011c30:	4619      	mov	r1, r3
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7ff fd20 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c3c:	210d      	movs	r1, #13
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 f828 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c46:	69fb      	ldr	r3, [r7, #28]
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3720      	adds	r7, #32
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b088      	sub	sp, #32
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011c5c:	230b      	movs	r3, #11
 8011c5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c66:	2300      	movs	r3, #0
 8011c68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c70:	f107 0308 	add.w	r3, r7, #8
 8011c74:	4619      	mov	r1, r3
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f7ff fcfe 	bl	8011678 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c80:	210b      	movs	r1, #11
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f000 f806 	bl	8011c94 <SDMMC_GetCmdResp1>
 8011c88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c8a:	69fb      	ldr	r3, [r7, #28]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3720      	adds	r7, #32
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b088      	sub	sp, #32
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	607a      	str	r2, [r7, #4]
 8011ca0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011ca2:	4b70      	ldr	r3, [pc, #448]	; (8011e64 <SDMMC_GetCmdResp1+0x1d0>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4a70      	ldr	r2, [pc, #448]	; (8011e68 <SDMMC_GetCmdResp1+0x1d4>)
 8011ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8011cac:	0a5a      	lsrs	r2, r3, #9
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	fb02 f303 	mul.w	r3, r2, r3
 8011cb4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	1e5a      	subs	r2, r3, #1
 8011cba:	61fa      	str	r2, [r7, #28]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d102      	bne.n	8011cc6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011cc4:	e0c9      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cca:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011ccc:	69ba      	ldr	r2, [r7, #24]
 8011cce:	4b67      	ldr	r3, [pc, #412]	; (8011e6c <SDMMC_GetCmdResp1+0x1d8>)
 8011cd0:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d0ef      	beq.n	8011cb6 <SDMMC_GetCmdResp1+0x22>
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1ea      	bne.n	8011cb6 <SDMMC_GetCmdResp1+0x22>
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ce4:	f003 0304 	and.w	r3, r3, #4
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d004      	beq.n	8011cf6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2204      	movs	r2, #4
 8011cf0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011cf2:	2304      	movs	r3, #4
 8011cf4:	e0b1      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d004      	beq.n	8011d0c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2201      	movs	r2, #1
 8011d06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	e0a6      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	4a58      	ldr	r2, [pc, #352]	; (8011e70 <SDMMC_GetCmdResp1+0x1dc>)
 8011d10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f7ff fcda 	bl	80116cc <SDMMC_GetCommandResponse>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	7afb      	ldrb	r3, [r7, #11]
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d001      	beq.n	8011d26 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011d22:	2301      	movs	r3, #1
 8011d24:	e099      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011d26:	2100      	movs	r1, #0
 8011d28:	68f8      	ldr	r0, [r7, #12]
 8011d2a:	f7ff fcdc 	bl	80116e6 <SDMMC_GetResponse>
 8011d2e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011d30:	697a      	ldr	r2, [r7, #20]
 8011d32:	4b50      	ldr	r3, [pc, #320]	; (8011e74 <SDMMC_GetCmdResp1+0x1e0>)
 8011d34:	4013      	ands	r3, r2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e08d      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	da02      	bge.n	8011d4a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011d48:	e087      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011d54:	2340      	movs	r3, #64	; 0x40
 8011d56:	e080      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d001      	beq.n	8011d66 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011d62:	2380      	movs	r3, #128	; 0x80
 8011d64:	e079      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d002      	beq.n	8011d76 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d74:	e071      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d002      	beq.n	8011d86 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d84:	e069      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d002      	beq.n	8011d96 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d94:	e061      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011da4:	e059      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d002      	beq.n	8011db6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011db4:	e051      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d002      	beq.n	8011dc6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011dc4:	e049      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d002      	beq.n	8011dd6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011dd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011dd4:	e041      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d002      	beq.n	8011de6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011de4:	e039      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d002      	beq.n	8011df6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011df4:	e031      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011e00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011e04:	e029      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d002      	beq.n	8011e16 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011e10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011e14:	e021      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d002      	beq.n	8011e26 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011e20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011e24:	e019      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011e26:	697b      	ldr	r3, [r7, #20]
 8011e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011e34:	e011      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d002      	beq.n	8011e46 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011e40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011e44:	e009      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	f003 0308 	and.w	r3, r3, #8
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d002      	beq.n	8011e56 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011e50:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011e54:	e001      	b.n	8011e5a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	3720      	adds	r7, #32
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	bf00      	nop
 8011e64:	20000010 	.word	0x20000010
 8011e68:	10624dd3 	.word	0x10624dd3
 8011e6c:	00200045 	.word	0x00200045
 8011e70:	002000c5 	.word	0x002000c5
 8011e74:	fdffe008 	.word	0xfdffe008

08011e78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011e80:	4b1f      	ldr	r3, [pc, #124]	; (8011f00 <SDMMC_GetCmdResp2+0x88>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a1f      	ldr	r2, [pc, #124]	; (8011f04 <SDMMC_GetCmdResp2+0x8c>)
 8011e86:	fba2 2303 	umull	r2, r3, r2, r3
 8011e8a:	0a5b      	lsrs	r3, r3, #9
 8011e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e90:	fb02 f303 	mul.w	r3, r2, r3
 8011e94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	1e5a      	subs	r2, r3, #1
 8011e9a:	60fa      	str	r2, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d102      	bne.n	8011ea6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ea0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ea4:	e026      	b.n	8011ef4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011eac:	68bb      	ldr	r3, [r7, #8]
 8011eae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d0ef      	beq.n	8011e96 <SDMMC_GetCmdResp2+0x1e>
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1ea      	bne.n	8011e96 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ec4:	f003 0304 	and.w	r3, r3, #4
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d004      	beq.n	8011ed6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2204      	movs	r2, #4
 8011ed0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ed2:	2304      	movs	r3, #4
 8011ed4:	e00e      	b.n	8011ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eda:	f003 0301 	and.w	r3, r3, #1
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d004      	beq.n	8011eec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e003      	b.n	8011ef4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	4a06      	ldr	r2, [pc, #24]	; (8011f08 <SDMMC_GetCmdResp2+0x90>)
 8011ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011ef2:	2300      	movs	r3, #0
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3714      	adds	r7, #20
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr
 8011f00:	20000010 	.word	0x20000010
 8011f04:	10624dd3 	.word	0x10624dd3
 8011f08:	002000c5 	.word	0x002000c5

08011f0c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f14:	4b1a      	ldr	r3, [pc, #104]	; (8011f80 <SDMMC_GetCmdResp3+0x74>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a1a      	ldr	r2, [pc, #104]	; (8011f84 <SDMMC_GetCmdResp3+0x78>)
 8011f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f1e:	0a5b      	lsrs	r3, r3, #9
 8011f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f24:	fb02 f303 	mul.w	r3, r2, r3
 8011f28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	1e5a      	subs	r2, r3, #1
 8011f2e:	60fa      	str	r2, [r7, #12]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d102      	bne.n	8011f3a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f38:	e01b      	b.n	8011f72 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0ef      	beq.n	8011f2a <SDMMC_GetCmdResp3+0x1e>
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d1ea      	bne.n	8011f2a <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f58:	f003 0304 	and.w	r3, r3, #4
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d004      	beq.n	8011f6a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2204      	movs	r2, #4
 8011f64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011f66:	2304      	movs	r3, #4
 8011f68:	e003      	b.n	8011f72 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	4a06      	ldr	r2, [pc, #24]	; (8011f88 <SDMMC_GetCmdResp3+0x7c>)
 8011f6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	20000010 	.word	0x20000010
 8011f84:	10624dd3 	.word	0x10624dd3
 8011f88:	002000c5 	.word	0x002000c5

08011f8c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b088      	sub	sp, #32
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	460b      	mov	r3, r1
 8011f96:	607a      	str	r2, [r7, #4]
 8011f98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f9a:	4b35      	ldr	r3, [pc, #212]	; (8012070 <SDMMC_GetCmdResp6+0xe4>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	4a35      	ldr	r2, [pc, #212]	; (8012074 <SDMMC_GetCmdResp6+0xe8>)
 8011fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8011fa4:	0a5b      	lsrs	r3, r3, #9
 8011fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011faa:	fb02 f303 	mul.w	r3, r2, r3
 8011fae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	1e5a      	subs	r2, r3, #1
 8011fb4:	61fa      	str	r2, [r7, #28]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d102      	bne.n	8011fc0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011fba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011fbe:	e052      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011fc6:	69bb      	ldr	r3, [r7, #24]
 8011fc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d0ef      	beq.n	8011fb0 <SDMMC_GetCmdResp6+0x24>
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1ea      	bne.n	8011fb0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fde:	f003 0304 	and.w	r3, r3, #4
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d004      	beq.n	8011ff0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	2204      	movs	r2, #4
 8011fea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fec:	2304      	movs	r3, #4
 8011fee:	e03a      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ff4:	f003 0301 	and.w	r3, r3, #1
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d004      	beq.n	8012006 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2201      	movs	r2, #1
 8012000:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012002:	2301      	movs	r3, #1
 8012004:	e02f      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012006:	68f8      	ldr	r0, [r7, #12]
 8012008:	f7ff fb60 	bl	80116cc <SDMMC_GetCommandResponse>
 801200c:	4603      	mov	r3, r0
 801200e:	461a      	mov	r2, r3
 8012010:	7afb      	ldrb	r3, [r7, #11]
 8012012:	4293      	cmp	r3, r2
 8012014:	d001      	beq.n	801201a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012016:	2301      	movs	r3, #1
 8012018:	e025      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	4a16      	ldr	r2, [pc, #88]	; (8012078 <SDMMC_GetCmdResp6+0xec>)
 801201e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012020:	2100      	movs	r1, #0
 8012022:	68f8      	ldr	r0, [r7, #12]
 8012024:	f7ff fb5f 	bl	80116e6 <SDMMC_GetResponse>
 8012028:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012030:	2b00      	cmp	r3, #0
 8012032:	d106      	bne.n	8012042 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	0c1b      	lsrs	r3, r3, #16
 8012038:	b29a      	uxth	r2, r3
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801203e:	2300      	movs	r3, #0
 8012040:	e011      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801204c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012050:	e009      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012060:	e001      	b.n	8012066 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012066:	4618      	mov	r0, r3
 8012068:	3720      	adds	r7, #32
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	20000010 	.word	0x20000010
 8012074:	10624dd3 	.word	0x10624dd3
 8012078:	002000c5 	.word	0x002000c5

0801207c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012084:	4b22      	ldr	r3, [pc, #136]	; (8012110 <SDMMC_GetCmdResp7+0x94>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a22      	ldr	r2, [pc, #136]	; (8012114 <SDMMC_GetCmdResp7+0x98>)
 801208a:	fba2 2303 	umull	r2, r3, r2, r3
 801208e:	0a5b      	lsrs	r3, r3, #9
 8012090:	f241 3288 	movw	r2, #5000	; 0x1388
 8012094:	fb02 f303 	mul.w	r3, r2, r3
 8012098:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	1e5a      	subs	r2, r3, #1
 801209e:	60fa      	str	r2, [r7, #12]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d102      	bne.n	80120aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80120a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80120a8:	e02c      	b.n	8012104 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d0ef      	beq.n	801209a <SDMMC_GetCmdResp7+0x1e>
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1ea      	bne.n	801209a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120c8:	f003 0304 	and.w	r3, r3, #4
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d004      	beq.n	80120da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2204      	movs	r2, #4
 80120d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80120d6:	2304      	movs	r3, #4
 80120d8:	e014      	b.n	8012104 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120de:	f003 0301 	and.w	r3, r3, #1
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d004      	beq.n	80120f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2201      	movs	r2, #1
 80120ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80120ec:	2301      	movs	r3, #1
 80120ee:	e009      	b.n	8012104 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2240      	movs	r2, #64	; 0x40
 8012100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012102:	2300      	movs	r3, #0

}
 8012104:	4618      	mov	r0, r3
 8012106:	3714      	adds	r7, #20
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	20000010 	.word	0x20000010
 8012114:	10624dd3 	.word	0x10624dd3

08012118 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012120:	4b11      	ldr	r3, [pc, #68]	; (8012168 <SDMMC_GetCmdError+0x50>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	4a11      	ldr	r2, [pc, #68]	; (801216c <SDMMC_GetCmdError+0x54>)
 8012126:	fba2 2303 	umull	r2, r3, r2, r3
 801212a:	0a5b      	lsrs	r3, r3, #9
 801212c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012130:	fb02 f303 	mul.w	r3, r2, r3
 8012134:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	1e5a      	subs	r2, r3, #1
 801213a:	60fa      	str	r2, [r7, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d102      	bne.n	8012146 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012144:	e009      	b.n	801215a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0f1      	beq.n	8012136 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	4a06      	ldr	r2, [pc, #24]	; (8012170 <SDMMC_GetCmdError+0x58>)
 8012156:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012158:	2300      	movs	r3, #0
}
 801215a:	4618      	mov	r0, r3
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	20000010 	.word	0x20000010
 801216c:	10624dd3 	.word	0x10624dd3
 8012170:	002000c5 	.word	0x002000c5

08012174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012174:	b084      	sub	sp, #16
 8012176:	b580      	push	{r7, lr}
 8012178:	b084      	sub	sp, #16
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
 801217e:	f107 001c 	add.w	r0, r7, #28
 8012182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f001 faf6 	bl	8013784 <USB_CoreReset>
 8012198:	4603      	mov	r3, r0
 801219a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 801219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	639a      	str	r2, [r3, #56]	; 0x38
 80121ae:	e005      	b.n	80121bc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80121bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3710      	adds	r7, #16
 80121c2:	46bd      	mov	sp, r7
 80121c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121c8:	b004      	add	sp, #16
 80121ca:	4770      	bx	lr

080121cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b087      	sub	sp, #28
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	4613      	mov	r3, r2
 80121d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80121da:	79fb      	ldrb	r3, [r7, #7]
 80121dc:	2b02      	cmp	r3, #2
 80121de:	d165      	bne.n	80122ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	4a3e      	ldr	r2, [pc, #248]	; (80122dc <USB_SetTurnaroundTime+0x110>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d906      	bls.n	80121f6 <USB_SetTurnaroundTime+0x2a>
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	4a3d      	ldr	r2, [pc, #244]	; (80122e0 <USB_SetTurnaroundTime+0x114>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d202      	bcs.n	80121f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80121f0:	230f      	movs	r3, #15
 80121f2:	617b      	str	r3, [r7, #20]
 80121f4:	e05c      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	4a39      	ldr	r2, [pc, #228]	; (80122e0 <USB_SetTurnaroundTime+0x114>)
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d306      	bcc.n	801220c <USB_SetTurnaroundTime+0x40>
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	4a38      	ldr	r2, [pc, #224]	; (80122e4 <USB_SetTurnaroundTime+0x118>)
 8012202:	4293      	cmp	r3, r2
 8012204:	d202      	bcs.n	801220c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012206:	230e      	movs	r3, #14
 8012208:	617b      	str	r3, [r7, #20]
 801220a:	e051      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	4a35      	ldr	r2, [pc, #212]	; (80122e4 <USB_SetTurnaroundTime+0x118>)
 8012210:	4293      	cmp	r3, r2
 8012212:	d306      	bcc.n	8012222 <USB_SetTurnaroundTime+0x56>
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	4a34      	ldr	r2, [pc, #208]	; (80122e8 <USB_SetTurnaroundTime+0x11c>)
 8012218:	4293      	cmp	r3, r2
 801221a:	d202      	bcs.n	8012222 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801221c:	230d      	movs	r3, #13
 801221e:	617b      	str	r3, [r7, #20]
 8012220:	e046      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	4a30      	ldr	r2, [pc, #192]	; (80122e8 <USB_SetTurnaroundTime+0x11c>)
 8012226:	4293      	cmp	r3, r2
 8012228:	d306      	bcc.n	8012238 <USB_SetTurnaroundTime+0x6c>
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	4a2f      	ldr	r2, [pc, #188]	; (80122ec <USB_SetTurnaroundTime+0x120>)
 801222e:	4293      	cmp	r3, r2
 8012230:	d802      	bhi.n	8012238 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012232:	230c      	movs	r3, #12
 8012234:	617b      	str	r3, [r7, #20]
 8012236:	e03b      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	4a2c      	ldr	r2, [pc, #176]	; (80122ec <USB_SetTurnaroundTime+0x120>)
 801223c:	4293      	cmp	r3, r2
 801223e:	d906      	bls.n	801224e <USB_SetTurnaroundTime+0x82>
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	4a2b      	ldr	r2, [pc, #172]	; (80122f0 <USB_SetTurnaroundTime+0x124>)
 8012244:	4293      	cmp	r3, r2
 8012246:	d802      	bhi.n	801224e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012248:	230b      	movs	r3, #11
 801224a:	617b      	str	r3, [r7, #20]
 801224c:	e030      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	4a27      	ldr	r2, [pc, #156]	; (80122f0 <USB_SetTurnaroundTime+0x124>)
 8012252:	4293      	cmp	r3, r2
 8012254:	d906      	bls.n	8012264 <USB_SetTurnaroundTime+0x98>
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	4a26      	ldr	r2, [pc, #152]	; (80122f4 <USB_SetTurnaroundTime+0x128>)
 801225a:	4293      	cmp	r3, r2
 801225c:	d802      	bhi.n	8012264 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801225e:	230a      	movs	r3, #10
 8012260:	617b      	str	r3, [r7, #20]
 8012262:	e025      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	4a23      	ldr	r2, [pc, #140]	; (80122f4 <USB_SetTurnaroundTime+0x128>)
 8012268:	4293      	cmp	r3, r2
 801226a:	d906      	bls.n	801227a <USB_SetTurnaroundTime+0xae>
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	4a22      	ldr	r2, [pc, #136]	; (80122f8 <USB_SetTurnaroundTime+0x12c>)
 8012270:	4293      	cmp	r3, r2
 8012272:	d202      	bcs.n	801227a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012274:	2309      	movs	r3, #9
 8012276:	617b      	str	r3, [r7, #20]
 8012278:	e01a      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	4a1e      	ldr	r2, [pc, #120]	; (80122f8 <USB_SetTurnaroundTime+0x12c>)
 801227e:	4293      	cmp	r3, r2
 8012280:	d306      	bcc.n	8012290 <USB_SetTurnaroundTime+0xc4>
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	4a1d      	ldr	r2, [pc, #116]	; (80122fc <USB_SetTurnaroundTime+0x130>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d802      	bhi.n	8012290 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801228a:	2308      	movs	r3, #8
 801228c:	617b      	str	r3, [r7, #20]
 801228e:	e00f      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	4a1a      	ldr	r2, [pc, #104]	; (80122fc <USB_SetTurnaroundTime+0x130>)
 8012294:	4293      	cmp	r3, r2
 8012296:	d906      	bls.n	80122a6 <USB_SetTurnaroundTime+0xda>
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	4a19      	ldr	r2, [pc, #100]	; (8012300 <USB_SetTurnaroundTime+0x134>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d202      	bcs.n	80122a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80122a0:	2307      	movs	r3, #7
 80122a2:	617b      	str	r3, [r7, #20]
 80122a4:	e004      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80122a6:	2306      	movs	r3, #6
 80122a8:	617b      	str	r3, [r7, #20]
 80122aa:	e001      	b.n	80122b0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80122ac:	2309      	movs	r3, #9
 80122ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	68db      	ldr	r3, [r3, #12]
 80122b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	68da      	ldr	r2, [r3, #12]
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	029b      	lsls	r3, r3, #10
 80122c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80122c8:	431a      	orrs	r2, r3
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	371c      	adds	r7, #28
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	00d8acbf 	.word	0x00d8acbf
 80122e0:	00e4e1c0 	.word	0x00e4e1c0
 80122e4:	00f42400 	.word	0x00f42400
 80122e8:	01067380 	.word	0x01067380
 80122ec:	011a499f 	.word	0x011a499f
 80122f0:	01312cff 	.word	0x01312cff
 80122f4:	014ca43f 	.word	0x014ca43f
 80122f8:	016e3600 	.word	0x016e3600
 80122fc:	01a6ab1f 	.word	0x01a6ab1f
 8012300:	01e84800 	.word	0x01e84800

08012304 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	689b      	ldr	r3, [r3, #8]
 8012310:	f043 0201 	orr.w	r2, r3, #1
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012318:	2300      	movs	r3, #0
}
 801231a:	4618      	mov	r0, r3
 801231c:	370c      	adds	r7, #12
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr

08012326 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012326:	b480      	push	{r7}
 8012328:	b083      	sub	sp, #12
 801232a:	af00      	add	r7, sp, #0
 801232c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	f023 0201 	bic.w	r2, r3, #1
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801233a:	2300      	movs	r3, #0
}
 801233c:	4618      	mov	r0, r3
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012354:	2300      	movs	r3, #0
 8012356:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d115      	bne.n	8012396 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	68db      	ldr	r3, [r3, #12]
 801236e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012376:	2001      	movs	r0, #1
 8012378:	f7f4 fb60 	bl	8006a3c <HAL_Delay>
      ms++;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	3301      	adds	r3, #1
 8012380:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012382:	6878      	ldr	r0, [r7, #4]
 8012384:	f001 f985 	bl	8013692 <USB_GetMode>
 8012388:	4603      	mov	r3, r0
 801238a:	2b01      	cmp	r3, #1
 801238c:	d01e      	beq.n	80123cc <USB_SetCurrentMode+0x84>
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b31      	cmp	r3, #49	; 0x31
 8012392:	d9f0      	bls.n	8012376 <USB_SetCurrentMode+0x2e>
 8012394:	e01a      	b.n	80123cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012396:	78fb      	ldrb	r3, [r7, #3]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d115      	bne.n	80123c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80123a8:	2001      	movs	r0, #1
 80123aa:	f7f4 fb47 	bl	8006a3c <HAL_Delay>
      ms++;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	3301      	adds	r3, #1
 80123b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f001 f96c 	bl	8013692 <USB_GetMode>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d005      	beq.n	80123cc <USB_SetCurrentMode+0x84>
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b31      	cmp	r3, #49	; 0x31
 80123c4:	d9f0      	bls.n	80123a8 <USB_SetCurrentMode+0x60>
 80123c6:	e001      	b.n	80123cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80123c8:	2301      	movs	r3, #1
 80123ca:	e005      	b.n	80123d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	2b32      	cmp	r3, #50	; 0x32
 80123d0:	d101      	bne.n	80123d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80123d2:	2301      	movs	r3, #1
 80123d4:	e000      	b.n	80123d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80123e0:	b084      	sub	sp, #16
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b086      	sub	sp, #24
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80123ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80123f2:	2300      	movs	r3, #0
 80123f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80123fa:	2300      	movs	r3, #0
 80123fc:	613b      	str	r3, [r7, #16]
 80123fe:	e009      	b.n	8012414 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	3340      	adds	r3, #64	; 0x40
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
 801240a:	2200      	movs	r2, #0
 801240c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	3301      	adds	r3, #1
 8012412:	613b      	str	r3, [r7, #16]
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	2b0e      	cmp	r3, #14
 8012418:	d9f2      	bls.n	8012400 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801241c:	2b00      	cmp	r3, #0
 801241e:	d11c      	bne.n	801245a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	68fa      	ldr	r2, [r7, #12]
 801242a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801242e:	f043 0302 	orr.w	r3, r3, #2
 8012432:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012438:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	601a      	str	r2, [r3, #0]
 8012458:	e005      	b.n	8012466 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801245e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801246c:	461a      	mov	r2, r3
 801246e:	2300      	movs	r3, #0
 8012470:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012478:	4619      	mov	r1, r3
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012480:	461a      	mov	r2, r3
 8012482:	680b      	ldr	r3, [r1, #0]
 8012484:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012486:	2103      	movs	r1, #3
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 f959 	bl	8012740 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801248e:	2110      	movs	r1, #16
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f000 f8f1 	bl	8012678 <USB_FlushTxFifo>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d001      	beq.n	80124a0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f000 f91d 	bl	80126e0 <USB_FlushRxFifo>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80124ac:	2301      	movs	r3, #1
 80124ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124b6:	461a      	mov	r2, r3
 80124b8:	2300      	movs	r3, #0
 80124ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124c2:	461a      	mov	r2, r3
 80124c4:	2300      	movs	r3, #0
 80124c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124ce:	461a      	mov	r2, r3
 80124d0:	2300      	movs	r3, #0
 80124d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80124d4:	2300      	movs	r3, #0
 80124d6:	613b      	str	r3, [r7, #16]
 80124d8:	e043      	b.n	8012562 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	015a      	lsls	r2, r3, #5
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	4413      	add	r3, r2
 80124e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80124ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80124f0:	d118      	bne.n	8012524 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10a      	bne.n	801250e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	015a      	lsls	r2, r3, #5
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	4413      	add	r3, r2
 8012500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012504:	461a      	mov	r2, r3
 8012506:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801250a:	6013      	str	r3, [r2, #0]
 801250c:	e013      	b.n	8012536 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	015a      	lsls	r2, r3, #5
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	4413      	add	r3, r2
 8012516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251a:	461a      	mov	r2, r3
 801251c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012520:	6013      	str	r3, [r2, #0]
 8012522:	e008      	b.n	8012536 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	015a      	lsls	r2, r3, #5
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	4413      	add	r3, r2
 801252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012530:	461a      	mov	r2, r3
 8012532:	2300      	movs	r3, #0
 8012534:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	015a      	lsls	r2, r3, #5
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	4413      	add	r3, r2
 801253e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012542:	461a      	mov	r2, r3
 8012544:	2300      	movs	r3, #0
 8012546:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	015a      	lsls	r2, r3, #5
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	4413      	add	r3, r2
 8012550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012554:	461a      	mov	r2, r3
 8012556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801255a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	3301      	adds	r3, #1
 8012560:	613b      	str	r3, [r7, #16]
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	693a      	ldr	r2, [r7, #16]
 8012566:	429a      	cmp	r2, r3
 8012568:	d3b7      	bcc.n	80124da <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801256a:	2300      	movs	r3, #0
 801256c:	613b      	str	r3, [r7, #16]
 801256e:	e043      	b.n	80125f8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	015a      	lsls	r2, r3, #5
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	4413      	add	r3, r2
 8012578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012586:	d118      	bne.n	80125ba <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d10a      	bne.n	80125a4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	015a      	lsls	r2, r3, #5
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	4413      	add	r3, r2
 8012596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801259a:	461a      	mov	r2, r3
 801259c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80125a0:	6013      	str	r3, [r2, #0]
 80125a2:	e013      	b.n	80125cc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	015a      	lsls	r2, r3, #5
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	4413      	add	r3, r2
 80125ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125b0:	461a      	mov	r2, r3
 80125b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80125b6:	6013      	str	r3, [r2, #0]
 80125b8:	e008      	b.n	80125cc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	015a      	lsls	r2, r3, #5
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	4413      	add	r3, r2
 80125c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125c6:	461a      	mov	r2, r3
 80125c8:	2300      	movs	r3, #0
 80125ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	015a      	lsls	r2, r3, #5
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	4413      	add	r3, r2
 80125d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125d8:	461a      	mov	r2, r3
 80125da:	2300      	movs	r3, #0
 80125dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	015a      	lsls	r2, r3, #5
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	4413      	add	r3, r2
 80125e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125ea:	461a      	mov	r2, r3
 80125ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80125f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	3301      	adds	r3, #1
 80125f6:	613b      	str	r3, [r7, #16]
 80125f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fa:	693a      	ldr	r2, [r7, #16]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d3b7      	bcc.n	8012570 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012606:	691b      	ldr	r3, [r3, #16]
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801260e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012612:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012620:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	699b      	ldr	r3, [r3, #24]
 8012626:	f043 0210 	orr.w	r2, r3, #16
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	699a      	ldr	r2, [r3, #24]
 8012632:	4b10      	ldr	r3, [pc, #64]	; (8012674 <USB_DevInit+0x294>)
 8012634:	4313      	orrs	r3, r2
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801263c:	2b00      	cmp	r3, #0
 801263e:	d005      	beq.n	801264c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	f043 0208 	orr.w	r2, r3, #8
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801264e:	2b01      	cmp	r3, #1
 8012650:	d107      	bne.n	8012662 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	699b      	ldr	r3, [r3, #24]
 8012656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801265a:	f043 0304 	orr.w	r3, r3, #4
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012662:	7dfb      	ldrb	r3, [r7, #23]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3718      	adds	r7, #24
 8012668:	46bd      	mov	sp, r7
 801266a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801266e:	b004      	add	sp, #16
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	803c3800 	.word	0x803c3800

08012678 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012678:	b480      	push	{r7}
 801267a:	b085      	sub	sp, #20
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
 8012680:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012682:	2300      	movs	r3, #0
 8012684:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	3301      	adds	r3, #1
 801268a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	4a13      	ldr	r2, [pc, #76]	; (80126dc <USB_FlushTxFifo+0x64>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d901      	bls.n	8012698 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012694:	2303      	movs	r3, #3
 8012696:	e01b      	b.n	80126d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	691b      	ldr	r3, [r3, #16]
 801269c:	2b00      	cmp	r3, #0
 801269e:	daf2      	bge.n	8012686 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80126a0:	2300      	movs	r3, #0
 80126a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	019b      	lsls	r3, r3, #6
 80126a8:	f043 0220 	orr.w	r2, r3, #32
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3301      	adds	r3, #1
 80126b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	4a08      	ldr	r2, [pc, #32]	; (80126dc <USB_FlushTxFifo+0x64>)
 80126ba:	4293      	cmp	r3, r2
 80126bc:	d901      	bls.n	80126c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80126be:	2303      	movs	r3, #3
 80126c0:	e006      	b.n	80126d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	691b      	ldr	r3, [r3, #16]
 80126c6:	f003 0320 	and.w	r3, r3, #32
 80126ca:	2b20      	cmp	r3, #32
 80126cc:	d0f0      	beq.n	80126b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80126ce:	2300      	movs	r3, #0
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3714      	adds	r7, #20
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr
 80126dc:	00030d40 	.word	0x00030d40

080126e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80126e0:	b480      	push	{r7}
 80126e2:	b085      	sub	sp, #20
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80126e8:	2300      	movs	r3, #0
 80126ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	3301      	adds	r3, #1
 80126f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	4a11      	ldr	r2, [pc, #68]	; (801273c <USB_FlushRxFifo+0x5c>)
 80126f6:	4293      	cmp	r3, r2
 80126f8:	d901      	bls.n	80126fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80126fa:	2303      	movs	r3, #3
 80126fc:	e018      	b.n	8012730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	691b      	ldr	r3, [r3, #16]
 8012702:	2b00      	cmp	r3, #0
 8012704:	daf2      	bge.n	80126ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012706:	2300      	movs	r3, #0
 8012708:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2210      	movs	r2, #16
 801270e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	3301      	adds	r3, #1
 8012714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	4a08      	ldr	r2, [pc, #32]	; (801273c <USB_FlushRxFifo+0x5c>)
 801271a:	4293      	cmp	r3, r2
 801271c:	d901      	bls.n	8012722 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801271e:	2303      	movs	r3, #3
 8012720:	e006      	b.n	8012730 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	691b      	ldr	r3, [r3, #16]
 8012726:	f003 0310 	and.w	r3, r3, #16
 801272a:	2b10      	cmp	r3, #16
 801272c:	d0f0      	beq.n	8012710 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3714      	adds	r7, #20
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr
 801273c:	00030d40 	.word	0x00030d40

08012740 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	460b      	mov	r3, r1
 801274a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	78fb      	ldrb	r3, [r7, #3]
 801275a:	68f9      	ldr	r1, [r7, #12]
 801275c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012760:	4313      	orrs	r3, r2
 8012762:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3714      	adds	r7, #20
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012772:	b480      	push	{r7}
 8012774:	b087      	sub	sp, #28
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	f003 0306 	and.w	r3, r3, #6
 801278a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2b02      	cmp	r3, #2
 8012790:	d002      	beq.n	8012798 <USB_GetDevSpeed+0x26>
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2b06      	cmp	r3, #6
 8012796:	d102      	bne.n	801279e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012798:	2302      	movs	r3, #2
 801279a:	75fb      	strb	r3, [r7, #23]
 801279c:	e001      	b.n	80127a2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801279e:	230f      	movs	r3, #15
 80127a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	371c      	adds	r7, #28
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	785b      	ldrb	r3, [r3, #1]
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d13a      	bne.n	8012842 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127d2:	69da      	ldr	r2, [r3, #28]
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	781b      	ldrb	r3, [r3, #0]
 80127d8:	f003 030f 	and.w	r3, r3, #15
 80127dc:	2101      	movs	r1, #1
 80127de:	fa01 f303 	lsl.w	r3, r1, r3
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	68f9      	ldr	r1, [r7, #12]
 80127e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80127ea:	4313      	orrs	r3, r2
 80127ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	015a      	lsls	r2, r3, #5
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	4413      	add	r3, r2
 80127f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012800:	2b00      	cmp	r3, #0
 8012802:	d155      	bne.n	80128b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	015a      	lsls	r2, r3, #5
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	4413      	add	r3, r2
 801280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	791b      	ldrb	r3, [r3, #4]
 801281e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012820:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	059b      	lsls	r3, r3, #22
 8012826:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012828:	4313      	orrs	r3, r2
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	0151      	lsls	r1, r2, #5
 801282e:	68fa      	ldr	r2, [r7, #12]
 8012830:	440a      	add	r2, r1
 8012832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801283a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801283e:	6013      	str	r3, [r2, #0]
 8012840:	e036      	b.n	80128b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012848:	69da      	ldr	r2, [r3, #28]
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	f003 030f 	and.w	r3, r3, #15
 8012852:	2101      	movs	r1, #1
 8012854:	fa01 f303 	lsl.w	r3, r1, r3
 8012858:	041b      	lsls	r3, r3, #16
 801285a:	68f9      	ldr	r1, [r7, #12]
 801285c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012860:	4313      	orrs	r3, r2
 8012862:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	015a      	lsls	r2, r3, #5
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	4413      	add	r3, r2
 801286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012876:	2b00      	cmp	r3, #0
 8012878:	d11a      	bne.n	80128b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	015a      	lsls	r2, r3, #5
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	4413      	add	r3, r2
 8012882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	791b      	ldrb	r3, [r3, #4]
 8012894:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012896:	430b      	orrs	r3, r1
 8012898:	4313      	orrs	r3, r2
 801289a:	68ba      	ldr	r2, [r7, #8]
 801289c:	0151      	lsls	r1, r2, #5
 801289e:	68fa      	ldr	r2, [r7, #12]
 80128a0:	440a      	add	r2, r1
 80128a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3714      	adds	r7, #20
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr
	...

080128c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
 80128c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	785b      	ldrb	r3, [r3, #1]
 80128d8:	2b01      	cmp	r3, #1
 80128da:	d161      	bne.n	80129a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	015a      	lsls	r2, r3, #5
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	4413      	add	r3, r2
 80128e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80128ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80128f2:	d11f      	bne.n	8012934 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	015a      	lsls	r2, r3, #5
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	4413      	add	r3, r2
 80128fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	68ba      	ldr	r2, [r7, #8]
 8012904:	0151      	lsls	r1, r2, #5
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	440a      	add	r2, r1
 801290a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801290e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012912:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	015a      	lsls	r2, r3, #5
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	4413      	add	r3, r2
 801291c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	68ba      	ldr	r2, [r7, #8]
 8012924:	0151      	lsls	r1, r2, #5
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	440a      	add	r2, r1
 801292a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801292e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012932:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801293a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 030f 	and.w	r3, r3, #15
 8012944:	2101      	movs	r1, #1
 8012946:	fa01 f303 	lsl.w	r3, r1, r3
 801294a:	b29b      	uxth	r3, r3
 801294c:	43db      	mvns	r3, r3
 801294e:	68f9      	ldr	r1, [r7, #12]
 8012950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012954:	4013      	ands	r3, r2
 8012956:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801295e:	69da      	ldr	r2, [r3, #28]
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	f003 030f 	and.w	r3, r3, #15
 8012968:	2101      	movs	r1, #1
 801296a:	fa01 f303 	lsl.w	r3, r1, r3
 801296e:	b29b      	uxth	r3, r3
 8012970:	43db      	mvns	r3, r3
 8012972:	68f9      	ldr	r1, [r7, #12]
 8012974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012978:	4013      	ands	r3, r2
 801297a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	015a      	lsls	r2, r3, #5
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	4413      	add	r3, r2
 8012984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	0159      	lsls	r1, r3, #5
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	440b      	add	r3, r1
 8012992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012996:	4619      	mov	r1, r3
 8012998:	4b35      	ldr	r3, [pc, #212]	; (8012a70 <USB_DeactivateEndpoint+0x1b0>)
 801299a:	4013      	ands	r3, r2
 801299c:	600b      	str	r3, [r1, #0]
 801299e:	e060      	b.n	8012a62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	015a      	lsls	r2, r3, #5
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	4413      	add	r3, r2
 80129a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80129b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80129b6:	d11f      	bne.n	80129f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	015a      	lsls	r2, r3, #5
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	4413      	add	r3, r2
 80129c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	68ba      	ldr	r2, [r7, #8]
 80129c8:	0151      	lsls	r1, r2, #5
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	440a      	add	r2, r1
 80129ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80129d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	015a      	lsls	r2, r3, #5
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	68ba      	ldr	r2, [r7, #8]
 80129e8:	0151      	lsls	r1, r2, #5
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	440a      	add	r2, r1
 80129ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80129f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	f003 030f 	and.w	r3, r3, #15
 8012a08:	2101      	movs	r1, #1
 8012a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8012a0e:	041b      	lsls	r3, r3, #16
 8012a10:	43db      	mvns	r3, r3
 8012a12:	68f9      	ldr	r1, [r7, #12]
 8012a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a18:	4013      	ands	r3, r2
 8012a1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a22:	69da      	ldr	r2, [r3, #28]
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	f003 030f 	and.w	r3, r3, #15
 8012a2c:	2101      	movs	r1, #1
 8012a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8012a32:	041b      	lsls	r3, r3, #16
 8012a34:	43db      	mvns	r3, r3
 8012a36:	68f9      	ldr	r1, [r7, #12]
 8012a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a3c:	4013      	ands	r3, r2
 8012a3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	015a      	lsls	r2, r3, #5
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	4413      	add	r3, r2
 8012a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	0159      	lsls	r1, r3, #5
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	440b      	add	r3, r1
 8012a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	4b05      	ldr	r3, [pc, #20]	; (8012a74 <USB_DeactivateEndpoint+0x1b4>)
 8012a5e:	4013      	ands	r3, r2
 8012a60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012a62:	2300      	movs	r3, #0
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3714      	adds	r7, #20
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr
 8012a70:	ec337800 	.word	0xec337800
 8012a74:	eff37800 	.word	0xeff37800

08012a78 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b086      	sub	sp, #24
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	785b      	ldrb	r3, [r3, #1]
 8012a90:	2b01      	cmp	r3, #1
 8012a92:	f040 810a 	bne.w	8012caa <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	699b      	ldr	r3, [r3, #24]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d132      	bne.n	8012b04 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	015a      	lsls	r2, r3, #5
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aaa:	691b      	ldr	r3, [r3, #16]
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	0151      	lsls	r1, r2, #5
 8012ab0:	697a      	ldr	r2, [r7, #20]
 8012ab2:	440a      	add	r2, r1
 8012ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ab8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012abc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012ac0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012ac2:	693b      	ldr	r3, [r7, #16]
 8012ac4:	015a      	lsls	r2, r3, #5
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	4413      	add	r3, r2
 8012aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	693a      	ldr	r2, [r7, #16]
 8012ad2:	0151      	lsls	r1, r2, #5
 8012ad4:	697a      	ldr	r2, [r7, #20]
 8012ad6:	440a      	add	r2, r1
 8012ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012adc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ae0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	015a      	lsls	r2, r3, #5
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	4413      	add	r3, r2
 8012aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aee:	691b      	ldr	r3, [r3, #16]
 8012af0:	693a      	ldr	r2, [r7, #16]
 8012af2:	0151      	lsls	r1, r2, #5
 8012af4:	697a      	ldr	r2, [r7, #20]
 8012af6:	440a      	add	r2, r1
 8012af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012afc:	0cdb      	lsrs	r3, r3, #19
 8012afe:	04db      	lsls	r3, r3, #19
 8012b00:	6113      	str	r3, [r2, #16]
 8012b02:	e074      	b.n	8012bee <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	015a      	lsls	r2, r3, #5
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	4413      	add	r3, r2
 8012b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b10:	691b      	ldr	r3, [r3, #16]
 8012b12:	693a      	ldr	r2, [r7, #16]
 8012b14:	0151      	lsls	r1, r2, #5
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	440a      	add	r2, r1
 8012b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b1e:	0cdb      	lsrs	r3, r3, #19
 8012b20:	04db      	lsls	r3, r3, #19
 8012b22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	015a      	lsls	r2, r3, #5
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	4413      	add	r3, r2
 8012b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b30:	691b      	ldr	r3, [r3, #16]
 8012b32:	693a      	ldr	r2, [r7, #16]
 8012b34:	0151      	lsls	r1, r2, #5
 8012b36:	697a      	ldr	r2, [r7, #20]
 8012b38:	440a      	add	r2, r1
 8012b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012b42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012b46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	015a      	lsls	r2, r3, #5
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	4413      	add	r3, r2
 8012b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	6999      	ldr	r1, [r3, #24]
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	68db      	ldr	r3, [r3, #12]
 8012b5e:	440b      	add	r3, r1
 8012b60:	1e59      	subs	r1, r3, #1
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8012b6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012b6c:	4b9e      	ldr	r3, [pc, #632]	; (8012de8 <USB_EPStartXfer+0x370>)
 8012b6e:	400b      	ands	r3, r1
 8012b70:	6939      	ldr	r1, [r7, #16]
 8012b72:	0148      	lsls	r0, r1, #5
 8012b74:	6979      	ldr	r1, [r7, #20]
 8012b76:	4401      	add	r1, r0
 8012b78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	015a      	lsls	r2, r3, #5
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	4413      	add	r3, r2
 8012b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b8c:	691a      	ldr	r2, [r3, #16]
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	699b      	ldr	r3, [r3, #24]
 8012b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b96:	6939      	ldr	r1, [r7, #16]
 8012b98:	0148      	lsls	r0, r1, #5
 8012b9a:	6979      	ldr	r1, [r7, #20]
 8012b9c:	4401      	add	r1, r0
 8012b9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012ba2:	4313      	orrs	r3, r2
 8012ba4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	791b      	ldrb	r3, [r3, #4]
 8012baa:	2b01      	cmp	r3, #1
 8012bac:	d11f      	bne.n	8012bee <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	015a      	lsls	r2, r3, #5
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	693a      	ldr	r2, [r7, #16]
 8012bbe:	0151      	lsls	r1, r2, #5
 8012bc0:	697a      	ldr	r2, [r7, #20]
 8012bc2:	440a      	add	r2, r1
 8012bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012bcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	015a      	lsls	r2, r3, #5
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	693a      	ldr	r2, [r7, #16]
 8012bde:	0151      	lsls	r1, r2, #5
 8012be0:	697a      	ldr	r2, [r7, #20]
 8012be2:	440a      	add	r2, r1
 8012be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012bec:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	015a      	lsls	r2, r3, #5
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	4413      	add	r3, r2
 8012bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	693a      	ldr	r2, [r7, #16]
 8012bfe:	0151      	lsls	r1, r2, #5
 8012c00:	697a      	ldr	r2, [r7, #20]
 8012c02:	440a      	add	r2, r1
 8012c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c0c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	791b      	ldrb	r3, [r3, #4]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d015      	beq.n	8012c42 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	699b      	ldr	r3, [r3, #24]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f000 8106 	beq.w	8012e2c <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	f003 030f 	and.w	r3, r3, #15
 8012c30:	2101      	movs	r1, #1
 8012c32:	fa01 f303 	lsl.w	r3, r1, r3
 8012c36:	6979      	ldr	r1, [r7, #20]
 8012c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	634b      	str	r3, [r1, #52]	; 0x34
 8012c40:	e0f4      	b.n	8012e2c <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d110      	bne.n	8012c74 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	015a      	lsls	r2, r3, #5
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	4413      	add	r3, r2
 8012c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	693a      	ldr	r2, [r7, #16]
 8012c62:	0151      	lsls	r1, r2, #5
 8012c64:	697a      	ldr	r2, [r7, #20]
 8012c66:	440a      	add	r2, r1
 8012c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012c70:	6013      	str	r3, [r2, #0]
 8012c72:	e00f      	b.n	8012c94 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	015a      	lsls	r2, r3, #5
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	693a      	ldr	r2, [r7, #16]
 8012c84:	0151      	lsls	r1, r2, #5
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	440a      	add	r2, r1
 8012c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012c92:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8012c94:	683b      	ldr	r3, [r7, #0]
 8012c96:	6919      	ldr	r1, [r3, #16]
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	781a      	ldrb	r2, [r3, #0]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	699b      	ldr	r3, [r3, #24]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f000 fa94 	bl	80131d0 <USB_WritePacket>
 8012ca8:	e0c0      	b.n	8012e2c <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	015a      	lsls	r2, r3, #5
 8012cae:	697b      	ldr	r3, [r7, #20]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cb6:	691b      	ldr	r3, [r3, #16]
 8012cb8:	693a      	ldr	r2, [r7, #16]
 8012cba:	0151      	lsls	r1, r2, #5
 8012cbc:	697a      	ldr	r2, [r7, #20]
 8012cbe:	440a      	add	r2, r1
 8012cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012cc4:	0cdb      	lsrs	r3, r3, #19
 8012cc6:	04db      	lsls	r3, r3, #19
 8012cc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	015a      	lsls	r2, r3, #5
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	4413      	add	r3, r2
 8012cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cd6:	691b      	ldr	r3, [r3, #16]
 8012cd8:	693a      	ldr	r2, [r7, #16]
 8012cda:	0151      	lsls	r1, r2, #5
 8012cdc:	697a      	ldr	r2, [r7, #20]
 8012cde:	440a      	add	r2, r1
 8012ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012ce4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012ce8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012cec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	699b      	ldr	r3, [r3, #24]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d123      	bne.n	8012d3e <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	015a      	lsls	r2, r3, #5
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d02:	691a      	ldr	r2, [r3, #16]
 8012d04:	683b      	ldr	r3, [r7, #0]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d0c:	6939      	ldr	r1, [r7, #16]
 8012d0e:	0148      	lsls	r0, r1, #5
 8012d10:	6979      	ldr	r1, [r7, #20]
 8012d12:	4401      	add	r1, r0
 8012d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012d18:	4313      	orrs	r3, r2
 8012d1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	015a      	lsls	r2, r3, #5
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	4413      	add	r3, r2
 8012d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d28:	691b      	ldr	r3, [r3, #16]
 8012d2a:	693a      	ldr	r2, [r7, #16]
 8012d2c:	0151      	lsls	r1, r2, #5
 8012d2e:	697a      	ldr	r2, [r7, #20]
 8012d30:	440a      	add	r2, r1
 8012d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d3a:	6113      	str	r3, [r2, #16]
 8012d3c:	e037      	b.n	8012dae <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	699a      	ldr	r2, [r3, #24]
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	4413      	add	r3, r2
 8012d48:	1e5a      	subs	r2, r3, #1
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012d52:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	89fa      	ldrh	r2, [r7, #14]
 8012d5a:	fb03 f202 	mul.w	r2, r3, r2
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	015a      	lsls	r2, r3, #5
 8012d66:	697b      	ldr	r3, [r7, #20]
 8012d68:	4413      	add	r3, r2
 8012d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d6e:	691a      	ldr	r2, [r3, #16]
 8012d70:	89fb      	ldrh	r3, [r7, #14]
 8012d72:	04d9      	lsls	r1, r3, #19
 8012d74:	4b1c      	ldr	r3, [pc, #112]	; (8012de8 <USB_EPStartXfer+0x370>)
 8012d76:	400b      	ands	r3, r1
 8012d78:	6939      	ldr	r1, [r7, #16]
 8012d7a:	0148      	lsls	r0, r1, #5
 8012d7c:	6979      	ldr	r1, [r7, #20]
 8012d7e:	4401      	add	r1, r0
 8012d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012d84:	4313      	orrs	r3, r2
 8012d86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	015a      	lsls	r2, r3, #5
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	4413      	add	r3, r2
 8012d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d94:	691a      	ldr	r2, [r3, #16]
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	69db      	ldr	r3, [r3, #28]
 8012d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012d9e:	6939      	ldr	r1, [r7, #16]
 8012da0:	0148      	lsls	r0, r1, #5
 8012da2:	6979      	ldr	r1, [r7, #20]
 8012da4:	4401      	add	r1, r0
 8012da6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012daa:	4313      	orrs	r3, r2
 8012dac:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	791b      	ldrb	r3, [r3, #4]
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d12a      	bne.n	8012e0c <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dbc:	689b      	ldr	r3, [r3, #8]
 8012dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d112      	bne.n	8012dec <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	015a      	lsls	r2, r3, #5
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	4413      	add	r3, r2
 8012dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	693a      	ldr	r2, [r7, #16]
 8012dd6:	0151      	lsls	r1, r2, #5
 8012dd8:	697a      	ldr	r2, [r7, #20]
 8012dda:	440a      	add	r2, r1
 8012ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012de0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012de4:	6013      	str	r3, [r2, #0]
 8012de6:	e011      	b.n	8012e0c <USB_EPStartXfer+0x394>
 8012de8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	015a      	lsls	r2, r3, #5
 8012df0:	697b      	ldr	r3, [r7, #20]
 8012df2:	4413      	add	r3, r2
 8012df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	693a      	ldr	r2, [r7, #16]
 8012dfc:	0151      	lsls	r1, r2, #5
 8012dfe:	697a      	ldr	r2, [r7, #20]
 8012e00:	440a      	add	r2, r1
 8012e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	015a      	lsls	r2, r3, #5
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	4413      	add	r3, r2
 8012e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	693a      	ldr	r2, [r7, #16]
 8012e1c:	0151      	lsls	r1, r2, #5
 8012e1e:	697a      	ldr	r2, [r7, #20]
 8012e20:	440a      	add	r2, r1
 8012e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3718      	adds	r7, #24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop

08012e38 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	785b      	ldrb	r3, [r3, #1]
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	f040 80ab 	bne.w	8012fac <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	699b      	ldr	r3, [r3, #24]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d132      	bne.n	8012ec4 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	015a      	lsls	r2, r3, #5
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	4413      	add	r3, r2
 8012e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e6a:	691b      	ldr	r3, [r3, #16]
 8012e6c:	68ba      	ldr	r2, [r7, #8]
 8012e6e:	0151      	lsls	r1, r2, #5
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	440a      	add	r2, r1
 8012e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	015a      	lsls	r2, r3, #5
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	4413      	add	r3, r2
 8012e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e8e:	691b      	ldr	r3, [r3, #16]
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	0151      	lsls	r1, r2, #5
 8012e94:	68fa      	ldr	r2, [r7, #12]
 8012e96:	440a      	add	r2, r1
 8012e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	015a      	lsls	r2, r3, #5
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	4413      	add	r3, r2
 8012eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eae:	691b      	ldr	r3, [r3, #16]
 8012eb0:	68ba      	ldr	r2, [r7, #8]
 8012eb2:	0151      	lsls	r1, r2, #5
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	440a      	add	r2, r1
 8012eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ebc:	0cdb      	lsrs	r3, r3, #19
 8012ebe:	04db      	lsls	r3, r3, #19
 8012ec0:	6113      	str	r3, [r2, #16]
 8012ec2:	e04e      	b.n	8012f62 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	015a      	lsls	r2, r3, #5
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	4413      	add	r3, r2
 8012ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed0:	691b      	ldr	r3, [r3, #16]
 8012ed2:	68ba      	ldr	r2, [r7, #8]
 8012ed4:	0151      	lsls	r1, r2, #5
 8012ed6:	68fa      	ldr	r2, [r7, #12]
 8012ed8:	440a      	add	r2, r1
 8012eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ede:	0cdb      	lsrs	r3, r3, #19
 8012ee0:	04db      	lsls	r3, r3, #19
 8012ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012ee4:	68bb      	ldr	r3, [r7, #8]
 8012ee6:	015a      	lsls	r2, r3, #5
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	68ba      	ldr	r2, [r7, #8]
 8012ef4:	0151      	lsls	r1, r2, #5
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	440a      	add	r2, r1
 8012efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012efe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012f02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012f06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	699a      	ldr	r2, [r3, #24]
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d903      	bls.n	8012f1c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8012f14:	683b      	ldr	r3, [r7, #0]
 8012f16:	68da      	ldr	r2, [r3, #12]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	015a      	lsls	r2, r3, #5
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	4413      	add	r3, r2
 8012f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f28:	691b      	ldr	r3, [r3, #16]
 8012f2a:	68ba      	ldr	r2, [r7, #8]
 8012f2c:	0151      	lsls	r1, r2, #5
 8012f2e:	68fa      	ldr	r2, [r7, #12]
 8012f30:	440a      	add	r2, r1
 8012f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012f3c:	68bb      	ldr	r3, [r7, #8]
 8012f3e:	015a      	lsls	r2, r3, #5
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	4413      	add	r3, r2
 8012f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f48:	691a      	ldr	r2, [r3, #16]
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	699b      	ldr	r3, [r3, #24]
 8012f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012f52:	68b9      	ldr	r1, [r7, #8]
 8012f54:	0148      	lsls	r0, r1, #5
 8012f56:	68f9      	ldr	r1, [r7, #12]
 8012f58:	4401      	add	r1, r0
 8012f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012f5e:	4313      	orrs	r3, r2
 8012f60:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	015a      	lsls	r2, r3, #5
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	4413      	add	r3, r2
 8012f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	0151      	lsls	r1, r2, #5
 8012f74:	68fa      	ldr	r2, [r7, #12]
 8012f76:	440a      	add	r2, r1
 8012f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012f80:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	699b      	ldr	r3, [r3, #24]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d071      	beq.n	801306e <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	f003 030f 	and.w	r3, r3, #15
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8012fa0:	68f9      	ldr	r1, [r7, #12]
 8012fa2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fa6:	4313      	orrs	r3, r2
 8012fa8:	634b      	str	r3, [r1, #52]	; 0x34
 8012faa:	e060      	b.n	801306e <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	015a      	lsls	r2, r3, #5
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fb8:	691b      	ldr	r3, [r3, #16]
 8012fba:	68ba      	ldr	r2, [r7, #8]
 8012fbc:	0151      	lsls	r1, r2, #5
 8012fbe:	68fa      	ldr	r2, [r7, #12]
 8012fc0:	440a      	add	r2, r1
 8012fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fc6:	0cdb      	lsrs	r3, r3, #19
 8012fc8:	04db      	lsls	r3, r3, #19
 8012fca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012fcc:	68bb      	ldr	r3, [r7, #8]
 8012fce:	015a      	lsls	r2, r3, #5
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd8:	691b      	ldr	r3, [r3, #16]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	0151      	lsls	r1, r2, #5
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	440a      	add	r2, r1
 8012fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012fe6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8012fea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8012fee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	699b      	ldr	r3, [r3, #24]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d003      	beq.n	8013000 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	68da      	ldr	r2, [r3, #12]
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	68da      	ldr	r2, [r3, #12]
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	015a      	lsls	r2, r3, #5
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	4413      	add	r3, r2
 8013010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	68ba      	ldr	r2, [r7, #8]
 8013018:	0151      	lsls	r1, r2, #5
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	440a      	add	r2, r1
 801301e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	015a      	lsls	r2, r3, #5
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4413      	add	r3, r2
 8013030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013034:	691a      	ldr	r2, [r3, #16]
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	69db      	ldr	r3, [r3, #28]
 801303a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801303e:	68b9      	ldr	r1, [r7, #8]
 8013040:	0148      	lsls	r0, r1, #5
 8013042:	68f9      	ldr	r1, [r7, #12]
 8013044:	4401      	add	r1, r0
 8013046:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801304a:	4313      	orrs	r3, r2
 801304c:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	015a      	lsls	r2, r3, #5
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	4413      	add	r3, r2
 8013056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	0151      	lsls	r1, r2, #5
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	440a      	add	r2, r1
 8013064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013068:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801306c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801306e:	2300      	movs	r3, #0
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801307c:	b480      	push	{r7}
 801307e:	b087      	sub	sp, #28
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013086:	2300      	movs	r3, #0
 8013088:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801308a:	2300      	movs	r3, #0
 801308c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	785b      	ldrb	r3, [r3, #1]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d14a      	bne.n	8013130 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	015a      	lsls	r2, r3, #5
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	4413      	add	r3, r2
 80130a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130b2:	f040 8086 	bne.w	80131c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	781b      	ldrb	r3, [r3, #0]
 80130ba:	015a      	lsls	r2, r3, #5
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	4413      	add	r3, r2
 80130c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	683a      	ldr	r2, [r7, #0]
 80130c8:	7812      	ldrb	r2, [r2, #0]
 80130ca:	0151      	lsls	r1, r2, #5
 80130cc:	693a      	ldr	r2, [r7, #16]
 80130ce:	440a      	add	r2, r1
 80130d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80130d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	015a      	lsls	r2, r3, #5
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	4413      	add	r3, r2
 80130e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	683a      	ldr	r2, [r7, #0]
 80130ec:	7812      	ldrb	r2, [r2, #0]
 80130ee:	0151      	lsls	r1, r2, #5
 80130f0:	693a      	ldr	r2, [r7, #16]
 80130f2:	440a      	add	r2, r1
 80130f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80130f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80130fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	3301      	adds	r3, #1
 8013102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f242 7210 	movw	r2, #10000	; 0x2710
 801310a:	4293      	cmp	r3, r2
 801310c:	d902      	bls.n	8013114 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801310e:	2301      	movs	r3, #1
 8013110:	75fb      	strb	r3, [r7, #23]
          break;
 8013112:	e056      	b.n	80131c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	015a      	lsls	r2, r3, #5
 801311a:	693b      	ldr	r3, [r7, #16]
 801311c:	4413      	add	r3, r2
 801311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801312c:	d0e7      	beq.n	80130fe <USB_EPStopXfer+0x82>
 801312e:	e048      	b.n	80131c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	781b      	ldrb	r3, [r3, #0]
 8013134:	015a      	lsls	r2, r3, #5
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	4413      	add	r3, r2
 801313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013148:	d13b      	bne.n	80131c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	015a      	lsls	r2, r3, #5
 8013150:	693b      	ldr	r3, [r7, #16]
 8013152:	4413      	add	r3, r2
 8013154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	683a      	ldr	r2, [r7, #0]
 801315c:	7812      	ldrb	r2, [r2, #0]
 801315e:	0151      	lsls	r1, r2, #5
 8013160:	693a      	ldr	r2, [r7, #16]
 8013162:	440a      	add	r2, r1
 8013164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801316c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801316e:	683b      	ldr	r3, [r7, #0]
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	015a      	lsls	r2, r3, #5
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	4413      	add	r3, r2
 8013178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	683a      	ldr	r2, [r7, #0]
 8013180:	7812      	ldrb	r2, [r2, #0]
 8013182:	0151      	lsls	r1, r2, #5
 8013184:	693a      	ldr	r2, [r7, #16]
 8013186:	440a      	add	r2, r1
 8013188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801318c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013190:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	3301      	adds	r3, #1
 8013196:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f242 7210 	movw	r2, #10000	; 0x2710
 801319e:	4293      	cmp	r3, r2
 80131a0:	d902      	bls.n	80131a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80131a2:	2301      	movs	r3, #1
 80131a4:	75fb      	strb	r3, [r7, #23]
          break;
 80131a6:	e00c      	b.n	80131c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	015a      	lsls	r2, r3, #5
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	4413      	add	r3, r2
 80131b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131c0:	d0e7      	beq.n	8013192 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80131c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	371c      	adds	r7, #28
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr

080131d0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b089      	sub	sp, #36	; 0x24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	4611      	mov	r1, r2
 80131dc:	461a      	mov	r2, r3
 80131de:	460b      	mov	r3, r1
 80131e0:	71fb      	strb	r3, [r7, #7]
 80131e2:	4613      	mov	r3, r2
 80131e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80131ee:	88bb      	ldrh	r3, [r7, #4]
 80131f0:	3303      	adds	r3, #3
 80131f2:	089b      	lsrs	r3, r3, #2
 80131f4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80131f6:	2300      	movs	r3, #0
 80131f8:	61bb      	str	r3, [r7, #24]
 80131fa:	e018      	b.n	801322e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80131fc:	79fb      	ldrb	r3, [r7, #7]
 80131fe:	031a      	lsls	r2, r3, #12
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	4413      	add	r3, r2
 8013204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013208:	461a      	mov	r2, r3
 801320a:	69fb      	ldr	r3, [r7, #28]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	3301      	adds	r3, #1
 8013214:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	3301      	adds	r3, #1
 801321a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801321c:	69fb      	ldr	r3, [r7, #28]
 801321e:	3301      	adds	r3, #1
 8013220:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	3301      	adds	r3, #1
 8013226:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8013228:	69bb      	ldr	r3, [r7, #24]
 801322a:	3301      	adds	r3, #1
 801322c:	61bb      	str	r3, [r7, #24]
 801322e:	69ba      	ldr	r2, [r7, #24]
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	429a      	cmp	r2, r3
 8013234:	d3e2      	bcc.n	80131fc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8013236:	2300      	movs	r3, #0
}
 8013238:	4618      	mov	r0, r3
 801323a:	3724      	adds	r7, #36	; 0x24
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013244:	b480      	push	{r7}
 8013246:	b08b      	sub	sp, #44	; 0x2c
 8013248:	af00      	add	r7, sp, #0
 801324a:	60f8      	str	r0, [r7, #12]
 801324c:	60b9      	str	r1, [r7, #8]
 801324e:	4613      	mov	r3, r2
 8013250:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801325a:	88fb      	ldrh	r3, [r7, #6]
 801325c:	089b      	lsrs	r3, r3, #2
 801325e:	b29b      	uxth	r3, r3
 8013260:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013262:	88fb      	ldrh	r3, [r7, #6]
 8013264:	f003 0303 	and.w	r3, r3, #3
 8013268:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801326a:	2300      	movs	r3, #0
 801326c:	623b      	str	r3, [r7, #32]
 801326e:	e014      	b.n	801329a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013270:	69bb      	ldr	r3, [r7, #24]
 8013272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327a:	601a      	str	r2, [r3, #0]
    pDest++;
 801327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801327e:	3301      	adds	r3, #1
 8013280:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013284:	3301      	adds	r3, #1
 8013286:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328a:	3301      	adds	r3, #1
 801328c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013290:	3301      	adds	r3, #1
 8013292:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013294:	6a3b      	ldr	r3, [r7, #32]
 8013296:	3301      	adds	r3, #1
 8013298:	623b      	str	r3, [r7, #32]
 801329a:	6a3a      	ldr	r2, [r7, #32]
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d3e6      	bcc.n	8013270 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80132a2:	8bfb      	ldrh	r3, [r7, #30]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d01e      	beq.n	80132e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80132a8:	2300      	movs	r3, #0
 80132aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80132ac:	69bb      	ldr	r3, [r7, #24]
 80132ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80132b2:	461a      	mov	r2, r3
 80132b4:	f107 0310 	add.w	r3, r7, #16
 80132b8:	6812      	ldr	r2, [r2, #0]
 80132ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80132bc:	693a      	ldr	r2, [r7, #16]
 80132be:	6a3b      	ldr	r3, [r7, #32]
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	00db      	lsls	r3, r3, #3
 80132c4:	fa22 f303 	lsr.w	r3, r2, r3
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132cc:	701a      	strb	r2, [r3, #0]
      i++;
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	3301      	adds	r3, #1
 80132d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	3301      	adds	r3, #1
 80132d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80132da:	8bfb      	ldrh	r3, [r7, #30]
 80132dc:	3b01      	subs	r3, #1
 80132de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80132e0:	8bfb      	ldrh	r3, [r7, #30]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d1ea      	bne.n	80132bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80132e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	372c      	adds	r7, #44	; 0x2c
 80132ec:	46bd      	mov	sp, r7
 80132ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f2:	4770      	bx	lr

080132f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132f4:	b480      	push	{r7}
 80132f6:	b085      	sub	sp, #20
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	785b      	ldrb	r3, [r3, #1]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d12c      	bne.n	801336a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	015a      	lsls	r2, r3, #5
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	4413      	add	r3, r2
 8013318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	db12      	blt.n	8013348 <USB_EPSetStall+0x54>
 8013322:	68bb      	ldr	r3, [r7, #8]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d00f      	beq.n	8013348 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	015a      	lsls	r2, r3, #5
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	4413      	add	r3, r2
 8013330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	0151      	lsls	r1, r2, #5
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	440a      	add	r2, r1
 801333e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013346:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	015a      	lsls	r2, r3, #5
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4413      	add	r3, r2
 8013350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	68ba      	ldr	r2, [r7, #8]
 8013358:	0151      	lsls	r1, r2, #5
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	440a      	add	r2, r1
 801335e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013362:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013366:	6013      	str	r3, [r2, #0]
 8013368:	e02b      	b.n	80133c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	015a      	lsls	r2, r3, #5
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	4413      	add	r3, r2
 8013372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	db12      	blt.n	80133a2 <USB_EPSetStall+0xae>
 801337c:	68bb      	ldr	r3, [r7, #8]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00f      	beq.n	80133a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	015a      	lsls	r2, r3, #5
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	4413      	add	r3, r2
 801338a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	68ba      	ldr	r2, [r7, #8]
 8013392:	0151      	lsls	r1, r2, #5
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	440a      	add	r2, r1
 8013398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801339c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80133a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	015a      	lsls	r2, r3, #5
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	4413      	add	r3, r2
 80133aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	0151      	lsls	r1, r2, #5
 80133b4:	68fa      	ldr	r2, [r7, #12]
 80133b6:	440a      	add	r2, r1
 80133b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80133c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80133c2:	2300      	movs	r3, #0
}
 80133c4:	4618      	mov	r0, r3
 80133c6:	3714      	adds	r7, #20
 80133c8:	46bd      	mov	sp, r7
 80133ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ce:	4770      	bx	lr

080133d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80133d0:	b480      	push	{r7}
 80133d2:	b085      	sub	sp, #20
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	785b      	ldrb	r3, [r3, #1]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d128      	bne.n	801343e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	015a      	lsls	r2, r3, #5
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	4413      	add	r3, r2
 80133f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	0151      	lsls	r1, r2, #5
 80133fe:	68fa      	ldr	r2, [r7, #12]
 8013400:	440a      	add	r2, r1
 8013402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801340a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	791b      	ldrb	r3, [r3, #4]
 8013410:	2b03      	cmp	r3, #3
 8013412:	d003      	beq.n	801341c <USB_EPClearStall+0x4c>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	791b      	ldrb	r3, [r3, #4]
 8013418:	2b02      	cmp	r3, #2
 801341a:	d138      	bne.n	801348e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	015a      	lsls	r2, r3, #5
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	4413      	add	r3, r2
 8013424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	68ba      	ldr	r2, [r7, #8]
 801342c:	0151      	lsls	r1, r2, #5
 801342e:	68fa      	ldr	r2, [r7, #12]
 8013430:	440a      	add	r2, r1
 8013432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801343a:	6013      	str	r3, [r2, #0]
 801343c:	e027      	b.n	801348e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	015a      	lsls	r2, r3, #5
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	4413      	add	r3, r2
 8013446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	68ba      	ldr	r2, [r7, #8]
 801344e:	0151      	lsls	r1, r2, #5
 8013450:	68fa      	ldr	r2, [r7, #12]
 8013452:	440a      	add	r2, r1
 8013454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013458:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801345c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	791b      	ldrb	r3, [r3, #4]
 8013462:	2b03      	cmp	r3, #3
 8013464:	d003      	beq.n	801346e <USB_EPClearStall+0x9e>
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	791b      	ldrb	r3, [r3, #4]
 801346a:	2b02      	cmp	r3, #2
 801346c:	d10f      	bne.n	801348e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801346e:	68bb      	ldr	r3, [r7, #8]
 8013470:	015a      	lsls	r2, r3, #5
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	4413      	add	r3, r2
 8013476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	0151      	lsls	r1, r2, #5
 8013480:	68fa      	ldr	r2, [r7, #12]
 8013482:	440a      	add	r2, r1
 8013484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801348c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801348e:	2300      	movs	r3, #0
}
 8013490:	4618      	mov	r0, r3
 8013492:	3714      	adds	r7, #20
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801349c:	b480      	push	{r7}
 801349e:	b085      	sub	sp, #20
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	460b      	mov	r3, r1
 80134a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	68fa      	ldr	r2, [r7, #12]
 80134b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80134ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80134be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134c6:	681a      	ldr	r2, [r3, #0]
 80134c8:	78fb      	ldrb	r3, [r7, #3]
 80134ca:	011b      	lsls	r3, r3, #4
 80134cc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80134d0:	68f9      	ldr	r1, [r7, #12]
 80134d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80134d6:	4313      	orrs	r3, r2
 80134d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80134da:	2300      	movs	r3, #0
}
 80134dc:	4618      	mov	r0, r3
 80134de:	3714      	adds	r7, #20
 80134e0:	46bd      	mov	sp, r7
 80134e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e6:	4770      	bx	lr

080134e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80134e8:	b480      	push	{r7}
 80134ea:	b085      	sub	sp, #20
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013502:	f023 0303 	bic.w	r3, r3, #3
 8013506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	68fa      	ldr	r2, [r7, #12]
 8013512:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013516:	f023 0302 	bic.w	r3, r3, #2
 801351a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801351c:	2300      	movs	r3, #0
}
 801351e:	4618      	mov	r0, r3
 8013520:	3714      	adds	r7, #20
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr

0801352a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801352a:	b480      	push	{r7}
 801352c:	b085      	sub	sp, #20
 801352e:	af00      	add	r7, sp, #0
 8013530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	68fa      	ldr	r2, [r7, #12]
 8013540:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013544:	f023 0303 	bic.w	r3, r3, #3
 8013548:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013558:	f043 0302 	orr.w	r3, r3, #2
 801355c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801355e:	2300      	movs	r3, #0
}
 8013560:	4618      	mov	r0, r3
 8013562:	3714      	adds	r7, #20
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr

0801356c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801356c:	b480      	push	{r7}
 801356e:	b085      	sub	sp, #20
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	695b      	ldr	r3, [r3, #20]
 8013578:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	699b      	ldr	r3, [r3, #24]
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	4013      	ands	r3, r2
 8013582:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013584:	68fb      	ldr	r3, [r7, #12]
}
 8013586:	4618      	mov	r0, r3
 8013588:	3714      	adds	r7, #20
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr

08013592 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013592:	b480      	push	{r7}
 8013594:	b085      	sub	sp, #20
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135a4:	699b      	ldr	r3, [r3, #24]
 80135a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ae:	69db      	ldr	r3, [r3, #28]
 80135b0:	68ba      	ldr	r2, [r7, #8]
 80135b2:	4013      	ands	r3, r2
 80135b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	0c1b      	lsrs	r3, r3, #16
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3714      	adds	r7, #20
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80135c6:	b480      	push	{r7}
 80135c8:	b085      	sub	sp, #20
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135d8:	699b      	ldr	r3, [r3, #24]
 80135da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135e2:	69db      	ldr	r3, [r3, #28]
 80135e4:	68ba      	ldr	r2, [r7, #8]
 80135e6:	4013      	ands	r3, r2
 80135e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	b29b      	uxth	r3, r3
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3714      	adds	r7, #20
 80135f2:	46bd      	mov	sp, r7
 80135f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f8:	4770      	bx	lr

080135fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80135fa:	b480      	push	{r7}
 80135fc:	b085      	sub	sp, #20
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
 8013602:	460b      	mov	r3, r1
 8013604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801360a:	78fb      	ldrb	r3, [r7, #3]
 801360c:	015a      	lsls	r2, r3, #5
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	4413      	add	r3, r2
 8013612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013616:	689b      	ldr	r3, [r3, #8]
 8013618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013620:	695b      	ldr	r3, [r3, #20]
 8013622:	68ba      	ldr	r2, [r7, #8]
 8013624:	4013      	ands	r3, r2
 8013626:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013628:	68bb      	ldr	r3, [r7, #8]
}
 801362a:	4618      	mov	r0, r3
 801362c:	3714      	adds	r7, #20
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr

08013636 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013636:	b480      	push	{r7}
 8013638:	b087      	sub	sp, #28
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	460b      	mov	r3, r1
 8013640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013646:	697b      	ldr	r3, [r7, #20]
 8013648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801364c:	691b      	ldr	r3, [r3, #16]
 801364e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013650:	697b      	ldr	r3, [r7, #20]
 8013652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013658:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801365a:	78fb      	ldrb	r3, [r7, #3]
 801365c:	f003 030f 	and.w	r3, r3, #15
 8013660:	68fa      	ldr	r2, [r7, #12]
 8013662:	fa22 f303 	lsr.w	r3, r2, r3
 8013666:	01db      	lsls	r3, r3, #7
 8013668:	b2db      	uxtb	r3, r3
 801366a:	693a      	ldr	r2, [r7, #16]
 801366c:	4313      	orrs	r3, r2
 801366e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013670:	78fb      	ldrb	r3, [r7, #3]
 8013672:	015a      	lsls	r2, r3, #5
 8013674:	697b      	ldr	r3, [r7, #20]
 8013676:	4413      	add	r3, r2
 8013678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801367c:	689b      	ldr	r3, [r3, #8]
 801367e:	693a      	ldr	r2, [r7, #16]
 8013680:	4013      	ands	r3, r2
 8013682:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013684:	68bb      	ldr	r3, [r7, #8]
}
 8013686:	4618      	mov	r0, r3
 8013688:	371c      	adds	r7, #28
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr

08013692 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013692:	b480      	push	{r7}
 8013694:	b083      	sub	sp, #12
 8013696:	af00      	add	r7, sp, #0
 8013698:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	695b      	ldr	r3, [r3, #20]
 801369e:	f003 0301 	and.w	r3, r3, #1
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	370c      	adds	r7, #12
 80136a6:	46bd      	mov	sp, r7
 80136a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ac:	4770      	bx	lr

080136ae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80136ae:	b480      	push	{r7}
 80136b0:	b085      	sub	sp, #20
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	68fa      	ldr	r2, [r7, #12]
 80136c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80136cc:	f023 0307 	bic.w	r3, r3, #7
 80136d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	68fa      	ldr	r2, [r7, #12]
 80136dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80136e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80136e6:	2300      	movs	r3, #0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3714      	adds	r7, #20
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b085      	sub	sp, #20
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	333c      	adds	r3, #60	; 0x3c
 8013706:	3304      	adds	r3, #4
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	4a1c      	ldr	r2, [pc, #112]	; (8013780 <USB_EP0_OutStart+0x8c>)
 8013710:	4293      	cmp	r3, r2
 8013712:	d90a      	bls.n	801372a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013724:	d101      	bne.n	801372a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8013726:	2300      	movs	r3, #0
 8013728:	e024      	b.n	8013774 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013730:	461a      	mov	r2, r3
 8013732:	2300      	movs	r3, #0
 8013734:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801373c:	691b      	ldr	r3, [r3, #16]
 801373e:	68fa      	ldr	r2, [r7, #12]
 8013740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013748:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013750:	691b      	ldr	r3, [r3, #16]
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013758:	f043 0318 	orr.w	r3, r3, #24
 801375c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013764:	691b      	ldr	r3, [r3, #16]
 8013766:	68fa      	ldr	r2, [r7, #12]
 8013768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801376c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013770:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8013772:	2300      	movs	r3, #0
}
 8013774:	4618      	mov	r0, r3
 8013776:	3714      	adds	r7, #20
 8013778:	46bd      	mov	sp, r7
 801377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377e:	4770      	bx	lr
 8013780:	4f54300a 	.word	0x4f54300a

08013784 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013784:	b480      	push	{r7}
 8013786:	b085      	sub	sp, #20
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801378c:	2300      	movs	r3, #0
 801378e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	3301      	adds	r3, #1
 8013794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	4a13      	ldr	r2, [pc, #76]	; (80137e8 <USB_CoreReset+0x64>)
 801379a:	4293      	cmp	r3, r2
 801379c:	d901      	bls.n	80137a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801379e:	2303      	movs	r3, #3
 80137a0:	e01b      	b.n	80137da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	691b      	ldr	r3, [r3, #16]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	daf2      	bge.n	8013790 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80137aa:	2300      	movs	r3, #0
 80137ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	f043 0201 	orr.w	r2, r3, #1
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	3301      	adds	r3, #1
 80137be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	4a09      	ldr	r2, [pc, #36]	; (80137e8 <USB_CoreReset+0x64>)
 80137c4:	4293      	cmp	r3, r2
 80137c6:	d901      	bls.n	80137cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80137c8:	2303      	movs	r3, #3
 80137ca:	e006      	b.n	80137da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	691b      	ldr	r3, [r3, #16]
 80137d0:	f003 0301 	and.w	r3, r3, #1
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d0f0      	beq.n	80137ba <USB_CoreReset+0x36>

  return HAL_OK;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3714      	adds	r7, #20
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	00030d40 	.word	0x00030d40

080137ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80137f0:	4904      	ldr	r1, [pc, #16]	; (8013804 <MX_FATFS_Init+0x18>)
 80137f2:	4805      	ldr	r0, [pc, #20]	; (8013808 <MX_FATFS_Init+0x1c>)
 80137f4:	f004 fd46 	bl	8018284 <FATFS_LinkDriver>
 80137f8:	4603      	mov	r3, r0
 80137fa:	461a      	mov	r2, r3
 80137fc:	4b03      	ldr	r3, [pc, #12]	; (801380c <MX_FATFS_Init+0x20>)
 80137fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013800:	bf00      	nop
 8013802:	bd80      	pop	{r7, pc}
 8013804:	20000f94 	.word	0x20000f94
 8013808:	0801c1f0 	.word	0x0801c1f0
 801380c:	20000f90 	.word	0x20000f90

08013810 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013810:	b480      	push	{r7}
 8013812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013814:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013816:	4618      	mov	r0, r3
 8013818:	46bd      	mov	sp, r7
 801381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381e:	4770      	bx	lr

08013820 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013826:	2300      	movs	r3, #0
 8013828:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801382a:	f000 f879 	bl	8013920 <BSP_SD_IsDetected>
 801382e:	4603      	mov	r3, r0
 8013830:	2b01      	cmp	r3, #1
 8013832:	d001      	beq.n	8013838 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013834:	2302      	movs	r3, #2
 8013836:	e012      	b.n	801385e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013838:	480b      	ldr	r0, [pc, #44]	; (8013868 <BSP_SD_Init+0x48>)
 801383a:	f7f9 f8cf 	bl	800c9dc <HAL_SD_Init>
 801383e:	4603      	mov	r3, r0
 8013840:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013842:	79fb      	ldrb	r3, [r7, #7]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d109      	bne.n	801385c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801384c:	4806      	ldr	r0, [pc, #24]	; (8013868 <BSP_SD_Init+0x48>)
 801384e:	f7f9 ff9b 	bl	800d788 <HAL_SD_ConfigWideBusOperation>
 8013852:	4603      	mov	r3, r0
 8013854:	2b00      	cmp	r3, #0
 8013856:	d001      	beq.n	801385c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013858:	2301      	movs	r3, #1
 801385a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801385c:	79fb      	ldrb	r3, [r7, #7]
}
 801385e:	4618      	mov	r0, r3
 8013860:	3708      	adds	r7, #8
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	2000062c 	.word	0x2000062c

0801386c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	af02      	add	r7, sp, #8
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801387a:	2300      	movs	r3, #0
 801387c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	9300      	str	r3, [sp, #0]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68ba      	ldr	r2, [r7, #8]
 8013886:	68f9      	ldr	r1, [r7, #12]
 8013888:	4806      	ldr	r0, [pc, #24]	; (80138a4 <BSP_SD_ReadBlocks+0x38>)
 801388a:	f7f9 f9cf 	bl	800cc2c <HAL_SD_ReadBlocks>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	d001      	beq.n	8013898 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8013894:	2301      	movs	r3, #1
 8013896:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013898:	7dfb      	ldrb	r3, [r7, #23]
}
 801389a:	4618      	mov	r0, r3
 801389c:	3718      	adds	r7, #24
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	2000062c 	.word	0x2000062c

080138a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b088      	sub	sp, #32
 80138ac:	af02      	add	r7, sp, #8
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
 80138b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80138b6:	2300      	movs	r3, #0
 80138b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	9300      	str	r3, [sp, #0]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	68ba      	ldr	r2, [r7, #8]
 80138c2:	68f9      	ldr	r1, [r7, #12]
 80138c4:	4806      	ldr	r0, [pc, #24]	; (80138e0 <BSP_SD_WriteBlocks+0x38>)
 80138c6:	f7f9 fb43 	bl	800cf50 <HAL_SD_WriteBlocks>
 80138ca:	4603      	mov	r3, r0
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d001      	beq.n	80138d4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80138d0:	2301      	movs	r3, #1
 80138d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80138d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3718      	adds	r7, #24
 80138da:	46bd      	mov	sp, r7
 80138dc:	bd80      	pop	{r7, pc}
 80138de:	bf00      	nop
 80138e0:	2000062c 	.word	0x2000062c

080138e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80138e8:	4805      	ldr	r0, [pc, #20]	; (8013900 <BSP_SD_GetCardState+0x1c>)
 80138ea:	f7fa f861 	bl	800d9b0 <HAL_SD_GetCardState>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b04      	cmp	r3, #4
 80138f2:	bf14      	ite	ne
 80138f4:	2301      	movne	r3, #1
 80138f6:	2300      	moveq	r3, #0
 80138f8:	b2db      	uxtb	r3, r3
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop
 8013900:	2000062c 	.word	0x2000062c

08013904 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801390c:	6879      	ldr	r1, [r7, #4]
 801390e:	4803      	ldr	r0, [pc, #12]	; (801391c <BSP_SD_GetCardInfo+0x18>)
 8013910:	f7f9 ff0e 	bl	800d730 <HAL_SD_GetCardInfo>
}
 8013914:	bf00      	nop
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	2000062c 	.word	0x2000062c

08013920 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013926:	2301      	movs	r3, #1
 8013928:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801392a:	f000 f80b 	bl	8013944 <BSP_PlatformIsDetected>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013934:	2300      	movs	r3, #0
 8013936:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013938:	79fb      	ldrb	r3, [r7, #7]
 801393a:	b2db      	uxtb	r3, r3
}
 801393c:	4618      	mov	r0, r3
 801393e:	3708      	adds	r7, #8
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801394a:	2301      	movs	r3, #1
 801394c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801394e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8013956:	f7f3 ff59 	bl	800780c <HAL_GPIO_ReadPin>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d001      	beq.n	8013964 <BSP_PlatformIsDetected+0x20>
    {
        status = SD_NOT_PRESENT;
 8013960:	2300      	movs	r3, #0
 8013962:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013964:	79fb      	ldrb	r3, [r7, #7]
}
 8013966:	4618      	mov	r0, r3
 8013968:	3708      	adds	r7, #8
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
	...

08013970 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	4603      	mov	r3, r0
 8013978:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801397a:	4b0b      	ldr	r3, [pc, #44]	; (80139a8 <SD_CheckStatus+0x38>)
 801397c:	2201      	movs	r2, #1
 801397e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013980:	f7ff ffb0 	bl	80138e4 <BSP_SD_GetCardState>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d107      	bne.n	801399a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801398a:	4b07      	ldr	r3, [pc, #28]	; (80139a8 <SD_CheckStatus+0x38>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	b2db      	uxtb	r3, r3
 8013990:	f023 0301 	bic.w	r3, r3, #1
 8013994:	b2da      	uxtb	r2, r3
 8013996:	4b04      	ldr	r3, [pc, #16]	; (80139a8 <SD_CheckStatus+0x38>)
 8013998:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801399a:	4b03      	ldr	r3, [pc, #12]	; (80139a8 <SD_CheckStatus+0x38>)
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	b2db      	uxtb	r3, r3
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3708      	adds	r7, #8
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	20000019 	.word	0x20000019

080139ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	4603      	mov	r3, r0
 80139b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80139b6:	4b0b      	ldr	r3, [pc, #44]	; (80139e4 <SD_initialize+0x38>)
 80139b8:	2201      	movs	r2, #1
 80139ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80139bc:	f7ff ff30 	bl	8013820 <BSP_SD_Init>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d107      	bne.n	80139d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80139c6:	79fb      	ldrb	r3, [r7, #7]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff ffd1 	bl	8013970 <SD_CheckStatus>
 80139ce:	4603      	mov	r3, r0
 80139d0:	461a      	mov	r2, r3
 80139d2:	4b04      	ldr	r3, [pc, #16]	; (80139e4 <SD_initialize+0x38>)
 80139d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80139d6:	4b03      	ldr	r3, [pc, #12]	; (80139e4 <SD_initialize+0x38>)
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	b2db      	uxtb	r3, r3
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3708      	adds	r7, #8
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	20000019 	.word	0x20000019

080139e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	4603      	mov	r3, r0
 80139f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80139f2:	79fb      	ldrb	r3, [r7, #7]
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff ffbb 	bl	8013970 <SD_CheckStatus>
 80139fa:	4603      	mov	r3, r0
}
 80139fc:	4618      	mov	r0, r3
 80139fe:	3708      	adds	r7, #8
 8013a00:	46bd      	mov	sp, r7
 8013a02:	bd80      	pop	{r7, pc}

08013a04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b086      	sub	sp, #24
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60b9      	str	r1, [r7, #8]
 8013a0c:	607a      	str	r2, [r7, #4]
 8013a0e:	603b      	str	r3, [r7, #0]
 8013a10:	4603      	mov	r3, r0
 8013a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a14:	2301      	movs	r3, #1
 8013a16:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8013a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a1c:	683a      	ldr	r2, [r7, #0]
 8013a1e:	6879      	ldr	r1, [r7, #4]
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7ff ff23 	bl	801386c <BSP_SD_ReadBlocks>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d107      	bne.n	8013a3c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8013a2c:	bf00      	nop
 8013a2e:	f7ff ff59 	bl	80138e4 <BSP_SD_GetCardState>
 8013a32:	4603      	mov	r3, r0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1fa      	bne.n	8013a2e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3718      	adds	r7, #24
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}

08013a46 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013a46:	b580      	push	{r7, lr}
 8013a48:	b086      	sub	sp, #24
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	60b9      	str	r1, [r7, #8]
 8013a4e:	607a      	str	r2, [r7, #4]
 8013a50:	603b      	str	r3, [r7, #0]
 8013a52:	4603      	mov	r3, r0
 8013a54:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013a56:	2301      	movs	r3, #1
 8013a58:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8013a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a5e:	683a      	ldr	r2, [r7, #0]
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	68b8      	ldr	r0, [r7, #8]
 8013a64:	f7ff ff20 	bl	80138a8 <BSP_SD_WriteBlocks>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d107      	bne.n	8013a7e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8013a6e:	bf00      	nop
 8013a70:	f7ff ff38 	bl	80138e4 <BSP_SD_GetCardState>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d1fa      	bne.n	8013a70 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8013a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3718      	adds	r7, #24
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b08c      	sub	sp, #48	; 0x30
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	4603      	mov	r3, r0
 8013a90:	603a      	str	r2, [r7, #0]
 8013a92:	71fb      	strb	r3, [r7, #7]
 8013a94:	460b      	mov	r3, r1
 8013a96:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013a9e:	4b25      	ldr	r3, [pc, #148]	; (8013b34 <SD_ioctl+0xac>)
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	f003 0301 	and.w	r3, r3, #1
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <SD_ioctl+0x28>
 8013aac:	2303      	movs	r3, #3
 8013aae:	e03c      	b.n	8013b2a <SD_ioctl+0xa2>

  switch (cmd)
 8013ab0:	79bb      	ldrb	r3, [r7, #6]
 8013ab2:	2b03      	cmp	r3, #3
 8013ab4:	d834      	bhi.n	8013b20 <SD_ioctl+0x98>
 8013ab6:	a201      	add	r2, pc, #4	; (adr r2, 8013abc <SD_ioctl+0x34>)
 8013ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013abc:	08013acd 	.word	0x08013acd
 8013ac0:	08013ad5 	.word	0x08013ad5
 8013ac4:	08013aed 	.word	0x08013aed
 8013ac8:	08013b07 	.word	0x08013b07
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013ad2:	e028      	b.n	8013b26 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013ad4:	f107 0308 	add.w	r3, r7, #8
 8013ad8:	4618      	mov	r0, r3
 8013ada:	f7ff ff13 	bl	8013904 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013ade:	6a3a      	ldr	r2, [r7, #32]
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013aea:	e01c      	b.n	8013b26 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013aec:	f107 0308 	add.w	r3, r7, #8
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7ff ff07 	bl	8013904 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013afe:	2300      	movs	r3, #0
 8013b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013b04:	e00f      	b.n	8013b26 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013b06:	f107 0308 	add.w	r3, r7, #8
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7ff fefa 	bl	8013904 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b12:	0a5a      	lsrs	r2, r3, #9
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013b1e:	e002      	b.n	8013b26 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013b20:	2304      	movs	r3, #4
 8013b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3730      	adds	r7, #48	; 0x30
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	20000019 	.word	0x20000019

08013b38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b084      	sub	sp, #16
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	460b      	mov	r3, r1
 8013b42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013b44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013b48:	f005 f988 	bl	8018e5c <USBD_static_malloc>
 8013b4c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d105      	bne.n	8013b60 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2200      	movs	r2, #0
 8013b58:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013b5c:	2302      	movs	r3, #2
 8013b5e:	e066      	b.n	8013c2e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	68fa      	ldr	r2, [r7, #12]
 8013b64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	7c1b      	ldrb	r3, [r3, #16]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d119      	bne.n	8013ba4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b74:	2202      	movs	r2, #2
 8013b76:	2181      	movs	r1, #129	; 0x81
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f004 ffa9 	bl	8018ad0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2201      	movs	r2, #1
 8013b82:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013b88:	2202      	movs	r2, #2
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f004 ff9f 	bl	8018ad0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2201      	movs	r2, #1
 8013b96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	2210      	movs	r2, #16
 8013b9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013ba2:	e016      	b.n	8013bd2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ba4:	2340      	movs	r3, #64	; 0x40
 8013ba6:	2202      	movs	r2, #2
 8013ba8:	2181      	movs	r1, #129	; 0x81
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f004 ff90 	bl	8018ad0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013bb6:	2340      	movs	r3, #64	; 0x40
 8013bb8:	2202      	movs	r2, #2
 8013bba:	2101      	movs	r1, #1
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f004 ff87 	bl	8018ad0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2210      	movs	r2, #16
 8013bce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013bd2:	2308      	movs	r3, #8
 8013bd4:	2203      	movs	r2, #3
 8013bd6:	2182      	movs	r1, #130	; 0x82
 8013bd8:	6878      	ldr	r0, [r7, #4]
 8013bda:	f004 ff79 	bl	8018ad0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2201      	movs	r2, #1
 8013be2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	7c1b      	ldrb	r3, [r3, #16]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d109      	bne.n	8013c1c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c12:	2101      	movs	r1, #1
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f005 f8d5 	bl	8018dc4 <USBD_LL_PrepareReceive>
 8013c1a:	e007      	b.n	8013c2c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013c22:	2340      	movs	r3, #64	; 0x40
 8013c24:	2101      	movs	r1, #1
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f005 f8cc 	bl	8018dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013c2c:	2300      	movs	r3, #0
}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b082      	sub	sp, #8
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	460b      	mov	r3, r1
 8013c40:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013c42:	2181      	movs	r1, #129	; 0x81
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f004 ff81 	bl	8018b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013c50:	2101      	movs	r1, #1
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f004 ff7a 	bl	8018b4c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013c60:	2182      	movs	r1, #130	; 0x82
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f004 ff72 	bl	8018b4c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00e      	beq.n	8013ca0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c92:	4618      	mov	r0, r3
 8013c94:	f005 f8f0 	bl	8018e78 <USBD_static_free>
    pdev->pClassData = NULL;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
	...

08013cac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
 8013cb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cbc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d101      	bne.n	8013cd4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013cd0:	2303      	movs	r3, #3
 8013cd2:	e0af      	b.n	8013e34 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d03f      	beq.n	8013d60 <USBD_CDC_Setup+0xb4>
 8013ce0:	2b20      	cmp	r3, #32
 8013ce2:	f040 809f 	bne.w	8013e24 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	88db      	ldrh	r3, [r3, #6]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d02e      	beq.n	8013d4c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	781b      	ldrb	r3, [r3, #0]
 8013cf2:	b25b      	sxtb	r3, r3
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	da16      	bge.n	8013d26 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cfe:	689b      	ldr	r3, [r3, #8]
 8013d00:	683a      	ldr	r2, [r7, #0]
 8013d02:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013d04:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013d06:	683a      	ldr	r2, [r7, #0]
 8013d08:	88d2      	ldrh	r2, [r2, #6]
 8013d0a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	88db      	ldrh	r3, [r3, #6]
 8013d10:	2b07      	cmp	r3, #7
 8013d12:	bf28      	it	cs
 8013d14:	2307      	movcs	r3, #7
 8013d16:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	89fa      	ldrh	r2, [r7, #14]
 8013d1c:	4619      	mov	r1, r3
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f001 fb19 	bl	8015356 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013d24:	e085      	b.n	8013e32 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	785a      	ldrb	r2, [r3, #1]
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	88db      	ldrh	r3, [r3, #6]
 8013d34:	b2da      	uxtb	r2, r3
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013d3c:	6939      	ldr	r1, [r7, #16]
 8013d3e:	683b      	ldr	r3, [r7, #0]
 8013d40:	88db      	ldrh	r3, [r3, #6]
 8013d42:	461a      	mov	r2, r3
 8013d44:	6878      	ldr	r0, [r7, #4]
 8013d46:	f001 fb32 	bl	80153ae <USBD_CtlPrepareRx>
      break;
 8013d4a:	e072      	b.n	8013e32 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d52:	689b      	ldr	r3, [r3, #8]
 8013d54:	683a      	ldr	r2, [r7, #0]
 8013d56:	7850      	ldrb	r0, [r2, #1]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	6839      	ldr	r1, [r7, #0]
 8013d5c:	4798      	blx	r3
      break;
 8013d5e:	e068      	b.n	8013e32 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d60:	683b      	ldr	r3, [r7, #0]
 8013d62:	785b      	ldrb	r3, [r3, #1]
 8013d64:	2b0b      	cmp	r3, #11
 8013d66:	d852      	bhi.n	8013e0e <USBD_CDC_Setup+0x162>
 8013d68:	a201      	add	r2, pc, #4	; (adr r2, 8013d70 <USBD_CDC_Setup+0xc4>)
 8013d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d6e:	bf00      	nop
 8013d70:	08013da1 	.word	0x08013da1
 8013d74:	08013e1d 	.word	0x08013e1d
 8013d78:	08013e0f 	.word	0x08013e0f
 8013d7c:	08013e0f 	.word	0x08013e0f
 8013d80:	08013e0f 	.word	0x08013e0f
 8013d84:	08013e0f 	.word	0x08013e0f
 8013d88:	08013e0f 	.word	0x08013e0f
 8013d8c:	08013e0f 	.word	0x08013e0f
 8013d90:	08013e0f 	.word	0x08013e0f
 8013d94:	08013e0f 	.word	0x08013e0f
 8013d98:	08013dcb 	.word	0x08013dcb
 8013d9c:	08013df5 	.word	0x08013df5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	2b03      	cmp	r3, #3
 8013daa:	d107      	bne.n	8013dbc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013dac:	f107 030a 	add.w	r3, r7, #10
 8013db0:	2202      	movs	r2, #2
 8013db2:	4619      	mov	r1, r3
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f001 face 	bl	8015356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013dba:	e032      	b.n	8013e22 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013dbc:	6839      	ldr	r1, [r7, #0]
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f001 fa58 	bl	8015274 <USBD_CtlError>
            ret = USBD_FAIL;
 8013dc4:	2303      	movs	r3, #3
 8013dc6:	75fb      	strb	r3, [r7, #23]
          break;
 8013dc8:	e02b      	b.n	8013e22 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b03      	cmp	r3, #3
 8013dd4:	d107      	bne.n	8013de6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013dd6:	f107 030d 	add.w	r3, r7, #13
 8013dda:	2201      	movs	r2, #1
 8013ddc:	4619      	mov	r1, r3
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f001 fab9 	bl	8015356 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013de4:	e01d      	b.n	8013e22 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013de6:	6839      	ldr	r1, [r7, #0]
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f001 fa43 	bl	8015274 <USBD_CtlError>
            ret = USBD_FAIL;
 8013dee:	2303      	movs	r3, #3
 8013df0:	75fb      	strb	r3, [r7, #23]
          break;
 8013df2:	e016      	b.n	8013e22 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	2b03      	cmp	r3, #3
 8013dfe:	d00f      	beq.n	8013e20 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f001 fa36 	bl	8015274 <USBD_CtlError>
            ret = USBD_FAIL;
 8013e08:	2303      	movs	r3, #3
 8013e0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013e0c:	e008      	b.n	8013e20 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013e0e:	6839      	ldr	r1, [r7, #0]
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f001 fa2f 	bl	8015274 <USBD_CtlError>
          ret = USBD_FAIL;
 8013e16:	2303      	movs	r3, #3
 8013e18:	75fb      	strb	r3, [r7, #23]
          break;
 8013e1a:	e002      	b.n	8013e22 <USBD_CDC_Setup+0x176>
          break;
 8013e1c:	bf00      	nop
 8013e1e:	e008      	b.n	8013e32 <USBD_CDC_Setup+0x186>
          break;
 8013e20:	bf00      	nop
      }
      break;
 8013e22:	e006      	b.n	8013e32 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013e24:	6839      	ldr	r1, [r7, #0]
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f001 fa24 	bl	8015274 <USBD_CtlError>
      ret = USBD_FAIL;
 8013e2c:	2303      	movs	r3, #3
 8013e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8013e30:	bf00      	nop
  }

  return (uint8_t)ret;
 8013e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	3718      	adds	r7, #24
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}

08013e3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	460b      	mov	r3, r1
 8013e46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013e4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013e5a:	2303      	movs	r3, #3
 8013e5c:	e04f      	b.n	8013efe <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e64:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013e66:	78fa      	ldrb	r2, [r7, #3]
 8013e68:	6879      	ldr	r1, [r7, #4]
 8013e6a:	4613      	mov	r3, r2
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	4413      	add	r3, r2
 8013e70:	009b      	lsls	r3, r3, #2
 8013e72:	440b      	add	r3, r1
 8013e74:	3318      	adds	r3, #24
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d029      	beq.n	8013ed0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013e7c:	78fa      	ldrb	r2, [r7, #3]
 8013e7e:	6879      	ldr	r1, [r7, #4]
 8013e80:	4613      	mov	r3, r2
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	440b      	add	r3, r1
 8013e8a:	3318      	adds	r3, #24
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	78f9      	ldrb	r1, [r7, #3]
 8013e90:	68f8      	ldr	r0, [r7, #12]
 8013e92:	460b      	mov	r3, r1
 8013e94:	00db      	lsls	r3, r3, #3
 8013e96:	440b      	add	r3, r1
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4403      	add	r3, r0
 8013e9c:	3348      	adds	r3, #72	; 0x48
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	fbb2 f1f3 	udiv	r1, r2, r3
 8013ea4:	fb01 f303 	mul.w	r3, r1, r3
 8013ea8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d110      	bne.n	8013ed0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013eae:	78fa      	ldrb	r2, [r7, #3]
 8013eb0:	6879      	ldr	r1, [r7, #4]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	009b      	lsls	r3, r3, #2
 8013eb6:	4413      	add	r3, r2
 8013eb8:	009b      	lsls	r3, r3, #2
 8013eba:	440b      	add	r3, r1
 8013ebc:	3318      	adds	r3, #24
 8013ebe:	2200      	movs	r2, #0
 8013ec0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013ec2:	78f9      	ldrb	r1, [r7, #3]
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f004 ff43 	bl	8018d54 <USBD_LL_Transmit>
 8013ece:	e015      	b.n	8013efc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ede:	691b      	ldr	r3, [r3, #16]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d00b      	beq.n	8013efc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013eea:	691b      	ldr	r3, [r3, #16]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013ef2:	68ba      	ldr	r2, [r7, #8]
 8013ef4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013ef8:	78fa      	ldrb	r2, [r7, #3]
 8013efa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}

08013f06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b084      	sub	sp, #16
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
 8013f0e:	460b      	mov	r3, r1
 8013f10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f18:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d101      	bne.n	8013f28 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013f24:	2303      	movs	r3, #3
 8013f26:	e015      	b.n	8013f54 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013f28:	78fb      	ldrb	r3, [r7, #3]
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f004 ff81 	bl	8018e34 <USBD_LL_GetRxDataSize>
 8013f32:	4602      	mov	r2, r0
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	68fa      	ldr	r2, [r7, #12]
 8013f44:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013f48:	68fa      	ldr	r2, [r7, #12]
 8013f4a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013f4e:	4611      	mov	r1, r2
 8013f50:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3710      	adds	r7, #16
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b084      	sub	sp, #16
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d101      	bne.n	8013f76 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013f72:	2303      	movs	r3, #3
 8013f74:	e01b      	b.n	8013fae <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d015      	beq.n	8013fac <USBD_CDC_EP0_RxReady+0x50>
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013f86:	2bff      	cmp	r3, #255	; 0xff
 8013f88:	d010      	beq.n	8013fac <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f90:	689b      	ldr	r3, [r3, #8]
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013f98:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013fa0:	b292      	uxth	r2, r2
 8013fa2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	22ff      	movs	r2, #255	; 0xff
 8013fa8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013fac:	2300      	movs	r3, #0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
	...

08013fb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b083      	sub	sp, #12
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2243      	movs	r2, #67	; 0x43
 8013fc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013fc6:	4b03      	ldr	r3, [pc, #12]	; (8013fd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	370c      	adds	r7, #12
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr
 8013fd4:	200000a4 	.word	0x200000a4

08013fd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b083      	sub	sp, #12
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2243      	movs	r2, #67	; 0x43
 8013fe4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013fe6:	4b03      	ldr	r3, [pc, #12]	; (8013ff4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	370c      	adds	r7, #12
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr
 8013ff4:	20000060 	.word	0x20000060

08013ff8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b083      	sub	sp, #12
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2243      	movs	r2, #67	; 0x43
 8014004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8014006:	4b03      	ldr	r3, [pc, #12]	; (8014014 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014008:	4618      	mov	r0, r3
 801400a:	370c      	adds	r7, #12
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr
 8014014:	200000e8 	.word	0x200000e8

08014018 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014018:	b480      	push	{r7}
 801401a:	b083      	sub	sp, #12
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	220a      	movs	r2, #10
 8014024:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014026:	4b03      	ldr	r3, [pc, #12]	; (8014034 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014028:	4618      	mov	r0, r3
 801402a:	370c      	adds	r7, #12
 801402c:	46bd      	mov	sp, r7
 801402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014032:	4770      	bx	lr
 8014034:	2000001c 	.word	0x2000001c

08014038 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014038:	b480      	push	{r7}
 801403a:	b083      	sub	sp, #12
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d101      	bne.n	801404c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014048:	2303      	movs	r3, #3
 801404a:	e004      	b.n	8014056 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	683a      	ldr	r2, [r7, #0]
 8014050:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	370c      	adds	r7, #12
 801405a:	46bd      	mov	sp, r7
 801405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014060:	4770      	bx	lr

08014062 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014062:	b480      	push	{r7}
 8014064:	b087      	sub	sp, #28
 8014066:	af00      	add	r7, sp, #0
 8014068:	60f8      	str	r0, [r7, #12]
 801406a:	60b9      	str	r1, [r7, #8]
 801406c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014074:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801407c:	2303      	movs	r3, #3
 801407e:	e008      	b.n	8014092 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	68ba      	ldr	r2, [r7, #8]
 8014084:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	371c      	adds	r7, #28
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801409e:	b480      	push	{r7}
 80140a0:	b085      	sub	sp, #20
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
 80140a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80140b6:	2303      	movs	r3, #3
 80140b8:	e004      	b.n	80140c4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	683a      	ldr	r2, [r7, #0]
 80140be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80140c2:	2300      	movs	r3, #0
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3714      	adds	r7, #20
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr

080140d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b084      	sub	sp, #16
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140de:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80140e0:	2301      	movs	r3, #1
 80140e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d101      	bne.n	80140f2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80140ee:	2303      	movs	r3, #3
 80140f0:	e01a      	b.n	8014128 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d114      	bne.n	8014126 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	2201      	movs	r2, #1
 8014100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801411a:	2181      	movs	r1, #129	; 0x81
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f004 fe19 	bl	8018d54 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014122:	2300      	movs	r3, #0
 8014124:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014126:	7bfb      	ldrb	r3, [r7, #15]
}
 8014128:	4618      	mov	r0, r3
 801412a:	3710      	adds	r7, #16
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}

08014130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b084      	sub	sp, #16
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801413e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014146:	2b00      	cmp	r3, #0
 8014148:	d101      	bne.n	801414e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801414a:	2303      	movs	r3, #3
 801414c:	e016      	b.n	801417c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	7c1b      	ldrb	r3, [r3, #16]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d109      	bne.n	801416a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801415c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014160:	2101      	movs	r1, #1
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f004 fe2e 	bl	8018dc4 <USBD_LL_PrepareReceive>
 8014168:	e007      	b.n	801417a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014170:	2340      	movs	r3, #64	; 0x40
 8014172:	2101      	movs	r1, #1
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f004 fe25 	bl	8018dc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	3710      	adds	r7, #16
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b086      	sub	sp, #24
 8014188:	af00      	add	r7, sp, #0
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	4613      	mov	r3, r2
 8014190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d101      	bne.n	801419c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014198:	2303      	movs	r3, #3
 801419a:	e01f      	b.n	80141dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2200      	movs	r2, #0
 80141a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2200      	movs	r2, #0
 80141a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	2200      	movs	r2, #0
 80141b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	68ba      	ldr	r2, [r7, #8]
 80141be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2201      	movs	r2, #1
 80141c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	79fa      	ldrb	r2, [r7, #7]
 80141ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f004 fc01 	bl	80189d8 <USBD_LL_Init>
 80141d6:	4603      	mov	r3, r0
 80141d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80141da:	7dfb      	ldrb	r3, [r7, #23]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3718      	adds	r7, #24
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b084      	sub	sp, #16
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
 80141ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80141ee:	2300      	movs	r3, #0
 80141f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d101      	bne.n	80141fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80141f8:	2303      	movs	r3, #3
 80141fa:	e016      	b.n	801422a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	683a      	ldr	r2, [r7, #0]
 8014200:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00b      	beq.n	8014228 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014218:	f107 020e 	add.w	r2, r7, #14
 801421c:	4610      	mov	r0, r2
 801421e:	4798      	blx	r3
 8014220:	4602      	mov	r2, r0
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8014228:	2300      	movs	r3, #0
}
 801422a:	4618      	mov	r0, r3
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014232:	b580      	push	{r7, lr}
 8014234:	b082      	sub	sp, #8
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801423a:	6878      	ldr	r0, [r7, #4]
 801423c:	f004 fc16 	bl	8018a6c <USBD_LL_Start>
 8014240:	4603      	mov	r3, r0
}
 8014242:	4618      	mov	r0, r3
 8014244:	3708      	adds	r7, #8
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}

0801424a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801424a:	b480      	push	{r7}
 801424c:	b083      	sub	sp, #12
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	460b      	mov	r3, r1
 801426a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801426c:	2303      	movs	r3, #3
 801426e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014276:	2b00      	cmp	r3, #0
 8014278:	d009      	beq.n	801428e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	78fa      	ldrb	r2, [r7, #3]
 8014284:	4611      	mov	r1, r2
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	4798      	blx	r3
 801428a:	4603      	mov	r3, r0
 801428c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014290:	4618      	mov	r0, r3
 8014292:	3710      	adds	r7, #16
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}

08014298 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	460b      	mov	r3, r1
 80142a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d007      	beq.n	80142be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	78fa      	ldrb	r2, [r7, #3]
 80142b8:	4611      	mov	r1, r2
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	4798      	blx	r3
  }

  return USBD_OK;
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80142d8:	6839      	ldr	r1, [r7, #0]
 80142da:	4618      	mov	r0, r3
 80142dc:	f000 ff90 	bl	8015200 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2201      	movs	r2, #1
 80142e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80142ee:	461a      	mov	r2, r3
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80142fc:	f003 031f 	and.w	r3, r3, #31
 8014300:	2b02      	cmp	r3, #2
 8014302:	d01a      	beq.n	801433a <USBD_LL_SetupStage+0x72>
 8014304:	2b02      	cmp	r3, #2
 8014306:	d822      	bhi.n	801434e <USBD_LL_SetupStage+0x86>
 8014308:	2b00      	cmp	r3, #0
 801430a:	d002      	beq.n	8014312 <USBD_LL_SetupStage+0x4a>
 801430c:	2b01      	cmp	r3, #1
 801430e:	d00a      	beq.n	8014326 <USBD_LL_SetupStage+0x5e>
 8014310:	e01d      	b.n	801434e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014318:	4619      	mov	r1, r3
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 fa62 	bl	80147e4 <USBD_StdDevReq>
 8014320:	4603      	mov	r3, r0
 8014322:	73fb      	strb	r3, [r7, #15]
      break;
 8014324:	e020      	b.n	8014368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801432c:	4619      	mov	r1, r3
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 fac6 	bl	80148c0 <USBD_StdItfReq>
 8014334:	4603      	mov	r3, r0
 8014336:	73fb      	strb	r3, [r7, #15]
      break;
 8014338:	e016      	b.n	8014368 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014340:	4619      	mov	r1, r3
 8014342:	6878      	ldr	r0, [r7, #4]
 8014344:	f000 fb05 	bl	8014952 <USBD_StdEPReq>
 8014348:	4603      	mov	r3, r0
 801434a:	73fb      	strb	r3, [r7, #15]
      break;
 801434c:	e00c      	b.n	8014368 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014358:	b2db      	uxtb	r3, r3
 801435a:	4619      	mov	r1, r3
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f004 fc2b 	bl	8018bb8 <USBD_LL_StallEP>
 8014362:	4603      	mov	r3, r0
 8014364:	73fb      	strb	r3, [r7, #15]
      break;
 8014366:	bf00      	nop
  }

  return ret;
 8014368:	7bfb      	ldrb	r3, [r7, #15]
}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}

08014372 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014372:	b580      	push	{r7, lr}
 8014374:	b086      	sub	sp, #24
 8014376:	af00      	add	r7, sp, #0
 8014378:	60f8      	str	r0, [r7, #12]
 801437a:	460b      	mov	r3, r1
 801437c:	607a      	str	r2, [r7, #4]
 801437e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014380:	7afb      	ldrb	r3, [r7, #11]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d138      	bne.n	80143f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801438c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014394:	2b03      	cmp	r3, #3
 8014396:	d14a      	bne.n	801442e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	689a      	ldr	r2, [r3, #8]
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	68db      	ldr	r3, [r3, #12]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d913      	bls.n	80143cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	689a      	ldr	r2, [r3, #8]
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	1ad2      	subs	r2, r2, r3
 80143ae:	693b      	ldr	r3, [r7, #16]
 80143b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80143b2:	693b      	ldr	r3, [r7, #16]
 80143b4:	68da      	ldr	r2, [r3, #12]
 80143b6:	693b      	ldr	r3, [r7, #16]
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	4293      	cmp	r3, r2
 80143bc:	bf28      	it	cs
 80143be:	4613      	movcs	r3, r2
 80143c0:	461a      	mov	r2, r3
 80143c2:	6879      	ldr	r1, [r7, #4]
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f001 f80f 	bl	80153e8 <USBD_CtlContinueRx>
 80143ca:	e030      	b.n	801442e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143d2:	b2db      	uxtb	r3, r3
 80143d4:	2b03      	cmp	r3, #3
 80143d6:	d10b      	bne.n	80143f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143de:	691b      	ldr	r3, [r3, #16]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d005      	beq.n	80143f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80143ea:	691b      	ldr	r3, [r3, #16]
 80143ec:	68f8      	ldr	r0, [r7, #12]
 80143ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f001 f80a 	bl	801540a <USBD_CtlSendStatus>
 80143f6:	e01a      	b.n	801442e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	2b03      	cmp	r3, #3
 8014402:	d114      	bne.n	801442e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801440a:	699b      	ldr	r3, [r3, #24]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d00e      	beq.n	801442e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014416:	699b      	ldr	r3, [r3, #24]
 8014418:	7afa      	ldrb	r2, [r7, #11]
 801441a:	4611      	mov	r1, r2
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	4798      	blx	r3
 8014420:	4603      	mov	r3, r0
 8014422:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014424:	7dfb      	ldrb	r3, [r7, #23]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801442a:	7dfb      	ldrb	r3, [r7, #23]
 801442c:	e000      	b.n	8014430 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 801442e:	2300      	movs	r3, #0
}
 8014430:	4618      	mov	r0, r3
 8014432:	3718      	adds	r7, #24
 8014434:	46bd      	mov	sp, r7
 8014436:	bd80      	pop	{r7, pc}

08014438 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af00      	add	r7, sp, #0
 801443e:	60f8      	str	r0, [r7, #12]
 8014440:	460b      	mov	r3, r1
 8014442:	607a      	str	r2, [r7, #4]
 8014444:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014446:	7afb      	ldrb	r3, [r7, #11]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d16b      	bne.n	8014524 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	3314      	adds	r3, #20
 8014450:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014458:	2b02      	cmp	r3, #2
 801445a:	d156      	bne.n	801450a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	689a      	ldr	r2, [r3, #8]
 8014460:	693b      	ldr	r3, [r7, #16]
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	429a      	cmp	r2, r3
 8014466:	d914      	bls.n	8014492 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	689a      	ldr	r2, [r3, #8]
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	68db      	ldr	r3, [r3, #12]
 8014470:	1ad2      	subs	r2, r2, r3
 8014472:	693b      	ldr	r3, [r7, #16]
 8014474:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	689b      	ldr	r3, [r3, #8]
 801447a:	461a      	mov	r2, r3
 801447c:	6879      	ldr	r1, [r7, #4]
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f000 ff84 	bl	801538c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014484:	2300      	movs	r3, #0
 8014486:	2200      	movs	r2, #0
 8014488:	2100      	movs	r1, #0
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f004 fc9a 	bl	8018dc4 <USBD_LL_PrepareReceive>
 8014490:	e03b      	b.n	801450a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014492:	693b      	ldr	r3, [r7, #16]
 8014494:	68da      	ldr	r2, [r3, #12]
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	689b      	ldr	r3, [r3, #8]
 801449a:	429a      	cmp	r2, r3
 801449c:	d11c      	bne.n	80144d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	685a      	ldr	r2, [r3, #4]
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d316      	bcc.n	80144d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	685a      	ldr	r2, [r3, #4]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d20f      	bcs.n	80144d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80144b8:	2200      	movs	r2, #0
 80144ba:	2100      	movs	r1, #0
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	f000 ff65 	bl	801538c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144ca:	2300      	movs	r3, #0
 80144cc:	2200      	movs	r2, #0
 80144ce:	2100      	movs	r1, #0
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f004 fc77 	bl	8018dc4 <USBD_LL_PrepareReceive>
 80144d6:	e018      	b.n	801450a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	2b03      	cmp	r3, #3
 80144e2:	d10b      	bne.n	80144fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d005      	beq.n	80144fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	68f8      	ldr	r0, [r7, #12]
 80144fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80144fc:	2180      	movs	r1, #128	; 0x80
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f004 fb5a 	bl	8018bb8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f000 ff93 	bl	8015430 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014510:	2b01      	cmp	r3, #1
 8014512:	d122      	bne.n	801455a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014514:	68f8      	ldr	r0, [r7, #12]
 8014516:	f7ff fe98 	bl	801424a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2200      	movs	r2, #0
 801451e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014522:	e01a      	b.n	801455a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b03      	cmp	r3, #3
 801452e:	d114      	bne.n	801455a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d00e      	beq.n	801455a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014542:	695b      	ldr	r3, [r3, #20]
 8014544:	7afa      	ldrb	r2, [r7, #11]
 8014546:	4611      	mov	r1, r2
 8014548:	68f8      	ldr	r0, [r7, #12]
 801454a:	4798      	blx	r3
 801454c:	4603      	mov	r3, r0
 801454e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014550:	7dfb      	ldrb	r3, [r7, #23]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d001      	beq.n	801455a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8014556:	7dfb      	ldrb	r3, [r7, #23]
 8014558:	e000      	b.n	801455c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3718      	adds	r7, #24
 8014560:	46bd      	mov	sp, r7
 8014562:	bd80      	pop	{r7, pc}

08014564 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2201      	movs	r2, #1
 8014570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	2200      	movs	r2, #0
 8014578:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2200      	movs	r2, #0
 8014580:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2200      	movs	r2, #0
 8014586:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014590:	2b00      	cmp	r3, #0
 8014592:	d101      	bne.n	8014598 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014594:	2303      	movs	r3, #3
 8014596:	e02f      	b.n	80145f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d00f      	beq.n	80145c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145a8:	685b      	ldr	r3, [r3, #4]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d009      	beq.n	80145c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	687a      	ldr	r2, [r7, #4]
 80145b8:	6852      	ldr	r2, [r2, #4]
 80145ba:	b2d2      	uxtb	r2, r2
 80145bc:	4611      	mov	r1, r2
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80145c2:	2340      	movs	r3, #64	; 0x40
 80145c4:	2200      	movs	r2, #0
 80145c6:	2100      	movs	r1, #0
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f004 fa81 	bl	8018ad0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2201      	movs	r2, #1
 80145d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2240      	movs	r2, #64	; 0x40
 80145da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80145de:	2340      	movs	r3, #64	; 0x40
 80145e0:	2200      	movs	r2, #0
 80145e2:	2180      	movs	r1, #128	; 0x80
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f004 fa73 	bl	8018ad0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2201      	movs	r2, #1
 80145ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2240      	movs	r2, #64	; 0x40
 80145f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80145f6:	2300      	movs	r3, #0
}
 80145f8:	4618      	mov	r0, r3
 80145fa:	3708      	adds	r7, #8
 80145fc:	46bd      	mov	sp, r7
 80145fe:	bd80      	pop	{r7, pc}

08014600 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014600:	b480      	push	{r7}
 8014602:	b083      	sub	sp, #12
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
 8014608:	460b      	mov	r3, r1
 801460a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	78fa      	ldrb	r2, [r7, #3]
 8014610:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014612:	2300      	movs	r3, #0
}
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014620:	b480      	push	{r7}
 8014622:	b083      	sub	sp, #12
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801462e:	b2da      	uxtb	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	2204      	movs	r2, #4
 801463a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801463e:	2300      	movs	r3, #0
}
 8014640:	4618      	mov	r0, r3
 8014642:	370c      	adds	r7, #12
 8014644:	46bd      	mov	sp, r7
 8014646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464a:	4770      	bx	lr

0801464c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801464c:	b480      	push	{r7}
 801464e:	b083      	sub	sp, #12
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801465a:	b2db      	uxtb	r3, r3
 801465c:	2b04      	cmp	r3, #4
 801465e:	d106      	bne.n	801466e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014666:	b2da      	uxtb	r2, r3
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr

0801467c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b082      	sub	sp, #8
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801468a:	2b00      	cmp	r3, #0
 801468c:	d101      	bne.n	8014692 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801468e:	2303      	movs	r3, #3
 8014690:	e012      	b.n	80146b8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014698:	b2db      	uxtb	r3, r3
 801469a:	2b03      	cmp	r3, #3
 801469c:	d10b      	bne.n	80146b6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146a4:	69db      	ldr	r3, [r3, #28]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d005      	beq.n	80146b6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146b0:	69db      	ldr	r3, [r3, #28]
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80146b6:	2300      	movs	r3, #0
}
 80146b8:	4618      	mov	r0, r3
 80146ba:	3708      	adds	r7, #8
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd80      	pop	{r7, pc}

080146c0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
 80146c8:	460b      	mov	r3, r1
 80146ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d101      	bne.n	80146da <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80146d6:	2303      	movs	r3, #3
 80146d8:	e014      	b.n	8014704 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146e0:	b2db      	uxtb	r3, r3
 80146e2:	2b03      	cmp	r3, #3
 80146e4:	d10d      	bne.n	8014702 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146ec:	6a1b      	ldr	r3, [r3, #32]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d007      	beq.n	8014702 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80146f8:	6a1b      	ldr	r3, [r3, #32]
 80146fa:	78fa      	ldrb	r2, [r7, #3]
 80146fc:	4611      	mov	r1, r2
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014702:	2300      	movs	r3, #0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	460b      	mov	r3, r1
 8014716:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471e:	2b00      	cmp	r3, #0
 8014720:	d101      	bne.n	8014726 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8014722:	2303      	movs	r3, #3
 8014724:	e014      	b.n	8014750 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801472c:	b2db      	uxtb	r3, r3
 801472e:	2b03      	cmp	r3, #3
 8014730:	d10d      	bne.n	801474e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473a:	2b00      	cmp	r3, #0
 801473c:	d007      	beq.n	801474e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014746:	78fa      	ldrb	r2, [r7, #3]
 8014748:	4611      	mov	r1, r2
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801474e:	2300      	movs	r3, #0
}
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014760:	2300      	movs	r3, #0
}
 8014762:	4618      	mov	r0, r3
 8014764:	370c      	adds	r7, #12
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr

0801476e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801476e:	b580      	push	{r7, lr}
 8014770:	b082      	sub	sp, #8
 8014772:	af00      	add	r7, sp, #0
 8014774:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2201      	movs	r2, #1
 801477a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014784:	2b00      	cmp	r3, #0
 8014786:	d009      	beq.n	801479c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	687a      	ldr	r2, [r7, #4]
 8014792:	6852      	ldr	r2, [r2, #4]
 8014794:	b2d2      	uxtb	r2, r2
 8014796:	4611      	mov	r1, r2
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	4798      	blx	r3
  }

  return USBD_OK;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80147a6:	b480      	push	{r7}
 80147a8:	b087      	sub	sp, #28
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	3301      	adds	r3, #1
 80147bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80147be:	697b      	ldr	r3, [r7, #20]
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80147c4:	8a3b      	ldrh	r3, [r7, #16]
 80147c6:	021b      	lsls	r3, r3, #8
 80147c8:	b21a      	sxth	r2, r3
 80147ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147ce:	4313      	orrs	r3, r2
 80147d0:	b21b      	sxth	r3, r3
 80147d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80147d4:	89fb      	ldrh	r3, [r7, #14]
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	371c      	adds	r7, #28
 80147da:	46bd      	mov	sp, r7
 80147dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e0:	4770      	bx	lr
	...

080147e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80147ee:	2300      	movs	r3, #0
 80147f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	781b      	ldrb	r3, [r3, #0]
 80147f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147fa:	2b40      	cmp	r3, #64	; 0x40
 80147fc:	d005      	beq.n	801480a <USBD_StdDevReq+0x26>
 80147fe:	2b40      	cmp	r3, #64	; 0x40
 8014800:	d853      	bhi.n	80148aa <USBD_StdDevReq+0xc6>
 8014802:	2b00      	cmp	r3, #0
 8014804:	d00b      	beq.n	801481e <USBD_StdDevReq+0x3a>
 8014806:	2b20      	cmp	r3, #32
 8014808:	d14f      	bne.n	80148aa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	6839      	ldr	r1, [r7, #0]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	4798      	blx	r3
 8014818:	4603      	mov	r3, r0
 801481a:	73fb      	strb	r3, [r7, #15]
      break;
 801481c:	e04a      	b.n	80148b4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	785b      	ldrb	r3, [r3, #1]
 8014822:	2b09      	cmp	r3, #9
 8014824:	d83b      	bhi.n	801489e <USBD_StdDevReq+0xba>
 8014826:	a201      	add	r2, pc, #4	; (adr r2, 801482c <USBD_StdDevReq+0x48>)
 8014828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801482c:	08014881 	.word	0x08014881
 8014830:	08014895 	.word	0x08014895
 8014834:	0801489f 	.word	0x0801489f
 8014838:	0801488b 	.word	0x0801488b
 801483c:	0801489f 	.word	0x0801489f
 8014840:	0801485f 	.word	0x0801485f
 8014844:	08014855 	.word	0x08014855
 8014848:	0801489f 	.word	0x0801489f
 801484c:	08014877 	.word	0x08014877
 8014850:	08014869 	.word	0x08014869
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014854:	6839      	ldr	r1, [r7, #0]
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f000 f9de 	bl	8014c18 <USBD_GetDescriptor>
          break;
 801485c:	e024      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801485e:	6839      	ldr	r1, [r7, #0]
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f000 fb43 	bl	8014eec <USBD_SetAddress>
          break;
 8014866:	e01f      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014868:	6839      	ldr	r1, [r7, #0]
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fb82 	bl	8014f74 <USBD_SetConfig>
 8014870:	4603      	mov	r3, r0
 8014872:	73fb      	strb	r3, [r7, #15]
          break;
 8014874:	e018      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014876:	6839      	ldr	r1, [r7, #0]
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 fc21 	bl	80150c0 <USBD_GetConfig>
          break;
 801487e:	e013      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 fc52 	bl	801512c <USBD_GetStatus>
          break;
 8014888:	e00e      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801488a:	6839      	ldr	r1, [r7, #0]
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fc81 	bl	8015194 <USBD_SetFeature>
          break;
 8014892:	e009      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 fc90 	bl	80151bc <USBD_ClrFeature>
          break;
 801489c:	e004      	b.n	80148a8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801489e:	6839      	ldr	r1, [r7, #0]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f000 fce7 	bl	8015274 <USBD_CtlError>
          break;
 80148a6:	bf00      	nop
      }
      break;
 80148a8:	e004      	b.n	80148b4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80148aa:	6839      	ldr	r1, [r7, #0]
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f000 fce1 	bl	8015274 <USBD_CtlError>
      break;
 80148b2:	bf00      	nop
  }

  return ret;
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop

080148c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b084      	sub	sp, #16
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148ca:	2300      	movs	r3, #0
 80148cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148d6:	2b40      	cmp	r3, #64	; 0x40
 80148d8:	d005      	beq.n	80148e6 <USBD_StdItfReq+0x26>
 80148da:	2b40      	cmp	r3, #64	; 0x40
 80148dc:	d82f      	bhi.n	801493e <USBD_StdItfReq+0x7e>
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <USBD_StdItfReq+0x26>
 80148e2:	2b20      	cmp	r3, #32
 80148e4:	d12b      	bne.n	801493e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	3b01      	subs	r3, #1
 80148f0:	2b02      	cmp	r3, #2
 80148f2:	d81d      	bhi.n	8014930 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	889b      	ldrh	r3, [r3, #4]
 80148f8:	b2db      	uxtb	r3, r3
 80148fa:	2b01      	cmp	r3, #1
 80148fc:	d813      	bhi.n	8014926 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	6839      	ldr	r1, [r7, #0]
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	4798      	blx	r3
 801490c:	4603      	mov	r3, r0
 801490e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	88db      	ldrh	r3, [r3, #6]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d110      	bne.n	801493a <USBD_StdItfReq+0x7a>
 8014918:	7bfb      	ldrb	r3, [r7, #15]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10d      	bne.n	801493a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801491e:	6878      	ldr	r0, [r7, #4]
 8014920:	f000 fd73 	bl	801540a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014924:	e009      	b.n	801493a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014926:	6839      	ldr	r1, [r7, #0]
 8014928:	6878      	ldr	r0, [r7, #4]
 801492a:	f000 fca3 	bl	8015274 <USBD_CtlError>
          break;
 801492e:	e004      	b.n	801493a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014930:	6839      	ldr	r1, [r7, #0]
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f000 fc9e 	bl	8015274 <USBD_CtlError>
          break;
 8014938:	e000      	b.n	801493c <USBD_StdItfReq+0x7c>
          break;
 801493a:	bf00      	nop
      }
      break;
 801493c:	e004      	b.n	8014948 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f000 fc97 	bl	8015274 <USBD_CtlError>
      break;
 8014946:	bf00      	nop
  }

  return ret;
 8014948:	7bfb      	ldrb	r3, [r7, #15]
}
 801494a:	4618      	mov	r0, r3
 801494c:	3710      	adds	r7, #16
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}

08014952 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014952:	b580      	push	{r7, lr}
 8014954:	b084      	sub	sp, #16
 8014956:	af00      	add	r7, sp, #0
 8014958:	6078      	str	r0, [r7, #4]
 801495a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801495c:	2300      	movs	r3, #0
 801495e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	889b      	ldrh	r3, [r3, #4]
 8014964:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801496e:	2b40      	cmp	r3, #64	; 0x40
 8014970:	d007      	beq.n	8014982 <USBD_StdEPReq+0x30>
 8014972:	2b40      	cmp	r3, #64	; 0x40
 8014974:	f200 8145 	bhi.w	8014c02 <USBD_StdEPReq+0x2b0>
 8014978:	2b00      	cmp	r3, #0
 801497a:	d00c      	beq.n	8014996 <USBD_StdEPReq+0x44>
 801497c:	2b20      	cmp	r3, #32
 801497e:	f040 8140 	bne.w	8014c02 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014988:	689b      	ldr	r3, [r3, #8]
 801498a:	6839      	ldr	r1, [r7, #0]
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	4798      	blx	r3
 8014990:	4603      	mov	r3, r0
 8014992:	73fb      	strb	r3, [r7, #15]
      break;
 8014994:	e13a      	b.n	8014c0c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	785b      	ldrb	r3, [r3, #1]
 801499a:	2b03      	cmp	r3, #3
 801499c:	d007      	beq.n	80149ae <USBD_StdEPReq+0x5c>
 801499e:	2b03      	cmp	r3, #3
 80149a0:	f300 8129 	bgt.w	8014bf6 <USBD_StdEPReq+0x2a4>
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d07f      	beq.n	8014aa8 <USBD_StdEPReq+0x156>
 80149a8:	2b01      	cmp	r3, #1
 80149aa:	d03c      	beq.n	8014a26 <USBD_StdEPReq+0xd4>
 80149ac:	e123      	b.n	8014bf6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149b4:	b2db      	uxtb	r3, r3
 80149b6:	2b02      	cmp	r3, #2
 80149b8:	d002      	beq.n	80149c0 <USBD_StdEPReq+0x6e>
 80149ba:	2b03      	cmp	r3, #3
 80149bc:	d016      	beq.n	80149ec <USBD_StdEPReq+0x9a>
 80149be:	e02c      	b.n	8014a1a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149c0:	7bbb      	ldrb	r3, [r7, #14]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00d      	beq.n	80149e2 <USBD_StdEPReq+0x90>
 80149c6:	7bbb      	ldrb	r3, [r7, #14]
 80149c8:	2b80      	cmp	r3, #128	; 0x80
 80149ca:	d00a      	beq.n	80149e2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80149cc:	7bbb      	ldrb	r3, [r7, #14]
 80149ce:	4619      	mov	r1, r3
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f004 f8f1 	bl	8018bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80149d6:	2180      	movs	r1, #128	; 0x80
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f004 f8ed 	bl	8018bb8 <USBD_LL_StallEP>
 80149de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80149e0:	e020      	b.n	8014a24 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80149e2:	6839      	ldr	r1, [r7, #0]
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f000 fc45 	bl	8015274 <USBD_CtlError>
              break;
 80149ea:	e01b      	b.n	8014a24 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	885b      	ldrh	r3, [r3, #2]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d10e      	bne.n	8014a12 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80149f4:	7bbb      	ldrb	r3, [r7, #14]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00b      	beq.n	8014a12 <USBD_StdEPReq+0xc0>
 80149fa:	7bbb      	ldrb	r3, [r7, #14]
 80149fc:	2b80      	cmp	r3, #128	; 0x80
 80149fe:	d008      	beq.n	8014a12 <USBD_StdEPReq+0xc0>
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	88db      	ldrh	r3, [r3, #6]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d104      	bne.n	8014a12 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a08:	7bbb      	ldrb	r3, [r7, #14]
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f004 f8d3 	bl	8018bb8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f000 fcf9 	bl	801540a <USBD_CtlSendStatus>

              break;
 8014a18:	e004      	b.n	8014a24 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014a1a:	6839      	ldr	r1, [r7, #0]
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f000 fc29 	bl	8015274 <USBD_CtlError>
              break;
 8014a22:	bf00      	nop
          }
          break;
 8014a24:	e0ec      	b.n	8014c00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	2b02      	cmp	r3, #2
 8014a30:	d002      	beq.n	8014a38 <USBD_StdEPReq+0xe6>
 8014a32:	2b03      	cmp	r3, #3
 8014a34:	d016      	beq.n	8014a64 <USBD_StdEPReq+0x112>
 8014a36:	e030      	b.n	8014a9a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014a38:	7bbb      	ldrb	r3, [r7, #14]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00d      	beq.n	8014a5a <USBD_StdEPReq+0x108>
 8014a3e:	7bbb      	ldrb	r3, [r7, #14]
 8014a40:	2b80      	cmp	r3, #128	; 0x80
 8014a42:	d00a      	beq.n	8014a5a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014a44:	7bbb      	ldrb	r3, [r7, #14]
 8014a46:	4619      	mov	r1, r3
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f004 f8b5 	bl	8018bb8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a4e:	2180      	movs	r1, #128	; 0x80
 8014a50:	6878      	ldr	r0, [r7, #4]
 8014a52:	f004 f8b1 	bl	8018bb8 <USBD_LL_StallEP>
 8014a56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014a58:	e025      	b.n	8014aa6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014a5a:	6839      	ldr	r1, [r7, #0]
 8014a5c:	6878      	ldr	r0, [r7, #4]
 8014a5e:	f000 fc09 	bl	8015274 <USBD_CtlError>
              break;
 8014a62:	e020      	b.n	8014aa6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014a64:	683b      	ldr	r3, [r7, #0]
 8014a66:	885b      	ldrh	r3, [r3, #2]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d11b      	bne.n	8014aa4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014a6c:	7bbb      	ldrb	r3, [r7, #14]
 8014a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d004      	beq.n	8014a80 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014a76:	7bbb      	ldrb	r3, [r7, #14]
 8014a78:	4619      	mov	r1, r3
 8014a7a:	6878      	ldr	r0, [r7, #4]
 8014a7c:	f004 f8d2 	bl	8018c24 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014a80:	6878      	ldr	r0, [r7, #4]
 8014a82:	f000 fcc2 	bl	801540a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a8c:	689b      	ldr	r3, [r3, #8]
 8014a8e:	6839      	ldr	r1, [r7, #0]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	4798      	blx	r3
 8014a94:	4603      	mov	r3, r0
 8014a96:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014a98:	e004      	b.n	8014aa4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 fbe9 	bl	8015274 <USBD_CtlError>
              break;
 8014aa2:	e000      	b.n	8014aa6 <USBD_StdEPReq+0x154>
              break;
 8014aa4:	bf00      	nop
          }
          break;
 8014aa6:	e0ab      	b.n	8014c00 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	2b02      	cmp	r3, #2
 8014ab2:	d002      	beq.n	8014aba <USBD_StdEPReq+0x168>
 8014ab4:	2b03      	cmp	r3, #3
 8014ab6:	d032      	beq.n	8014b1e <USBD_StdEPReq+0x1cc>
 8014ab8:	e097      	b.n	8014bea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014aba:	7bbb      	ldrb	r3, [r7, #14]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d007      	beq.n	8014ad0 <USBD_StdEPReq+0x17e>
 8014ac0:	7bbb      	ldrb	r3, [r7, #14]
 8014ac2:	2b80      	cmp	r3, #128	; 0x80
 8014ac4:	d004      	beq.n	8014ad0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014ac6:	6839      	ldr	r1, [r7, #0]
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f000 fbd3 	bl	8015274 <USBD_CtlError>
                break;
 8014ace:	e091      	b.n	8014bf4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	da0b      	bge.n	8014af0 <USBD_StdEPReq+0x19e>
 8014ad8:	7bbb      	ldrb	r3, [r7, #14]
 8014ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ade:	4613      	mov	r3, r2
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	4413      	add	r3, r2
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	3310      	adds	r3, #16
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	4413      	add	r3, r2
 8014aec:	3304      	adds	r3, #4
 8014aee:	e00b      	b.n	8014b08 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014af0:	7bbb      	ldrb	r3, [r7, #14]
 8014af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014af6:	4613      	mov	r3, r2
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	4413      	add	r3, r2
 8014afc:	009b      	lsls	r3, r3, #2
 8014afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	4413      	add	r3, r2
 8014b06:	3304      	adds	r3, #4
 8014b08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	2202      	movs	r2, #2
 8014b14:	4619      	mov	r1, r3
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 fc1d 	bl	8015356 <USBD_CtlSendData>
              break;
 8014b1c:	e06a      	b.n	8014bf4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	da11      	bge.n	8014b4a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014b26:	7bbb      	ldrb	r3, [r7, #14]
 8014b28:	f003 020f 	and.w	r2, r3, #15
 8014b2c:	6879      	ldr	r1, [r7, #4]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	4413      	add	r3, r2
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	440b      	add	r3, r1
 8014b38:	3324      	adds	r3, #36	; 0x24
 8014b3a:	881b      	ldrh	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d117      	bne.n	8014b70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014b40:	6839      	ldr	r1, [r7, #0]
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 fb96 	bl	8015274 <USBD_CtlError>
                  break;
 8014b48:	e054      	b.n	8014bf4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014b4a:	7bbb      	ldrb	r3, [r7, #14]
 8014b4c:	f003 020f 	and.w	r2, r3, #15
 8014b50:	6879      	ldr	r1, [r7, #4]
 8014b52:	4613      	mov	r3, r2
 8014b54:	009b      	lsls	r3, r3, #2
 8014b56:	4413      	add	r3, r2
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	440b      	add	r3, r1
 8014b5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b60:	881b      	ldrh	r3, [r3, #0]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d104      	bne.n	8014b70 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014b66:	6839      	ldr	r1, [r7, #0]
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 fb83 	bl	8015274 <USBD_CtlError>
                  break;
 8014b6e:	e041      	b.n	8014bf4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	da0b      	bge.n	8014b90 <USBD_StdEPReq+0x23e>
 8014b78:	7bbb      	ldrb	r3, [r7, #14]
 8014b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014b7e:	4613      	mov	r3, r2
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	4413      	add	r3, r2
 8014b84:	009b      	lsls	r3, r3, #2
 8014b86:	3310      	adds	r3, #16
 8014b88:	687a      	ldr	r2, [r7, #4]
 8014b8a:	4413      	add	r3, r2
 8014b8c:	3304      	adds	r3, #4
 8014b8e:	e00b      	b.n	8014ba8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014b90:	7bbb      	ldrb	r3, [r7, #14]
 8014b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014b96:	4613      	mov	r3, r2
 8014b98:	009b      	lsls	r3, r3, #2
 8014b9a:	4413      	add	r3, r2
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014ba2:	687a      	ldr	r2, [r7, #4]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014baa:	7bbb      	ldrb	r3, [r7, #14]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d002      	beq.n	8014bb6 <USBD_StdEPReq+0x264>
 8014bb0:	7bbb      	ldrb	r3, [r7, #14]
 8014bb2:	2b80      	cmp	r3, #128	; 0x80
 8014bb4:	d103      	bne.n	8014bbe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	601a      	str	r2, [r3, #0]
 8014bbc:	e00e      	b.n	8014bdc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014bbe:	7bbb      	ldrb	r3, [r7, #14]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f004 f864 	bl	8018c90 <USBD_LL_IsStallEP>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d003      	beq.n	8014bd6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	2201      	movs	r2, #1
 8014bd2:	601a      	str	r2, [r3, #0]
 8014bd4:	e002      	b.n	8014bdc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014bd6:	68bb      	ldr	r3, [r7, #8]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	2202      	movs	r2, #2
 8014be0:	4619      	mov	r1, r3
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 fbb7 	bl	8015356 <USBD_CtlSendData>
              break;
 8014be8:	e004      	b.n	8014bf4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014bea:	6839      	ldr	r1, [r7, #0]
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f000 fb41 	bl	8015274 <USBD_CtlError>
              break;
 8014bf2:	bf00      	nop
          }
          break;
 8014bf4:	e004      	b.n	8014c00 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f000 fb3b 	bl	8015274 <USBD_CtlError>
          break;
 8014bfe:	bf00      	nop
      }
      break;
 8014c00:	e004      	b.n	8014c0c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014c02:	6839      	ldr	r1, [r7, #0]
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f000 fb35 	bl	8015274 <USBD_CtlError>
      break;
 8014c0a:	bf00      	nop
  }

  return ret;
 8014c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3710      	adds	r7, #16
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
	...

08014c18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
 8014c20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014c22:	2300      	movs	r3, #0
 8014c24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014c26:	2300      	movs	r3, #0
 8014c28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	885b      	ldrh	r3, [r3, #2]
 8014c32:	0a1b      	lsrs	r3, r3, #8
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	3b01      	subs	r3, #1
 8014c38:	2b06      	cmp	r3, #6
 8014c3a:	f200 8128 	bhi.w	8014e8e <USBD_GetDescriptor+0x276>
 8014c3e:	a201      	add	r2, pc, #4	; (adr r2, 8014c44 <USBD_GetDescriptor+0x2c>)
 8014c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c44:	08014c61 	.word	0x08014c61
 8014c48:	08014c79 	.word	0x08014c79
 8014c4c:	08014cb9 	.word	0x08014cb9
 8014c50:	08014e8f 	.word	0x08014e8f
 8014c54:	08014e8f 	.word	0x08014e8f
 8014c58:	08014e2f 	.word	0x08014e2f
 8014c5c:	08014e5b 	.word	0x08014e5b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	7c12      	ldrb	r2, [r2, #16]
 8014c6c:	f107 0108 	add.w	r1, r7, #8
 8014c70:	4610      	mov	r0, r2
 8014c72:	4798      	blx	r3
 8014c74:	60f8      	str	r0, [r7, #12]
      break;
 8014c76:	e112      	b.n	8014e9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	7c1b      	ldrb	r3, [r3, #16]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d10d      	bne.n	8014c9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c88:	f107 0208 	add.w	r2, r7, #8
 8014c8c:	4610      	mov	r0, r2
 8014c8e:	4798      	blx	r3
 8014c90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	3301      	adds	r3, #1
 8014c96:	2202      	movs	r2, #2
 8014c98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014c9a:	e100      	b.n	8014e9e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ca4:	f107 0208 	add.w	r2, r7, #8
 8014ca8:	4610      	mov	r0, r2
 8014caa:	4798      	blx	r3
 8014cac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	2202      	movs	r2, #2
 8014cb4:	701a      	strb	r2, [r3, #0]
      break;
 8014cb6:	e0f2      	b.n	8014e9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	885b      	ldrh	r3, [r3, #2]
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	2b05      	cmp	r3, #5
 8014cc0:	f200 80ac 	bhi.w	8014e1c <USBD_GetDescriptor+0x204>
 8014cc4:	a201      	add	r2, pc, #4	; (adr r2, 8014ccc <USBD_GetDescriptor+0xb4>)
 8014cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cca:	bf00      	nop
 8014ccc:	08014ce5 	.word	0x08014ce5
 8014cd0:	08014d19 	.word	0x08014d19
 8014cd4:	08014d4d 	.word	0x08014d4d
 8014cd8:	08014d81 	.word	0x08014d81
 8014cdc:	08014db5 	.word	0x08014db5
 8014ce0:	08014de9 	.word	0x08014de9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d00b      	beq.n	8014d08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	7c12      	ldrb	r2, [r2, #16]
 8014cfc:	f107 0108 	add.w	r1, r7, #8
 8014d00:	4610      	mov	r0, r2
 8014d02:	4798      	blx	r3
 8014d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d06:	e091      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 fab2 	bl	8015274 <USBD_CtlError>
            err++;
 8014d10:	7afb      	ldrb	r3, [r7, #11]
 8014d12:	3301      	adds	r3, #1
 8014d14:	72fb      	strb	r3, [r7, #11]
          break;
 8014d16:	e089      	b.n	8014e2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d00b      	beq.n	8014d3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d2a:	689b      	ldr	r3, [r3, #8]
 8014d2c:	687a      	ldr	r2, [r7, #4]
 8014d2e:	7c12      	ldrb	r2, [r2, #16]
 8014d30:	f107 0108 	add.w	r1, r7, #8
 8014d34:	4610      	mov	r0, r2
 8014d36:	4798      	blx	r3
 8014d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d3a:	e077      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d3c:	6839      	ldr	r1, [r7, #0]
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f000 fa98 	bl	8015274 <USBD_CtlError>
            err++;
 8014d44:	7afb      	ldrb	r3, [r7, #11]
 8014d46:	3301      	adds	r3, #1
 8014d48:	72fb      	strb	r3, [r7, #11]
          break;
 8014d4a:	e06f      	b.n	8014e2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d00b      	beq.n	8014d70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	687a      	ldr	r2, [r7, #4]
 8014d62:	7c12      	ldrb	r2, [r2, #16]
 8014d64:	f107 0108 	add.w	r1, r7, #8
 8014d68:	4610      	mov	r0, r2
 8014d6a:	4798      	blx	r3
 8014d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d6e:	e05d      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014d70:	6839      	ldr	r1, [r7, #0]
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f000 fa7e 	bl	8015274 <USBD_CtlError>
            err++;
 8014d78:	7afb      	ldrb	r3, [r7, #11]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8014d7e:	e055      	b.n	8014e2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d86:	691b      	ldr	r3, [r3, #16]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d00b      	beq.n	8014da4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014d92:	691b      	ldr	r3, [r3, #16]
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	7c12      	ldrb	r2, [r2, #16]
 8014d98:	f107 0108 	add.w	r1, r7, #8
 8014d9c:	4610      	mov	r0, r2
 8014d9e:	4798      	blx	r3
 8014da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014da2:	e043      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014da4:	6839      	ldr	r1, [r7, #0]
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f000 fa64 	bl	8015274 <USBD_CtlError>
            err++;
 8014dac:	7afb      	ldrb	r3, [r7, #11]
 8014dae:	3301      	adds	r3, #1
 8014db0:	72fb      	strb	r3, [r7, #11]
          break;
 8014db2:	e03b      	b.n	8014e2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dba:	695b      	ldr	r3, [r3, #20]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d00b      	beq.n	8014dd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dc6:	695b      	ldr	r3, [r3, #20]
 8014dc8:	687a      	ldr	r2, [r7, #4]
 8014dca:	7c12      	ldrb	r2, [r2, #16]
 8014dcc:	f107 0108 	add.w	r1, r7, #8
 8014dd0:	4610      	mov	r0, r2
 8014dd2:	4798      	blx	r3
 8014dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014dd6:	e029      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014dd8:	6839      	ldr	r1, [r7, #0]
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f000 fa4a 	bl	8015274 <USBD_CtlError>
            err++;
 8014de0:	7afb      	ldrb	r3, [r7, #11]
 8014de2:	3301      	adds	r3, #1
 8014de4:	72fb      	strb	r3, [r7, #11]
          break;
 8014de6:	e021      	b.n	8014e2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dee:	699b      	ldr	r3, [r3, #24]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d00b      	beq.n	8014e0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dfa:	699b      	ldr	r3, [r3, #24]
 8014dfc:	687a      	ldr	r2, [r7, #4]
 8014dfe:	7c12      	ldrb	r2, [r2, #16]
 8014e00:	f107 0108 	add.w	r1, r7, #8
 8014e04:	4610      	mov	r0, r2
 8014e06:	4798      	blx	r3
 8014e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014e0a:	e00f      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014e0c:	6839      	ldr	r1, [r7, #0]
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 fa30 	bl	8015274 <USBD_CtlError>
            err++;
 8014e14:	7afb      	ldrb	r3, [r7, #11]
 8014e16:	3301      	adds	r3, #1
 8014e18:	72fb      	strb	r3, [r7, #11]
          break;
 8014e1a:	e007      	b.n	8014e2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014e1c:	6839      	ldr	r1, [r7, #0]
 8014e1e:	6878      	ldr	r0, [r7, #4]
 8014e20:	f000 fa28 	bl	8015274 <USBD_CtlError>
          err++;
 8014e24:	7afb      	ldrb	r3, [r7, #11]
 8014e26:	3301      	adds	r3, #1
 8014e28:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014e2a:	bf00      	nop
      }
      break;
 8014e2c:	e037      	b.n	8014e9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	7c1b      	ldrb	r3, [r3, #16]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d109      	bne.n	8014e4a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e3e:	f107 0208 	add.w	r2, r7, #8
 8014e42:	4610      	mov	r0, r2
 8014e44:	4798      	blx	r3
 8014e46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e48:	e029      	b.n	8014e9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014e4a:	6839      	ldr	r1, [r7, #0]
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f000 fa11 	bl	8015274 <USBD_CtlError>
        err++;
 8014e52:	7afb      	ldrb	r3, [r7, #11]
 8014e54:	3301      	adds	r3, #1
 8014e56:	72fb      	strb	r3, [r7, #11]
      break;
 8014e58:	e021      	b.n	8014e9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	7c1b      	ldrb	r3, [r3, #16]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d10d      	bne.n	8014e7e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e6a:	f107 0208 	add.w	r2, r7, #8
 8014e6e:	4610      	mov	r0, r2
 8014e70:	4798      	blx	r3
 8014e72:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	3301      	adds	r3, #1
 8014e78:	2207      	movs	r2, #7
 8014e7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e7c:	e00f      	b.n	8014e9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8014e7e:	6839      	ldr	r1, [r7, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 f9f7 	bl	8015274 <USBD_CtlError>
        err++;
 8014e86:	7afb      	ldrb	r3, [r7, #11]
 8014e88:	3301      	adds	r3, #1
 8014e8a:	72fb      	strb	r3, [r7, #11]
      break;
 8014e8c:	e007      	b.n	8014e9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	6878      	ldr	r0, [r7, #4]
 8014e92:	f000 f9ef 	bl	8015274 <USBD_CtlError>
      err++;
 8014e96:	7afb      	ldrb	r3, [r7, #11]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8014e9c:	bf00      	nop
  }

  if (err != 0U)
 8014e9e:	7afb      	ldrb	r3, [r7, #11]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d11e      	bne.n	8014ee2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	88db      	ldrh	r3, [r3, #6]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d016      	beq.n	8014eda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014eac:	893b      	ldrh	r3, [r7, #8]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d00e      	beq.n	8014ed0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	88da      	ldrh	r2, [r3, #6]
 8014eb6:	893b      	ldrh	r3, [r7, #8]
 8014eb8:	4293      	cmp	r3, r2
 8014eba:	bf28      	it	cs
 8014ebc:	4613      	movcs	r3, r2
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014ec2:	893b      	ldrh	r3, [r7, #8]
 8014ec4:	461a      	mov	r2, r3
 8014ec6:	68f9      	ldr	r1, [r7, #12]
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f000 fa44 	bl	8015356 <USBD_CtlSendData>
 8014ece:	e009      	b.n	8014ee4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014ed0:	6839      	ldr	r1, [r7, #0]
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f000 f9ce 	bl	8015274 <USBD_CtlError>
 8014ed8:	e004      	b.n	8014ee4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 fa95 	bl	801540a <USBD_CtlSendStatus>
 8014ee0:	e000      	b.n	8014ee4 <USBD_GetDescriptor+0x2cc>
    return;
 8014ee2:	bf00      	nop
  }
}
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop

08014eec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b084      	sub	sp, #16
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	889b      	ldrh	r3, [r3, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d131      	bne.n	8014f62 <USBD_SetAddress+0x76>
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	88db      	ldrh	r3, [r3, #6]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d12d      	bne.n	8014f62 <USBD_SetAddress+0x76>
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	885b      	ldrh	r3, [r3, #2]
 8014f0a:	2b7f      	cmp	r3, #127	; 0x7f
 8014f0c:	d829      	bhi.n	8014f62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	885b      	ldrh	r3, [r3, #2]
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	d104      	bne.n	8014f30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 f9a3 	bl	8015274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f2e:	e01d      	b.n	8014f6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	7bfa      	ldrb	r2, [r7, #15]
 8014f34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f38:	7bfb      	ldrb	r3, [r7, #15]
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f003 fed3 	bl	8018ce8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f000 fa61 	bl	801540a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f48:	7bfb      	ldrb	r3, [r7, #15]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d004      	beq.n	8014f58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2202      	movs	r2, #2
 8014f52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f56:	e009      	b.n	8014f6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f60:	e004      	b.n	8014f6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f62:	6839      	ldr	r1, [r7, #0]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 f985 	bl	8015274 <USBD_CtlError>
  }
}
 8014f6a:	bf00      	nop
 8014f6c:	bf00      	nop
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}

08014f74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b084      	sub	sp, #16
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
 8014f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	885b      	ldrh	r3, [r3, #2]
 8014f86:	b2da      	uxtb	r2, r3
 8014f88:	4b4c      	ldr	r3, [pc, #304]	; (80150bc <USBD_SetConfig+0x148>)
 8014f8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f8c:	4b4b      	ldr	r3, [pc, #300]	; (80150bc <USBD_SetConfig+0x148>)
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d905      	bls.n	8014fa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 f96c 	bl	8015274 <USBD_CtlError>
    return USBD_FAIL;
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	e088      	b.n	80150b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	2b02      	cmp	r3, #2
 8014faa:	d002      	beq.n	8014fb2 <USBD_SetConfig+0x3e>
 8014fac:	2b03      	cmp	r3, #3
 8014fae:	d025      	beq.n	8014ffc <USBD_SetConfig+0x88>
 8014fb0:	e071      	b.n	8015096 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014fb2:	4b42      	ldr	r3, [pc, #264]	; (80150bc <USBD_SetConfig+0x148>)
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d01c      	beq.n	8014ff4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014fba:	4b40      	ldr	r3, [pc, #256]	; (80150bc <USBD_SetConfig+0x148>)
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014fc4:	4b3d      	ldr	r3, [pc, #244]	; (80150bc <USBD_SetConfig+0x148>)
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	4619      	mov	r1, r3
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff f948 	bl	8014260 <USBD_SetClassConfig>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014fd4:	7bfb      	ldrb	r3, [r7, #15]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d004      	beq.n	8014fe4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014fda:	6839      	ldr	r1, [r7, #0]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f000 f949 	bl	8015274 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014fe2:	e065      	b.n	80150b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 fa10 	bl	801540a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2203      	movs	r2, #3
 8014fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014ff2:	e05d      	b.n	80150b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f000 fa08 	bl	801540a <USBD_CtlSendStatus>
      break;
 8014ffa:	e059      	b.n	80150b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014ffc:	4b2f      	ldr	r3, [pc, #188]	; (80150bc <USBD_SetConfig+0x148>)
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d112      	bne.n	801502a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2202      	movs	r2, #2
 8015008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801500c:	4b2b      	ldr	r3, [pc, #172]	; (80150bc <USBD_SetConfig+0x148>)
 801500e:	781b      	ldrb	r3, [r3, #0]
 8015010:	461a      	mov	r2, r3
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015016:	4b29      	ldr	r3, [pc, #164]	; (80150bc <USBD_SetConfig+0x148>)
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	4619      	mov	r1, r3
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7ff f93b 	bl	8014298 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f000 f9f1 	bl	801540a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015028:	e042      	b.n	80150b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801502a:	4b24      	ldr	r3, [pc, #144]	; (80150bc <USBD_SetConfig+0x148>)
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	461a      	mov	r2, r3
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	429a      	cmp	r2, r3
 8015036:	d02a      	beq.n	801508e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	685b      	ldr	r3, [r3, #4]
 801503c:	b2db      	uxtb	r3, r3
 801503e:	4619      	mov	r1, r3
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f7ff f929 	bl	8014298 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015046:	4b1d      	ldr	r3, [pc, #116]	; (80150bc <USBD_SetConfig+0x148>)
 8015048:	781b      	ldrb	r3, [r3, #0]
 801504a:	461a      	mov	r2, r3
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015050:	4b1a      	ldr	r3, [pc, #104]	; (80150bc <USBD_SetConfig+0x148>)
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	4619      	mov	r1, r3
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7ff f902 	bl	8014260 <USBD_SetClassConfig>
 801505c:	4603      	mov	r3, r0
 801505e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015060:	7bfb      	ldrb	r3, [r7, #15]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d00f      	beq.n	8015086 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015066:	6839      	ldr	r1, [r7, #0]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 f903 	bl	8015274 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	b2db      	uxtb	r3, r3
 8015074:	4619      	mov	r1, r3
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f7ff f90e 	bl	8014298 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2202      	movs	r2, #2
 8015080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015084:	e014      	b.n	80150b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015086:	6878      	ldr	r0, [r7, #4]
 8015088:	f000 f9bf 	bl	801540a <USBD_CtlSendStatus>
      break;
 801508c:	e010      	b.n	80150b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f000 f9bb 	bl	801540a <USBD_CtlSendStatus>
      break;
 8015094:	e00c      	b.n	80150b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 f8eb 	bl	8015274 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801509e:	4b07      	ldr	r3, [pc, #28]	; (80150bc <USBD_SetConfig+0x148>)
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	4619      	mov	r1, r3
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f7ff f8f7 	bl	8014298 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80150aa:	2303      	movs	r3, #3
 80150ac:	73fb      	strb	r3, [r7, #15]
      break;
 80150ae:	bf00      	nop
  }

  return ret;
 80150b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	200013f8 	.word	0x200013f8

080150c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b082      	sub	sp, #8
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	6078      	str	r0, [r7, #4]
 80150c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80150ca:	683b      	ldr	r3, [r7, #0]
 80150cc:	88db      	ldrh	r3, [r3, #6]
 80150ce:	2b01      	cmp	r3, #1
 80150d0:	d004      	beq.n	80150dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80150d2:	6839      	ldr	r1, [r7, #0]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 f8cd 	bl	8015274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80150da:	e023      	b.n	8015124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150e2:	b2db      	uxtb	r3, r3
 80150e4:	2b02      	cmp	r3, #2
 80150e6:	dc02      	bgt.n	80150ee <USBD_GetConfig+0x2e>
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	dc03      	bgt.n	80150f4 <USBD_GetConfig+0x34>
 80150ec:	e015      	b.n	801511a <USBD_GetConfig+0x5a>
 80150ee:	2b03      	cmp	r3, #3
 80150f0:	d00b      	beq.n	801510a <USBD_GetConfig+0x4a>
 80150f2:	e012      	b.n	801511a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	3308      	adds	r3, #8
 80150fe:	2201      	movs	r2, #1
 8015100:	4619      	mov	r1, r3
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 f927 	bl	8015356 <USBD_CtlSendData>
        break;
 8015108:	e00c      	b.n	8015124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	3304      	adds	r3, #4
 801510e:	2201      	movs	r2, #1
 8015110:	4619      	mov	r1, r3
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f000 f91f 	bl	8015356 <USBD_CtlSendData>
        break;
 8015118:	e004      	b.n	8015124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801511a:	6839      	ldr	r1, [r7, #0]
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f000 f8a9 	bl	8015274 <USBD_CtlError>
        break;
 8015122:	bf00      	nop
}
 8015124:	bf00      	nop
 8015126:	3708      	adds	r7, #8
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801513c:	b2db      	uxtb	r3, r3
 801513e:	3b01      	subs	r3, #1
 8015140:	2b02      	cmp	r3, #2
 8015142:	d81e      	bhi.n	8015182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015144:	683b      	ldr	r3, [r7, #0]
 8015146:	88db      	ldrh	r3, [r3, #6]
 8015148:	2b02      	cmp	r3, #2
 801514a:	d004      	beq.n	8015156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801514c:	6839      	ldr	r1, [r7, #0]
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f000 f890 	bl	8015274 <USBD_CtlError>
        break;
 8015154:	e01a      	b.n	801518c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2201      	movs	r2, #1
 801515a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015162:	2b00      	cmp	r3, #0
 8015164:	d005      	beq.n	8015172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	68db      	ldr	r3, [r3, #12]
 801516a:	f043 0202 	orr.w	r2, r3, #2
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	330c      	adds	r3, #12
 8015176:	2202      	movs	r2, #2
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 f8eb 	bl	8015356 <USBD_CtlSendData>
      break;
 8015180:	e004      	b.n	801518c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015182:	6839      	ldr	r1, [r7, #0]
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 f875 	bl	8015274 <USBD_CtlError>
      break;
 801518a:	bf00      	nop
  }
}
 801518c:	bf00      	nop
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	885b      	ldrh	r3, [r3, #2]
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d106      	bne.n	80151b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2201      	movs	r2, #1
 80151aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 f92b 	bl	801540a <USBD_CtlSendStatus>
  }
}
 80151b4:	bf00      	nop
 80151b6:	3708      	adds	r7, #8
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	3b01      	subs	r3, #1
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	d80b      	bhi.n	80151ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	885b      	ldrh	r3, [r3, #2]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d10c      	bne.n	80151f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2200      	movs	r2, #0
 80151e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f000 f910 	bl	801540a <USBD_CtlSendStatus>
      }
      break;
 80151ea:	e004      	b.n	80151f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80151ec:	6839      	ldr	r1, [r7, #0]
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f000 f840 	bl	8015274 <USBD_CtlError>
      break;
 80151f4:	e000      	b.n	80151f8 <USBD_ClrFeature+0x3c>
      break;
 80151f6:	bf00      	nop
  }
}
 80151f8:	bf00      	nop
 80151fa:	3708      	adds	r7, #8
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b084      	sub	sp, #16
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	781a      	ldrb	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	3301      	adds	r3, #1
 801521a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	781a      	ldrb	r2, [r3, #0]
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	3301      	adds	r3, #1
 8015228:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	f7ff fabb 	bl	80147a6 <SWAPBYTE>
 8015230:	4603      	mov	r3, r0
 8015232:	461a      	mov	r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	3301      	adds	r3, #1
 801523c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	3301      	adds	r3, #1
 8015242:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f7ff faae 	bl	80147a6 <SWAPBYTE>
 801524a:	4603      	mov	r3, r0
 801524c:	461a      	mov	r2, r3
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	3301      	adds	r3, #1
 8015256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	3301      	adds	r3, #1
 801525c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f7ff faa1 	bl	80147a6 <SWAPBYTE>
 8015264:	4603      	mov	r3, r0
 8015266:	461a      	mov	r2, r3
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	80da      	strh	r2, [r3, #6]
}
 801526c:	bf00      	nop
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}

08015274 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
 801527c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801527e:	2180      	movs	r1, #128	; 0x80
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f003 fc99 	bl	8018bb8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015286:	2100      	movs	r1, #0
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f003 fc95 	bl	8018bb8 <USBD_LL_StallEP>
}
 801528e:	bf00      	nop
 8015290:	3708      	adds	r7, #8
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b086      	sub	sp, #24
 801529a:	af00      	add	r7, sp, #0
 801529c:	60f8      	str	r0, [r7, #12]
 801529e:	60b9      	str	r1, [r7, #8]
 80152a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80152a2:	2300      	movs	r3, #0
 80152a4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d036      	beq.n	801531a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80152b0:	6938      	ldr	r0, [r7, #16]
 80152b2:	f000 f836 	bl	8015322 <USBD_GetLen>
 80152b6:	4603      	mov	r3, r0
 80152b8:	3301      	adds	r3, #1
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	005b      	lsls	r3, r3, #1
 80152be:	b29a      	uxth	r2, r3
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80152c4:	7dfb      	ldrb	r3, [r7, #23]
 80152c6:	68ba      	ldr	r2, [r7, #8]
 80152c8:	4413      	add	r3, r2
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	7812      	ldrb	r2, [r2, #0]
 80152ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80152d0:	7dfb      	ldrb	r3, [r7, #23]
 80152d2:	3301      	adds	r3, #1
 80152d4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152d6:	7dfb      	ldrb	r3, [r7, #23]
 80152d8:	68ba      	ldr	r2, [r7, #8]
 80152da:	4413      	add	r3, r2
 80152dc:	2203      	movs	r2, #3
 80152de:	701a      	strb	r2, [r3, #0]
  idx++;
 80152e0:	7dfb      	ldrb	r3, [r7, #23]
 80152e2:	3301      	adds	r3, #1
 80152e4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80152e6:	e013      	b.n	8015310 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80152e8:	7dfb      	ldrb	r3, [r7, #23]
 80152ea:	68ba      	ldr	r2, [r7, #8]
 80152ec:	4413      	add	r3, r2
 80152ee:	693a      	ldr	r2, [r7, #16]
 80152f0:	7812      	ldrb	r2, [r2, #0]
 80152f2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	3301      	adds	r3, #1
 80152f8:	613b      	str	r3, [r7, #16]
    idx++;
 80152fa:	7dfb      	ldrb	r3, [r7, #23]
 80152fc:	3301      	adds	r3, #1
 80152fe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015300:	7dfb      	ldrb	r3, [r7, #23]
 8015302:	68ba      	ldr	r2, [r7, #8]
 8015304:	4413      	add	r3, r2
 8015306:	2200      	movs	r2, #0
 8015308:	701a      	strb	r2, [r3, #0]
    idx++;
 801530a:	7dfb      	ldrb	r3, [r7, #23]
 801530c:	3301      	adds	r3, #1
 801530e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d1e7      	bne.n	80152e8 <USBD_GetString+0x52>
 8015318:	e000      	b.n	801531c <USBD_GetString+0x86>
    return;
 801531a:	bf00      	nop
  }
}
 801531c:	3718      	adds	r7, #24
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}

08015322 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015322:	b480      	push	{r7}
 8015324:	b085      	sub	sp, #20
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801532a:	2300      	movs	r3, #0
 801532c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015332:	e005      	b.n	8015340 <USBD_GetLen+0x1e>
  {
    len++;
 8015334:	7bfb      	ldrb	r3, [r7, #15]
 8015336:	3301      	adds	r3, #1
 8015338:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	3301      	adds	r3, #1
 801533e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015340:	68bb      	ldr	r3, [r7, #8]
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d1f5      	bne.n	8015334 <USBD_GetLen+0x12>
  }

  return len;
 8015348:	7bfb      	ldrb	r3, [r7, #15]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3714      	adds	r7, #20
 801534e:	46bd      	mov	sp, r7
 8015350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015354:	4770      	bx	lr

08015356 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015356:	b580      	push	{r7, lr}
 8015358:	b084      	sub	sp, #16
 801535a:	af00      	add	r7, sp, #0
 801535c:	60f8      	str	r0, [r7, #12]
 801535e:	60b9      	str	r1, [r7, #8]
 8015360:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2202      	movs	r2, #2
 8015366:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	687a      	ldr	r2, [r7, #4]
 8015374:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	68ba      	ldr	r2, [r7, #8]
 801537a:	2100      	movs	r1, #0
 801537c:	68f8      	ldr	r0, [r7, #12]
 801537e:	f003 fce9 	bl	8018d54 <USBD_LL_Transmit>

  return USBD_OK;
 8015382:	2300      	movs	r3, #0
}
 8015384:	4618      	mov	r0, r3
 8015386:	3710      	adds	r7, #16
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b084      	sub	sp, #16
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	60b9      	str	r1, [r7, #8]
 8015396:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	68ba      	ldr	r2, [r7, #8]
 801539c:	2100      	movs	r1, #0
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	f003 fcd8 	bl	8018d54 <USBD_LL_Transmit>

  return USBD_OK;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3710      	adds	r7, #16
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b084      	sub	sp, #16
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	60f8      	str	r0, [r7, #12]
 80153b6:	60b9      	str	r1, [r7, #8]
 80153b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2203      	movs	r2, #3
 80153be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	687a      	ldr	r2, [r7, #4]
 80153ce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	68ba      	ldr	r2, [r7, #8]
 80153d6:	2100      	movs	r1, #0
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f003 fcf3 	bl	8018dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153de:	2300      	movs	r3, #0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3710      	adds	r7, #16
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	68ba      	ldr	r2, [r7, #8]
 80153f8:	2100      	movs	r1, #0
 80153fa:	68f8      	ldr	r0, [r7, #12]
 80153fc:	f003 fce2 	bl	8018dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015400:	2300      	movs	r3, #0
}
 8015402:	4618      	mov	r0, r3
 8015404:	3710      	adds	r7, #16
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801540a:	b580      	push	{r7, lr}
 801540c:	b082      	sub	sp, #8
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2204      	movs	r2, #4
 8015416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801541a:	2300      	movs	r3, #0
 801541c:	2200      	movs	r2, #0
 801541e:	2100      	movs	r1, #0
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f003 fc97 	bl	8018d54 <USBD_LL_Transmit>

  return USBD_OK;
 8015426:	2300      	movs	r3, #0
}
 8015428:	4618      	mov	r0, r3
 801542a:	3708      	adds	r7, #8
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}

08015430 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2205      	movs	r2, #5
 801543c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015440:	2300      	movs	r3, #0
 8015442:	2200      	movs	r2, #0
 8015444:	2100      	movs	r1, #0
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f003 fcbc 	bl	8018dc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801544c:	2300      	movs	r3, #0
}
 801544e:	4618      	mov	r0, r3
 8015450:	3708      	adds	r7, #8
 8015452:	46bd      	mov	sp, r7
 8015454:	bd80      	pop	{r7, pc}
	...

08015458 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b084      	sub	sp, #16
 801545c:	af00      	add	r7, sp, #0
 801545e:	4603      	mov	r3, r0
 8015460:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015462:	79fb      	ldrb	r3, [r7, #7]
 8015464:	4a08      	ldr	r2, [pc, #32]	; (8015488 <disk_status+0x30>)
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	4413      	add	r3, r2
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	79fa      	ldrb	r2, [r7, #7]
 8015470:	4905      	ldr	r1, [pc, #20]	; (8015488 <disk_status+0x30>)
 8015472:	440a      	add	r2, r1
 8015474:	7a12      	ldrb	r2, [r2, #8]
 8015476:	4610      	mov	r0, r2
 8015478:	4798      	blx	r3
 801547a:	4603      	mov	r3, r0
 801547c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015480:	4618      	mov	r0, r3
 8015482:	3710      	adds	r7, #16
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	20001424 	.word	0x20001424

0801548c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	4603      	mov	r3, r0
 8015494:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015496:	2300      	movs	r3, #0
 8015498:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801549a:	79fb      	ldrb	r3, [r7, #7]
 801549c:	4a0d      	ldr	r2, [pc, #52]	; (80154d4 <disk_initialize+0x48>)
 801549e:	5cd3      	ldrb	r3, [r2, r3]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d111      	bne.n	80154c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	4a0b      	ldr	r2, [pc, #44]	; (80154d4 <disk_initialize+0x48>)
 80154a8:	2101      	movs	r1, #1
 80154aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80154ac:	79fb      	ldrb	r3, [r7, #7]
 80154ae:	4a09      	ldr	r2, [pc, #36]	; (80154d4 <disk_initialize+0x48>)
 80154b0:	009b      	lsls	r3, r3, #2
 80154b2:	4413      	add	r3, r2
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	79fa      	ldrb	r2, [r7, #7]
 80154ba:	4906      	ldr	r1, [pc, #24]	; (80154d4 <disk_initialize+0x48>)
 80154bc:	440a      	add	r2, r1
 80154be:	7a12      	ldrb	r2, [r2, #8]
 80154c0:	4610      	mov	r0, r2
 80154c2:	4798      	blx	r3
 80154c4:	4603      	mov	r3, r0
 80154c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80154c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3710      	adds	r7, #16
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	20001424 	.word	0x20001424

080154d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80154d8:	b590      	push	{r4, r7, lr}
 80154da:	b087      	sub	sp, #28
 80154dc:	af00      	add	r7, sp, #0
 80154de:	60b9      	str	r1, [r7, #8]
 80154e0:	607a      	str	r2, [r7, #4]
 80154e2:	603b      	str	r3, [r7, #0]
 80154e4:	4603      	mov	r3, r0
 80154e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
 80154ea:	4a0a      	ldr	r2, [pc, #40]	; (8015514 <disk_read+0x3c>)
 80154ec:	009b      	lsls	r3, r3, #2
 80154ee:	4413      	add	r3, r2
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	689c      	ldr	r4, [r3, #8]
 80154f4:	7bfb      	ldrb	r3, [r7, #15]
 80154f6:	4a07      	ldr	r2, [pc, #28]	; (8015514 <disk_read+0x3c>)
 80154f8:	4413      	add	r3, r2
 80154fa:	7a18      	ldrb	r0, [r3, #8]
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	68b9      	ldr	r1, [r7, #8]
 8015502:	47a0      	blx	r4
 8015504:	4603      	mov	r3, r0
 8015506:	75fb      	strb	r3, [r7, #23]
  return res;
 8015508:	7dfb      	ldrb	r3, [r7, #23]
}
 801550a:	4618      	mov	r0, r3
 801550c:	371c      	adds	r7, #28
 801550e:	46bd      	mov	sp, r7
 8015510:	bd90      	pop	{r4, r7, pc}
 8015512:	bf00      	nop
 8015514:	20001424 	.word	0x20001424

08015518 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015518:	b590      	push	{r4, r7, lr}
 801551a:	b087      	sub	sp, #28
 801551c:	af00      	add	r7, sp, #0
 801551e:	60b9      	str	r1, [r7, #8]
 8015520:	607a      	str	r2, [r7, #4]
 8015522:	603b      	str	r3, [r7, #0]
 8015524:	4603      	mov	r3, r0
 8015526:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015528:	7bfb      	ldrb	r3, [r7, #15]
 801552a:	4a0a      	ldr	r2, [pc, #40]	; (8015554 <disk_write+0x3c>)
 801552c:	009b      	lsls	r3, r3, #2
 801552e:	4413      	add	r3, r2
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	68dc      	ldr	r4, [r3, #12]
 8015534:	7bfb      	ldrb	r3, [r7, #15]
 8015536:	4a07      	ldr	r2, [pc, #28]	; (8015554 <disk_write+0x3c>)
 8015538:	4413      	add	r3, r2
 801553a:	7a18      	ldrb	r0, [r3, #8]
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	68b9      	ldr	r1, [r7, #8]
 8015542:	47a0      	blx	r4
 8015544:	4603      	mov	r3, r0
 8015546:	75fb      	strb	r3, [r7, #23]
  return res;
 8015548:	7dfb      	ldrb	r3, [r7, #23]
}
 801554a:	4618      	mov	r0, r3
 801554c:	371c      	adds	r7, #28
 801554e:	46bd      	mov	sp, r7
 8015550:	bd90      	pop	{r4, r7, pc}
 8015552:	bf00      	nop
 8015554:	20001424 	.word	0x20001424

08015558 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	4603      	mov	r3, r0
 8015560:	603a      	str	r2, [r7, #0]
 8015562:	71fb      	strb	r3, [r7, #7]
 8015564:	460b      	mov	r3, r1
 8015566:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015568:	79fb      	ldrb	r3, [r7, #7]
 801556a:	4a09      	ldr	r2, [pc, #36]	; (8015590 <disk_ioctl+0x38>)
 801556c:	009b      	lsls	r3, r3, #2
 801556e:	4413      	add	r3, r2
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	691b      	ldr	r3, [r3, #16]
 8015574:	79fa      	ldrb	r2, [r7, #7]
 8015576:	4906      	ldr	r1, [pc, #24]	; (8015590 <disk_ioctl+0x38>)
 8015578:	440a      	add	r2, r1
 801557a:	7a10      	ldrb	r0, [r2, #8]
 801557c:	79b9      	ldrb	r1, [r7, #6]
 801557e:	683a      	ldr	r2, [r7, #0]
 8015580:	4798      	blx	r3
 8015582:	4603      	mov	r3, r0
 8015584:	73fb      	strb	r3, [r7, #15]
  return res;
 8015586:	7bfb      	ldrb	r3, [r7, #15]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3710      	adds	r7, #16
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	20001424 	.word	0x20001424

08015594 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	3301      	adds	r3, #1
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80155a4:	89fb      	ldrh	r3, [r7, #14]
 80155a6:	021b      	lsls	r3, r3, #8
 80155a8:	b21a      	sxth	r2, r3
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	b21b      	sxth	r3, r3
 80155b0:	4313      	orrs	r3, r2
 80155b2:	b21b      	sxth	r3, r3
 80155b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80155b6:	89fb      	ldrh	r3, [r7, #14]
}
 80155b8:	4618      	mov	r0, r3
 80155ba:	3714      	adds	r7, #20
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr

080155c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80155c4:	b480      	push	{r7}
 80155c6:	b085      	sub	sp, #20
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	3303      	adds	r3, #3
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	021b      	lsls	r3, r3, #8
 80155d8:	687a      	ldr	r2, [r7, #4]
 80155da:	3202      	adds	r2, #2
 80155dc:	7812      	ldrb	r2, [r2, #0]
 80155de:	4313      	orrs	r3, r2
 80155e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	021b      	lsls	r3, r3, #8
 80155e6:	687a      	ldr	r2, [r7, #4]
 80155e8:	3201      	adds	r2, #1
 80155ea:	7812      	ldrb	r2, [r2, #0]
 80155ec:	4313      	orrs	r3, r2
 80155ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	021b      	lsls	r3, r3, #8
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	7812      	ldrb	r2, [r2, #0]
 80155f8:	4313      	orrs	r3, r2
 80155fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80155fc:	68fb      	ldr	r3, [r7, #12]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr

0801560a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801560a:	b480      	push	{r7}
 801560c:	b083      	sub	sp, #12
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
 8015612:	460b      	mov	r3, r1
 8015614:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	1c5a      	adds	r2, r3, #1
 801561a:	607a      	str	r2, [r7, #4]
 801561c:	887a      	ldrh	r2, [r7, #2]
 801561e:	b2d2      	uxtb	r2, r2
 8015620:	701a      	strb	r2, [r3, #0]
 8015622:	887b      	ldrh	r3, [r7, #2]
 8015624:	0a1b      	lsrs	r3, r3, #8
 8015626:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	1c5a      	adds	r2, r3, #1
 801562c:	607a      	str	r2, [r7, #4]
 801562e:	887a      	ldrh	r2, [r7, #2]
 8015630:	b2d2      	uxtb	r2, r2
 8015632:	701a      	strb	r2, [r3, #0]
}
 8015634:	bf00      	nop
 8015636:	370c      	adds	r7, #12
 8015638:	46bd      	mov	sp, r7
 801563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563e:	4770      	bx	lr

08015640 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015640:	b480      	push	{r7}
 8015642:	b083      	sub	sp, #12
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	1c5a      	adds	r2, r3, #1
 801564e:	607a      	str	r2, [r7, #4]
 8015650:	683a      	ldr	r2, [r7, #0]
 8015652:	b2d2      	uxtb	r2, r2
 8015654:	701a      	strb	r2, [r3, #0]
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	0a1b      	lsrs	r3, r3, #8
 801565a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	1c5a      	adds	r2, r3, #1
 8015660:	607a      	str	r2, [r7, #4]
 8015662:	683a      	ldr	r2, [r7, #0]
 8015664:	b2d2      	uxtb	r2, r2
 8015666:	701a      	strb	r2, [r3, #0]
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	0a1b      	lsrs	r3, r3, #8
 801566c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	1c5a      	adds	r2, r3, #1
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	683a      	ldr	r2, [r7, #0]
 8015676:	b2d2      	uxtb	r2, r2
 8015678:	701a      	strb	r2, [r3, #0]
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	0a1b      	lsrs	r3, r3, #8
 801567e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	1c5a      	adds	r2, r3, #1
 8015684:	607a      	str	r2, [r7, #4]
 8015686:	683a      	ldr	r2, [r7, #0]
 8015688:	b2d2      	uxtb	r2, r2
 801568a:	701a      	strb	r2, [r3, #0]
}
 801568c:	bf00      	nop
 801568e:	370c      	adds	r7, #12
 8015690:	46bd      	mov	sp, r7
 8015692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015696:	4770      	bx	lr

08015698 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015698:	b480      	push	{r7}
 801569a:	b087      	sub	sp, #28
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d00d      	beq.n	80156ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80156b2:	693a      	ldr	r2, [r7, #16]
 80156b4:	1c53      	adds	r3, r2, #1
 80156b6:	613b      	str	r3, [r7, #16]
 80156b8:	697b      	ldr	r3, [r7, #20]
 80156ba:	1c59      	adds	r1, r3, #1
 80156bc:	6179      	str	r1, [r7, #20]
 80156be:	7812      	ldrb	r2, [r2, #0]
 80156c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	3b01      	subs	r3, #1
 80156c6:	607b      	str	r3, [r7, #4]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d1f1      	bne.n	80156b2 <mem_cpy+0x1a>
	}
}
 80156ce:	bf00      	nop
 80156d0:	371c      	adds	r7, #28
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr

080156da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80156da:	b480      	push	{r7}
 80156dc:	b087      	sub	sp, #28
 80156de:	af00      	add	r7, sp, #0
 80156e0:	60f8      	str	r0, [r7, #12]
 80156e2:	60b9      	str	r1, [r7, #8]
 80156e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	1c5a      	adds	r2, r3, #1
 80156ee:	617a      	str	r2, [r7, #20]
 80156f0:	68ba      	ldr	r2, [r7, #8]
 80156f2:	b2d2      	uxtb	r2, r2
 80156f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	3b01      	subs	r3, #1
 80156fa:	607b      	str	r3, [r7, #4]
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1f3      	bne.n	80156ea <mem_set+0x10>
}
 8015702:	bf00      	nop
 8015704:	bf00      	nop
 8015706:	371c      	adds	r7, #28
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015710:	b480      	push	{r7}
 8015712:	b089      	sub	sp, #36	; 0x24
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015724:	2300      	movs	r3, #0
 8015726:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	1c5a      	adds	r2, r3, #1
 801572c:	61fa      	str	r2, [r7, #28]
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	4619      	mov	r1, r3
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	1c5a      	adds	r2, r3, #1
 8015736:	61ba      	str	r2, [r7, #24]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	1acb      	subs	r3, r1, r3
 801573c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3b01      	subs	r3, #1
 8015742:	607b      	str	r3, [r7, #4]
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d002      	beq.n	8015750 <mem_cmp+0x40>
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d0eb      	beq.n	8015728 <mem_cmp+0x18>

	return r;
 8015750:	697b      	ldr	r3, [r7, #20]
}
 8015752:	4618      	mov	r0, r3
 8015754:	3724      	adds	r7, #36	; 0x24
 8015756:	46bd      	mov	sp, r7
 8015758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575c:	4770      	bx	lr

0801575e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801575e:	b480      	push	{r7}
 8015760:	b083      	sub	sp, #12
 8015762:	af00      	add	r7, sp, #0
 8015764:	6078      	str	r0, [r7, #4]
 8015766:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015768:	e002      	b.n	8015770 <chk_chr+0x12>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	3301      	adds	r3, #1
 801576e:	607b      	str	r3, [r7, #4]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	781b      	ldrb	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d005      	beq.n	8015784 <chk_chr+0x26>
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	461a      	mov	r2, r3
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	4293      	cmp	r3, r2
 8015782:	d1f2      	bne.n	801576a <chk_chr+0xc>
	return *str;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	781b      	ldrb	r3, [r3, #0]
}
 8015788:	4618      	mov	r0, r3
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015794:	b480      	push	{r7}
 8015796:	b085      	sub	sp, #20
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801579e:	2300      	movs	r3, #0
 80157a0:	60bb      	str	r3, [r7, #8]
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	60fb      	str	r3, [r7, #12]
 80157a6:	e029      	b.n	80157fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80157a8:	4a27      	ldr	r2, [pc, #156]	; (8015848 <chk_lock+0xb4>)
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	011b      	lsls	r3, r3, #4
 80157ae:	4413      	add	r3, r2
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d01d      	beq.n	80157f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80157b6:	4a24      	ldr	r2, [pc, #144]	; (8015848 <chk_lock+0xb4>)
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	011b      	lsls	r3, r3, #4
 80157bc:	4413      	add	r3, r2
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	429a      	cmp	r2, r3
 80157c6:	d116      	bne.n	80157f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80157c8:	4a1f      	ldr	r2, [pc, #124]	; (8015848 <chk_lock+0xb4>)
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	011b      	lsls	r3, r3, #4
 80157ce:	4413      	add	r3, r2
 80157d0:	3304      	adds	r3, #4
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80157d8:	429a      	cmp	r2, r3
 80157da:	d10c      	bne.n	80157f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80157dc:	4a1a      	ldr	r2, [pc, #104]	; (8015848 <chk_lock+0xb4>)
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	011b      	lsls	r3, r3, #4
 80157e2:	4413      	add	r3, r2
 80157e4:	3308      	adds	r3, #8
 80157e6:	681a      	ldr	r2, [r3, #0]
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80157ec:	429a      	cmp	r2, r3
 80157ee:	d102      	bne.n	80157f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80157f0:	e007      	b.n	8015802 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80157f2:	2301      	movs	r3, #1
 80157f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3301      	adds	r3, #1
 80157fa:	60fb      	str	r3, [r7, #12]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	2b01      	cmp	r3, #1
 8015800:	d9d2      	bls.n	80157a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	2b02      	cmp	r3, #2
 8015806:	d109      	bne.n	801581c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d102      	bne.n	8015814 <chk_lock+0x80>
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	2b02      	cmp	r3, #2
 8015812:	d101      	bne.n	8015818 <chk_lock+0x84>
 8015814:	2300      	movs	r3, #0
 8015816:	e010      	b.n	801583a <chk_lock+0xa6>
 8015818:	2312      	movs	r3, #18
 801581a:	e00e      	b.n	801583a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d108      	bne.n	8015834 <chk_lock+0xa0>
 8015822:	4a09      	ldr	r2, [pc, #36]	; (8015848 <chk_lock+0xb4>)
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	011b      	lsls	r3, r3, #4
 8015828:	4413      	add	r3, r2
 801582a:	330c      	adds	r3, #12
 801582c:	881b      	ldrh	r3, [r3, #0]
 801582e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015832:	d101      	bne.n	8015838 <chk_lock+0xa4>
 8015834:	2310      	movs	r3, #16
 8015836:	e000      	b.n	801583a <chk_lock+0xa6>
 8015838:	2300      	movs	r3, #0
}
 801583a:	4618      	mov	r0, r3
 801583c:	3714      	adds	r7, #20
 801583e:	46bd      	mov	sp, r7
 8015840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015844:	4770      	bx	lr
 8015846:	bf00      	nop
 8015848:	20001404 	.word	0x20001404

0801584c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8015852:	2300      	movs	r3, #0
 8015854:	607b      	str	r3, [r7, #4]
 8015856:	e002      	b.n	801585e <enq_lock+0x12>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	3301      	adds	r3, #1
 801585c:	607b      	str	r3, [r7, #4]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b01      	cmp	r3, #1
 8015862:	d806      	bhi.n	8015872 <enq_lock+0x26>
 8015864:	4a09      	ldr	r2, [pc, #36]	; (801588c <enq_lock+0x40>)
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	011b      	lsls	r3, r3, #4
 801586a:	4413      	add	r3, r2
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d1f2      	bne.n	8015858 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	2b02      	cmp	r3, #2
 8015876:	bf14      	ite	ne
 8015878:	2301      	movne	r3, #1
 801587a:	2300      	moveq	r3, #0
 801587c:	b2db      	uxtb	r3, r3
}
 801587e:	4618      	mov	r0, r3
 8015880:	370c      	adds	r7, #12
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr
 801588a:	bf00      	nop
 801588c:	20001404 	.word	0x20001404

08015890 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8015890:	b480      	push	{r7}
 8015892:	b085      	sub	sp, #20
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801589a:	2300      	movs	r3, #0
 801589c:	60fb      	str	r3, [r7, #12]
 801589e:	e01f      	b.n	80158e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80158a0:	4a41      	ldr	r2, [pc, #260]	; (80159a8 <inc_lock+0x118>)
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	011b      	lsls	r3, r3, #4
 80158a6:	4413      	add	r3, r2
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d113      	bne.n	80158da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80158b2:	4a3d      	ldr	r2, [pc, #244]	; (80159a8 <inc_lock+0x118>)
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	011b      	lsls	r3, r3, #4
 80158b8:	4413      	add	r3, r2
 80158ba:	3304      	adds	r3, #4
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80158c2:	429a      	cmp	r2, r3
 80158c4:	d109      	bne.n	80158da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80158c6:	4a38      	ldr	r2, [pc, #224]	; (80159a8 <inc_lock+0x118>)
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	011b      	lsls	r3, r3, #4
 80158cc:	4413      	add	r3, r2
 80158ce:	3308      	adds	r3, #8
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d006      	beq.n	80158e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	3301      	adds	r3, #1
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2b01      	cmp	r3, #1
 80158e4:	d9dc      	bls.n	80158a0 <inc_lock+0x10>
 80158e6:	e000      	b.n	80158ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80158e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2b02      	cmp	r3, #2
 80158ee:	d132      	bne.n	8015956 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80158f0:	2300      	movs	r3, #0
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	e002      	b.n	80158fc <inc_lock+0x6c>
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	3301      	adds	r3, #1
 80158fa:	60fb      	str	r3, [r7, #12]
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d806      	bhi.n	8015910 <inc_lock+0x80>
 8015902:	4a29      	ldr	r2, [pc, #164]	; (80159a8 <inc_lock+0x118>)
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	011b      	lsls	r3, r3, #4
 8015908:	4413      	add	r3, r2
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d1f2      	bne.n	80158f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2b02      	cmp	r3, #2
 8015914:	d101      	bne.n	801591a <inc_lock+0x8a>
 8015916:	2300      	movs	r3, #0
 8015918:	e040      	b.n	801599c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	4922      	ldr	r1, [pc, #136]	; (80159a8 <inc_lock+0x118>)
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	011b      	lsls	r3, r3, #4
 8015924:	440b      	add	r3, r1
 8015926:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	689a      	ldr	r2, [r3, #8]
 801592c:	491e      	ldr	r1, [pc, #120]	; (80159a8 <inc_lock+0x118>)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	011b      	lsls	r3, r3, #4
 8015932:	440b      	add	r3, r1
 8015934:	3304      	adds	r3, #4
 8015936:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	695a      	ldr	r2, [r3, #20]
 801593c:	491a      	ldr	r1, [pc, #104]	; (80159a8 <inc_lock+0x118>)
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	011b      	lsls	r3, r3, #4
 8015942:	440b      	add	r3, r1
 8015944:	3308      	adds	r3, #8
 8015946:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8015948:	4a17      	ldr	r2, [pc, #92]	; (80159a8 <inc_lock+0x118>)
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	011b      	lsls	r3, r3, #4
 801594e:	4413      	add	r3, r2
 8015950:	330c      	adds	r3, #12
 8015952:	2200      	movs	r2, #0
 8015954:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8015956:	683b      	ldr	r3, [r7, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d009      	beq.n	8015970 <inc_lock+0xe0>
 801595c:	4a12      	ldr	r2, [pc, #72]	; (80159a8 <inc_lock+0x118>)
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	011b      	lsls	r3, r3, #4
 8015962:	4413      	add	r3, r2
 8015964:	330c      	adds	r3, #12
 8015966:	881b      	ldrh	r3, [r3, #0]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d001      	beq.n	8015970 <inc_lock+0xe0>
 801596c:	2300      	movs	r3, #0
 801596e:	e015      	b.n	801599c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d108      	bne.n	8015988 <inc_lock+0xf8>
 8015976:	4a0c      	ldr	r2, [pc, #48]	; (80159a8 <inc_lock+0x118>)
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	011b      	lsls	r3, r3, #4
 801597c:	4413      	add	r3, r2
 801597e:	330c      	adds	r3, #12
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	3301      	adds	r3, #1
 8015984:	b29a      	uxth	r2, r3
 8015986:	e001      	b.n	801598c <inc_lock+0xfc>
 8015988:	f44f 7280 	mov.w	r2, #256	; 0x100
 801598c:	4906      	ldr	r1, [pc, #24]	; (80159a8 <inc_lock+0x118>)
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	011b      	lsls	r3, r3, #4
 8015992:	440b      	add	r3, r1
 8015994:	330c      	adds	r3, #12
 8015996:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	3301      	adds	r3, #1
}
 801599c:	4618      	mov	r0, r3
 801599e:	3714      	adds	r7, #20
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr
 80159a8:	20001404 	.word	0x20001404

080159ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80159ac:	b480      	push	{r7}
 80159ae:	b085      	sub	sp, #20
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	3b01      	subs	r3, #1
 80159b8:	607b      	str	r3, [r7, #4]
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d825      	bhi.n	8015a0c <dec_lock+0x60>
		n = Files[i].ctr;
 80159c0:	4a17      	ldr	r2, [pc, #92]	; (8015a20 <dec_lock+0x74>)
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	011b      	lsls	r3, r3, #4
 80159c6:	4413      	add	r3, r2
 80159c8:	330c      	adds	r3, #12
 80159ca:	881b      	ldrh	r3, [r3, #0]
 80159cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80159ce:	89fb      	ldrh	r3, [r7, #14]
 80159d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159d4:	d101      	bne.n	80159da <dec_lock+0x2e>
 80159d6:	2300      	movs	r3, #0
 80159d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80159da:	89fb      	ldrh	r3, [r7, #14]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d002      	beq.n	80159e6 <dec_lock+0x3a>
 80159e0:	89fb      	ldrh	r3, [r7, #14]
 80159e2:	3b01      	subs	r3, #1
 80159e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80159e6:	4a0e      	ldr	r2, [pc, #56]	; (8015a20 <dec_lock+0x74>)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	011b      	lsls	r3, r3, #4
 80159ec:	4413      	add	r3, r2
 80159ee:	330c      	adds	r3, #12
 80159f0:	89fa      	ldrh	r2, [r7, #14]
 80159f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80159f4:	89fb      	ldrh	r3, [r7, #14]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d105      	bne.n	8015a06 <dec_lock+0x5a>
 80159fa:	4a09      	ldr	r2, [pc, #36]	; (8015a20 <dec_lock+0x74>)
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	011b      	lsls	r3, r3, #4
 8015a00:	4413      	add	r3, r2
 8015a02:	2200      	movs	r2, #0
 8015a04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8015a06:	2300      	movs	r3, #0
 8015a08:	737b      	strb	r3, [r7, #13]
 8015a0a:	e001      	b.n	8015a10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8015a0c:	2302      	movs	r3, #2
 8015a0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8015a10:	7b7b      	ldrb	r3, [r7, #13]
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3714      	adds	r7, #20
 8015a16:	46bd      	mov	sp, r7
 8015a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1c:	4770      	bx	lr
 8015a1e:	bf00      	nop
 8015a20:	20001404 	.word	0x20001404

08015a24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8015a24:	b480      	push	{r7}
 8015a26:	b085      	sub	sp, #20
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	60fb      	str	r3, [r7, #12]
 8015a30:	e010      	b.n	8015a54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8015a32:	4a0d      	ldr	r2, [pc, #52]	; (8015a68 <clear_lock+0x44>)
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	011b      	lsls	r3, r3, #4
 8015a38:	4413      	add	r3, r2
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d105      	bne.n	8015a4e <clear_lock+0x2a>
 8015a42:	4a09      	ldr	r2, [pc, #36]	; (8015a68 <clear_lock+0x44>)
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	011b      	lsls	r3, r3, #4
 8015a48:	4413      	add	r3, r2
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	3301      	adds	r3, #1
 8015a52:	60fb      	str	r3, [r7, #12]
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2b01      	cmp	r3, #1
 8015a58:	d9eb      	bls.n	8015a32 <clear_lock+0xe>
	}
}
 8015a5a:	bf00      	nop
 8015a5c:	bf00      	nop
 8015a5e:	3714      	adds	r7, #20
 8015a60:	46bd      	mov	sp, r7
 8015a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a66:	4770      	bx	lr
 8015a68:	20001404 	.word	0x20001404

08015a6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015a74:	2300      	movs	r3, #0
 8015a76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	78db      	ldrb	r3, [r3, #3]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d034      	beq.n	8015aea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	7858      	ldrb	r0, [r3, #1]
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a90:	2301      	movs	r3, #1
 8015a92:	697a      	ldr	r2, [r7, #20]
 8015a94:	f7ff fd40 	bl	8015518 <disk_write>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d002      	beq.n	8015aa4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	73fb      	strb	r3, [r7, #15]
 8015aa2:	e022      	b.n	8015aea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6a1b      	ldr	r3, [r3, #32]
 8015aae:	697a      	ldr	r2, [r7, #20]
 8015ab0:	1ad2      	subs	r2, r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	699b      	ldr	r3, [r3, #24]
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d217      	bcs.n	8015aea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	789b      	ldrb	r3, [r3, #2]
 8015abe:	613b      	str	r3, [r7, #16]
 8015ac0:	e010      	b.n	8015ae4 <sync_window+0x78>
					wsect += fs->fsize;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	699b      	ldr	r3, [r3, #24]
 8015ac6:	697a      	ldr	r2, [r7, #20]
 8015ac8:	4413      	add	r3, r2
 8015aca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	7858      	ldrb	r0, [r3, #1]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015ad6:	2301      	movs	r3, #1
 8015ad8:	697a      	ldr	r2, [r7, #20]
 8015ada:	f7ff fd1d 	bl	8015518 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	3b01      	subs	r3, #1
 8015ae2:	613b      	str	r3, [r7, #16]
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	2b01      	cmp	r3, #1
 8015ae8:	d8eb      	bhi.n	8015ac2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3718      	adds	r7, #24
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b084      	sub	sp, #16
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015afe:	2300      	movs	r3, #0
 8015b00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b06:	683a      	ldr	r2, [r7, #0]
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d01b      	beq.n	8015b44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f7ff ffad 	bl	8015a6c <sync_window>
 8015b12:	4603      	mov	r3, r0
 8015b14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8015b16:	7bfb      	ldrb	r3, [r7, #15]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d113      	bne.n	8015b44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	7858      	ldrb	r0, [r3, #1]
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015b26:	2301      	movs	r3, #1
 8015b28:	683a      	ldr	r2, [r7, #0]
 8015b2a:	f7ff fcd5 	bl	80154d8 <disk_read>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d004      	beq.n	8015b3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	683a      	ldr	r2, [r7, #0]
 8015b42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8015b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3710      	adds	r7, #16
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
	...

08015b50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b084      	sub	sp, #16
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7ff ff87 	bl	8015a6c <sync_window>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015b62:	7bfb      	ldrb	r3, [r7, #15]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d158      	bne.n	8015c1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	781b      	ldrb	r3, [r3, #0]
 8015b6c:	2b03      	cmp	r3, #3
 8015b6e:	d148      	bne.n	8015c02 <sync_fs+0xb2>
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	791b      	ldrb	r3, [r3, #4]
 8015b74:	2b01      	cmp	r3, #1
 8015b76:	d144      	bne.n	8015c02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	3330      	adds	r3, #48	; 0x30
 8015b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b80:	2100      	movs	r1, #0
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7ff fda9 	bl	80156da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	3330      	adds	r3, #48	; 0x30
 8015b8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015b90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8015b94:	4618      	mov	r0, r3
 8015b96:	f7ff fd38 	bl	801560a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	3330      	adds	r3, #48	; 0x30
 8015b9e:	4921      	ldr	r1, [pc, #132]	; (8015c24 <sync_fs+0xd4>)
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	f7ff fd4d 	bl	8015640 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	3330      	adds	r3, #48	; 0x30
 8015baa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015bae:	491e      	ldr	r1, [pc, #120]	; (8015c28 <sync_fs+0xd8>)
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	f7ff fd45 	bl	8015640 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	3330      	adds	r3, #48	; 0x30
 8015bba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	691b      	ldr	r3, [r3, #16]
 8015bc2:	4619      	mov	r1, r3
 8015bc4:	4610      	mov	r0, r2
 8015bc6:	f7ff fd3b 	bl	8015640 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	3330      	adds	r3, #48	; 0x30
 8015bce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	68db      	ldr	r3, [r3, #12]
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4610      	mov	r0, r2
 8015bda:	f7ff fd31 	bl	8015640 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	69db      	ldr	r3, [r3, #28]
 8015be2:	1c5a      	adds	r2, r3, #1
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	7858      	ldrb	r0, [r3, #1]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	f7ff fc8e 	bl	8015518 <disk_write>
			fs->fsi_flag = 0;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	785b      	ldrb	r3, [r3, #1]
 8015c06:	2200      	movs	r2, #0
 8015c08:	2100      	movs	r1, #0
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7ff fca4 	bl	8015558 <disk_ioctl>
 8015c10:	4603      	mov	r3, r0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d001      	beq.n	8015c1a <sync_fs+0xca>
 8015c16:	2301      	movs	r3, #1
 8015c18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3710      	adds	r7, #16
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	41615252 	.word	0x41615252
 8015c28:	61417272 	.word	0x61417272

08015c2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b083      	sub	sp, #12
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
 8015c34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	3b02      	subs	r3, #2
 8015c3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	695b      	ldr	r3, [r3, #20]
 8015c40:	3b02      	subs	r3, #2
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d301      	bcc.n	8015c4c <clust2sect+0x20>
 8015c48:	2300      	movs	r3, #0
 8015c4a:	e008      	b.n	8015c5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	895b      	ldrh	r3, [r3, #10]
 8015c50:	461a      	mov	r2, r3
 8015c52:	683b      	ldr	r3, [r7, #0]
 8015c54:	fb03 f202 	mul.w	r2, r3, r2
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c5c:	4413      	add	r3, r2
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	370c      	adds	r7, #12
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr

08015c6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b086      	sub	sp, #24
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	2b01      	cmp	r3, #1
 8015c7e:	d904      	bls.n	8015c8a <get_fat+0x20>
 8015c80:	693b      	ldr	r3, [r7, #16]
 8015c82:	695b      	ldr	r3, [r3, #20]
 8015c84:	683a      	ldr	r2, [r7, #0]
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d302      	bcc.n	8015c90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015c8a:	2301      	movs	r3, #1
 8015c8c:	617b      	str	r3, [r7, #20]
 8015c8e:	e08f      	b.n	8015db0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	781b      	ldrb	r3, [r3, #0]
 8015c9a:	2b03      	cmp	r3, #3
 8015c9c:	d062      	beq.n	8015d64 <get_fat+0xfa>
 8015c9e:	2b03      	cmp	r3, #3
 8015ca0:	dc7c      	bgt.n	8015d9c <get_fat+0x132>
 8015ca2:	2b01      	cmp	r3, #1
 8015ca4:	d002      	beq.n	8015cac <get_fat+0x42>
 8015ca6:	2b02      	cmp	r3, #2
 8015ca8:	d042      	beq.n	8015d30 <get_fat+0xc6>
 8015caa:	e077      	b.n	8015d9c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	60fb      	str	r3, [r7, #12]
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	085b      	lsrs	r3, r3, #1
 8015cb4:	68fa      	ldr	r2, [r7, #12]
 8015cb6:	4413      	add	r3, r2
 8015cb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	6a1a      	ldr	r2, [r3, #32]
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	0a5b      	lsrs	r3, r3, #9
 8015cc2:	4413      	add	r3, r2
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	6938      	ldr	r0, [r7, #16]
 8015cc8:	f7ff ff14 	bl	8015af4 <move_window>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d167      	bne.n	8015da2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	1c5a      	adds	r2, r3, #1
 8015cd6:	60fa      	str	r2, [r7, #12]
 8015cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015cdc:	693a      	ldr	r2, [r7, #16]
 8015cde:	4413      	add	r3, r2
 8015ce0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015ce4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	6a1a      	ldr	r2, [r3, #32]
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	0a5b      	lsrs	r3, r3, #9
 8015cee:	4413      	add	r3, r2
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6938      	ldr	r0, [r7, #16]
 8015cf4:	f7ff fefe 	bl	8015af4 <move_window>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d153      	bne.n	8015da6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015d04:	693a      	ldr	r2, [r7, #16]
 8015d06:	4413      	add	r3, r2
 8015d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d0c:	021b      	lsls	r3, r3, #8
 8015d0e:	461a      	mov	r2, r3
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	4313      	orrs	r3, r2
 8015d14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	f003 0301 	and.w	r3, r3, #1
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d002      	beq.n	8015d26 <get_fat+0xbc>
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	091b      	lsrs	r3, r3, #4
 8015d24:	e002      	b.n	8015d2c <get_fat+0xc2>
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015d2c:	617b      	str	r3, [r7, #20]
			break;
 8015d2e:	e03f      	b.n	8015db0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	6a1a      	ldr	r2, [r3, #32]
 8015d34:	683b      	ldr	r3, [r7, #0]
 8015d36:	0a1b      	lsrs	r3, r3, #8
 8015d38:	4413      	add	r3, r2
 8015d3a:	4619      	mov	r1, r3
 8015d3c:	6938      	ldr	r0, [r7, #16]
 8015d3e:	f7ff fed9 	bl	8015af4 <move_window>
 8015d42:	4603      	mov	r3, r0
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d130      	bne.n	8015daa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	005b      	lsls	r3, r3, #1
 8015d52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015d56:	4413      	add	r3, r2
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7ff fc1b 	bl	8015594 <ld_word>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	617b      	str	r3, [r7, #20]
			break;
 8015d62:	e025      	b.n	8015db0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	6a1a      	ldr	r2, [r3, #32]
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	09db      	lsrs	r3, r3, #7
 8015d6c:	4413      	add	r3, r2
 8015d6e:	4619      	mov	r1, r3
 8015d70:	6938      	ldr	r0, [r7, #16]
 8015d72:	f7ff febf 	bl	8015af4 <move_window>
 8015d76:	4603      	mov	r3, r0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d118      	bne.n	8015dae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015d7c:	693b      	ldr	r3, [r7, #16]
 8015d7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	009b      	lsls	r3, r3, #2
 8015d86:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015d8a:	4413      	add	r3, r2
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7ff fc19 	bl	80155c4 <ld_dword>
 8015d92:	4603      	mov	r3, r0
 8015d94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015d98:	617b      	str	r3, [r7, #20]
			break;
 8015d9a:	e009      	b.n	8015db0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	617b      	str	r3, [r7, #20]
 8015da0:	e006      	b.n	8015db0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015da2:	bf00      	nop
 8015da4:	e004      	b.n	8015db0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015da6:	bf00      	nop
 8015da8:	e002      	b.n	8015db0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015daa:	bf00      	nop
 8015dac:	e000      	b.n	8015db0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015dae:	bf00      	nop
		}
	}

	return val;
 8015db0:	697b      	ldr	r3, [r7, #20]
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3718      	adds	r7, #24
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8015dba:	b590      	push	{r4, r7, lr}
 8015dbc:	b089      	sub	sp, #36	; 0x24
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	60f8      	str	r0, [r7, #12]
 8015dc2:	60b9      	str	r1, [r7, #8]
 8015dc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015dc6:	2302      	movs	r3, #2
 8015dc8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	2b01      	cmp	r3, #1
 8015dce:	f240 80d2 	bls.w	8015f76 <put_fat+0x1bc>
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	695b      	ldr	r3, [r3, #20]
 8015dd6:	68ba      	ldr	r2, [r7, #8]
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	f080 80cc 	bcs.w	8015f76 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	2b03      	cmp	r3, #3
 8015de4:	f000 8096 	beq.w	8015f14 <put_fat+0x15a>
 8015de8:	2b03      	cmp	r3, #3
 8015dea:	f300 80cd 	bgt.w	8015f88 <put_fat+0x1ce>
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d002      	beq.n	8015df8 <put_fat+0x3e>
 8015df2:	2b02      	cmp	r3, #2
 8015df4:	d06e      	beq.n	8015ed4 <put_fat+0x11a>
 8015df6:	e0c7      	b.n	8015f88 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	61bb      	str	r3, [r7, #24]
 8015dfc:	69bb      	ldr	r3, [r7, #24]
 8015dfe:	085b      	lsrs	r3, r3, #1
 8015e00:	69ba      	ldr	r2, [r7, #24]
 8015e02:	4413      	add	r3, r2
 8015e04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	6a1a      	ldr	r2, [r3, #32]
 8015e0a:	69bb      	ldr	r3, [r7, #24]
 8015e0c:	0a5b      	lsrs	r3, r3, #9
 8015e0e:	4413      	add	r3, r2
 8015e10:	4619      	mov	r1, r3
 8015e12:	68f8      	ldr	r0, [r7, #12]
 8015e14:	f7ff fe6e 	bl	8015af4 <move_window>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e1c:	7ffb      	ldrb	r3, [r7, #31]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	f040 80ab 	bne.w	8015f7a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	1c59      	adds	r1, r3, #1
 8015e2e:	61b9      	str	r1, [r7, #24]
 8015e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e34:	4413      	add	r3, r2
 8015e36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015e38:	68bb      	ldr	r3, [r7, #8]
 8015e3a:	f003 0301 	and.w	r3, r3, #1
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d00d      	beq.n	8015e5e <put_fat+0xa4>
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	b25b      	sxtb	r3, r3
 8015e48:	f003 030f 	and.w	r3, r3, #15
 8015e4c:	b25a      	sxtb	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	011b      	lsls	r3, r3, #4
 8015e54:	b25b      	sxtb	r3, r3
 8015e56:	4313      	orrs	r3, r2
 8015e58:	b25b      	sxtb	r3, r3
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	e001      	b.n	8015e62 <put_fat+0xa8>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	b2db      	uxtb	r3, r3
 8015e62:	697a      	ldr	r2, [r7, #20]
 8015e64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	2201      	movs	r2, #1
 8015e6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	6a1a      	ldr	r2, [r3, #32]
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	0a5b      	lsrs	r3, r3, #9
 8015e74:	4413      	add	r3, r2
 8015e76:	4619      	mov	r1, r3
 8015e78:	68f8      	ldr	r0, [r7, #12]
 8015e7a:	f7ff fe3b 	bl	8015af4 <move_window>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015e82:	7ffb      	ldrb	r3, [r7, #31]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d17a      	bne.n	8015f7e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015e8e:	69bb      	ldr	r3, [r7, #24]
 8015e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015e94:	4413      	add	r3, r2
 8015e96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	f003 0301 	and.w	r3, r3, #1
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d003      	beq.n	8015eaa <put_fat+0xf0>
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	091b      	lsrs	r3, r3, #4
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	e00e      	b.n	8015ec8 <put_fat+0x10e>
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	b25b      	sxtb	r3, r3
 8015eb0:	f023 030f 	bic.w	r3, r3, #15
 8015eb4:	b25a      	sxtb	r2, r3
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	0a1b      	lsrs	r3, r3, #8
 8015eba:	b25b      	sxtb	r3, r3
 8015ebc:	f003 030f 	and.w	r3, r3, #15
 8015ec0:	b25b      	sxtb	r3, r3
 8015ec2:	4313      	orrs	r3, r2
 8015ec4:	b25b      	sxtb	r3, r3
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	697a      	ldr	r2, [r7, #20]
 8015eca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	2201      	movs	r2, #1
 8015ed0:	70da      	strb	r2, [r3, #3]
			break;
 8015ed2:	e059      	b.n	8015f88 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	6a1a      	ldr	r2, [r3, #32]
 8015ed8:	68bb      	ldr	r3, [r7, #8]
 8015eda:	0a1b      	lsrs	r3, r3, #8
 8015edc:	4413      	add	r3, r2
 8015ede:	4619      	mov	r1, r3
 8015ee0:	68f8      	ldr	r0, [r7, #12]
 8015ee2:	f7ff fe07 	bl	8015af4 <move_window>
 8015ee6:	4603      	mov	r3, r0
 8015ee8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015eea:	7ffb      	ldrb	r3, [r7, #31]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d148      	bne.n	8015f82 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	005b      	lsls	r3, r3, #1
 8015efa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8015efe:	4413      	add	r3, r2
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	b292      	uxth	r2, r2
 8015f04:	4611      	mov	r1, r2
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7ff fb7f 	bl	801560a <st_word>
			fs->wflag = 1;
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	70da      	strb	r2, [r3, #3]
			break;
 8015f12:	e039      	b.n	8015f88 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	6a1a      	ldr	r2, [r3, #32]
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	09db      	lsrs	r3, r3, #7
 8015f1c:	4413      	add	r3, r2
 8015f1e:	4619      	mov	r1, r3
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f7ff fde7 	bl	8015af4 <move_window>
 8015f26:	4603      	mov	r3, r0
 8015f28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015f2a:	7ffb      	ldrb	r3, [r7, #31]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d12a      	bne.n	8015f86 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015f44:	4413      	add	r3, r2
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ff fb3c 	bl	80155c4 <ld_dword>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015f52:	4323      	orrs	r3, r4
 8015f54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8015f64:	4413      	add	r3, r2
 8015f66:	6879      	ldr	r1, [r7, #4]
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f7ff fb69 	bl	8015640 <st_dword>
			fs->wflag = 1;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2201      	movs	r2, #1
 8015f72:	70da      	strb	r2, [r3, #3]
			break;
 8015f74:	e008      	b.n	8015f88 <put_fat+0x1ce>
		}
	}
 8015f76:	bf00      	nop
 8015f78:	e006      	b.n	8015f88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015f7a:	bf00      	nop
 8015f7c:	e004      	b.n	8015f88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015f7e:	bf00      	nop
 8015f80:	e002      	b.n	8015f88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015f82:	bf00      	nop
 8015f84:	e000      	b.n	8015f88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8015f86:	bf00      	nop
	return res;
 8015f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3724      	adds	r7, #36	; 0x24
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd90      	pop	{r4, r7, pc}

08015f92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015f92:	b580      	push	{r7, lr}
 8015f94:	b088      	sub	sp, #32
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	60f8      	str	r0, [r7, #12]
 8015f9a:	60b9      	str	r1, [r7, #8]
 8015f9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b01      	cmp	r3, #1
 8015fac:	d904      	bls.n	8015fb8 <remove_chain+0x26>
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	695b      	ldr	r3, [r3, #20]
 8015fb2:	68ba      	ldr	r2, [r7, #8]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d301      	bcc.n	8015fbc <remove_chain+0x2a>
 8015fb8:	2302      	movs	r3, #2
 8015fba:	e04b      	b.n	8016054 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d00c      	beq.n	8015fdc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015fc6:	6879      	ldr	r1, [r7, #4]
 8015fc8:	69b8      	ldr	r0, [r7, #24]
 8015fca:	f7ff fef6 	bl	8015dba <put_fat>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015fd2:	7ffb      	ldrb	r3, [r7, #31]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d001      	beq.n	8015fdc <remove_chain+0x4a>
 8015fd8:	7ffb      	ldrb	r3, [r7, #31]
 8015fda:	e03b      	b.n	8016054 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015fdc:	68b9      	ldr	r1, [r7, #8]
 8015fde:	68f8      	ldr	r0, [r7, #12]
 8015fe0:	f7ff fe43 	bl	8015c6a <get_fat>
 8015fe4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d031      	beq.n	8016050 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	2b01      	cmp	r3, #1
 8015ff0:	d101      	bne.n	8015ff6 <remove_chain+0x64>
 8015ff2:	2302      	movs	r3, #2
 8015ff4:	e02e      	b.n	8016054 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015ffc:	d101      	bne.n	8016002 <remove_chain+0x70>
 8015ffe:	2301      	movs	r3, #1
 8016000:	e028      	b.n	8016054 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016002:	2200      	movs	r2, #0
 8016004:	68b9      	ldr	r1, [r7, #8]
 8016006:	69b8      	ldr	r0, [r7, #24]
 8016008:	f7ff fed7 	bl	8015dba <put_fat>
 801600c:	4603      	mov	r3, r0
 801600e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016010:	7ffb      	ldrb	r3, [r7, #31]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d001      	beq.n	801601a <remove_chain+0x88>
 8016016:	7ffb      	ldrb	r3, [r7, #31]
 8016018:	e01c      	b.n	8016054 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801601a:	69bb      	ldr	r3, [r7, #24]
 801601c:	691a      	ldr	r2, [r3, #16]
 801601e:	69bb      	ldr	r3, [r7, #24]
 8016020:	695b      	ldr	r3, [r3, #20]
 8016022:	3b02      	subs	r3, #2
 8016024:	429a      	cmp	r2, r3
 8016026:	d20b      	bcs.n	8016040 <remove_chain+0xae>
			fs->free_clst++;
 8016028:	69bb      	ldr	r3, [r7, #24]
 801602a:	691b      	ldr	r3, [r3, #16]
 801602c:	1c5a      	adds	r2, r3, #1
 801602e:	69bb      	ldr	r3, [r7, #24]
 8016030:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016032:	69bb      	ldr	r3, [r7, #24]
 8016034:	791b      	ldrb	r3, [r3, #4]
 8016036:	f043 0301 	orr.w	r3, r3, #1
 801603a:	b2da      	uxtb	r2, r3
 801603c:	69bb      	ldr	r3, [r7, #24]
 801603e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016044:	69bb      	ldr	r3, [r7, #24]
 8016046:	695b      	ldr	r3, [r3, #20]
 8016048:	68ba      	ldr	r2, [r7, #8]
 801604a:	429a      	cmp	r2, r3
 801604c:	d3c6      	bcc.n	8015fdc <remove_chain+0x4a>
 801604e:	e000      	b.n	8016052 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016050:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016052:	2300      	movs	r3, #0
}
 8016054:	4618      	mov	r0, r3
 8016056:	3720      	adds	r7, #32
 8016058:	46bd      	mov	sp, r7
 801605a:	bd80      	pop	{r7, pc}

0801605c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b088      	sub	sp, #32
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d10d      	bne.n	801608e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	68db      	ldr	r3, [r3, #12]
 8016076:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016078:	69bb      	ldr	r3, [r7, #24]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d004      	beq.n	8016088 <create_chain+0x2c>
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	695b      	ldr	r3, [r3, #20]
 8016082:	69ba      	ldr	r2, [r7, #24]
 8016084:	429a      	cmp	r2, r3
 8016086:	d31b      	bcc.n	80160c0 <create_chain+0x64>
 8016088:	2301      	movs	r3, #1
 801608a:	61bb      	str	r3, [r7, #24]
 801608c:	e018      	b.n	80160c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801608e:	6839      	ldr	r1, [r7, #0]
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f7ff fdea 	bl	8015c6a <get_fat>
 8016096:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2b01      	cmp	r3, #1
 801609c:	d801      	bhi.n	80160a2 <create_chain+0x46>
 801609e:	2301      	movs	r3, #1
 80160a0:	e070      	b.n	8016184 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80160a8:	d101      	bne.n	80160ae <create_chain+0x52>
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	e06a      	b.n	8016184 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80160ae:	693b      	ldr	r3, [r7, #16]
 80160b0:	695b      	ldr	r3, [r3, #20]
 80160b2:	68fa      	ldr	r2, [r7, #12]
 80160b4:	429a      	cmp	r2, r3
 80160b6:	d201      	bcs.n	80160bc <create_chain+0x60>
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	e063      	b.n	8016184 <create_chain+0x128>
		scl = clst;
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80160c4:	69fb      	ldr	r3, [r7, #28]
 80160c6:	3301      	adds	r3, #1
 80160c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	695b      	ldr	r3, [r3, #20]
 80160ce:	69fa      	ldr	r2, [r7, #28]
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d307      	bcc.n	80160e4 <create_chain+0x88>
				ncl = 2;
 80160d4:	2302      	movs	r3, #2
 80160d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80160d8:	69fa      	ldr	r2, [r7, #28]
 80160da:	69bb      	ldr	r3, [r7, #24]
 80160dc:	429a      	cmp	r2, r3
 80160de:	d901      	bls.n	80160e4 <create_chain+0x88>
 80160e0:	2300      	movs	r3, #0
 80160e2:	e04f      	b.n	8016184 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80160e4:	69f9      	ldr	r1, [r7, #28]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f7ff fdbf 	bl	8015c6a <get_fat>
 80160ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00e      	beq.n	8016112 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d003      	beq.n	8016102 <create_chain+0xa6>
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016100:	d101      	bne.n	8016106 <create_chain+0xaa>
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	e03e      	b.n	8016184 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016106:	69fa      	ldr	r2, [r7, #28]
 8016108:	69bb      	ldr	r3, [r7, #24]
 801610a:	429a      	cmp	r2, r3
 801610c:	d1da      	bne.n	80160c4 <create_chain+0x68>
 801610e:	2300      	movs	r3, #0
 8016110:	e038      	b.n	8016184 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016112:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016118:	69f9      	ldr	r1, [r7, #28]
 801611a:	6938      	ldr	r0, [r7, #16]
 801611c:	f7ff fe4d 	bl	8015dba <put_fat>
 8016120:	4603      	mov	r3, r0
 8016122:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016124:	7dfb      	ldrb	r3, [r7, #23]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d109      	bne.n	801613e <create_chain+0xe2>
 801612a:	683b      	ldr	r3, [r7, #0]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d006      	beq.n	801613e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016130:	69fa      	ldr	r2, [r7, #28]
 8016132:	6839      	ldr	r1, [r7, #0]
 8016134:	6938      	ldr	r0, [r7, #16]
 8016136:	f7ff fe40 	bl	8015dba <put_fat>
 801613a:	4603      	mov	r3, r0
 801613c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801613e:	7dfb      	ldrb	r3, [r7, #23]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d116      	bne.n	8016172 <create_chain+0x116>
		fs->last_clst = ncl;
 8016144:	693b      	ldr	r3, [r7, #16]
 8016146:	69fa      	ldr	r2, [r7, #28]
 8016148:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	691a      	ldr	r2, [r3, #16]
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	695b      	ldr	r3, [r3, #20]
 8016152:	3b02      	subs	r3, #2
 8016154:	429a      	cmp	r2, r3
 8016156:	d804      	bhi.n	8016162 <create_chain+0x106>
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	691b      	ldr	r3, [r3, #16]
 801615c:	1e5a      	subs	r2, r3, #1
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	791b      	ldrb	r3, [r3, #4]
 8016166:	f043 0301 	orr.w	r3, r3, #1
 801616a:	b2da      	uxtb	r2, r3
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	711a      	strb	r2, [r3, #4]
 8016170:	e007      	b.n	8016182 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016172:	7dfb      	ldrb	r3, [r7, #23]
 8016174:	2b01      	cmp	r3, #1
 8016176:	d102      	bne.n	801617e <create_chain+0x122>
 8016178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801617c:	e000      	b.n	8016180 <create_chain+0x124>
 801617e:	2301      	movs	r3, #1
 8016180:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016182:	69fb      	ldr	r3, [r7, #28]
}
 8016184:	4618      	mov	r0, r3
 8016186:	3720      	adds	r7, #32
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}

0801618c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801618c:	b480      	push	{r7}
 801618e:	b087      	sub	sp, #28
 8016190:	af00      	add	r7, sp, #0
 8016192:	6078      	str	r0, [r7, #4]
 8016194:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161a0:	3304      	adds	r3, #4
 80161a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80161a4:	683b      	ldr	r3, [r7, #0]
 80161a6:	0a5b      	lsrs	r3, r3, #9
 80161a8:	68fa      	ldr	r2, [r7, #12]
 80161aa:	8952      	ldrh	r2, [r2, #10]
 80161ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80161b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80161b2:	693b      	ldr	r3, [r7, #16]
 80161b4:	1d1a      	adds	r2, r3, #4
 80161b6:	613a      	str	r2, [r7, #16]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d101      	bne.n	80161c6 <clmt_clust+0x3a>
 80161c2:	2300      	movs	r3, #0
 80161c4:	e010      	b.n	80161e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80161c6:	697a      	ldr	r2, [r7, #20]
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d307      	bcc.n	80161de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80161ce:	697a      	ldr	r2, [r7, #20]
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	617b      	str	r3, [r7, #20]
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	3304      	adds	r3, #4
 80161da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80161dc:	e7e9      	b.n	80161b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80161de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	681a      	ldr	r2, [r3, #0]
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	4413      	add	r3, r2
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	371c      	adds	r7, #28
 80161ec:	46bd      	mov	sp, r7
 80161ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f2:	4770      	bx	lr

080161f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b086      	sub	sp, #24
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016204:	683b      	ldr	r3, [r7, #0]
 8016206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801620a:	d204      	bcs.n	8016216 <dir_sdi+0x22>
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	f003 031f 	and.w	r3, r3, #31
 8016212:	2b00      	cmp	r3, #0
 8016214:	d001      	beq.n	801621a <dir_sdi+0x26>
		return FR_INT_ERR;
 8016216:	2302      	movs	r3, #2
 8016218:	e063      	b.n	80162e2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	683a      	ldr	r2, [r7, #0]
 801621e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	689b      	ldr	r3, [r3, #8]
 8016224:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d106      	bne.n	801623a <dir_sdi+0x46>
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b02      	cmp	r3, #2
 8016232:	d902      	bls.n	801623a <dir_sdi+0x46>
		clst = fs->dirbase;
 8016234:	693b      	ldr	r3, [r7, #16]
 8016236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016238:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d10c      	bne.n	801625a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016240:	683b      	ldr	r3, [r7, #0]
 8016242:	095b      	lsrs	r3, r3, #5
 8016244:	693a      	ldr	r2, [r7, #16]
 8016246:	8912      	ldrh	r2, [r2, #8]
 8016248:	4293      	cmp	r3, r2
 801624a:	d301      	bcc.n	8016250 <dir_sdi+0x5c>
 801624c:	2302      	movs	r3, #2
 801624e:	e048      	b.n	80162e2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	61da      	str	r2, [r3, #28]
 8016258:	e029      	b.n	80162ae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	895b      	ldrh	r3, [r3, #10]
 801625e:	025b      	lsls	r3, r3, #9
 8016260:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016262:	e019      	b.n	8016298 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6979      	ldr	r1, [r7, #20]
 8016268:	4618      	mov	r0, r3
 801626a:	f7ff fcfe 	bl	8015c6a <get_fat>
 801626e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016276:	d101      	bne.n	801627c <dir_sdi+0x88>
 8016278:	2301      	movs	r3, #1
 801627a:	e032      	b.n	80162e2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	2b01      	cmp	r3, #1
 8016280:	d904      	bls.n	801628c <dir_sdi+0x98>
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	695b      	ldr	r3, [r3, #20]
 8016286:	697a      	ldr	r2, [r7, #20]
 8016288:	429a      	cmp	r2, r3
 801628a:	d301      	bcc.n	8016290 <dir_sdi+0x9c>
 801628c:	2302      	movs	r3, #2
 801628e:	e028      	b.n	80162e2 <dir_sdi+0xee>
			ofs -= csz;
 8016290:	683a      	ldr	r2, [r7, #0]
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	1ad3      	subs	r3, r2, r3
 8016296:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016298:	683a      	ldr	r2, [r7, #0]
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	429a      	cmp	r2, r3
 801629e:	d2e1      	bcs.n	8016264 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80162a0:	6979      	ldr	r1, [r7, #20]
 80162a2:	6938      	ldr	r0, [r7, #16]
 80162a4:	f7ff fcc2 	bl	8015c2c <clust2sect>
 80162a8:	4602      	mov	r2, r0
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	697a      	ldr	r2, [r7, #20]
 80162b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	69db      	ldr	r3, [r3, #28]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d101      	bne.n	80162c0 <dir_sdi+0xcc>
 80162bc:	2302      	movs	r3, #2
 80162be:	e010      	b.n	80162e2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	69da      	ldr	r2, [r3, #28]
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	0a5b      	lsrs	r3, r3, #9
 80162c8:	441a      	add	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80162ce:	693b      	ldr	r3, [r7, #16]
 80162d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80162da:	441a      	add	r2, r3
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80162e0:	2300      	movs	r3, #0
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3718      	adds	r7, #24
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}

080162ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80162ea:	b580      	push	{r7, lr}
 80162ec:	b086      	sub	sp, #24
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	6078      	str	r0, [r7, #4]
 80162f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	695b      	ldr	r3, [r3, #20]
 80162fe:	3320      	adds	r3, #32
 8016300:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	69db      	ldr	r3, [r3, #28]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d003      	beq.n	8016312 <dir_next+0x28>
 801630a:	68bb      	ldr	r3, [r7, #8]
 801630c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016310:	d301      	bcc.n	8016316 <dir_next+0x2c>
 8016312:	2304      	movs	r3, #4
 8016314:	e0aa      	b.n	801646c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016316:	68bb      	ldr	r3, [r7, #8]
 8016318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801631c:	2b00      	cmp	r3, #0
 801631e:	f040 8098 	bne.w	8016452 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	69db      	ldr	r3, [r3, #28]
 8016326:	1c5a      	adds	r2, r3, #1
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	699b      	ldr	r3, [r3, #24]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d10b      	bne.n	801634c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	095b      	lsrs	r3, r3, #5
 8016338:	68fa      	ldr	r2, [r7, #12]
 801633a:	8912      	ldrh	r2, [r2, #8]
 801633c:	4293      	cmp	r3, r2
 801633e:	f0c0 8088 	bcc.w	8016452 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2200      	movs	r2, #0
 8016346:	61da      	str	r2, [r3, #28]
 8016348:	2304      	movs	r3, #4
 801634a:	e08f      	b.n	801646c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	0a5b      	lsrs	r3, r3, #9
 8016350:	68fa      	ldr	r2, [r7, #12]
 8016352:	8952      	ldrh	r2, [r2, #10]
 8016354:	3a01      	subs	r2, #1
 8016356:	4013      	ands	r3, r2
 8016358:	2b00      	cmp	r3, #0
 801635a:	d17a      	bne.n	8016452 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801635c:	687a      	ldr	r2, [r7, #4]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	699b      	ldr	r3, [r3, #24]
 8016362:	4619      	mov	r1, r3
 8016364:	4610      	mov	r0, r2
 8016366:	f7ff fc80 	bl	8015c6a <get_fat>
 801636a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	2b01      	cmp	r3, #1
 8016370:	d801      	bhi.n	8016376 <dir_next+0x8c>
 8016372:	2302      	movs	r3, #2
 8016374:	e07a      	b.n	801646c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016376:	697b      	ldr	r3, [r7, #20]
 8016378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801637c:	d101      	bne.n	8016382 <dir_next+0x98>
 801637e:	2301      	movs	r3, #1
 8016380:	e074      	b.n	801646c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	695b      	ldr	r3, [r3, #20]
 8016386:	697a      	ldr	r2, [r7, #20]
 8016388:	429a      	cmp	r2, r3
 801638a:	d358      	bcc.n	801643e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d104      	bne.n	801639c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	2200      	movs	r2, #0
 8016396:	61da      	str	r2, [r3, #28]
 8016398:	2304      	movs	r3, #4
 801639a:	e067      	b.n	801646c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	699b      	ldr	r3, [r3, #24]
 80163a2:	4619      	mov	r1, r3
 80163a4:	4610      	mov	r0, r2
 80163a6:	f7ff fe59 	bl	801605c <create_chain>
 80163aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d101      	bne.n	80163b6 <dir_next+0xcc>
 80163b2:	2307      	movs	r3, #7
 80163b4:	e05a      	b.n	801646c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d101      	bne.n	80163c0 <dir_next+0xd6>
 80163bc:	2302      	movs	r3, #2
 80163be:	e055      	b.n	801646c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80163c6:	d101      	bne.n	80163cc <dir_next+0xe2>
 80163c8:	2301      	movs	r3, #1
 80163ca:	e04f      	b.n	801646c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80163cc:	68f8      	ldr	r0, [r7, #12]
 80163ce:	f7ff fb4d 	bl	8015a6c <sync_window>
 80163d2:	4603      	mov	r3, r0
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d001      	beq.n	80163dc <dir_next+0xf2>
 80163d8:	2301      	movs	r3, #1
 80163da:	e047      	b.n	801646c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	3330      	adds	r3, #48	; 0x30
 80163e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80163e4:	2100      	movs	r1, #0
 80163e6:	4618      	mov	r0, r3
 80163e8:	f7ff f977 	bl	80156da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80163ec:	2300      	movs	r3, #0
 80163ee:	613b      	str	r3, [r7, #16]
 80163f0:	6979      	ldr	r1, [r7, #20]
 80163f2:	68f8      	ldr	r0, [r7, #12]
 80163f4:	f7ff fc1a 	bl	8015c2c <clust2sect>
 80163f8:	4602      	mov	r2, r0
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80163fe:	e012      	b.n	8016426 <dir_next+0x13c>
						fs->wflag = 1;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2201      	movs	r2, #1
 8016404:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016406:	68f8      	ldr	r0, [r7, #12]
 8016408:	f7ff fb30 	bl	8015a6c <sync_window>
 801640c:	4603      	mov	r3, r0
 801640e:	2b00      	cmp	r3, #0
 8016410:	d001      	beq.n	8016416 <dir_next+0x12c>
 8016412:	2301      	movs	r3, #1
 8016414:	e02a      	b.n	801646c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	3301      	adds	r3, #1
 801641a:	613b      	str	r3, [r7, #16]
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016420:	1c5a      	adds	r2, r3, #1
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	62da      	str	r2, [r3, #44]	; 0x2c
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	895b      	ldrh	r3, [r3, #10]
 801642a:	461a      	mov	r2, r3
 801642c:	693b      	ldr	r3, [r7, #16]
 801642e:	4293      	cmp	r3, r2
 8016430:	d3e6      	bcc.n	8016400 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016436:	693b      	ldr	r3, [r7, #16]
 8016438:	1ad2      	subs	r2, r2, r3
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	697a      	ldr	r2, [r7, #20]
 8016442:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016444:	6979      	ldr	r1, [r7, #20]
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f7ff fbf0 	bl	8015c2c <clust2sect>
 801644c:	4602      	mov	r2, r0
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	68ba      	ldr	r2, [r7, #8]
 8016456:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801645e:	68bb      	ldr	r3, [r7, #8]
 8016460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016464:	441a      	add	r2, r3
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801646a:	2300      	movs	r3, #0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3718      	adds	r7, #24
 8016470:	46bd      	mov	sp, r7
 8016472:	bd80      	pop	{r7, pc}

08016474 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b086      	sub	sp, #24
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016484:	2100      	movs	r1, #0
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f7ff feb4 	bl	80161f4 <dir_sdi>
 801648c:	4603      	mov	r3, r0
 801648e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016490:	7dfb      	ldrb	r3, [r7, #23]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d12b      	bne.n	80164ee <dir_alloc+0x7a>
		n = 0;
 8016496:	2300      	movs	r3, #0
 8016498:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	69db      	ldr	r3, [r3, #28]
 801649e:	4619      	mov	r1, r3
 80164a0:	68f8      	ldr	r0, [r7, #12]
 80164a2:	f7ff fb27 	bl	8015af4 <move_window>
 80164a6:	4603      	mov	r3, r0
 80164a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80164aa:	7dfb      	ldrb	r3, [r7, #23]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d11d      	bne.n	80164ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6a1b      	ldr	r3, [r3, #32]
 80164b4:	781b      	ldrb	r3, [r3, #0]
 80164b6:	2be5      	cmp	r3, #229	; 0xe5
 80164b8:	d004      	beq.n	80164c4 <dir_alloc+0x50>
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	6a1b      	ldr	r3, [r3, #32]
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d107      	bne.n	80164d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	3301      	adds	r3, #1
 80164c8:	613b      	str	r3, [r7, #16]
 80164ca:	693a      	ldr	r2, [r7, #16]
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d102      	bne.n	80164d8 <dir_alloc+0x64>
 80164d2:	e00c      	b.n	80164ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80164d4:	2300      	movs	r3, #0
 80164d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80164d8:	2101      	movs	r1, #1
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7ff ff05 	bl	80162ea <dir_next>
 80164e0:	4603      	mov	r3, r0
 80164e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80164e4:	7dfb      	ldrb	r3, [r7, #23]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d0d7      	beq.n	801649a <dir_alloc+0x26>
 80164ea:	e000      	b.n	80164ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80164ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80164ee:	7dfb      	ldrb	r3, [r7, #23]
 80164f0:	2b04      	cmp	r3, #4
 80164f2:	d101      	bne.n	80164f8 <dir_alloc+0x84>
 80164f4:	2307      	movs	r3, #7
 80164f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80164f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3718      	adds	r7, #24
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016502:	b580      	push	{r7, lr}
 8016504:	b084      	sub	sp, #16
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
 801650a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	331a      	adds	r3, #26
 8016510:	4618      	mov	r0, r3
 8016512:	f7ff f83f 	bl	8015594 <ld_word>
 8016516:	4603      	mov	r3, r0
 8016518:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	781b      	ldrb	r3, [r3, #0]
 801651e:	2b03      	cmp	r3, #3
 8016520:	d109      	bne.n	8016536 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016522:	683b      	ldr	r3, [r7, #0]
 8016524:	3314      	adds	r3, #20
 8016526:	4618      	mov	r0, r3
 8016528:	f7ff f834 	bl	8015594 <ld_word>
 801652c:	4603      	mov	r3, r0
 801652e:	041b      	lsls	r3, r3, #16
 8016530:	68fa      	ldr	r2, [r7, #12]
 8016532:	4313      	orrs	r3, r2
 8016534:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016536:	68fb      	ldr	r3, [r7, #12]
}
 8016538:	4618      	mov	r0, r3
 801653a:	3710      	adds	r7, #16
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801654c:	68bb      	ldr	r3, [r7, #8]
 801654e:	331a      	adds	r3, #26
 8016550:	687a      	ldr	r2, [r7, #4]
 8016552:	b292      	uxth	r2, r2
 8016554:	4611      	mov	r1, r2
 8016556:	4618      	mov	r0, r3
 8016558:	f7ff f857 	bl	801560a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	781b      	ldrb	r3, [r3, #0]
 8016560:	2b03      	cmp	r3, #3
 8016562:	d109      	bne.n	8016578 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	f103 0214 	add.w	r2, r3, #20
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	0c1b      	lsrs	r3, r3, #16
 801656e:	b29b      	uxth	r3, r3
 8016570:	4619      	mov	r1, r3
 8016572:	4610      	mov	r0, r2
 8016574:	f7ff f849 	bl	801560a <st_word>
	}
}
 8016578:	bf00      	nop
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b086      	sub	sp, #24
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801658e:	2100      	movs	r1, #0
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7ff fe2f 	bl	80161f4 <dir_sdi>
 8016596:	4603      	mov	r3, r0
 8016598:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801659a:	7dfb      	ldrb	r3, [r7, #23]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d001      	beq.n	80165a4 <dir_find+0x24>
 80165a0:	7dfb      	ldrb	r3, [r7, #23]
 80165a2:	e03e      	b.n	8016622 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	69db      	ldr	r3, [r3, #28]
 80165a8:	4619      	mov	r1, r3
 80165aa:	6938      	ldr	r0, [r7, #16]
 80165ac:	f7ff faa2 	bl	8015af4 <move_window>
 80165b0:	4603      	mov	r3, r0
 80165b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80165b4:	7dfb      	ldrb	r3, [r7, #23]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d12f      	bne.n	801661a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	6a1b      	ldr	r3, [r3, #32]
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80165c2:	7bfb      	ldrb	r3, [r7, #15]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d102      	bne.n	80165ce <dir_find+0x4e>
 80165c8:	2304      	movs	r3, #4
 80165ca:	75fb      	strb	r3, [r7, #23]
 80165cc:	e028      	b.n	8016620 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6a1b      	ldr	r3, [r3, #32]
 80165d2:	330b      	adds	r3, #11
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80165da:	b2da      	uxtb	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	6a1b      	ldr	r3, [r3, #32]
 80165e4:	330b      	adds	r3, #11
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	f003 0308 	and.w	r3, r3, #8
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d10a      	bne.n	8016606 <dir_find+0x86>
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	6a18      	ldr	r0, [r3, #32]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	3324      	adds	r3, #36	; 0x24
 80165f8:	220b      	movs	r2, #11
 80165fa:	4619      	mov	r1, r3
 80165fc:	f7ff f888 	bl	8015710 <mem_cmp>
 8016600:	4603      	mov	r3, r0
 8016602:	2b00      	cmp	r3, #0
 8016604:	d00b      	beq.n	801661e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016606:	2100      	movs	r1, #0
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7ff fe6e 	bl	80162ea <dir_next>
 801660e:	4603      	mov	r3, r0
 8016610:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016612:	7dfb      	ldrb	r3, [r7, #23]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d0c5      	beq.n	80165a4 <dir_find+0x24>
 8016618:	e002      	b.n	8016620 <dir_find+0xa0>
		if (res != FR_OK) break;
 801661a:	bf00      	nop
 801661c:	e000      	b.n	8016620 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801661e:	bf00      	nop

	return res;
 8016620:	7dfb      	ldrb	r3, [r7, #23]
}
 8016622:	4618      	mov	r0, r3
 8016624:	3718      	adds	r7, #24
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}

0801662a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801662a:	b580      	push	{r7, lr}
 801662c:	b084      	sub	sp, #16
 801662e:	af00      	add	r7, sp, #0
 8016630:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8016638:	2101      	movs	r1, #1
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7ff ff1a 	bl	8016474 <dir_alloc>
 8016640:	4603      	mov	r3, r0
 8016642:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016644:	7bfb      	ldrb	r3, [r7, #15]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d11c      	bne.n	8016684 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	69db      	ldr	r3, [r3, #28]
 801664e:	4619      	mov	r1, r3
 8016650:	68b8      	ldr	r0, [r7, #8]
 8016652:	f7ff fa4f 	bl	8015af4 <move_window>
 8016656:	4603      	mov	r3, r0
 8016658:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801665a:	7bfb      	ldrb	r3, [r7, #15]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d111      	bne.n	8016684 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	6a1b      	ldr	r3, [r3, #32]
 8016664:	2220      	movs	r2, #32
 8016666:	2100      	movs	r1, #0
 8016668:	4618      	mov	r0, r3
 801666a:	f7ff f836 	bl	80156da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6a18      	ldr	r0, [r3, #32]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	3324      	adds	r3, #36	; 0x24
 8016676:	220b      	movs	r2, #11
 8016678:	4619      	mov	r1, r3
 801667a:	f7ff f80d 	bl	8015698 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	2201      	movs	r2, #1
 8016682:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016684:	7bfb      	ldrb	r3, [r7, #15]
}
 8016686:	4618      	mov	r0, r3
 8016688:	3710      	adds	r7, #16
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
	...

08016690 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b088      	sub	sp, #32
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
 8016698:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	60fb      	str	r3, [r7, #12]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	3324      	adds	r3, #36	; 0x24
 80166a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80166a6:	220b      	movs	r2, #11
 80166a8:	2120      	movs	r1, #32
 80166aa:	68b8      	ldr	r0, [r7, #8]
 80166ac:	f7ff f815 	bl	80156da <mem_set>
	si = i = 0; ni = 8;
 80166b0:	2300      	movs	r3, #0
 80166b2:	613b      	str	r3, [r7, #16]
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	61fb      	str	r3, [r7, #28]
 80166b8:	2308      	movs	r3, #8
 80166ba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80166bc:	69fb      	ldr	r3, [r7, #28]
 80166be:	1c5a      	adds	r2, r3, #1
 80166c0:	61fa      	str	r2, [r7, #28]
 80166c2:	68fa      	ldr	r2, [r7, #12]
 80166c4:	4413      	add	r3, r2
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80166ca:	7efb      	ldrb	r3, [r7, #27]
 80166cc:	2b20      	cmp	r3, #32
 80166ce:	d94e      	bls.n	801676e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80166d0:	7efb      	ldrb	r3, [r7, #27]
 80166d2:	2b2f      	cmp	r3, #47	; 0x2f
 80166d4:	d006      	beq.n	80166e4 <create_name+0x54>
 80166d6:	7efb      	ldrb	r3, [r7, #27]
 80166d8:	2b5c      	cmp	r3, #92	; 0x5c
 80166da:	d110      	bne.n	80166fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80166dc:	e002      	b.n	80166e4 <create_name+0x54>
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	3301      	adds	r3, #1
 80166e2:	61fb      	str	r3, [r7, #28]
 80166e4:	68fa      	ldr	r2, [r7, #12]
 80166e6:	69fb      	ldr	r3, [r7, #28]
 80166e8:	4413      	add	r3, r2
 80166ea:	781b      	ldrb	r3, [r3, #0]
 80166ec:	2b2f      	cmp	r3, #47	; 0x2f
 80166ee:	d0f6      	beq.n	80166de <create_name+0x4e>
 80166f0:	68fa      	ldr	r2, [r7, #12]
 80166f2:	69fb      	ldr	r3, [r7, #28]
 80166f4:	4413      	add	r3, r2
 80166f6:	781b      	ldrb	r3, [r3, #0]
 80166f8:	2b5c      	cmp	r3, #92	; 0x5c
 80166fa:	d0f0      	beq.n	80166de <create_name+0x4e>
			break;
 80166fc:	e038      	b.n	8016770 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80166fe:	7efb      	ldrb	r3, [r7, #27]
 8016700:	2b2e      	cmp	r3, #46	; 0x2e
 8016702:	d003      	beq.n	801670c <create_name+0x7c>
 8016704:	693a      	ldr	r2, [r7, #16]
 8016706:	697b      	ldr	r3, [r7, #20]
 8016708:	429a      	cmp	r2, r3
 801670a:	d30c      	bcc.n	8016726 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801670c:	697b      	ldr	r3, [r7, #20]
 801670e:	2b0b      	cmp	r3, #11
 8016710:	d002      	beq.n	8016718 <create_name+0x88>
 8016712:	7efb      	ldrb	r3, [r7, #27]
 8016714:	2b2e      	cmp	r3, #46	; 0x2e
 8016716:	d001      	beq.n	801671c <create_name+0x8c>
 8016718:	2306      	movs	r3, #6
 801671a:	e044      	b.n	80167a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801671c:	2308      	movs	r3, #8
 801671e:	613b      	str	r3, [r7, #16]
 8016720:	230b      	movs	r3, #11
 8016722:	617b      	str	r3, [r7, #20]
			continue;
 8016724:	e022      	b.n	801676c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8016726:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801672a:	2b00      	cmp	r3, #0
 801672c:	da04      	bge.n	8016738 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801672e:	7efb      	ldrb	r3, [r7, #27]
 8016730:	3b80      	subs	r3, #128	; 0x80
 8016732:	4a1f      	ldr	r2, [pc, #124]	; (80167b0 <create_name+0x120>)
 8016734:	5cd3      	ldrb	r3, [r2, r3]
 8016736:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8016738:	7efb      	ldrb	r3, [r7, #27]
 801673a:	4619      	mov	r1, r3
 801673c:	481d      	ldr	r0, [pc, #116]	; (80167b4 <create_name+0x124>)
 801673e:	f7ff f80e 	bl	801575e <chk_chr>
 8016742:	4603      	mov	r3, r0
 8016744:	2b00      	cmp	r3, #0
 8016746:	d001      	beq.n	801674c <create_name+0xbc>
 8016748:	2306      	movs	r3, #6
 801674a:	e02c      	b.n	80167a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801674c:	7efb      	ldrb	r3, [r7, #27]
 801674e:	2b60      	cmp	r3, #96	; 0x60
 8016750:	d905      	bls.n	801675e <create_name+0xce>
 8016752:	7efb      	ldrb	r3, [r7, #27]
 8016754:	2b7a      	cmp	r3, #122	; 0x7a
 8016756:	d802      	bhi.n	801675e <create_name+0xce>
 8016758:	7efb      	ldrb	r3, [r7, #27]
 801675a:	3b20      	subs	r3, #32
 801675c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801675e:	693b      	ldr	r3, [r7, #16]
 8016760:	1c5a      	adds	r2, r3, #1
 8016762:	613a      	str	r2, [r7, #16]
 8016764:	68ba      	ldr	r2, [r7, #8]
 8016766:	4413      	add	r3, r2
 8016768:	7efa      	ldrb	r2, [r7, #27]
 801676a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801676c:	e7a6      	b.n	80166bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801676e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016770:	68fa      	ldr	r2, [r7, #12]
 8016772:	69fb      	ldr	r3, [r7, #28]
 8016774:	441a      	add	r2, r3
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d101      	bne.n	8016784 <create_name+0xf4>
 8016780:	2306      	movs	r3, #6
 8016782:	e010      	b.n	80167a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	781b      	ldrb	r3, [r3, #0]
 8016788:	2be5      	cmp	r3, #229	; 0xe5
 801678a:	d102      	bne.n	8016792 <create_name+0x102>
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	2205      	movs	r2, #5
 8016790:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016792:	7efb      	ldrb	r3, [r7, #27]
 8016794:	2b20      	cmp	r3, #32
 8016796:	d801      	bhi.n	801679c <create_name+0x10c>
 8016798:	2204      	movs	r2, #4
 801679a:	e000      	b.n	801679e <create_name+0x10e>
 801679c:	2200      	movs	r2, #0
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	330b      	adds	r3, #11
 80167a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80167a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	3720      	adds	r7, #32
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	bf00      	nop
 80167b0:	0801c204 	.word	0x0801c204
 80167b4:	0801c0f4 	.word	0x0801c0f4

080167b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b086      	sub	sp, #24
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
 80167c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80167cc:	e002      	b.n	80167d4 <follow_path+0x1c>
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	3301      	adds	r3, #1
 80167d2:	603b      	str	r3, [r7, #0]
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	2b2f      	cmp	r3, #47	; 0x2f
 80167da:	d0f8      	beq.n	80167ce <follow_path+0x16>
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	2b5c      	cmp	r3, #92	; 0x5c
 80167e2:	d0f4      	beq.n	80167ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	2200      	movs	r2, #0
 80167e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	2b1f      	cmp	r3, #31
 80167f0:	d80a      	bhi.n	8016808 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2280      	movs	r2, #128	; 0x80
 80167f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80167fa:	2100      	movs	r1, #0
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f7ff fcf9 	bl	80161f4 <dir_sdi>
 8016802:	4603      	mov	r3, r0
 8016804:	75fb      	strb	r3, [r7, #23]
 8016806:	e043      	b.n	8016890 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016808:	463b      	mov	r3, r7
 801680a:	4619      	mov	r1, r3
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f7ff ff3f 	bl	8016690 <create_name>
 8016812:	4603      	mov	r3, r0
 8016814:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016816:	7dfb      	ldrb	r3, [r7, #23]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d134      	bne.n	8016886 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f7ff feaf 	bl	8016580 <dir_find>
 8016822:	4603      	mov	r3, r0
 8016824:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801682c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801682e:	7dfb      	ldrb	r3, [r7, #23]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d00a      	beq.n	801684a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016834:	7dfb      	ldrb	r3, [r7, #23]
 8016836:	2b04      	cmp	r3, #4
 8016838:	d127      	bne.n	801688a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801683a:	7afb      	ldrb	r3, [r7, #11]
 801683c:	f003 0304 	and.w	r3, r3, #4
 8016840:	2b00      	cmp	r3, #0
 8016842:	d122      	bne.n	801688a <follow_path+0xd2>
 8016844:	2305      	movs	r3, #5
 8016846:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016848:	e01f      	b.n	801688a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801684a:	7afb      	ldrb	r3, [r7, #11]
 801684c:	f003 0304 	and.w	r3, r3, #4
 8016850:	2b00      	cmp	r3, #0
 8016852:	d11c      	bne.n	801688e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	799b      	ldrb	r3, [r3, #6]
 8016858:	f003 0310 	and.w	r3, r3, #16
 801685c:	2b00      	cmp	r3, #0
 801685e:	d102      	bne.n	8016866 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016860:	2305      	movs	r3, #5
 8016862:	75fb      	strb	r3, [r7, #23]
 8016864:	e014      	b.n	8016890 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	695b      	ldr	r3, [r3, #20]
 8016870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016874:	4413      	add	r3, r2
 8016876:	4619      	mov	r1, r3
 8016878:	68f8      	ldr	r0, [r7, #12]
 801687a:	f7ff fe42 	bl	8016502 <ld_clust>
 801687e:	4602      	mov	r2, r0
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016884:	e7c0      	b.n	8016808 <follow_path+0x50>
			if (res != FR_OK) break;
 8016886:	bf00      	nop
 8016888:	e002      	b.n	8016890 <follow_path+0xd8>
				break;
 801688a:	bf00      	nop
 801688c:	e000      	b.n	8016890 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801688e:	bf00      	nop
			}
		}
	}

	return res;
 8016890:	7dfb      	ldrb	r3, [r7, #23]
}
 8016892:	4618      	mov	r0, r3
 8016894:	3718      	adds	r7, #24
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}

0801689a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801689a:	b480      	push	{r7}
 801689c:	b087      	sub	sp, #28
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80168a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80168a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d031      	beq.n	8016914 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	617b      	str	r3, [r7, #20]
 80168b6:	e002      	b.n	80168be <get_ldnumber+0x24>
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	3301      	adds	r3, #1
 80168bc:	617b      	str	r3, [r7, #20]
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	2b20      	cmp	r3, #32
 80168c4:	d903      	bls.n	80168ce <get_ldnumber+0x34>
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	781b      	ldrb	r3, [r3, #0]
 80168ca:	2b3a      	cmp	r3, #58	; 0x3a
 80168cc:	d1f4      	bne.n	80168b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	2b3a      	cmp	r3, #58	; 0x3a
 80168d4:	d11c      	bne.n	8016910 <get_ldnumber+0x76>
			tp = *path;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	1c5a      	adds	r2, r3, #1
 80168e0:	60fa      	str	r2, [r7, #12]
 80168e2:	781b      	ldrb	r3, [r3, #0]
 80168e4:	3b30      	subs	r3, #48	; 0x30
 80168e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	2b09      	cmp	r3, #9
 80168ec:	d80e      	bhi.n	801690c <get_ldnumber+0x72>
 80168ee:	68fa      	ldr	r2, [r7, #12]
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	d10a      	bne.n	801690c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80168f6:	68bb      	ldr	r3, [r7, #8]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d107      	bne.n	801690c <get_ldnumber+0x72>
					vol = (int)i;
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	3301      	adds	r3, #1
 8016904:	617b      	str	r3, [r7, #20]
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	697a      	ldr	r2, [r7, #20]
 801690a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	e002      	b.n	8016916 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016910:	2300      	movs	r3, #0
 8016912:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016914:	693b      	ldr	r3, [r7, #16]
}
 8016916:	4618      	mov	r0, r3
 8016918:	371c      	adds	r7, #28
 801691a:	46bd      	mov	sp, r7
 801691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016920:	4770      	bx	lr
	...

08016924 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b082      	sub	sp, #8
 8016928:	af00      	add	r7, sp, #0
 801692a:	6078      	str	r0, [r7, #4]
 801692c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	2200      	movs	r2, #0
 8016932:	70da      	strb	r2, [r3, #3]
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801693a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801693c:	6839      	ldr	r1, [r7, #0]
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7ff f8d8 	bl	8015af4 <move_window>
 8016944:	4603      	mov	r3, r0
 8016946:	2b00      	cmp	r3, #0
 8016948:	d001      	beq.n	801694e <check_fs+0x2a>
 801694a:	2304      	movs	r3, #4
 801694c:	e038      	b.n	80169c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	3330      	adds	r3, #48	; 0x30
 8016952:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016956:	4618      	mov	r0, r3
 8016958:	f7fe fe1c 	bl	8015594 <ld_word>
 801695c:	4603      	mov	r3, r0
 801695e:	461a      	mov	r2, r3
 8016960:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016964:	429a      	cmp	r2, r3
 8016966:	d001      	beq.n	801696c <check_fs+0x48>
 8016968:	2303      	movs	r3, #3
 801696a:	e029      	b.n	80169c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016972:	2be9      	cmp	r3, #233	; 0xe9
 8016974:	d009      	beq.n	801698a <check_fs+0x66>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801697c:	2beb      	cmp	r3, #235	; 0xeb
 801697e:	d11e      	bne.n	80169be <check_fs+0x9a>
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8016986:	2b90      	cmp	r3, #144	; 0x90
 8016988:	d119      	bne.n	80169be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	3330      	adds	r3, #48	; 0x30
 801698e:	3336      	adds	r3, #54	; 0x36
 8016990:	4618      	mov	r0, r3
 8016992:	f7fe fe17 	bl	80155c4 <ld_dword>
 8016996:	4603      	mov	r3, r0
 8016998:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801699c:	4a0a      	ldr	r2, [pc, #40]	; (80169c8 <check_fs+0xa4>)
 801699e:	4293      	cmp	r3, r2
 80169a0:	d101      	bne.n	80169a6 <check_fs+0x82>
 80169a2:	2300      	movs	r3, #0
 80169a4:	e00c      	b.n	80169c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	3330      	adds	r3, #48	; 0x30
 80169aa:	3352      	adds	r3, #82	; 0x52
 80169ac:	4618      	mov	r0, r3
 80169ae:	f7fe fe09 	bl	80155c4 <ld_dword>
 80169b2:	4603      	mov	r3, r0
 80169b4:	4a05      	ldr	r2, [pc, #20]	; (80169cc <check_fs+0xa8>)
 80169b6:	4293      	cmp	r3, r2
 80169b8:	d101      	bne.n	80169be <check_fs+0x9a>
 80169ba:	2300      	movs	r3, #0
 80169bc:	e000      	b.n	80169c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80169be:	2302      	movs	r3, #2
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	00544146 	.word	0x00544146
 80169cc:	33544146 	.word	0x33544146

080169d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b096      	sub	sp, #88	; 0x58
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	4613      	mov	r3, r2
 80169dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	2200      	movs	r2, #0
 80169e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80169e4:	68f8      	ldr	r0, [r7, #12]
 80169e6:	f7ff ff58 	bl	801689a <get_ldnumber>
 80169ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80169ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	da01      	bge.n	80169f6 <find_volume+0x26>
 80169f2:	230b      	movs	r3, #11
 80169f4:	e22d      	b.n	8016e52 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80169f6:	4aa1      	ldr	r2, [pc, #644]	; (8016c7c <find_volume+0x2ac>)
 80169f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d101      	bne.n	8016a0a <find_volume+0x3a>
 8016a06:	230c      	movs	r3, #12
 8016a08:	e223      	b.n	8016e52 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016a0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016a10:	79fb      	ldrb	r3, [r7, #7]
 8016a12:	f023 0301 	bic.w	r3, r3, #1
 8016a16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d01a      	beq.n	8016a56 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a22:	785b      	ldrb	r3, [r3, #1]
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7fe fd17 	bl	8015458 <disk_status>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a34:	f003 0301 	and.w	r3, r3, #1
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d10c      	bne.n	8016a56 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016a3c:	79fb      	ldrb	r3, [r7, #7]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d007      	beq.n	8016a52 <find_volume+0x82>
 8016a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a46:	f003 0304 	and.w	r3, r3, #4
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d001      	beq.n	8016a52 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016a4e:	230a      	movs	r3, #10
 8016a50:	e1ff      	b.n	8016e52 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8016a52:	2300      	movs	r3, #0
 8016a54:	e1fd      	b.n	8016e52 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a58:	2200      	movs	r2, #0
 8016a5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a5e:	b2da      	uxtb	r2, r3
 8016a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a66:	785b      	ldrb	r3, [r3, #1]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7fe fd0f 	bl	801548c <disk_initialize>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016a74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a78:	f003 0301 	and.w	r3, r3, #1
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d001      	beq.n	8016a84 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016a80:	2303      	movs	r3, #3
 8016a82:	e1e6      	b.n	8016e52 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016a84:	79fb      	ldrb	r3, [r7, #7]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d007      	beq.n	8016a9a <find_volume+0xca>
 8016a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016a8e:	f003 0304 	and.w	r3, r3, #4
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d001      	beq.n	8016a9a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016a96:	230a      	movs	r3, #10
 8016a98:	e1db      	b.n	8016e52 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016aa2:	f7ff ff3f 	bl	8016924 <check_fs>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ab0:	2b02      	cmp	r3, #2
 8016ab2:	d149      	bne.n	8016b48 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8016ab8:	e01e      	b.n	8016af8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016abc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ac2:	011b      	lsls	r3, r3, #4
 8016ac4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016ac8:	4413      	add	r3, r2
 8016aca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ace:	3304      	adds	r3, #4
 8016ad0:	781b      	ldrb	r3, [r3, #0]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d006      	beq.n	8016ae4 <find_volume+0x114>
 8016ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ad8:	3308      	adds	r3, #8
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7fe fd72 	bl	80155c4 <ld_dword>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	e000      	b.n	8016ae6 <find_volume+0x116>
 8016ae4:	2200      	movs	r2, #0
 8016ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	3358      	adds	r3, #88	; 0x58
 8016aec:	443b      	add	r3, r7
 8016aee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016af4:	3301      	adds	r3, #1
 8016af6:	643b      	str	r3, [r7, #64]	; 0x40
 8016af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016afa:	2b03      	cmp	r3, #3
 8016afc:	d9dd      	bls.n	8016aba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016afe:	2300      	movs	r3, #0
 8016b00:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d002      	beq.n	8016b0e <find_volume+0x13e>
 8016b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b0a:	3b01      	subs	r3, #1
 8016b0c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	3358      	adds	r3, #88	; 0x58
 8016b14:	443b      	add	r3, r7
 8016b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d005      	beq.n	8016b2e <find_volume+0x15e>
 8016b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016b26:	f7ff fefd 	bl	8016924 <check_fs>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	e000      	b.n	8016b30 <find_volume+0x160>
 8016b2e:	2303      	movs	r3, #3
 8016b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016b38:	2b01      	cmp	r3, #1
 8016b3a:	d905      	bls.n	8016b48 <find_volume+0x178>
 8016b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b3e:	3301      	adds	r3, #1
 8016b40:	643b      	str	r3, [r7, #64]	; 0x40
 8016b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016b44:	2b03      	cmp	r3, #3
 8016b46:	d9e2      	bls.n	8016b0e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016b4c:	2b04      	cmp	r3, #4
 8016b4e:	d101      	bne.n	8016b54 <find_volume+0x184>
 8016b50:	2301      	movs	r3, #1
 8016b52:	e17e      	b.n	8016e52 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d901      	bls.n	8016b60 <find_volume+0x190>
 8016b5c:	230d      	movs	r3, #13
 8016b5e:	e178      	b.n	8016e52 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b62:	3330      	adds	r3, #48	; 0x30
 8016b64:	330b      	adds	r3, #11
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7fe fd14 	bl	8015594 <ld_word>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b72:	d001      	beq.n	8016b78 <find_volume+0x1a8>
 8016b74:	230d      	movs	r3, #13
 8016b76:	e16c      	b.n	8016e52 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b7a:	3330      	adds	r3, #48	; 0x30
 8016b7c:	3316      	adds	r3, #22
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7fe fd08 	bl	8015594 <ld_word>
 8016b84:	4603      	mov	r3, r0
 8016b86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d106      	bne.n	8016b9c <find_volume+0x1cc>
 8016b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b90:	3330      	adds	r3, #48	; 0x30
 8016b92:	3324      	adds	r3, #36	; 0x24
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7fe fd15 	bl	80155c4 <ld_dword>
 8016b9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ba0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ba4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8016ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016baa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bae:	789b      	ldrb	r3, [r3, #2]
 8016bb0:	2b01      	cmp	r3, #1
 8016bb2:	d005      	beq.n	8016bc0 <find_volume+0x1f0>
 8016bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bb6:	789b      	ldrb	r3, [r3, #2]
 8016bb8:	2b02      	cmp	r3, #2
 8016bba:	d001      	beq.n	8016bc0 <find_volume+0x1f0>
 8016bbc:	230d      	movs	r3, #13
 8016bbe:	e148      	b.n	8016e52 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bc2:	789b      	ldrb	r3, [r3, #2]
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bc8:	fb02 f303 	mul.w	r3, r2, r3
 8016bcc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016bd4:	b29a      	uxth	r2, r3
 8016bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bd8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bdc:	895b      	ldrh	r3, [r3, #10]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d008      	beq.n	8016bf4 <find_volume+0x224>
 8016be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016be4:	895b      	ldrh	r3, [r3, #10]
 8016be6:	461a      	mov	r2, r3
 8016be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bea:	895b      	ldrh	r3, [r3, #10]
 8016bec:	3b01      	subs	r3, #1
 8016bee:	4013      	ands	r3, r2
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d001      	beq.n	8016bf8 <find_volume+0x228>
 8016bf4:	230d      	movs	r3, #13
 8016bf6:	e12c      	b.n	8016e52 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bfa:	3330      	adds	r3, #48	; 0x30
 8016bfc:	3311      	adds	r3, #17
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fe fcc8 	bl	8015594 <ld_word>
 8016c04:	4603      	mov	r3, r0
 8016c06:	461a      	mov	r2, r3
 8016c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c0e:	891b      	ldrh	r3, [r3, #8]
 8016c10:	f003 030f 	and.w	r3, r3, #15
 8016c14:	b29b      	uxth	r3, r3
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d001      	beq.n	8016c1e <find_volume+0x24e>
 8016c1a:	230d      	movs	r3, #13
 8016c1c:	e119      	b.n	8016e52 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c20:	3330      	adds	r3, #48	; 0x30
 8016c22:	3313      	adds	r3, #19
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fe fcb5 	bl	8015594 <ld_word>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d106      	bne.n	8016c42 <find_volume+0x272>
 8016c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c36:	3330      	adds	r3, #48	; 0x30
 8016c38:	3320      	adds	r3, #32
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f7fe fcc2 	bl	80155c4 <ld_dword>
 8016c40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c44:	3330      	adds	r3, #48	; 0x30
 8016c46:	330e      	adds	r3, #14
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7fe fca3 	bl	8015594 <ld_word>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016c52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d101      	bne.n	8016c5c <find_volume+0x28c>
 8016c58:	230d      	movs	r3, #13
 8016c5a:	e0fa      	b.n	8016e52 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016c5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c60:	4413      	add	r3, r2
 8016c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c64:	8912      	ldrh	r2, [r2, #8]
 8016c66:	0912      	lsrs	r2, r2, #4
 8016c68:	b292      	uxth	r2, r2
 8016c6a:	4413      	add	r3, r2
 8016c6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d204      	bcs.n	8016c80 <find_volume+0x2b0>
 8016c76:	230d      	movs	r3, #13
 8016c78:	e0eb      	b.n	8016e52 <find_volume+0x482>
 8016c7a:	bf00      	nop
 8016c7c:	200013fc 	.word	0x200013fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c84:	1ad3      	subs	r3, r2, r3
 8016c86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c88:	8952      	ldrh	r2, [r2, #10]
 8016c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8016c8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d101      	bne.n	8016c9a <find_volume+0x2ca>
 8016c96:	230d      	movs	r3, #13
 8016c98:	e0db      	b.n	8016e52 <find_volume+0x482>
		fmt = FS_FAT32;
 8016c9a:	2303      	movs	r3, #3
 8016c9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ca2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d802      	bhi.n	8016cb0 <find_volume+0x2e0>
 8016caa:	2302      	movs	r3, #2
 8016cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d802      	bhi.n	8016cc0 <find_volume+0x2f0>
 8016cba:	2301      	movs	r3, #1
 8016cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc2:	1c9a      	adds	r2, r3, #2
 8016cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cc6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8016cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016ccc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016cce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016cd2:	441a      	add	r2, r3
 8016cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cd6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8016cd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cdc:	441a      	add	r2, r3
 8016cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ce0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8016ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ce6:	2b03      	cmp	r3, #3
 8016ce8:	d11e      	bne.n	8016d28 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cec:	3330      	adds	r3, #48	; 0x30
 8016cee:	332a      	adds	r3, #42	; 0x2a
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7fe fc4f 	bl	8015594 <ld_word>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d001      	beq.n	8016d00 <find_volume+0x330>
 8016cfc:	230d      	movs	r3, #13
 8016cfe:	e0a8      	b.n	8016e52 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d02:	891b      	ldrh	r3, [r3, #8]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d001      	beq.n	8016d0c <find_volume+0x33c>
 8016d08:	230d      	movs	r3, #13
 8016d0a:	e0a2      	b.n	8016e52 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0e:	3330      	adds	r3, #48	; 0x30
 8016d10:	332c      	adds	r3, #44	; 0x2c
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7fe fc56 	bl	80155c4 <ld_dword>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d1c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d20:	695b      	ldr	r3, [r3, #20]
 8016d22:	009b      	lsls	r3, r3, #2
 8016d24:	647b      	str	r3, [r7, #68]	; 0x44
 8016d26:	e01f      	b.n	8016d68 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d2a:	891b      	ldrh	r3, [r3, #8]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d101      	bne.n	8016d34 <find_volume+0x364>
 8016d30:	230d      	movs	r3, #13
 8016d32:	e08e      	b.n	8016e52 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d36:	6a1a      	ldr	r2, [r3, #32]
 8016d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d3a:	441a      	add	r2, r3
 8016d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d44:	2b02      	cmp	r3, #2
 8016d46:	d103      	bne.n	8016d50 <find_volume+0x380>
 8016d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d4a:	695b      	ldr	r3, [r3, #20]
 8016d4c:	005b      	lsls	r3, r3, #1
 8016d4e:	e00a      	b.n	8016d66 <find_volume+0x396>
 8016d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d52:	695a      	ldr	r2, [r3, #20]
 8016d54:	4613      	mov	r3, r2
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4413      	add	r3, r2
 8016d5a:	085a      	lsrs	r2, r3, #1
 8016d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d5e:	695b      	ldr	r3, [r3, #20]
 8016d60:	f003 0301 	and.w	r3, r3, #1
 8016d64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8016d66:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8016d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d6a:	699a      	ldr	r2, [r3, #24]
 8016d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8016d72:	0a5b      	lsrs	r3, r3, #9
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d201      	bcs.n	8016d7c <find_volume+0x3ac>
 8016d78:	230d      	movs	r3, #13
 8016d7a:	e06a      	b.n	8016e52 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8016d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d82:	611a      	str	r2, [r3, #16]
 8016d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d86:	691a      	ldr	r2, [r3, #16]
 8016d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d8a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8016d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d8e:	2280      	movs	r2, #128	; 0x80
 8016d90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8016d92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d96:	2b03      	cmp	r3, #3
 8016d98:	d149      	bne.n	8016e2e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d9c:	3330      	adds	r3, #48	; 0x30
 8016d9e:	3330      	adds	r3, #48	; 0x30
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7fe fbf7 	bl	8015594 <ld_word>
 8016da6:	4603      	mov	r3, r0
 8016da8:	2b01      	cmp	r3, #1
 8016daa:	d140      	bne.n	8016e2e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016dae:	3301      	adds	r3, #1
 8016db0:	4619      	mov	r1, r3
 8016db2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016db4:	f7fe fe9e 	bl	8015af4 <move_window>
 8016db8:	4603      	mov	r3, r0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d137      	bne.n	8016e2e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8016dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8016dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dc6:	3330      	adds	r3, #48	; 0x30
 8016dc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7fe fbe1 	bl	8015594 <ld_word>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	461a      	mov	r2, r3
 8016dd6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d127      	bne.n	8016e2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016de0:	3330      	adds	r3, #48	; 0x30
 8016de2:	4618      	mov	r0, r3
 8016de4:	f7fe fbee 	bl	80155c4 <ld_dword>
 8016de8:	4603      	mov	r3, r0
 8016dea:	4a1c      	ldr	r2, [pc, #112]	; (8016e5c <find_volume+0x48c>)
 8016dec:	4293      	cmp	r3, r2
 8016dee:	d11e      	bne.n	8016e2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df2:	3330      	adds	r3, #48	; 0x30
 8016df4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fe fbe3 	bl	80155c4 <ld_dword>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	4a17      	ldr	r2, [pc, #92]	; (8016e60 <find_volume+0x490>)
 8016e02:	4293      	cmp	r3, r2
 8016e04:	d113      	bne.n	8016e2e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e08:	3330      	adds	r3, #48	; 0x30
 8016e0a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7fe fbd8 	bl	80155c4 <ld_dword>
 8016e14:	4602      	mov	r2, r0
 8016e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e18:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e1c:	3330      	adds	r3, #48	; 0x30
 8016e1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7fe fbce 	bl	80155c4 <ld_dword>
 8016e28:	4602      	mov	r2, r0
 8016e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e2c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8016e34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016e36:	4b0b      	ldr	r3, [pc, #44]	; (8016e64 <find_volume+0x494>)
 8016e38:	881b      	ldrh	r3, [r3, #0]
 8016e3a:	3301      	adds	r3, #1
 8016e3c:	b29a      	uxth	r2, r3
 8016e3e:	4b09      	ldr	r3, [pc, #36]	; (8016e64 <find_volume+0x494>)
 8016e40:	801a      	strh	r2, [r3, #0]
 8016e42:	4b08      	ldr	r3, [pc, #32]	; (8016e64 <find_volume+0x494>)
 8016e44:	881a      	ldrh	r2, [r3, #0]
 8016e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e48:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8016e4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e4c:	f7fe fdea 	bl	8015a24 <clear_lock>
#endif
	return FR_OK;
 8016e50:	2300      	movs	r3, #0
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	3758      	adds	r7, #88	; 0x58
 8016e56:	46bd      	mov	sp, r7
 8016e58:	bd80      	pop	{r7, pc}
 8016e5a:	bf00      	nop
 8016e5c:	41615252 	.word	0x41615252
 8016e60:	61417272 	.word	0x61417272
 8016e64:	20001400 	.word	0x20001400

08016e68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8016e72:	2309      	movs	r3, #9
 8016e74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d01c      	beq.n	8016eb6 <validate+0x4e>
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d018      	beq.n	8016eb6 <validate+0x4e>
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	781b      	ldrb	r3, [r3, #0]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d013      	beq.n	8016eb6 <validate+0x4e>
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	889a      	ldrh	r2, [r3, #4]
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	88db      	ldrh	r3, [r3, #6]
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d10c      	bne.n	8016eb6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	785b      	ldrb	r3, [r3, #1]
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7fe fad8 	bl	8015458 <disk_status>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	f003 0301 	and.w	r3, r3, #1
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d101      	bne.n	8016eb6 <validate+0x4e>
			res = FR_OK;
 8016eb2:	2300      	movs	r3, #0
 8016eb4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016eb6:	7bfb      	ldrb	r3, [r7, #15]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d102      	bne.n	8016ec2 <validate+0x5a>
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	e000      	b.n	8016ec4 <validate+0x5c>
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	683a      	ldr	r2, [r7, #0]
 8016ec6:	6013      	str	r3, [r2, #0]
	return res;
 8016ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eca:	4618      	mov	r0, r3
 8016ecc:	3710      	adds	r7, #16
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bd80      	pop	{r7, pc}
	...

08016ed4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b088      	sub	sp, #32
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	60b9      	str	r1, [r7, #8]
 8016ede:	4613      	mov	r3, r2
 8016ee0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016ee6:	f107 0310 	add.w	r3, r7, #16
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ff fcd5 	bl	801689a <get_ldnumber>
 8016ef0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	da01      	bge.n	8016efc <f_mount+0x28>
 8016ef8:	230b      	movs	r3, #11
 8016efa:	e02b      	b.n	8016f54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016efc:	4a17      	ldr	r2, [pc, #92]	; (8016f5c <f_mount+0x88>)
 8016efe:	69fb      	ldr	r3, [r7, #28]
 8016f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016f04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016f06:	69bb      	ldr	r3, [r7, #24]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d005      	beq.n	8016f18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8016f0c:	69b8      	ldr	r0, [r7, #24]
 8016f0e:	f7fe fd89 	bl	8015a24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016f12:	69bb      	ldr	r3, [r7, #24]
 8016f14:	2200      	movs	r2, #0
 8016f16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d002      	beq.n	8016f24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8016f24:	68fa      	ldr	r2, [r7, #12]
 8016f26:	490d      	ldr	r1, [pc, #52]	; (8016f5c <f_mount+0x88>)
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d002      	beq.n	8016f3a <f_mount+0x66>
 8016f34:	79fb      	ldrb	r3, [r7, #7]
 8016f36:	2b01      	cmp	r3, #1
 8016f38:	d001      	beq.n	8016f3e <f_mount+0x6a>
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	e00a      	b.n	8016f54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016f3e:	f107 010c 	add.w	r1, r7, #12
 8016f42:	f107 0308 	add.w	r3, r7, #8
 8016f46:	2200      	movs	r2, #0
 8016f48:	4618      	mov	r0, r3
 8016f4a:	f7ff fd41 	bl	80169d0 <find_volume>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3720      	adds	r7, #32
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	200013fc 	.word	0x200013fc

08016f60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b09a      	sub	sp, #104	; 0x68
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d101      	bne.n	8016f78 <f_open+0x18>
 8016f74:	2309      	movs	r3, #9
 8016f76:	e1ad      	b.n	80172d4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8016f78:	79fb      	ldrb	r3, [r7, #7]
 8016f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8016f80:	79fa      	ldrb	r2, [r7, #7]
 8016f82:	f107 0114 	add.w	r1, r7, #20
 8016f86:	f107 0308 	add.w	r3, r7, #8
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7ff fd20 	bl	80169d0 <find_volume>
 8016f90:	4603      	mov	r3, r0
 8016f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8016f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	f040 8191 	bne.w	80172c2 <f_open+0x362>
		dj.obj.fs = fs;
 8016fa0:	697b      	ldr	r3, [r7, #20]
 8016fa2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016fa4:	68ba      	ldr	r2, [r7, #8]
 8016fa6:	f107 0318 	add.w	r3, r7, #24
 8016faa:	4611      	mov	r1, r2
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff fc03 	bl	80167b8 <follow_path>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d11a      	bne.n	8016ff6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016fc4:	b25b      	sxtb	r3, r3
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	da03      	bge.n	8016fd2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8016fca:	2306      	movs	r3, #6
 8016fcc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8016fd0:	e011      	b.n	8016ff6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8016fd2:	79fb      	ldrb	r3, [r7, #7]
 8016fd4:	f023 0301 	bic.w	r3, r3, #1
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	bf14      	ite	ne
 8016fdc:	2301      	movne	r3, #1
 8016fde:	2300      	moveq	r3, #0
 8016fe0:	b2db      	uxtb	r3, r3
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	f107 0318 	add.w	r3, r7, #24
 8016fe8:	4611      	mov	r1, r2
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7fe fbd2 	bl	8015794 <chk_lock>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016ff6:	79fb      	ldrb	r3, [r7, #7]
 8016ff8:	f003 031c 	and.w	r3, r3, #28
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d07f      	beq.n	8017100 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017000:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017004:	2b00      	cmp	r3, #0
 8017006:	d017      	beq.n	8017038 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017008:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801700c:	2b04      	cmp	r3, #4
 801700e:	d10e      	bne.n	801702e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017010:	f7fe fc1c 	bl	801584c <enq_lock>
 8017014:	4603      	mov	r3, r0
 8017016:	2b00      	cmp	r3, #0
 8017018:	d006      	beq.n	8017028 <f_open+0xc8>
 801701a:	f107 0318 	add.w	r3, r7, #24
 801701e:	4618      	mov	r0, r3
 8017020:	f7ff fb03 	bl	801662a <dir_register>
 8017024:	4603      	mov	r3, r0
 8017026:	e000      	b.n	801702a <f_open+0xca>
 8017028:	2312      	movs	r3, #18
 801702a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801702e:	79fb      	ldrb	r3, [r7, #7]
 8017030:	f043 0308 	orr.w	r3, r3, #8
 8017034:	71fb      	strb	r3, [r7, #7]
 8017036:	e010      	b.n	801705a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017038:	7fbb      	ldrb	r3, [r7, #30]
 801703a:	f003 0311 	and.w	r3, r3, #17
 801703e:	2b00      	cmp	r3, #0
 8017040:	d003      	beq.n	801704a <f_open+0xea>
					res = FR_DENIED;
 8017042:	2307      	movs	r3, #7
 8017044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017048:	e007      	b.n	801705a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801704a:	79fb      	ldrb	r3, [r7, #7]
 801704c:	f003 0304 	and.w	r3, r3, #4
 8017050:	2b00      	cmp	r3, #0
 8017052:	d002      	beq.n	801705a <f_open+0xfa>
 8017054:	2308      	movs	r3, #8
 8017056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801705a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801705e:	2b00      	cmp	r3, #0
 8017060:	d168      	bne.n	8017134 <f_open+0x1d4>
 8017062:	79fb      	ldrb	r3, [r7, #7]
 8017064:	f003 0308 	and.w	r3, r3, #8
 8017068:	2b00      	cmp	r3, #0
 801706a:	d063      	beq.n	8017134 <f_open+0x1d4>
				dw = GET_FATTIME();
 801706c:	f7fc fbd0 	bl	8013810 <get_fattime>
 8017070:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017074:	330e      	adds	r3, #14
 8017076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017078:	4618      	mov	r0, r3
 801707a:	f7fe fae1 	bl	8015640 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801707e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017080:	3316      	adds	r3, #22
 8017082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8017084:	4618      	mov	r0, r3
 8017086:	f7fe fadb 	bl	8015640 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708c:	330b      	adds	r3, #11
 801708e:	2220      	movs	r2, #32
 8017090:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017096:	4611      	mov	r1, r2
 8017098:	4618      	mov	r0, r3
 801709a:	f7ff fa32 	bl	8016502 <ld_clust>
 801709e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80170a4:	2200      	movs	r2, #0
 80170a6:	4618      	mov	r0, r3
 80170a8:	f7ff fa4a 	bl	8016540 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80170ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ae:	331c      	adds	r3, #28
 80170b0:	2100      	movs	r1, #0
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fe fac4 	bl	8015640 <st_dword>
					fs->wflag = 1;
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2201      	movs	r2, #1
 80170bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80170be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d037      	beq.n	8017134 <f_open+0x1d4>
						dw = fs->winsect;
 80170c4:	697b      	ldr	r3, [r7, #20]
 80170c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80170ca:	f107 0318 	add.w	r3, r7, #24
 80170ce:	2200      	movs	r2, #0
 80170d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7fe ff5d 	bl	8015f92 <remove_chain>
 80170d8:	4603      	mov	r3, r0
 80170da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80170de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d126      	bne.n	8017134 <f_open+0x1d4>
							res = move_window(fs, dw);
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fe fd02 	bl	8015af4 <move_window>
 80170f0:	4603      	mov	r3, r0
 80170f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80170fa:	3a01      	subs	r2, #1
 80170fc:	60da      	str	r2, [r3, #12]
 80170fe:	e019      	b.n	8017134 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017100:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017104:	2b00      	cmp	r3, #0
 8017106:	d115      	bne.n	8017134 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017108:	7fbb      	ldrb	r3, [r7, #30]
 801710a:	f003 0310 	and.w	r3, r3, #16
 801710e:	2b00      	cmp	r3, #0
 8017110:	d003      	beq.n	801711a <f_open+0x1ba>
					res = FR_NO_FILE;
 8017112:	2304      	movs	r3, #4
 8017114:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017118:	e00c      	b.n	8017134 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801711a:	79fb      	ldrb	r3, [r7, #7]
 801711c:	f003 0302 	and.w	r3, r3, #2
 8017120:	2b00      	cmp	r3, #0
 8017122:	d007      	beq.n	8017134 <f_open+0x1d4>
 8017124:	7fbb      	ldrb	r3, [r7, #30]
 8017126:	f003 0301 	and.w	r3, r3, #1
 801712a:	2b00      	cmp	r3, #0
 801712c:	d002      	beq.n	8017134 <f_open+0x1d4>
						res = FR_DENIED;
 801712e:	2307      	movs	r3, #7
 8017130:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8017134:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017138:	2b00      	cmp	r3, #0
 801713a:	d128      	bne.n	801718e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801713c:	79fb      	ldrb	r3, [r7, #7]
 801713e:	f003 0308 	and.w	r3, r3, #8
 8017142:	2b00      	cmp	r3, #0
 8017144:	d003      	beq.n	801714e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8017146:	79fb      	ldrb	r3, [r7, #7]
 8017148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801714c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801714e:	697b      	ldr	r3, [r7, #20]
 8017150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8017156:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801715c:	79fb      	ldrb	r3, [r7, #7]
 801715e:	f023 0301 	bic.w	r3, r3, #1
 8017162:	2b00      	cmp	r3, #0
 8017164:	bf14      	ite	ne
 8017166:	2301      	movne	r3, #1
 8017168:	2300      	moveq	r3, #0
 801716a:	b2db      	uxtb	r3, r3
 801716c:	461a      	mov	r2, r3
 801716e:	f107 0318 	add.w	r3, r7, #24
 8017172:	4611      	mov	r1, r2
 8017174:	4618      	mov	r0, r3
 8017176:	f7fe fb8b 	bl	8015890 <inc_lock>
 801717a:	4602      	mov	r2, r0
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	691b      	ldr	r3, [r3, #16]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d102      	bne.n	801718e <f_open+0x22e>
 8017188:	2302      	movs	r3, #2
 801718a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801718e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017192:	2b00      	cmp	r3, #0
 8017194:	f040 8095 	bne.w	80172c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8017198:	697b      	ldr	r3, [r7, #20]
 801719a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801719c:	4611      	mov	r1, r2
 801719e:	4618      	mov	r0, r3
 80171a0:	f7ff f9af 	bl	8016502 <ld_clust>
 80171a4:	4602      	mov	r2, r0
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80171aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ac:	331c      	adds	r3, #28
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7fe fa08 	bl	80155c4 <ld_dword>
 80171b4:	4602      	mov	r2, r0
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	2200      	movs	r2, #0
 80171be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80171c0:	697a      	ldr	r2, [r7, #20]
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	88da      	ldrh	r2, [r3, #6]
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	79fa      	ldrb	r2, [r7, #7]
 80171d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	2200      	movs	r2, #0
 80171d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2200      	movs	r2, #0
 80171de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	3330      	adds	r3, #48	; 0x30
 80171ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80171ee:	2100      	movs	r1, #0
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7fe fa72 	bl	80156da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80171f6:	79fb      	ldrb	r3, [r7, #7]
 80171f8:	f003 0320 	and.w	r3, r3, #32
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d060      	beq.n	80172c2 <f_open+0x362>
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d05c      	beq.n	80172c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	68da      	ldr	r2, [r3, #12]
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017210:	697b      	ldr	r3, [r7, #20]
 8017212:	895b      	ldrh	r3, [r3, #10]
 8017214:	025b      	lsls	r3, r3, #9
 8017216:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	689b      	ldr	r3, [r3, #8]
 801721c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017224:	e016      	b.n	8017254 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801722a:	4618      	mov	r0, r3
 801722c:	f7fe fd1d 	bl	8015c6a <get_fat>
 8017230:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8017232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017234:	2b01      	cmp	r3, #1
 8017236:	d802      	bhi.n	801723e <f_open+0x2de>
 8017238:	2302      	movs	r3, #2
 801723a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801723e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017244:	d102      	bne.n	801724c <f_open+0x2ec>
 8017246:	2301      	movs	r3, #1
 8017248:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801724c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801724e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017250:	1ad3      	subs	r3, r2, r3
 8017252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017258:	2b00      	cmp	r3, #0
 801725a:	d103      	bne.n	8017264 <f_open+0x304>
 801725c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017260:	429a      	cmp	r2, r3
 8017262:	d8e0      	bhi.n	8017226 <f_open+0x2c6>
				}
				fp->clust = clst;
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017268:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801726a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801726e:	2b00      	cmp	r3, #0
 8017270:	d127      	bne.n	80172c2 <f_open+0x362>
 8017272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017278:	2b00      	cmp	r3, #0
 801727a:	d022      	beq.n	80172c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017280:	4618      	mov	r0, r3
 8017282:	f7fe fcd3 	bl	8015c2c <clust2sect>
 8017286:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801728a:	2b00      	cmp	r3, #0
 801728c:	d103      	bne.n	8017296 <f_open+0x336>
						res = FR_INT_ERR;
 801728e:	2302      	movs	r3, #2
 8017290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8017294:	e015      	b.n	80172c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017298:	0a5a      	lsrs	r2, r3, #9
 801729a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801729c:	441a      	add	r2, r3
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	7858      	ldrb	r0, [r3, #1]
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	6a1a      	ldr	r2, [r3, #32]
 80172b0:	2301      	movs	r3, #1
 80172b2:	f7fe f911 	bl	80154d8 <disk_read>
 80172b6:	4603      	mov	r3, r0
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d002      	beq.n	80172c2 <f_open+0x362>
 80172bc:	2301      	movs	r3, #1
 80172be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80172c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d002      	beq.n	80172d0 <f_open+0x370>
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	2200      	movs	r2, #0
 80172ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80172d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	3768      	adds	r7, #104	; 0x68
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b08e      	sub	sp, #56	; 0x38
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	60f8      	str	r0, [r7, #12]
 80172e4:	60b9      	str	r1, [r7, #8]
 80172e6:	607a      	str	r2, [r7, #4]
 80172e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80172ee:	683b      	ldr	r3, [r7, #0]
 80172f0:	2200      	movs	r2, #0
 80172f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f107 0214 	add.w	r2, r7, #20
 80172fa:	4611      	mov	r1, r2
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7ff fdb3 	bl	8016e68 <validate>
 8017302:	4603      	mov	r3, r0
 8017304:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801730c:	2b00      	cmp	r3, #0
 801730e:	d107      	bne.n	8017320 <f_read+0x44>
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	7d5b      	ldrb	r3, [r3, #21]
 8017314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8017318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801731c:	2b00      	cmp	r3, #0
 801731e:	d002      	beq.n	8017326 <f_read+0x4a>
 8017320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017324:	e115      	b.n	8017552 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	7d1b      	ldrb	r3, [r3, #20]
 801732a:	f003 0301 	and.w	r3, r3, #1
 801732e:	2b00      	cmp	r3, #0
 8017330:	d101      	bne.n	8017336 <f_read+0x5a>
 8017332:	2307      	movs	r3, #7
 8017334:	e10d      	b.n	8017552 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	68da      	ldr	r2, [r3, #12]
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	699b      	ldr	r3, [r3, #24]
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8017342:	687a      	ldr	r2, [r7, #4]
 8017344:	6a3b      	ldr	r3, [r7, #32]
 8017346:	429a      	cmp	r2, r3
 8017348:	f240 80fe 	bls.w	8017548 <f_read+0x26c>
 801734c:	6a3b      	ldr	r3, [r7, #32]
 801734e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8017350:	e0fa      	b.n	8017548 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	699b      	ldr	r3, [r3, #24]
 8017356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801735a:	2b00      	cmp	r3, #0
 801735c:	f040 80c6 	bne.w	80174ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	699b      	ldr	r3, [r3, #24]
 8017364:	0a5b      	lsrs	r3, r3, #9
 8017366:	697a      	ldr	r2, [r7, #20]
 8017368:	8952      	ldrh	r2, [r2, #10]
 801736a:	3a01      	subs	r2, #1
 801736c:	4013      	ands	r3, r2
 801736e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8017370:	69fb      	ldr	r3, [r7, #28]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d12f      	bne.n	80173d6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	699b      	ldr	r3, [r3, #24]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d103      	bne.n	8017386 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	689b      	ldr	r3, [r3, #8]
 8017382:	633b      	str	r3, [r7, #48]	; 0x30
 8017384:	e013      	b.n	80173ae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801738a:	2b00      	cmp	r3, #0
 801738c:	d007      	beq.n	801739e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	699b      	ldr	r3, [r3, #24]
 8017392:	4619      	mov	r1, r3
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	f7fe fef9 	bl	801618c <clmt_clust>
 801739a:	6338      	str	r0, [r7, #48]	; 0x30
 801739c:	e007      	b.n	80173ae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801739e:	68fa      	ldr	r2, [r7, #12]
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	69db      	ldr	r3, [r3, #28]
 80173a4:	4619      	mov	r1, r3
 80173a6:	4610      	mov	r0, r2
 80173a8:	f7fe fc5f 	bl	8015c6a <get_fat>
 80173ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80173ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b0:	2b01      	cmp	r3, #1
 80173b2:	d804      	bhi.n	80173be <f_read+0xe2>
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	2202      	movs	r2, #2
 80173b8:	755a      	strb	r2, [r3, #21]
 80173ba:	2302      	movs	r3, #2
 80173bc:	e0c9      	b.n	8017552 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80173be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173c4:	d104      	bne.n	80173d0 <f_read+0xf4>
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	2201      	movs	r2, #1
 80173ca:	755a      	strb	r2, [r3, #21]
 80173cc:	2301      	movs	r3, #1
 80173ce:	e0c0      	b.n	8017552 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80173d6:	697a      	ldr	r2, [r7, #20]
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	69db      	ldr	r3, [r3, #28]
 80173dc:	4619      	mov	r1, r3
 80173de:	4610      	mov	r0, r2
 80173e0:	f7fe fc24 	bl	8015c2c <clust2sect>
 80173e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80173e6:	69bb      	ldr	r3, [r7, #24]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d104      	bne.n	80173f6 <f_read+0x11a>
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2202      	movs	r2, #2
 80173f0:	755a      	strb	r2, [r3, #21]
 80173f2:	2302      	movs	r3, #2
 80173f4:	e0ad      	b.n	8017552 <f_read+0x276>
			sect += csect;
 80173f6:	69ba      	ldr	r2, [r7, #24]
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	4413      	add	r3, r2
 80173fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	0a5b      	lsrs	r3, r3, #9
 8017402:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8017404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017406:	2b00      	cmp	r3, #0
 8017408:	d039      	beq.n	801747e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801740a:	69fa      	ldr	r2, [r7, #28]
 801740c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740e:	4413      	add	r3, r2
 8017410:	697a      	ldr	r2, [r7, #20]
 8017412:	8952      	ldrh	r2, [r2, #10]
 8017414:	4293      	cmp	r3, r2
 8017416:	d905      	bls.n	8017424 <f_read+0x148>
					cc = fs->csize - csect;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	895b      	ldrh	r3, [r3, #10]
 801741c:	461a      	mov	r2, r3
 801741e:	69fb      	ldr	r3, [r7, #28]
 8017420:	1ad3      	subs	r3, r2, r3
 8017422:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	7858      	ldrb	r0, [r3, #1]
 8017428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801742a:	69ba      	ldr	r2, [r7, #24]
 801742c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801742e:	f7fe f853 	bl	80154d8 <disk_read>
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d004      	beq.n	8017442 <f_read+0x166>
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2201      	movs	r2, #1
 801743c:	755a      	strb	r2, [r3, #21]
 801743e:	2301      	movs	r3, #1
 8017440:	e087      	b.n	8017552 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	7d1b      	ldrb	r3, [r3, #20]
 8017446:	b25b      	sxtb	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	da14      	bge.n	8017476 <f_read+0x19a>
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	6a1a      	ldr	r2, [r3, #32]
 8017450:	69bb      	ldr	r3, [r7, #24]
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017456:	429a      	cmp	r2, r3
 8017458:	d90d      	bls.n	8017476 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	6a1a      	ldr	r2, [r3, #32]
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	1ad3      	subs	r3, r2, r3
 8017462:	025b      	lsls	r3, r3, #9
 8017464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017466:	18d0      	adds	r0, r2, r3
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	3330      	adds	r3, #48	; 0x30
 801746c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017470:	4619      	mov	r1, r3
 8017472:	f7fe f911 	bl	8015698 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8017476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017478:	025b      	lsls	r3, r3, #9
 801747a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801747c:	e050      	b.n	8017520 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	6a1b      	ldr	r3, [r3, #32]
 8017482:	69ba      	ldr	r2, [r7, #24]
 8017484:	429a      	cmp	r2, r3
 8017486:	d02e      	beq.n	80174e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	7d1b      	ldrb	r3, [r3, #20]
 801748c:	b25b      	sxtb	r3, r3
 801748e:	2b00      	cmp	r3, #0
 8017490:	da18      	bge.n	80174c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017492:	697b      	ldr	r3, [r7, #20]
 8017494:	7858      	ldrb	r0, [r3, #1]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	6a1a      	ldr	r2, [r3, #32]
 80174a0:	2301      	movs	r3, #1
 80174a2:	f7fe f839 	bl	8015518 <disk_write>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d004      	beq.n	80174b6 <f_read+0x1da>
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	2201      	movs	r2, #1
 80174b0:	755a      	strb	r2, [r3, #21]
 80174b2:	2301      	movs	r3, #1
 80174b4:	e04d      	b.n	8017552 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	7d1b      	ldrb	r3, [r3, #20]
 80174ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174be:	b2da      	uxtb	r2, r3
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	7858      	ldrb	r0, [r3, #1]
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80174ce:	2301      	movs	r3, #1
 80174d0:	69ba      	ldr	r2, [r7, #24]
 80174d2:	f7fe f801 	bl	80154d8 <disk_read>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d004      	beq.n	80174e6 <f_read+0x20a>
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2201      	movs	r2, #1
 80174e0:	755a      	strb	r2, [r3, #21]
 80174e2:	2301      	movs	r3, #1
 80174e4:	e035      	b.n	8017552 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	69ba      	ldr	r2, [r7, #24]
 80174ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	699b      	ldr	r3, [r3, #24]
 80174f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80174f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80174fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	429a      	cmp	r2, r3
 8017500:	d901      	bls.n	8017506 <f_read+0x22a>
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	699b      	ldr	r3, [r3, #24]
 8017510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017514:	4413      	add	r3, r2
 8017516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017518:	4619      	mov	r1, r3
 801751a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801751c:	f7fe f8bc 	bl	8015698 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8017520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017524:	4413      	add	r3, r2
 8017526:	627b      	str	r3, [r7, #36]	; 0x24
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	699a      	ldr	r2, [r3, #24]
 801752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752e:	441a      	add	r2, r3
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	619a      	str	r2, [r3, #24]
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	681a      	ldr	r2, [r3, #0]
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	441a      	add	r2, r3
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	601a      	str	r2, [r3, #0]
 8017540:	687a      	ldr	r2, [r7, #4]
 8017542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017544:	1ad3      	subs	r3, r2, r3
 8017546:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	2b00      	cmp	r3, #0
 801754c:	f47f af01 	bne.w	8017352 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8017550:	2300      	movs	r3, #0
}
 8017552:	4618      	mov	r0, r3
 8017554:	3738      	adds	r7, #56	; 0x38
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b08c      	sub	sp, #48	; 0x30
 801755e:	af00      	add	r7, sp, #0
 8017560:	60f8      	str	r0, [r7, #12]
 8017562:	60b9      	str	r1, [r7, #8]
 8017564:	607a      	str	r2, [r7, #4]
 8017566:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017568:	68bb      	ldr	r3, [r7, #8]
 801756a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	2200      	movs	r2, #0
 8017570:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	f107 0210 	add.w	r2, r7, #16
 8017578:	4611      	mov	r1, r2
 801757a:	4618      	mov	r0, r3
 801757c:	f7ff fc74 	bl	8016e68 <validate>
 8017580:	4603      	mov	r3, r0
 8017582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8017586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801758a:	2b00      	cmp	r3, #0
 801758c:	d107      	bne.n	801759e <f_write+0x44>
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	7d5b      	ldrb	r3, [r3, #21]
 8017592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8017596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801759a:	2b00      	cmp	r3, #0
 801759c:	d002      	beq.n	80175a4 <f_write+0x4a>
 801759e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80175a2:	e14b      	b.n	801783c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	7d1b      	ldrb	r3, [r3, #20]
 80175a8:	f003 0302 	and.w	r3, r3, #2
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d101      	bne.n	80175b4 <f_write+0x5a>
 80175b0:	2307      	movs	r3, #7
 80175b2:	e143      	b.n	801783c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	699a      	ldr	r2, [r3, #24]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	441a      	add	r2, r3
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	699b      	ldr	r3, [r3, #24]
 80175c0:	429a      	cmp	r2, r3
 80175c2:	f080 812d 	bcs.w	8017820 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	699b      	ldr	r3, [r3, #24]
 80175ca:	43db      	mvns	r3, r3
 80175cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80175ce:	e127      	b.n	8017820 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	699b      	ldr	r3, [r3, #24]
 80175d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f040 80e3 	bne.w	80177a4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	699b      	ldr	r3, [r3, #24]
 80175e2:	0a5b      	lsrs	r3, r3, #9
 80175e4:	693a      	ldr	r2, [r7, #16]
 80175e6:	8952      	ldrh	r2, [r2, #10]
 80175e8:	3a01      	subs	r2, #1
 80175ea:	4013      	ands	r3, r2
 80175ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d143      	bne.n	801767c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	699b      	ldr	r3, [r3, #24]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d10c      	bne.n	8017616 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	689b      	ldr	r3, [r3, #8]
 8017600:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017604:	2b00      	cmp	r3, #0
 8017606:	d11a      	bne.n	801763e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	2100      	movs	r1, #0
 801760c:	4618      	mov	r0, r3
 801760e:	f7fe fd25 	bl	801605c <create_chain>
 8017612:	62b8      	str	r0, [r7, #40]	; 0x28
 8017614:	e013      	b.n	801763e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801761a:	2b00      	cmp	r3, #0
 801761c:	d007      	beq.n	801762e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	699b      	ldr	r3, [r3, #24]
 8017622:	4619      	mov	r1, r3
 8017624:	68f8      	ldr	r0, [r7, #12]
 8017626:	f7fe fdb1 	bl	801618c <clmt_clust>
 801762a:	62b8      	str	r0, [r7, #40]	; 0x28
 801762c:	e007      	b.n	801763e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801762e:	68fa      	ldr	r2, [r7, #12]
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	69db      	ldr	r3, [r3, #28]
 8017634:	4619      	mov	r1, r3
 8017636:	4610      	mov	r0, r2
 8017638:	f7fe fd10 	bl	801605c <create_chain>
 801763c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017640:	2b00      	cmp	r3, #0
 8017642:	f000 80f2 	beq.w	801782a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8017646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017648:	2b01      	cmp	r3, #1
 801764a:	d104      	bne.n	8017656 <f_write+0xfc>
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	2202      	movs	r2, #2
 8017650:	755a      	strb	r2, [r3, #21]
 8017652:	2302      	movs	r3, #2
 8017654:	e0f2      	b.n	801783c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8017656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801765c:	d104      	bne.n	8017668 <f_write+0x10e>
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2201      	movs	r2, #1
 8017662:	755a      	strb	r2, [r3, #21]
 8017664:	2301      	movs	r3, #1
 8017666:	e0e9      	b.n	801783c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801766c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d102      	bne.n	801767c <f_write+0x122>
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801767a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	7d1b      	ldrb	r3, [r3, #20]
 8017680:	b25b      	sxtb	r3, r3
 8017682:	2b00      	cmp	r3, #0
 8017684:	da18      	bge.n	80176b8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	7858      	ldrb	r0, [r3, #1]
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	6a1a      	ldr	r2, [r3, #32]
 8017694:	2301      	movs	r3, #1
 8017696:	f7fd ff3f 	bl	8015518 <disk_write>
 801769a:	4603      	mov	r3, r0
 801769c:	2b00      	cmp	r3, #0
 801769e:	d004      	beq.n	80176aa <f_write+0x150>
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	2201      	movs	r2, #1
 80176a4:	755a      	strb	r2, [r3, #21]
 80176a6:	2301      	movs	r3, #1
 80176a8:	e0c8      	b.n	801783c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	7d1b      	ldrb	r3, [r3, #20]
 80176ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176b2:	b2da      	uxtb	r2, r3
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80176b8:	693a      	ldr	r2, [r7, #16]
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	69db      	ldr	r3, [r3, #28]
 80176be:	4619      	mov	r1, r3
 80176c0:	4610      	mov	r0, r2
 80176c2:	f7fe fab3 	bl	8015c2c <clust2sect>
 80176c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80176c8:	697b      	ldr	r3, [r7, #20]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d104      	bne.n	80176d8 <f_write+0x17e>
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2202      	movs	r2, #2
 80176d2:	755a      	strb	r2, [r3, #21]
 80176d4:	2302      	movs	r3, #2
 80176d6:	e0b1      	b.n	801783c <f_write+0x2e2>
			sect += csect;
 80176d8:	697a      	ldr	r2, [r7, #20]
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	4413      	add	r3, r2
 80176de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	0a5b      	lsrs	r3, r3, #9
 80176e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80176e6:	6a3b      	ldr	r3, [r7, #32]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d03c      	beq.n	8017766 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80176ec:	69ba      	ldr	r2, [r7, #24]
 80176ee:	6a3b      	ldr	r3, [r7, #32]
 80176f0:	4413      	add	r3, r2
 80176f2:	693a      	ldr	r2, [r7, #16]
 80176f4:	8952      	ldrh	r2, [r2, #10]
 80176f6:	4293      	cmp	r3, r2
 80176f8:	d905      	bls.n	8017706 <f_write+0x1ac>
					cc = fs->csize - csect;
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	895b      	ldrh	r3, [r3, #10]
 80176fe:	461a      	mov	r2, r3
 8017700:	69bb      	ldr	r3, [r7, #24]
 8017702:	1ad3      	subs	r3, r2, r3
 8017704:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	7858      	ldrb	r0, [r3, #1]
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	697a      	ldr	r2, [r7, #20]
 801770e:	69f9      	ldr	r1, [r7, #28]
 8017710:	f7fd ff02 	bl	8015518 <disk_write>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d004      	beq.n	8017724 <f_write+0x1ca>
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	2201      	movs	r2, #1
 801771e:	755a      	strb	r2, [r3, #21]
 8017720:	2301      	movs	r3, #1
 8017722:	e08b      	b.n	801783c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	6a1a      	ldr	r2, [r3, #32]
 8017728:	697b      	ldr	r3, [r7, #20]
 801772a:	1ad3      	subs	r3, r2, r3
 801772c:	6a3a      	ldr	r2, [r7, #32]
 801772e:	429a      	cmp	r2, r3
 8017730:	d915      	bls.n	801775e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	6a1a      	ldr	r2, [r3, #32]
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	1ad3      	subs	r3, r2, r3
 8017740:	025b      	lsls	r3, r3, #9
 8017742:	69fa      	ldr	r2, [r7, #28]
 8017744:	4413      	add	r3, r2
 8017746:	f44f 7200 	mov.w	r2, #512	; 0x200
 801774a:	4619      	mov	r1, r3
 801774c:	f7fd ffa4 	bl	8015698 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	7d1b      	ldrb	r3, [r3, #20]
 8017754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017758:	b2da      	uxtb	r2, r3
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801775e:	6a3b      	ldr	r3, [r7, #32]
 8017760:	025b      	lsls	r3, r3, #9
 8017762:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017764:	e03f      	b.n	80177e6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	6a1b      	ldr	r3, [r3, #32]
 801776a:	697a      	ldr	r2, [r7, #20]
 801776c:	429a      	cmp	r2, r3
 801776e:	d016      	beq.n	801779e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	699a      	ldr	r2, [r3, #24]
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017778:	429a      	cmp	r2, r3
 801777a:	d210      	bcs.n	801779e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801777c:	693b      	ldr	r3, [r7, #16]
 801777e:	7858      	ldrb	r0, [r3, #1]
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017786:	2301      	movs	r3, #1
 8017788:	697a      	ldr	r2, [r7, #20]
 801778a:	f7fd fea5 	bl	80154d8 <disk_read>
 801778e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8017790:	2b00      	cmp	r3, #0
 8017792:	d004      	beq.n	801779e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2201      	movs	r2, #1
 8017798:	755a      	strb	r2, [r3, #21]
 801779a:	2301      	movs	r3, #1
 801779c:	e04e      	b.n	801783c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	697a      	ldr	r2, [r7, #20]
 80177a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	699b      	ldr	r3, [r3, #24]
 80177a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80177b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80177b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d901      	bls.n	80177be <f_write+0x264>
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	699b      	ldr	r3, [r3, #24]
 80177c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177cc:	4413      	add	r3, r2
 80177ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177d0:	69f9      	ldr	r1, [r7, #28]
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fd ff60 	bl	8015698 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	7d1b      	ldrb	r3, [r3, #20]
 80177dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80177e0:	b2da      	uxtb	r2, r3
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80177e6:	69fa      	ldr	r2, [r7, #28]
 80177e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ea:	4413      	add	r3, r2
 80177ec:	61fb      	str	r3, [r7, #28]
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	699a      	ldr	r2, [r3, #24]
 80177f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f4:	441a      	add	r2, r3
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	619a      	str	r2, [r3, #24]
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	68da      	ldr	r2, [r3, #12]
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	699b      	ldr	r3, [r3, #24]
 8017802:	429a      	cmp	r2, r3
 8017804:	bf38      	it	cc
 8017806:	461a      	movcc	r2, r3
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	60da      	str	r2, [r3, #12]
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	681a      	ldr	r2, [r3, #0]
 8017810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017812:	441a      	add	r2, r3
 8017814:	683b      	ldr	r3, [r7, #0]
 8017816:	601a      	str	r2, [r3, #0]
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801781c:	1ad3      	subs	r3, r2, r3
 801781e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	f47f aed4 	bne.w	80175d0 <f_write+0x76>
 8017828:	e000      	b.n	801782c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801782a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	7d1b      	ldrb	r3, [r3, #20]
 8017830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017834:	b2da      	uxtb	r2, r3
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801783a:	2300      	movs	r3, #0
}
 801783c:	4618      	mov	r0, r3
 801783e:	3730      	adds	r7, #48	; 0x30
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	f107 0208 	add.w	r2, r7, #8
 8017852:	4611      	mov	r1, r2
 8017854:	4618      	mov	r0, r3
 8017856:	f7ff fb07 	bl	8016e68 <validate>
 801785a:	4603      	mov	r3, r0
 801785c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801785e:	7dfb      	ldrb	r3, [r7, #23]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d168      	bne.n	8017936 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	7d1b      	ldrb	r3, [r3, #20]
 8017868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801786c:	2b00      	cmp	r3, #0
 801786e:	d062      	beq.n	8017936 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	7d1b      	ldrb	r3, [r3, #20]
 8017874:	b25b      	sxtb	r3, r3
 8017876:	2b00      	cmp	r3, #0
 8017878:	da15      	bge.n	80178a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	7858      	ldrb	r0, [r3, #1]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6a1a      	ldr	r2, [r3, #32]
 8017888:	2301      	movs	r3, #1
 801788a:	f7fd fe45 	bl	8015518 <disk_write>
 801788e:	4603      	mov	r3, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	d001      	beq.n	8017898 <f_sync+0x54>
 8017894:	2301      	movs	r3, #1
 8017896:	e04f      	b.n	8017938 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	7d1b      	ldrb	r3, [r3, #20]
 801789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80178a0:	b2da      	uxtb	r2, r3
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80178a6:	f7fb ffb3 	bl	8013810 <get_fattime>
 80178aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80178ac:	68ba      	ldr	r2, [r7, #8]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b2:	4619      	mov	r1, r3
 80178b4:	4610      	mov	r0, r2
 80178b6:	f7fe f91d 	bl	8015af4 <move_window>
 80178ba:	4603      	mov	r3, r0
 80178bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80178be:	7dfb      	ldrb	r3, [r7, #23]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d138      	bne.n	8017936 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	330b      	adds	r3, #11
 80178ce:	781a      	ldrb	r2, [r3, #0]
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	330b      	adds	r3, #11
 80178d4:	f042 0220 	orr.w	r2, r2, #32
 80178d8:	b2d2      	uxtb	r2, r2
 80178da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6818      	ldr	r0, [r3, #0]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	689b      	ldr	r3, [r3, #8]
 80178e4:	461a      	mov	r2, r3
 80178e6:	68f9      	ldr	r1, [r7, #12]
 80178e8:	f7fe fe2a 	bl	8016540 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	f103 021c 	add.w	r2, r3, #28
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	68db      	ldr	r3, [r3, #12]
 80178f6:	4619      	mov	r1, r3
 80178f8:	4610      	mov	r0, r2
 80178fa:	f7fd fea1 	bl	8015640 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	3316      	adds	r3, #22
 8017902:	6939      	ldr	r1, [r7, #16]
 8017904:	4618      	mov	r0, r3
 8017906:	f7fd fe9b 	bl	8015640 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	3312      	adds	r3, #18
 801790e:	2100      	movs	r1, #0
 8017910:	4618      	mov	r0, r3
 8017912:	f7fd fe7a 	bl	801560a <st_word>
					fs->wflag = 1;
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	2201      	movs	r2, #1
 801791a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	4618      	mov	r0, r3
 8017920:	f7fe f916 	bl	8015b50 <sync_fs>
 8017924:	4603      	mov	r3, r0
 8017926:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	7d1b      	ldrb	r3, [r3, #20]
 801792c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017930:	b2da      	uxtb	r2, r3
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017936:	7dfb      	ldrb	r3, [r7, #23]
}
 8017938:	4618      	mov	r0, r3
 801793a:	3718      	adds	r7, #24
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b084      	sub	sp, #16
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017948:	6878      	ldr	r0, [r7, #4]
 801794a:	f7ff ff7b 	bl	8017844 <f_sync>
 801794e:	4603      	mov	r3, r0
 8017950:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017952:	7bfb      	ldrb	r3, [r7, #15]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d118      	bne.n	801798a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	f107 0208 	add.w	r2, r7, #8
 801795e:	4611      	mov	r1, r2
 8017960:	4618      	mov	r0, r3
 8017962:	f7ff fa81 	bl	8016e68 <validate>
 8017966:	4603      	mov	r3, r0
 8017968:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801796a:	7bfb      	ldrb	r3, [r7, #15]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d10c      	bne.n	801798a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	691b      	ldr	r3, [r3, #16]
 8017974:	4618      	mov	r0, r3
 8017976:	f7fe f819 	bl	80159ac <dec_lock>
 801797a:	4603      	mov	r3, r0
 801797c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801797e:	7bfb      	ldrb	r3, [r7, #15]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d102      	bne.n	801798a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	2200      	movs	r2, #0
 8017988:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801798a:	7bfb      	ldrb	r3, [r7, #15]
}
 801798c:	4618      	mov	r0, r3
 801798e:	3710      	adds	r7, #16
 8017990:	46bd      	mov	sp, r7
 8017992:	bd80      	pop	{r7, pc}

08017994 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8017994:	b590      	push	{r4, r7, lr}
 8017996:	b09d      	sub	sp, #116	; 0x74
 8017998:	af00      	add	r7, sp, #0
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	607a      	str	r2, [r7, #4]
 801799e:	603b      	str	r3, [r7, #0]
 80179a0:	460b      	mov	r3, r1
 80179a2:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 80179a4:	2301      	movs	r3, #1
 80179a6:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80179a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80179ac:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80179ae:	f107 030c 	add.w	r3, r7, #12
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7fe ff71 	bl	801689a <get_ldnumber>
 80179b8:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80179ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179bc:	2b00      	cmp	r3, #0
 80179be:	da02      	bge.n	80179c6 <f_mkfs+0x32>
 80179c0:	230b      	movs	r3, #11
 80179c2:	f000 bc0d 	b.w	80181e0 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80179c6:	4a94      	ldr	r2, [pc, #592]	; (8017c18 <f_mkfs+0x284>)
 80179c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d005      	beq.n	80179de <f_mkfs+0x4a>
 80179d2:	4a91      	ldr	r2, [pc, #580]	; (8017c18 <f_mkfs+0x284>)
 80179d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179da:	2200      	movs	r2, #0
 80179dc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80179de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179e0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80179e4:	2300      	movs	r3, #0
 80179e6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80179ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80179ee:	4618      	mov	r0, r3
 80179f0:	f7fd fd4c 	bl	801548c <disk_initialize>
 80179f4:	4603      	mov	r3, r0
 80179f6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80179fa:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80179fe:	f003 0301 	and.w	r3, r3, #1
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d001      	beq.n	8017a0a <f_mkfs+0x76>
 8017a06:	2303      	movs	r3, #3
 8017a08:	e3ea      	b.n	80181e0 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8017a0a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8017a0e:	f003 0304 	and.w	r3, r3, #4
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d001      	beq.n	8017a1a <f_mkfs+0x86>
 8017a16:	230a      	movs	r3, #10
 8017a18:	e3e2      	b.n	80181e0 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8017a1a:	f107 0214 	add.w	r2, r7, #20
 8017a1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017a22:	2103      	movs	r1, #3
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7fd fd97 	bl	8015558 <disk_ioctl>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d10c      	bne.n	8017a4a <f_mkfs+0xb6>
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d009      	beq.n	8017a4a <f_mkfs+0xb6>
 8017a36:	697b      	ldr	r3, [r7, #20]
 8017a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017a3c:	d805      	bhi.n	8017a4a <f_mkfs+0xb6>
 8017a3e:	697b      	ldr	r3, [r7, #20]
 8017a40:	1e5a      	subs	r2, r3, #1
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	4013      	ands	r3, r2
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d001      	beq.n	8017a4e <f_mkfs+0xba>
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 8017a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a52:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d003      	beq.n	8017a62 <f_mkfs+0xce>
 8017a5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	429a      	cmp	r2, r3
 8017a60:	d309      	bcc.n	8017a76 <f_mkfs+0xe2>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017a68:	d805      	bhi.n	8017a76 <f_mkfs+0xe2>
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	1e5a      	subs	r2, r3, #1
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	4013      	ands	r3, r2
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d001      	beq.n	8017a7a <f_mkfs+0xe6>
 8017a76:	2313      	movs	r3, #19
 8017a78:	e3b2      	b.n	80181e0 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8017a7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a82:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8017a88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8017a94:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a98:	fb02 f303 	mul.w	r3, r2, r3
 8017a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8017a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d101      	bne.n	8017aa8 <f_mkfs+0x114>
 8017aa4:	230e      	movs	r3, #14
 8017aa6:	e39b      	b.n	80181e0 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8017aa8:	f107 0210 	add.w	r2, r7, #16
 8017aac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7fd fd50 	bl	8015558 <disk_ioctl>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d001      	beq.n	8017ac2 <f_mkfs+0x12e>
 8017abe:	2301      	movs	r3, #1
 8017ac0:	e38e      	b.n	80181e0 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8017ac2:	7afb      	ldrb	r3, [r7, #11]
 8017ac4:	f003 0308 	and.w	r3, r3, #8
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d001      	beq.n	8017ad0 <f_mkfs+0x13c>
 8017acc:	2300      	movs	r3, #0
 8017ace:	e000      	b.n	8017ad2 <f_mkfs+0x13e>
 8017ad0:	233f      	movs	r3, #63	; 0x3f
 8017ad2:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8017ad4:	693b      	ldr	r3, [r7, #16]
 8017ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d901      	bls.n	8017ae0 <f_mkfs+0x14c>
 8017adc:	230e      	movs	r3, #14
 8017ade:	e37f      	b.n	80181e0 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8017ae0:	693a      	ldr	r2, [r7, #16]
 8017ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	2b7f      	cmp	r3, #127	; 0x7f
 8017aec:	d801      	bhi.n	8017af2 <f_mkfs+0x15e>
 8017aee:	230e      	movs	r3, #14
 8017af0:	e376      	b.n	80181e0 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2b80      	cmp	r3, #128	; 0x80
 8017af6:	d901      	bls.n	8017afc <f_mkfs+0x168>
 8017af8:	2313      	movs	r3, #19
 8017afa:	e371      	b.n	80181e0 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8017afc:	7afb      	ldrb	r3, [r7, #11]
 8017afe:	f003 0302 	and.w	r3, r3, #2
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d00d      	beq.n	8017b22 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8017b06:	7afb      	ldrb	r3, [r7, #11]
 8017b08:	f003 0307 	and.w	r3, r3, #7
 8017b0c:	2b02      	cmp	r3, #2
 8017b0e:	d004      	beq.n	8017b1a <f_mkfs+0x186>
 8017b10:	7afb      	ldrb	r3, [r7, #11]
 8017b12:	f003 0301 	and.w	r3, r3, #1
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d103      	bne.n	8017b22 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 8017b1a:	2303      	movs	r3, #3
 8017b1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017b20:	e009      	b.n	8017b36 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8017b22:	7afb      	ldrb	r3, [r7, #11]
 8017b24:	f003 0301 	and.w	r3, r3, #1
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d101      	bne.n	8017b30 <f_mkfs+0x19c>
 8017b2c:	2313      	movs	r3, #19
 8017b2e:	e357      	b.n	80181e0 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 8017b30:	2302      	movs	r3, #2
 8017b32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8017b3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017b3e:	2b03      	cmp	r3, #3
 8017b40:	d13c      	bne.n	8017bbc <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 8017b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d11b      	bne.n	8017b80 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	0c5b      	lsrs	r3, r3, #17
 8017b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017b4e:	2300      	movs	r3, #0
 8017b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b52:	2301      	movs	r3, #1
 8017b54:	653b      	str	r3, [r7, #80]	; 0x50
 8017b56:	e005      	b.n	8017b64 <f_mkfs+0x1d0>
 8017b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b5a:	3301      	adds	r3, #1
 8017b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b60:	005b      	lsls	r3, r3, #1
 8017b62:	653b      	str	r3, [r7, #80]	; 0x50
 8017b64:	4a2d      	ldr	r2, [pc, #180]	; (8017c1c <f_mkfs+0x288>)
 8017b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d007      	beq.n	8017b80 <f_mkfs+0x1ec>
 8017b70:	4a2a      	ldr	r2, [pc, #168]	; (8017c1c <f_mkfs+0x288>)
 8017b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017b78:	461a      	mov	r2, r3
 8017b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d2eb      	bcs.n	8017b58 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8017b80:	693a      	ldr	r2, [r7, #16]
 8017b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8017b88:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8017b8a:	6a3b      	ldr	r3, [r7, #32]
 8017b8c:	3302      	adds	r3, #2
 8017b8e:	009a      	lsls	r2, r3, #2
 8017b90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017b92:	4413      	add	r3, r2
 8017b94:	1e5a      	subs	r2, r3, #1
 8017b96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8017b9c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8017b9e:	2320      	movs	r3, #32
 8017ba0:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8017ba6:	6a3b      	ldr	r3, [r7, #32]
 8017ba8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d903      	bls.n	8017bb8 <f_mkfs+0x224>
 8017bb0:	6a3b      	ldr	r3, [r7, #32]
 8017bb2:	4a1b      	ldr	r2, [pc, #108]	; (8017c20 <f_mkfs+0x28c>)
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	d952      	bls.n	8017c5e <f_mkfs+0x2ca>
 8017bb8:	230e      	movs	r3, #14
 8017bba:	e311      	b.n	80181e0 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8017bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d11b      	bne.n	8017bfa <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	0b1b      	lsrs	r3, r3, #12
 8017bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8017bc8:	2300      	movs	r3, #0
 8017bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bcc:	2301      	movs	r3, #1
 8017bce:	653b      	str	r3, [r7, #80]	; 0x50
 8017bd0:	e005      	b.n	8017bde <f_mkfs+0x24a>
 8017bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bd4:	3301      	adds	r3, #1
 8017bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8017bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bda:	005b      	lsls	r3, r3, #1
 8017bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8017bde:	4a11      	ldr	r2, [pc, #68]	; (8017c24 <f_mkfs+0x290>)
 8017be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d007      	beq.n	8017bfa <f_mkfs+0x266>
 8017bea:	4a0e      	ldr	r2, [pc, #56]	; (8017c24 <f_mkfs+0x290>)
 8017bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017bf2:	461a      	mov	r2, r3
 8017bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	d2eb      	bcs.n	8017bd2 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8017bfa:	693a      	ldr	r2, [r7, #16]
 8017bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c02:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 8017c04:	6a3b      	ldr	r3, [r7, #32]
 8017c06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c0a:	4293      	cmp	r3, r2
 8017c0c:	d90c      	bls.n	8017c28 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8017c0e:	6a3b      	ldr	r3, [r7, #32]
 8017c10:	3302      	adds	r3, #2
 8017c12:	005b      	lsls	r3, r3, #1
 8017c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017c16:	e012      	b.n	8017c3e <f_mkfs+0x2aa>
 8017c18:	200013fc 	.word	0x200013fc
 8017c1c:	0801c284 	.word	0x0801c284
 8017c20:	0ffffff5 	.word	0x0ffffff5
 8017c24:	0801c294 	.word	0x0801c294
				} else {
					fmt = FS_FAT12;
 8017c28:	2301      	movs	r3, #1
 8017c2a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8017c2e:	6a3a      	ldr	r2, [r7, #32]
 8017c30:	4613      	mov	r3, r2
 8017c32:	005b      	lsls	r3, r3, #1
 8017c34:	4413      	add	r3, r2
 8017c36:	3301      	adds	r3, #1
 8017c38:	085b      	lsrs	r3, r3, #1
 8017c3a:	3303      	adds	r3, #3
 8017c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8017c3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017c42:	4413      	add	r3, r2
 8017c44:	1e5a      	subs	r2, r3, #1
 8017c46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c4c:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8017c4e:	2301      	movs	r3, #1
 8017c50:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8017c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c54:	015a      	lsls	r2, r3, #5
 8017c56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8017c5c:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8017c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c62:	4413      	add	r3, r2
 8017c64:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8017c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c6a:	fb03 f202 	mul.w	r2, r3, r2
 8017c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017c70:	4413      	add	r3, r2
 8017c72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017c74:	4413      	add	r3, r2
 8017c76:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8017c78:	697a      	ldr	r2, [r7, #20]
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	4413      	add	r3, r2
 8017c7e:	1e5a      	subs	r2, r3, #1
 8017c80:	697b      	ldr	r3, [r7, #20]
 8017c82:	425b      	negs	r3, r3
 8017c84:	401a      	ands	r2, r3
 8017c86:	69fb      	ldr	r3, [r7, #28]
 8017c88:	1ad3      	subs	r3, r2, r3
 8017c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8017c8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017c90:	2b03      	cmp	r3, #3
 8017c92:	d108      	bne.n	8017ca6 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8017c94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017c98:	4413      	add	r3, r2
 8017c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8017c9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017ca0:	4413      	add	r3, r2
 8017ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8017ca4:	e006      	b.n	8017cb4 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8017ca6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8017cae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017cb0:	4413      	add	r3, r2
 8017cb2:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8017cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cb6:	011a      	lsls	r2, r3, #4
 8017cb8:	69fb      	ldr	r3, [r7, #28]
 8017cba:	441a      	add	r2, r3
 8017cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbe:	1ad2      	subs	r2, r2, r3
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d901      	bls.n	8017cca <f_mkfs+0x336>
 8017cc6:	230e      	movs	r3, #14
 8017cc8:	e28a      	b.n	80181e0 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8017cca:	693a      	ldr	r2, [r7, #16]
 8017ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017cce:	1ad2      	subs	r2, r2, r3
 8017cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017cd4:	fb01 f303 	mul.w	r3, r1, r3
 8017cd8:	1ad2      	subs	r2, r2, r3
 8017cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cdc:	1ad2      	subs	r2, r2, r3
 8017cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8017ce4:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8017ce6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017cea:	2b03      	cmp	r3, #3
 8017cec:	d10f      	bne.n	8017d0e <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8017cee:	6a3b      	ldr	r3, [r7, #32]
 8017cf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	d80a      	bhi.n	8017d0e <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d105      	bne.n	8017d0a <f_mkfs+0x376>
 8017cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d00:	085b      	lsrs	r3, r3, #1
 8017d02:	607b      	str	r3, [r7, #4]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d144      	bne.n	8017d94 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8017d0a:	230e      	movs	r3, #14
 8017d0c:	e268      	b.n	80181e0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8017d0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017d12:	2b02      	cmp	r3, #2
 8017d14:	d133      	bne.n	8017d7e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8017d16:	6a3b      	ldr	r3, [r7, #32]
 8017d18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	d91e      	bls.n	8017d5e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d107      	bne.n	8017d36 <f_mkfs+0x3a2>
 8017d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	2b40      	cmp	r3, #64	; 0x40
 8017d2c:	d803      	bhi.n	8017d36 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8017d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d30:	005b      	lsls	r3, r3, #1
 8017d32:	607b      	str	r3, [r7, #4]
 8017d34:	e033      	b.n	8017d9e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8017d36:	7afb      	ldrb	r3, [r7, #11]
 8017d38:	f003 0302 	and.w	r3, r3, #2
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d003      	beq.n	8017d48 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8017d40:	2303      	movs	r3, #3
 8017d42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8017d46:	e02a      	b.n	8017d9e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d105      	bne.n	8017d5a <f_mkfs+0x3c6>
 8017d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	607b      	str	r3, [r7, #4]
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2b80      	cmp	r3, #128	; 0x80
 8017d58:	d91e      	bls.n	8017d98 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8017d5a:	230e      	movs	r3, #14
 8017d5c:	e240      	b.n	80181e0 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8017d5e:	6a3b      	ldr	r3, [r7, #32]
 8017d60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d80a      	bhi.n	8017d7e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d105      	bne.n	8017d7a <f_mkfs+0x3e6>
 8017d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d70:	005b      	lsls	r3, r3, #1
 8017d72:	607b      	str	r3, [r7, #4]
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	2b80      	cmp	r3, #128	; 0x80
 8017d78:	d910      	bls.n	8017d9c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8017d7a:	230e      	movs	r3, #14
 8017d7c:	e230      	b.n	80181e0 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8017d7e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	d10c      	bne.n	8017da0 <f_mkfs+0x40c>
 8017d86:	6a3b      	ldr	r3, [r7, #32]
 8017d88:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d907      	bls.n	8017da0 <f_mkfs+0x40c>
 8017d90:	230e      	movs	r3, #14
 8017d92:	e225      	b.n	80181e0 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8017d94:	bf00      	nop
 8017d96:	e6ce      	b.n	8017b36 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017d98:	bf00      	nop
 8017d9a:	e6cc      	b.n	8017b36 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8017d9c:	bf00      	nop
			pau = au;
 8017d9e:	e6ca      	b.n	8017b36 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8017da0:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8017da2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017da4:	461a      	mov	r2, r3
 8017da6:	2100      	movs	r1, #0
 8017da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017daa:	f7fd fc96 	bl	80156da <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8017dae:	220b      	movs	r2, #11
 8017db0:	49b2      	ldr	r1, [pc, #712]	; (801807c <f_mkfs+0x6e8>)
 8017db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017db4:	f7fd fc70 	bl	8015698 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8017db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dba:	330b      	adds	r3, #11
 8017dbc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017dbe:	4611      	mov	r1, r2
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7fd fc22 	bl	801560a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8017dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc8:	330d      	adds	r3, #13
 8017dca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017dcc:	b2d2      	uxtb	r2, r2
 8017dce:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8017dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dd2:	330e      	adds	r3, #14
 8017dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017dd6:	b292      	uxth	r2, r2
 8017dd8:	4611      	mov	r1, r2
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7fd fc15 	bl	801560a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8017de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de2:	3310      	adds	r3, #16
 8017de4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017de6:	b2d2      	uxtb	r2, r2
 8017de8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8017dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dec:	f103 0211 	add.w	r2, r3, #17
 8017df0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017df4:	2b03      	cmp	r3, #3
 8017df6:	d002      	beq.n	8017dfe <f_mkfs+0x46a>
 8017df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	e000      	b.n	8017e00 <f_mkfs+0x46c>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	4619      	mov	r1, r3
 8017e02:	4610      	mov	r0, r2
 8017e04:	f7fd fc01 	bl	801560a <st_word>
		if (sz_vol < 0x10000) {
 8017e08:	693b      	ldr	r3, [r7, #16]
 8017e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017e0e:	d208      	bcs.n	8017e22 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8017e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e12:	3313      	adds	r3, #19
 8017e14:	693a      	ldr	r2, [r7, #16]
 8017e16:	b292      	uxth	r2, r2
 8017e18:	4611      	mov	r1, r2
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7fd fbf5 	bl	801560a <st_word>
 8017e20:	e006      	b.n	8017e30 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8017e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e24:	3320      	adds	r3, #32
 8017e26:	693a      	ldr	r2, [r7, #16]
 8017e28:	4611      	mov	r1, r2
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7fd fc08 	bl	8015640 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8017e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e32:	3315      	adds	r3, #21
 8017e34:	22f8      	movs	r2, #248	; 0xf8
 8017e36:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8017e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3a:	3318      	adds	r3, #24
 8017e3c:	213f      	movs	r1, #63	; 0x3f
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fd fbe3 	bl	801560a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8017e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e46:	331a      	adds	r3, #26
 8017e48:	21ff      	movs	r1, #255	; 0xff
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7fd fbdd 	bl	801560a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8017e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e52:	331c      	adds	r3, #28
 8017e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7fd fbf2 	bl	8015640 <st_dword>
		if (fmt == FS_FAT32) {
 8017e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017e60:	2b03      	cmp	r3, #3
 8017e62:	d131      	bne.n	8017ec8 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8017e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e66:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8017e6a:	f7fb fcd1 	bl	8013810 <get_fattime>
 8017e6e:	4603      	mov	r3, r0
 8017e70:	4619      	mov	r1, r3
 8017e72:	4620      	mov	r0, r4
 8017e74:	f7fd fbe4 	bl	8015640 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8017e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7a:	3324      	adds	r3, #36	; 0x24
 8017e7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017e7e:	4618      	mov	r0, r3
 8017e80:	f7fd fbde 	bl	8015640 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8017e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e86:	332c      	adds	r3, #44	; 0x2c
 8017e88:	2102      	movs	r1, #2
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	f7fd fbd8 	bl	8015640 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8017e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e92:	3330      	adds	r3, #48	; 0x30
 8017e94:	2101      	movs	r1, #1
 8017e96:	4618      	mov	r0, r3
 8017e98:	f7fd fbb7 	bl	801560a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8017e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9e:	3332      	adds	r3, #50	; 0x32
 8017ea0:	2106      	movs	r1, #6
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7fd fbb1 	bl	801560a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eaa:	3340      	adds	r3, #64	; 0x40
 8017eac:	2280      	movs	r2, #128	; 0x80
 8017eae:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8017eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb2:	3342      	adds	r3, #66	; 0x42
 8017eb4:	2229      	movs	r2, #41	; 0x29
 8017eb6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8017eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eba:	3347      	adds	r3, #71	; 0x47
 8017ebc:	2213      	movs	r2, #19
 8017ebe:	4970      	ldr	r1, [pc, #448]	; (8018080 <f_mkfs+0x6ec>)
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fd fbe9 	bl	8015698 <mem_cpy>
 8017ec6:	e020      	b.n	8017f0a <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8017ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eca:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8017ece:	f7fb fc9f 	bl	8013810 <get_fattime>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	4619      	mov	r1, r3
 8017ed6:	4620      	mov	r0, r4
 8017ed8:	f7fd fbb2 	bl	8015640 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8017edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ede:	3316      	adds	r3, #22
 8017ee0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017ee2:	b292      	uxth	r2, r2
 8017ee4:	4611      	mov	r1, r2
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7fd fb8f 	bl	801560a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8017eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eee:	3324      	adds	r3, #36	; 0x24
 8017ef0:	2280      	movs	r2, #128	; 0x80
 8017ef2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8017ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef6:	3326      	adds	r3, #38	; 0x26
 8017ef8:	2229      	movs	r2, #41	; 0x29
 8017efa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8017efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efe:	332b      	adds	r3, #43	; 0x2b
 8017f00:	2213      	movs	r2, #19
 8017f02:	4960      	ldr	r1, [pc, #384]	; (8018084 <f_mkfs+0x6f0>)
 8017f04:	4618      	mov	r0, r3
 8017f06:	f7fd fbc7 	bl	8015698 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8017f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017f10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017f14:	4618      	mov	r0, r3
 8017f16:	f7fd fb78 	bl	801560a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8017f1a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8017f1e:	2301      	movs	r3, #1
 8017f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f24:	f7fd faf8 	bl	8015518 <disk_write>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d001      	beq.n	8017f32 <f_mkfs+0x59e>
 8017f2e:	2301      	movs	r3, #1
 8017f30:	e156      	b.n	80181e0 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8017f32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017f36:	2b03      	cmp	r3, #3
 8017f38:	d140      	bne.n	8017fbc <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8017f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f3c:	1d9a      	adds	r2, r3, #6
 8017f3e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8017f42:	2301      	movs	r3, #1
 8017f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f46:	f7fd fae7 	bl	8015518 <disk_write>
			mem_set(buf, 0, ss);
 8017f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	2100      	movs	r1, #0
 8017f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f52:	f7fd fbc2 	bl	80156da <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8017f56:	494c      	ldr	r1, [pc, #304]	; (8018088 <f_mkfs+0x6f4>)
 8017f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f5a:	f7fd fb71 	bl	8015640 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f60:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017f64:	4949      	ldr	r1, [pc, #292]	; (801808c <f_mkfs+0x6f8>)
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7fd fb6a 	bl	8015640 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8017f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017f72:	6a3b      	ldr	r3, [r7, #32]
 8017f74:	3b01      	subs	r3, #1
 8017f76:	4619      	mov	r1, r3
 8017f78:	4610      	mov	r0, r2
 8017f7a:	f7fd fb61 	bl	8015640 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8017f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f80:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017f84:	2102      	movs	r1, #2
 8017f86:	4618      	mov	r0, r3
 8017f88:	f7fd fb5a 	bl	8015640 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8017f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017f92:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7fd fb37 	bl	801560a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8017f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f9e:	1dda      	adds	r2, r3, #7
 8017fa0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017fa8:	f7fd fab6 	bl	8015518 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8017fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fae:	1c5a      	adds	r2, r3, #1
 8017fb0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8017fb4:	2301      	movs	r3, #1
 8017fb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017fb8:	f7fd faae 	bl	8015518 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8017fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fbe:	2100      	movs	r1, #0
 8017fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fc2:	f7fd fb8a 	bl	80156da <mem_set>
		sect = b_fat;		/* FAT start sector */
 8017fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017fc8:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8017fca:	2300      	movs	r3, #0
 8017fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8017fce:	e04b      	b.n	8018068 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8017fd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017fd4:	2b03      	cmp	r3, #3
 8017fd6:	d113      	bne.n	8018000 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8017fd8:	f06f 0107 	mvn.w	r1, #7
 8017fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017fde:	f7fd fb2f 	bl	8015640 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8017fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe4:	3304      	adds	r3, #4
 8017fe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017fea:	4618      	mov	r0, r3
 8017fec:	f7fd fb28 	bl	8015640 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8017ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff2:	3308      	adds	r3, #8
 8017ff4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7fd fb21 	bl	8015640 <st_dword>
 8017ffe:	e00b      	b.n	8018018 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8018000:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018004:	2b01      	cmp	r3, #1
 8018006:	d101      	bne.n	801800c <f_mkfs+0x678>
 8018008:	4b21      	ldr	r3, [pc, #132]	; (8018090 <f_mkfs+0x6fc>)
 801800a:	e001      	b.n	8018010 <f_mkfs+0x67c>
 801800c:	f06f 0307 	mvn.w	r3, #7
 8018010:	4619      	mov	r1, r3
 8018012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018014:	f7fd fb14 	bl	8015640 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8018018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801801a:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 801801c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018020:	4293      	cmp	r3, r2
 8018022:	bf28      	it	cs
 8018024:	4613      	movcs	r3, r2
 8018026:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8018028:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801802c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801802e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8018030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018032:	f7fd fa71 	bl	8015518 <disk_write>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	d001      	beq.n	8018040 <f_mkfs+0x6ac>
 801803c:	2301      	movs	r3, #1
 801803e:	e0cf      	b.n	80181e0 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8018040:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018042:	461a      	mov	r2, r3
 8018044:	2100      	movs	r1, #0
 8018046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018048:	f7fd fb47 	bl	80156da <mem_set>
				sect += n; nsect -= n;
 801804c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801804e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018050:	4413      	add	r3, r2
 8018052:	667b      	str	r3, [r7, #100]	; 0x64
 8018054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8018056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018058:	1ad3      	subs	r3, r2, r3
 801805a:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 801805c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801805e:	2b00      	cmp	r3, #0
 8018060:	d1dc      	bne.n	801801c <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8018062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018064:	3301      	adds	r3, #1
 8018066:	64bb      	str	r3, [r7, #72]	; 0x48
 8018068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801806a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801806c:	429a      	cmp	r2, r3
 801806e:	d3af      	bcc.n	8017fd0 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8018070:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018074:	2b03      	cmp	r3, #3
 8018076:	d10d      	bne.n	8018094 <f_mkfs+0x700>
 8018078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801807a:	e00c      	b.n	8018096 <f_mkfs+0x702>
 801807c:	0801c104 	.word	0x0801c104
 8018080:	0801c110 	.word	0x0801c110
 8018084:	0801c124 	.word	0x0801c124
 8018088:	41615252 	.word	0x41615252
 801808c:	61417272 	.word	0x61417272
 8018090:	00fffff8 	.word	0x00fffff8
 8018094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018096:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8018098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801809a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801809c:	4293      	cmp	r3, r2
 801809e:	bf28      	it	cs
 80180a0:	4613      	movcs	r3, r2
 80180a2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80180a4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80180a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80180aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80180ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80180ae:	f7fd fa33 	bl	8015518 <disk_write>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d001      	beq.n	80180bc <f_mkfs+0x728>
 80180b8:	2301      	movs	r3, #1
 80180ba:	e091      	b.n	80181e0 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 80180bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80180be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80180c0:	4413      	add	r3, r2
 80180c2:	667b      	str	r3, [r7, #100]	; 0x64
 80180c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80180c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80180c8:	1ad3      	subs	r3, r2, r3
 80180ca:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80180cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d1e2      	bne.n	8018098 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80180d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80180d6:	2b03      	cmp	r3, #3
 80180d8:	d103      	bne.n	80180e2 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80180da:	230c      	movs	r3, #12
 80180dc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80180e0:	e010      	b.n	8018104 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180e8:	d303      	bcc.n	80180f2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80180ea:	2306      	movs	r3, #6
 80180ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80180f0:	e008      	b.n	8018104 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80180f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80180f6:	2b02      	cmp	r3, #2
 80180f8:	d101      	bne.n	80180fe <f_mkfs+0x76a>
 80180fa:	2304      	movs	r3, #4
 80180fc:	e000      	b.n	8018100 <f_mkfs+0x76c>
 80180fe:	2301      	movs	r3, #1
 8018100:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8018104:	7afb      	ldrb	r3, [r7, #11]
 8018106:	f003 0308 	and.w	r3, r3, #8
 801810a:	2b00      	cmp	r3, #0
 801810c:	d15b      	bne.n	80181c6 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 801810e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018110:	461a      	mov	r2, r3
 8018112:	2100      	movs	r1, #0
 8018114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018116:	f7fd fae0 	bl	80156da <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 801811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801811c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018120:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8018124:	4618      	mov	r0, r3
 8018126:	f7fd fa70 	bl	801560a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 801812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801812c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8018130:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	2200      	movs	r2, #0
 8018136:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8018138:	69bb      	ldr	r3, [r7, #24]
 801813a:	3301      	adds	r3, #1
 801813c:	2201      	movs	r2, #1
 801813e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8018140:	69bb      	ldr	r3, [r7, #24]
 8018142:	3302      	adds	r3, #2
 8018144:	2201      	movs	r2, #1
 8018146:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8018148:	69bb      	ldr	r3, [r7, #24]
 801814a:	3303      	adds	r3, #3
 801814c:	2200      	movs	r2, #0
 801814e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8018150:	69bb      	ldr	r3, [r7, #24]
 8018152:	3304      	adds	r3, #4
 8018154:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8018158:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 801815a:	693a      	ldr	r2, [r7, #16]
 801815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815e:	441a      	add	r2, r3
 8018160:	4b21      	ldr	r3, [pc, #132]	; (80181e8 <f_mkfs+0x854>)
 8018162:	fba3 1302 	umull	r1, r3, r3, r2
 8018166:	1ad2      	subs	r2, r2, r3
 8018168:	0852      	lsrs	r2, r2, #1
 801816a:	4413      	add	r3, r2
 801816c:	0b5b      	lsrs	r3, r3, #13
 801816e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8018170:	69bb      	ldr	r3, [r7, #24]
 8018172:	3305      	adds	r3, #5
 8018174:	22fe      	movs	r2, #254	; 0xfe
 8018176:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8018178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801817a:	089b      	lsrs	r3, r3, #2
 801817c:	b2da      	uxtb	r2, r3
 801817e:	69bb      	ldr	r3, [r7, #24]
 8018180:	3306      	adds	r3, #6
 8018182:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8018186:	b2d2      	uxtb	r2, r2
 8018188:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	3307      	adds	r3, #7
 801818e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8018190:	b2d2      	uxtb	r2, r2
 8018192:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8018194:	69bb      	ldr	r3, [r7, #24]
 8018196:	3308      	adds	r3, #8
 8018198:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801819a:	4618      	mov	r0, r3
 801819c:	f7fd fa50 	bl	8015640 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80181a0:	69bb      	ldr	r3, [r7, #24]
 80181a2:	330c      	adds	r3, #12
 80181a4:	693a      	ldr	r2, [r7, #16]
 80181a6:	4611      	mov	r1, r2
 80181a8:	4618      	mov	r0, r3
 80181aa:	f7fd fa49 	bl	8015640 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80181ae:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80181b2:	2301      	movs	r3, #1
 80181b4:	2200      	movs	r2, #0
 80181b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80181b8:	f7fd f9ae 	bl	8015518 <disk_write>
 80181bc:	4603      	mov	r3, r0
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d001      	beq.n	80181c6 <f_mkfs+0x832>
 80181c2:	2301      	movs	r3, #1
 80181c4:	e00c      	b.n	80181e0 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80181c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80181ca:	2200      	movs	r2, #0
 80181cc:	2100      	movs	r1, #0
 80181ce:	4618      	mov	r0, r3
 80181d0:	f7fd f9c2 	bl	8015558 <disk_ioctl>
 80181d4:	4603      	mov	r3, r0
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <f_mkfs+0x84a>
 80181da:	2301      	movs	r3, #1
 80181dc:	e000      	b.n	80181e0 <f_mkfs+0x84c>

	return FR_OK;
 80181de:	2300      	movs	r3, #0
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3774      	adds	r7, #116	; 0x74
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd90      	pop	{r4, r7, pc}
 80181e8:	0515565b 	.word	0x0515565b

080181ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80181ec:	b480      	push	{r7}
 80181ee:	b087      	sub	sp, #28
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	60f8      	str	r0, [r7, #12]
 80181f4:	60b9      	str	r1, [r7, #8]
 80181f6:	4613      	mov	r3, r2
 80181f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80181fa:	2301      	movs	r3, #1
 80181fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80181fe:	2300      	movs	r3, #0
 8018200:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018202:	4b1f      	ldr	r3, [pc, #124]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 8018204:	7a5b      	ldrb	r3, [r3, #9]
 8018206:	b2db      	uxtb	r3, r3
 8018208:	2b00      	cmp	r3, #0
 801820a:	d131      	bne.n	8018270 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801820c:	4b1c      	ldr	r3, [pc, #112]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 801820e:	7a5b      	ldrb	r3, [r3, #9]
 8018210:	b2db      	uxtb	r3, r3
 8018212:	461a      	mov	r2, r3
 8018214:	4b1a      	ldr	r3, [pc, #104]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 8018216:	2100      	movs	r1, #0
 8018218:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801821a:	4b19      	ldr	r3, [pc, #100]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 801821c:	7a5b      	ldrb	r3, [r3, #9]
 801821e:	b2db      	uxtb	r3, r3
 8018220:	4a17      	ldr	r2, [pc, #92]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	4413      	add	r3, r2
 8018226:	68fa      	ldr	r2, [r7, #12]
 8018228:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801822a:	4b15      	ldr	r3, [pc, #84]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 801822c:	7a5b      	ldrb	r3, [r3, #9]
 801822e:	b2db      	uxtb	r3, r3
 8018230:	461a      	mov	r2, r3
 8018232:	4b13      	ldr	r3, [pc, #76]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 8018234:	4413      	add	r3, r2
 8018236:	79fa      	ldrb	r2, [r7, #7]
 8018238:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801823a:	4b11      	ldr	r3, [pc, #68]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 801823c:	7a5b      	ldrb	r3, [r3, #9]
 801823e:	b2db      	uxtb	r3, r3
 8018240:	1c5a      	adds	r2, r3, #1
 8018242:	b2d1      	uxtb	r1, r2
 8018244:	4a0e      	ldr	r2, [pc, #56]	; (8018280 <FATFS_LinkDriverEx+0x94>)
 8018246:	7251      	strb	r1, [r2, #9]
 8018248:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801824a:	7dbb      	ldrb	r3, [r7, #22]
 801824c:	3330      	adds	r3, #48	; 0x30
 801824e:	b2da      	uxtb	r2, r3
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	3301      	adds	r3, #1
 8018258:	223a      	movs	r2, #58	; 0x3a
 801825a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	3302      	adds	r3, #2
 8018260:	222f      	movs	r2, #47	; 0x2f
 8018262:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018264:	68bb      	ldr	r3, [r7, #8]
 8018266:	3303      	adds	r3, #3
 8018268:	2200      	movs	r2, #0
 801826a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801826c:	2300      	movs	r3, #0
 801826e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018270:	7dfb      	ldrb	r3, [r7, #23]
}
 8018272:	4618      	mov	r0, r3
 8018274:	371c      	adds	r7, #28
 8018276:	46bd      	mov	sp, r7
 8018278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827c:	4770      	bx	lr
 801827e:	bf00      	nop
 8018280:	20001424 	.word	0x20001424

08018284 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801828e:	2200      	movs	r2, #0
 8018290:	6839      	ldr	r1, [r7, #0]
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f7ff ffaa 	bl	80181ec <FATFS_LinkDriverEx>
 8018298:	4603      	mov	r3, r0
}
 801829a:	4618      	mov	r0, r3
 801829c:	3708      	adds	r7, #8
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
	...

080182a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80182a8:	2200      	movs	r2, #0
 80182aa:	4912      	ldr	r1, [pc, #72]	; (80182f4 <MX_USB_DEVICE_Init+0x50>)
 80182ac:	4812      	ldr	r0, [pc, #72]	; (80182f8 <MX_USB_DEVICE_Init+0x54>)
 80182ae:	f7fb ff69 	bl	8014184 <USBD_Init>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d001      	beq.n	80182bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80182b8:	f7ec fb08 	bl	80048cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80182bc:	490f      	ldr	r1, [pc, #60]	; (80182fc <MX_USB_DEVICE_Init+0x58>)
 80182be:	480e      	ldr	r0, [pc, #56]	; (80182f8 <MX_USB_DEVICE_Init+0x54>)
 80182c0:	f7fb ff90 	bl	80141e4 <USBD_RegisterClass>
 80182c4:	4603      	mov	r3, r0
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d001      	beq.n	80182ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80182ca:	f7ec faff 	bl	80048cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80182ce:	490c      	ldr	r1, [pc, #48]	; (8018300 <MX_USB_DEVICE_Init+0x5c>)
 80182d0:	4809      	ldr	r0, [pc, #36]	; (80182f8 <MX_USB_DEVICE_Init+0x54>)
 80182d2:	f7fb feb1 	bl	8014038 <USBD_CDC_RegisterInterface>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d001      	beq.n	80182e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80182dc:	f7ec faf6 	bl	80048cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80182e0:	4805      	ldr	r0, [pc, #20]	; (80182f8 <MX_USB_DEVICE_Init+0x54>)
 80182e2:	f7fb ffa6 	bl	8014232 <USBD_Start>
 80182e6:	4603      	mov	r3, r0
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d001      	beq.n	80182f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80182ec:	f7ec faee 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80182f0:	bf00      	nop
 80182f2:	bd80      	pop	{r7, pc}
 80182f4:	20000140 	.word	0x20000140
 80182f8:	20001430 	.word	0x20001430
 80182fc:	20000028 	.word	0x20000028
 8018300:	2000012c 	.word	0x2000012c

08018304 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018308:	2200      	movs	r2, #0
 801830a:	4905      	ldr	r1, [pc, #20]	; (8018320 <CDC_Init_FS+0x1c>)
 801830c:	4805      	ldr	r0, [pc, #20]	; (8018324 <CDC_Init_FS+0x20>)
 801830e:	f7fb fea8 	bl	8014062 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018312:	4905      	ldr	r1, [pc, #20]	; (8018328 <CDC_Init_FS+0x24>)
 8018314:	4803      	ldr	r0, [pc, #12]	; (8018324 <CDC_Init_FS+0x20>)
 8018316:	f7fb fec2 	bl	801409e <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 801831a:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 801831c:	4618      	mov	r0, r3
 801831e:	bd80      	pop	{r7, pc}
 8018320:	20001f04 	.word	0x20001f04
 8018324:	20001430 	.word	0x20001430
 8018328:	20001704 	.word	0x20001704

0801832c <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 801832c:	b480      	push	{r7}
 801832e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8018330:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8018332:	4618      	mov	r0, r3
 8018334:	46bd      	mov	sp, r7
 8018336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801833a:	4770      	bx	lr

0801833c <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801833c:	b480      	push	{r7}
 801833e:	b083      	sub	sp, #12
 8018340:	af00      	add	r7, sp, #0
 8018342:	4603      	mov	r3, r0
 8018344:	6039      	str	r1, [r7, #0]
 8018346:	71fb      	strb	r3, [r7, #7]
 8018348:	4613      	mov	r3, r2
 801834a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 801834c:	79fb      	ldrb	r3, [r7, #7]
 801834e:	2b23      	cmp	r3, #35	; 0x23
 8018350:	d84a      	bhi.n	80183e8 <CDC_Control_FS+0xac>
 8018352:	a201      	add	r2, pc, #4	; (adr r2, 8018358 <CDC_Control_FS+0x1c>)
 8018354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018358:	080183e9 	.word	0x080183e9
 801835c:	080183e9 	.word	0x080183e9
 8018360:	080183e9 	.word	0x080183e9
 8018364:	080183e9 	.word	0x080183e9
 8018368:	080183e9 	.word	0x080183e9
 801836c:	080183e9 	.word	0x080183e9
 8018370:	080183e9 	.word	0x080183e9
 8018374:	080183e9 	.word	0x080183e9
 8018378:	080183e9 	.word	0x080183e9
 801837c:	080183e9 	.word	0x080183e9
 8018380:	080183e9 	.word	0x080183e9
 8018384:	080183e9 	.word	0x080183e9
 8018388:	080183e9 	.word	0x080183e9
 801838c:	080183e9 	.word	0x080183e9
 8018390:	080183e9 	.word	0x080183e9
 8018394:	080183e9 	.word	0x080183e9
 8018398:	080183e9 	.word	0x080183e9
 801839c:	080183e9 	.word	0x080183e9
 80183a0:	080183e9 	.word	0x080183e9
 80183a4:	080183e9 	.word	0x080183e9
 80183a8:	080183e9 	.word	0x080183e9
 80183ac:	080183e9 	.word	0x080183e9
 80183b0:	080183e9 	.word	0x080183e9
 80183b4:	080183e9 	.word	0x080183e9
 80183b8:	080183e9 	.word	0x080183e9
 80183bc:	080183e9 	.word	0x080183e9
 80183c0:	080183e9 	.word	0x080183e9
 80183c4:	080183e9 	.word	0x080183e9
 80183c8:	080183e9 	.word	0x080183e9
 80183cc:	080183e9 	.word	0x080183e9
 80183d0:	080183e9 	.word	0x080183e9
 80183d4:	080183e9 	.word	0x080183e9
 80183d8:	080183e9 	.word	0x080183e9
 80183dc:	080183e9 	.word	0x080183e9
 80183e0:	080183e9 	.word	0x080183e9
 80183e4:	080183e9 	.word	0x080183e9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80183e8:	bf00      	nop
	}

	return (USBD_OK);
 80183ea:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80183ec:	4618      	mov	r0, r3
 80183ee:	370c      	adds	r7, #12
 80183f0:	46bd      	mov	sp, r7
 80183f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f6:	4770      	bx	lr

080183f8 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b084      	sub	sp, #16
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018402:	6879      	ldr	r1, [r7, #4]
 8018404:	480b      	ldr	r0, [pc, #44]	; (8018434 <CDC_Receive_FS+0x3c>)
 8018406:	f7fb fe4a 	bl	801409e <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801840a:	480a      	ldr	r0, [pc, #40]	; (8018434 <CDC_Receive_FS+0x3c>)
 801840c:	f7fb fe90 	bl	8014130 <USBD_CDC_ReceivePacket>

	uint8_t len = (uint8_t)*Len;
 8018410:	683b      	ldr	r3, [r7, #0]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	73fb      	strb	r3, [r7, #15]
	memcpy(usb_Rx_buffer, Buf, len);  // copy the data to the buffer
 8018416:	7bfb      	ldrb	r3, [r7, #15]
 8018418:	461a      	mov	r2, r3
 801841a:	6879      	ldr	r1, [r7, #4]
 801841c:	4806      	ldr	r0, [pc, #24]	; (8018438 <CDC_Receive_FS+0x40>)
 801841e:	f000 fd67 	bl	8018ef0 <memcpy>

	usb_Rx_ready = 1;
 8018422:	4b06      	ldr	r3, [pc, #24]	; (801843c <CDC_Receive_FS+0x44>)
 8018424:	2201      	movs	r2, #1
 8018426:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 8018428:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 801842a:	4618      	mov	r0, r3
 801842c:	3710      	adds	r7, #16
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	20001430 	.word	0x20001430
 8018438:	20001700 	.word	0x20001700
 801843c:	20001702 	.word	0x20001702

08018440 <CDC_Transmit_FS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b084      	sub	sp, #16
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
 8018448:	460b      	mov	r3, r1
 801844a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 801844c:	2300      	movs	r3, #0
 801844e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018450:	4b0d      	ldr	r3, [pc, #52]	; (8018488 <CDC_Transmit_FS+0x48>)
 8018452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018456:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801845e:	2b00      	cmp	r3, #0
 8018460:	d001      	beq.n	8018466 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8018462:	2301      	movs	r3, #1
 8018464:	e00b      	b.n	801847e <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018466:	887b      	ldrh	r3, [r7, #2]
 8018468:	461a      	mov	r2, r3
 801846a:	6879      	ldr	r1, [r7, #4]
 801846c:	4806      	ldr	r0, [pc, #24]	; (8018488 <CDC_Transmit_FS+0x48>)
 801846e:	f7fb fdf8 	bl	8014062 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018472:	4805      	ldr	r0, [pc, #20]	; (8018488 <CDC_Transmit_FS+0x48>)
 8018474:	f7fb fe2c 	bl	80140d0 <USBD_CDC_TransmitPacket>
 8018478:	4603      	mov	r3, r0
 801847a:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 801847c:	7bfb      	ldrb	r3, [r7, #15]
}
 801847e:	4618      	mov	r0, r3
 8018480:	3710      	adds	r7, #16
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}
 8018486:	bf00      	nop
 8018488:	20001430 	.word	0x20001430

0801848c <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801848c:	b480      	push	{r7}
 801848e:	b087      	sub	sp, #28
 8018490:	af00      	add	r7, sp, #0
 8018492:	60f8      	str	r0, [r7, #12]
 8018494:	60b9      	str	r1, [r7, #8]
 8018496:	4613      	mov	r3, r2
 8018498:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 801849a:	2300      	movs	r3, #0
 801849c:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 801849e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80184a2:	4618      	mov	r0, r3
 80184a4:	371c      	adds	r7, #28
 80184a6:	46bd      	mov	sp, r7
 80184a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ac:	4770      	bx	lr
	...

080184b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b083      	sub	sp, #12
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	4603      	mov	r3, r0
 80184b8:	6039      	str	r1, [r7, #0]
 80184ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	2212      	movs	r2, #18
 80184c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80184c2:	4b03      	ldr	r3, [pc, #12]	; (80184d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80184c4:	4618      	mov	r0, r3
 80184c6:	370c      	adds	r7, #12
 80184c8:	46bd      	mov	sp, r7
 80184ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ce:	4770      	bx	lr
 80184d0:	2000015c 	.word	0x2000015c

080184d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184d4:	b480      	push	{r7}
 80184d6:	b083      	sub	sp, #12
 80184d8:	af00      	add	r7, sp, #0
 80184da:	4603      	mov	r3, r0
 80184dc:	6039      	str	r1, [r7, #0]
 80184de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	2204      	movs	r2, #4
 80184e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80184e6:	4b03      	ldr	r3, [pc, #12]	; (80184f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	370c      	adds	r7, #12
 80184ec:	46bd      	mov	sp, r7
 80184ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184f2:	4770      	bx	lr
 80184f4:	20000170 	.word	0x20000170

080184f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b082      	sub	sp, #8
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	4603      	mov	r3, r0
 8018500:	6039      	str	r1, [r7, #0]
 8018502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018504:	79fb      	ldrb	r3, [r7, #7]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d105      	bne.n	8018516 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801850a:	683a      	ldr	r2, [r7, #0]
 801850c:	4907      	ldr	r1, [pc, #28]	; (801852c <USBD_FS_ProductStrDescriptor+0x34>)
 801850e:	4808      	ldr	r0, [pc, #32]	; (8018530 <USBD_FS_ProductStrDescriptor+0x38>)
 8018510:	f7fc fec1 	bl	8015296 <USBD_GetString>
 8018514:	e004      	b.n	8018520 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018516:	683a      	ldr	r2, [r7, #0]
 8018518:	4904      	ldr	r1, [pc, #16]	; (801852c <USBD_FS_ProductStrDescriptor+0x34>)
 801851a:	4805      	ldr	r0, [pc, #20]	; (8018530 <USBD_FS_ProductStrDescriptor+0x38>)
 801851c:	f7fc febb 	bl	8015296 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018520:	4b02      	ldr	r3, [pc, #8]	; (801852c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018522:	4618      	mov	r0, r3
 8018524:	3708      	adds	r7, #8
 8018526:	46bd      	mov	sp, r7
 8018528:	bd80      	pop	{r7, pc}
 801852a:	bf00      	nop
 801852c:	20002704 	.word	0x20002704
 8018530:	0801c138 	.word	0x0801c138

08018534 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b082      	sub	sp, #8
 8018538:	af00      	add	r7, sp, #0
 801853a:	4603      	mov	r3, r0
 801853c:	6039      	str	r1, [r7, #0]
 801853e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018540:	683a      	ldr	r2, [r7, #0]
 8018542:	4904      	ldr	r1, [pc, #16]	; (8018554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018544:	4804      	ldr	r0, [pc, #16]	; (8018558 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018546:	f7fc fea6 	bl	8015296 <USBD_GetString>
  return USBD_StrDesc;
 801854a:	4b02      	ldr	r3, [pc, #8]	; (8018554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801854c:	4618      	mov	r0, r3
 801854e:	3708      	adds	r7, #8
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}
 8018554:	20002704 	.word	0x20002704
 8018558:	0801c150 	.word	0x0801c150

0801855c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b082      	sub	sp, #8
 8018560:	af00      	add	r7, sp, #0
 8018562:	4603      	mov	r3, r0
 8018564:	6039      	str	r1, [r7, #0]
 8018566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018568:	683b      	ldr	r3, [r7, #0]
 801856a:	221a      	movs	r2, #26
 801856c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801856e:	f000 f843 	bl	80185f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018572:	4b02      	ldr	r3, [pc, #8]	; (801857c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018574:	4618      	mov	r0, r3
 8018576:	3708      	adds	r7, #8
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}
 801857c:	20000174 	.word	0x20000174

08018580 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b082      	sub	sp, #8
 8018584:	af00      	add	r7, sp, #0
 8018586:	4603      	mov	r3, r0
 8018588:	6039      	str	r1, [r7, #0]
 801858a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801858c:	79fb      	ldrb	r3, [r7, #7]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d105      	bne.n	801859e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018592:	683a      	ldr	r2, [r7, #0]
 8018594:	4907      	ldr	r1, [pc, #28]	; (80185b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018596:	4808      	ldr	r0, [pc, #32]	; (80185b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018598:	f7fc fe7d 	bl	8015296 <USBD_GetString>
 801859c:	e004      	b.n	80185a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801859e:	683a      	ldr	r2, [r7, #0]
 80185a0:	4904      	ldr	r1, [pc, #16]	; (80185b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80185a2:	4805      	ldr	r0, [pc, #20]	; (80185b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80185a4:	f7fc fe77 	bl	8015296 <USBD_GetString>
  }
  return USBD_StrDesc;
 80185a8:	4b02      	ldr	r3, [pc, #8]	; (80185b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3708      	adds	r7, #8
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
 80185b2:	bf00      	nop
 80185b4:	20002704 	.word	0x20002704
 80185b8:	0801c164 	.word	0x0801c164

080185bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	4603      	mov	r3, r0
 80185c4:	6039      	str	r1, [r7, #0]
 80185c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80185c8:	79fb      	ldrb	r3, [r7, #7]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d105      	bne.n	80185da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80185ce:	683a      	ldr	r2, [r7, #0]
 80185d0:	4907      	ldr	r1, [pc, #28]	; (80185f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80185d2:	4808      	ldr	r0, [pc, #32]	; (80185f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80185d4:	f7fc fe5f 	bl	8015296 <USBD_GetString>
 80185d8:	e004      	b.n	80185e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80185da:	683a      	ldr	r2, [r7, #0]
 80185dc:	4904      	ldr	r1, [pc, #16]	; (80185f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80185de:	4805      	ldr	r0, [pc, #20]	; (80185f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80185e0:	f7fc fe59 	bl	8015296 <USBD_GetString>
  }
  return USBD_StrDesc;
 80185e4:	4b02      	ldr	r3, [pc, #8]	; (80185f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3708      	adds	r7, #8
 80185ea:	46bd      	mov	sp, r7
 80185ec:	bd80      	pop	{r7, pc}
 80185ee:	bf00      	nop
 80185f0:	20002704 	.word	0x20002704
 80185f4:	0801c170 	.word	0x0801c170

080185f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80185fe:	4b0f      	ldr	r3, [pc, #60]	; (801863c <Get_SerialNum+0x44>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018604:	4b0e      	ldr	r3, [pc, #56]	; (8018640 <Get_SerialNum+0x48>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801860a:	4b0e      	ldr	r3, [pc, #56]	; (8018644 <Get_SerialNum+0x4c>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018610:	68fa      	ldr	r2, [r7, #12]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	4413      	add	r3, r2
 8018616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d009      	beq.n	8018632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801861e:	2208      	movs	r2, #8
 8018620:	4909      	ldr	r1, [pc, #36]	; (8018648 <Get_SerialNum+0x50>)
 8018622:	68f8      	ldr	r0, [r7, #12]
 8018624:	f000 f814 	bl	8018650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018628:	2204      	movs	r2, #4
 801862a:	4908      	ldr	r1, [pc, #32]	; (801864c <Get_SerialNum+0x54>)
 801862c:	68b8      	ldr	r0, [r7, #8]
 801862e:	f000 f80f 	bl	8018650 <IntToUnicode>
  }
}
 8018632:	bf00      	nop
 8018634:	3710      	adds	r7, #16
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	1fff7590 	.word	0x1fff7590
 8018640:	1fff7594 	.word	0x1fff7594
 8018644:	1fff7598 	.word	0x1fff7598
 8018648:	20000176 	.word	0x20000176
 801864c:	20000186 	.word	0x20000186

08018650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018650:	b480      	push	{r7}
 8018652:	b087      	sub	sp, #28
 8018654:	af00      	add	r7, sp, #0
 8018656:	60f8      	str	r0, [r7, #12]
 8018658:	60b9      	str	r1, [r7, #8]
 801865a:	4613      	mov	r3, r2
 801865c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801865e:	2300      	movs	r3, #0
 8018660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018662:	2300      	movs	r3, #0
 8018664:	75fb      	strb	r3, [r7, #23]
 8018666:	e027      	b.n	80186b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	0f1b      	lsrs	r3, r3, #28
 801866c:	2b09      	cmp	r3, #9
 801866e:	d80b      	bhi.n	8018688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	0f1b      	lsrs	r3, r3, #28
 8018674:	b2da      	uxtb	r2, r3
 8018676:	7dfb      	ldrb	r3, [r7, #23]
 8018678:	005b      	lsls	r3, r3, #1
 801867a:	4619      	mov	r1, r3
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	440b      	add	r3, r1
 8018680:	3230      	adds	r2, #48	; 0x30
 8018682:	b2d2      	uxtb	r2, r2
 8018684:	701a      	strb	r2, [r3, #0]
 8018686:	e00a      	b.n	801869e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	0f1b      	lsrs	r3, r3, #28
 801868c:	b2da      	uxtb	r2, r3
 801868e:	7dfb      	ldrb	r3, [r7, #23]
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4619      	mov	r1, r3
 8018694:	68bb      	ldr	r3, [r7, #8]
 8018696:	440b      	add	r3, r1
 8018698:	3237      	adds	r2, #55	; 0x37
 801869a:	b2d2      	uxtb	r2, r2
 801869c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	011b      	lsls	r3, r3, #4
 80186a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80186a4:	7dfb      	ldrb	r3, [r7, #23]
 80186a6:	005b      	lsls	r3, r3, #1
 80186a8:	3301      	adds	r3, #1
 80186aa:	68ba      	ldr	r2, [r7, #8]
 80186ac:	4413      	add	r3, r2
 80186ae:	2200      	movs	r2, #0
 80186b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80186b2:	7dfb      	ldrb	r3, [r7, #23]
 80186b4:	3301      	adds	r3, #1
 80186b6:	75fb      	strb	r3, [r7, #23]
 80186b8:	7dfa      	ldrb	r2, [r7, #23]
 80186ba:	79fb      	ldrb	r3, [r7, #7]
 80186bc:	429a      	cmp	r2, r3
 80186be:	d3d3      	bcc.n	8018668 <IntToUnicode+0x18>
  }
}
 80186c0:	bf00      	nop
 80186c2:	bf00      	nop
 80186c4:	371c      	adds	r7, #28
 80186c6:	46bd      	mov	sp, r7
 80186c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186cc:	4770      	bx	lr
	...

080186d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b0b0      	sub	sp, #192	; 0xc0
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80186d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80186dc:	2200      	movs	r2, #0
 80186de:	601a      	str	r2, [r3, #0]
 80186e0:	605a      	str	r2, [r3, #4]
 80186e2:	609a      	str	r2, [r3, #8]
 80186e4:	60da      	str	r2, [r3, #12]
 80186e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80186e8:	f107 0318 	add.w	r3, r7, #24
 80186ec:	2294      	movs	r2, #148	; 0x94
 80186ee:	2100      	movs	r1, #0
 80186f0:	4618      	mov	r0, r3
 80186f2:	f000 fc0b 	bl	8018f0c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80186fe:	d163      	bne.n	80187c8 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018704:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8018706:	2300      	movs	r3, #0
 8018708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801870c:	f107 0318 	add.w	r3, r7, #24
 8018710:	4618      	mov	r0, r3
 8018712:	f7f2 fc17 	bl	800af44 <HAL_RCCEx_PeriphCLKConfig>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801871c:	f7ec f8d6 	bl	80048cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018720:	4b2b      	ldr	r3, [pc, #172]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018724:	4a2a      	ldr	r2, [pc, #168]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018726:	f043 0301 	orr.w	r3, r3, #1
 801872a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801872c:	4b28      	ldr	r3, [pc, #160]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 801872e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018730:	f003 0301 	and.w	r3, r3, #1
 8018734:	617b      	str	r3, [r7, #20]
 8018736:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018738:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801873c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018740:	2302      	movs	r3, #2
 8018742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018746:	2300      	movs	r3, #0
 8018748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801874c:	2303      	movs	r3, #3
 801874e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018752:	230a      	movs	r3, #10
 8018754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018758:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801875c:	4619      	mov	r1, r3
 801875e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018762:	f7ee fdcf 	bl	8007304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018766:	4b1a      	ldr	r3, [pc, #104]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801876a:	4a19      	ldr	r2, [pc, #100]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 801876c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018772:	4b17      	ldr	r3, [pc, #92]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801877a:	613b      	str	r3, [r7, #16]
 801877c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801877e:	4b14      	ldr	r3, [pc, #80]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018786:	2b00      	cmp	r3, #0
 8018788:	d114      	bne.n	80187b4 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801878a:	4b11      	ldr	r3, [pc, #68]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 801878c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801878e:	4a10      	ldr	r2, [pc, #64]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018794:	6593      	str	r3, [r2, #88]	; 0x58
 8018796:	4b0e      	ldr	r3, [pc, #56]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 8018798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801879a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801879e:	60fb      	str	r3, [r7, #12]
 80187a0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80187a2:	f7f1 fcbb 	bl	800a11c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80187a6:	4b0a      	ldr	r3, [pc, #40]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 80187a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187aa:	4a09      	ldr	r2, [pc, #36]	; (80187d0 <HAL_PCD_MspInit+0x100>)
 80187ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80187b0:	6593      	str	r3, [r2, #88]	; 0x58
 80187b2:	e001      	b.n	80187b8 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80187b4:	f7f1 fcb2 	bl	800a11c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80187b8:	2200      	movs	r2, #0
 80187ba:	2100      	movs	r1, #0
 80187bc:	2043      	movs	r0, #67	; 0x43
 80187be:	f7ee fa3c 	bl	8006c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80187c2:	2043      	movs	r0, #67	; 0x43
 80187c4:	f7ee fa55 	bl	8006c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80187c8:	bf00      	nop
 80187ca:	37c0      	adds	r7, #192	; 0xc0
 80187cc:	46bd      	mov	sp, r7
 80187ce:	bd80      	pop	{r7, pc}
 80187d0:	40021000 	.word	0x40021000

080187d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b082      	sub	sp, #8
 80187d8:	af00      	add	r7, sp, #0
 80187da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80187e8:	4619      	mov	r1, r3
 80187ea:	4610      	mov	r0, r2
 80187ec:	f7fb fd6c 	bl	80142c8 <USBD_LL_SetupStage>
}
 80187f0:	bf00      	nop
 80187f2:	3708      	adds	r7, #8
 80187f4:	46bd      	mov	sp, r7
 80187f6:	bd80      	pop	{r7, pc}

080187f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	460b      	mov	r3, r1
 8018802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801880a:	78fa      	ldrb	r2, [r7, #3]
 801880c:	6879      	ldr	r1, [r7, #4]
 801880e:	4613      	mov	r3, r2
 8018810:	00db      	lsls	r3, r3, #3
 8018812:	4413      	add	r3, r2
 8018814:	009b      	lsls	r3, r3, #2
 8018816:	440b      	add	r3, r1
 8018818:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801881c:	681a      	ldr	r2, [r3, #0]
 801881e:	78fb      	ldrb	r3, [r7, #3]
 8018820:	4619      	mov	r1, r3
 8018822:	f7fb fda6 	bl	8014372 <USBD_LL_DataOutStage>
}
 8018826:	bf00      	nop
 8018828:	3708      	adds	r7, #8
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}

0801882e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801882e:	b580      	push	{r7, lr}
 8018830:	b082      	sub	sp, #8
 8018832:	af00      	add	r7, sp, #0
 8018834:	6078      	str	r0, [r7, #4]
 8018836:	460b      	mov	r3, r1
 8018838:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018840:	78fa      	ldrb	r2, [r7, #3]
 8018842:	6879      	ldr	r1, [r7, #4]
 8018844:	4613      	mov	r3, r2
 8018846:	00db      	lsls	r3, r3, #3
 8018848:	4413      	add	r3, r2
 801884a:	009b      	lsls	r3, r3, #2
 801884c:	440b      	add	r3, r1
 801884e:	334c      	adds	r3, #76	; 0x4c
 8018850:	681a      	ldr	r2, [r3, #0]
 8018852:	78fb      	ldrb	r3, [r7, #3]
 8018854:	4619      	mov	r1, r3
 8018856:	f7fb fdef 	bl	8014438 <USBD_LL_DataInStage>
}
 801885a:	bf00      	nop
 801885c:	3708      	adds	r7, #8
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}

08018862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b082      	sub	sp, #8
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018870:	4618      	mov	r0, r3
 8018872:	f7fb ff03 	bl	801467c <USBD_LL_SOF>
}
 8018876:	bf00      	nop
 8018878:	3708      	adds	r7, #8
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}

0801887e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801887e:	b580      	push	{r7, lr}
 8018880:	b084      	sub	sp, #16
 8018882:	af00      	add	r7, sp, #0
 8018884:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018886:	2301      	movs	r3, #1
 8018888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	68db      	ldr	r3, [r3, #12]
 801888e:	2b02      	cmp	r3, #2
 8018890:	d001      	beq.n	8018896 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018892:	f7ec f81b 	bl	80048cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801889c:	7bfa      	ldrb	r2, [r7, #15]
 801889e:	4611      	mov	r1, r2
 80188a0:	4618      	mov	r0, r3
 80188a2:	f7fb fead 	bl	8014600 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fb fe59 	bl	8014564 <USBD_LL_Reset>
}
 80188b2:	bf00      	nop
 80188b4:	3710      	adds	r7, #16
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
	...

080188bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b082      	sub	sp, #8
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	6812      	ldr	r2, [r2, #0]
 80188d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80188d6:	f043 0301 	orr.w	r3, r3, #1
 80188da:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188e2:	4618      	mov	r0, r3
 80188e4:	f7fb fe9c 	bl	8014620 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	6a1b      	ldr	r3, [r3, #32]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d005      	beq.n	80188fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80188f0:	4b04      	ldr	r3, [pc, #16]	; (8018904 <HAL_PCD_SuspendCallback+0x48>)
 80188f2:	691b      	ldr	r3, [r3, #16]
 80188f4:	4a03      	ldr	r2, [pc, #12]	; (8018904 <HAL_PCD_SuspendCallback+0x48>)
 80188f6:	f043 0306 	orr.w	r3, r3, #6
 80188fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80188fc:	bf00      	nop
 80188fe:	3708      	adds	r7, #8
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}
 8018904:	e000ed00 	.word	0xe000ed00

08018908 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	687a      	ldr	r2, [r7, #4]
 801891c:	6812      	ldr	r2, [r2, #0]
 801891e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018922:	f023 0301 	bic.w	r3, r3, #1
 8018926:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	6a1b      	ldr	r3, [r3, #32]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d007      	beq.n	8018940 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018930:	4b08      	ldr	r3, [pc, #32]	; (8018954 <HAL_PCD_ResumeCallback+0x4c>)
 8018932:	691b      	ldr	r3, [r3, #16]
 8018934:	4a07      	ldr	r2, [pc, #28]	; (8018954 <HAL_PCD_ResumeCallback+0x4c>)
 8018936:	f023 0306 	bic.w	r3, r3, #6
 801893a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801893c:	f000 faa6 	bl	8018e8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018946:	4618      	mov	r0, r3
 8018948:	f7fb fe80 	bl	801464c <USBD_LL_Resume>
}
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	e000ed00 	.word	0xe000ed00

08018958 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b082      	sub	sp, #8
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
 8018960:	460b      	mov	r3, r1
 8018962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801896a:	78fa      	ldrb	r2, [r7, #3]
 801896c:	4611      	mov	r1, r2
 801896e:	4618      	mov	r0, r3
 8018970:	f7fb fecc 	bl	801470c <USBD_LL_IsoOUTIncomplete>
}
 8018974:	bf00      	nop
 8018976:	3708      	adds	r7, #8
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}

0801897c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	6078      	str	r0, [r7, #4]
 8018984:	460b      	mov	r3, r1
 8018986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801898e:	78fa      	ldrb	r2, [r7, #3]
 8018990:	4611      	mov	r1, r2
 8018992:	4618      	mov	r0, r3
 8018994:	f7fb fe94 	bl	80146c0 <USBD_LL_IsoINIncomplete>
}
 8018998:	bf00      	nop
 801899a:	3708      	adds	r7, #8
 801899c:	46bd      	mov	sp, r7
 801899e:	bd80      	pop	{r7, pc}

080189a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189ae:	4618      	mov	r0, r3
 80189b0:	f7fb fed2 	bl	8014758 <USBD_LL_DevConnected>
}
 80189b4:	bf00      	nop
 80189b6:	3708      	adds	r7, #8
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b082      	sub	sp, #8
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80189ca:	4618      	mov	r0, r3
 80189cc:	f7fb fecf 	bl	801476e <USBD_LL_DevDisconnected>
}
 80189d0:	bf00      	nop
 80189d2:	3708      	adds	r7, #8
 80189d4:	46bd      	mov	sp, r7
 80189d6:	bd80      	pop	{r7, pc}

080189d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b082      	sub	sp, #8
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d139      	bne.n	8018a5c <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80189e8:	4a1f      	ldr	r2, [pc, #124]	; (8018a68 <USBD_LL_Init+0x90>)
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	4a1d      	ldr	r2, [pc, #116]	; (8018a68 <USBD_LL_Init+0x90>)
 80189f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80189f8:	4b1b      	ldr	r3, [pc, #108]	; (8018a68 <USBD_LL_Init+0x90>)
 80189fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80189fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8018a00:	4b19      	ldr	r3, [pc, #100]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a02:	2206      	movs	r2, #6
 8018a04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018a06:	4b18      	ldr	r3, [pc, #96]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a08:	2202      	movs	r2, #2
 8018a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018a0c:	4b16      	ldr	r3, [pc, #88]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a0e:	2200      	movs	r2, #0
 8018a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018a12:	4b15      	ldr	r3, [pc, #84]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a14:	2200      	movs	r2, #0
 8018a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018a18:	4b13      	ldr	r3, [pc, #76]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018a1e:	4b12      	ldr	r3, [pc, #72]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a20:	2200      	movs	r2, #0
 8018a22:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018a24:	4b10      	ldr	r3, [pc, #64]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a26:	2200      	movs	r2, #0
 8018a28:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018a2a:	4b0f      	ldr	r3, [pc, #60]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018a30:	480d      	ldr	r0, [pc, #52]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a32:	f7f0 f8e4 	bl	8008bfe <HAL_PCD_Init>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d001      	beq.n	8018a40 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8018a3c:	f7eb ff46 	bl	80048cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018a40:	2180      	movs	r1, #128	; 0x80
 8018a42:	4809      	ldr	r0, [pc, #36]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a44:	f7f1 fa65 	bl	8009f12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018a48:	2240      	movs	r2, #64	; 0x40
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	4806      	ldr	r0, [pc, #24]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a4e:	f7f1 fa19 	bl	8009e84 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018a52:	2280      	movs	r2, #128	; 0x80
 8018a54:	2101      	movs	r1, #1
 8018a56:	4804      	ldr	r0, [pc, #16]	; (8018a68 <USBD_LL_Init+0x90>)
 8018a58:	f7f1 fa14 	bl	8009e84 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018a5c:	2300      	movs	r3, #0
}
 8018a5e:	4618      	mov	r0, r3
 8018a60:	3708      	adds	r7, #8
 8018a62:	46bd      	mov	sp, r7
 8018a64:	bd80      	pop	{r7, pc}
 8018a66:	bf00      	nop
 8018a68:	20002904 	.word	0x20002904

08018a6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b084      	sub	sp, #16
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a74:	2300      	movs	r3, #0
 8018a76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a78:	2300      	movs	r3, #0
 8018a7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018a82:	4618      	mov	r0, r3
 8018a84:	f7f0 f9df 	bl	8008e46 <HAL_PCD_Start>
 8018a88:	4603      	mov	r3, r0
 8018a8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018a8c:	7bbb      	ldrb	r3, [r7, #14]
 8018a8e:	2b03      	cmp	r3, #3
 8018a90:	d816      	bhi.n	8018ac0 <USBD_LL_Start+0x54>
 8018a92:	a201      	add	r2, pc, #4	; (adr r2, 8018a98 <USBD_LL_Start+0x2c>)
 8018a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a98:	08018aa9 	.word	0x08018aa9
 8018a9c:	08018aaf 	.word	0x08018aaf
 8018aa0:	08018ab5 	.word	0x08018ab5
 8018aa4:	08018abb 	.word	0x08018abb
    case HAL_OK :
      usb_status = USBD_OK;
 8018aa8:	2300      	movs	r3, #0
 8018aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8018aac:	e00b      	b.n	8018ac6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018aae:	2303      	movs	r3, #3
 8018ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8018ab2:	e008      	b.n	8018ac6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8018ab8:	e005      	b.n	8018ac6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018aba:	2303      	movs	r3, #3
 8018abc:	73fb      	strb	r3, [r7, #15]
    break;
 8018abe:	e002      	b.n	8018ac6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8018ac0:	2303      	movs	r3, #3
 8018ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8018ac4:	bf00      	nop
  }
  return usb_status;
 8018ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3710      	adds	r7, #16
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b084      	sub	sp, #16
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	4608      	mov	r0, r1
 8018ada:	4611      	mov	r1, r2
 8018adc:	461a      	mov	r2, r3
 8018ade:	4603      	mov	r3, r0
 8018ae0:	70fb      	strb	r3, [r7, #3]
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	70bb      	strb	r3, [r7, #2]
 8018ae6:	4613      	mov	r3, r2
 8018ae8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018aea:	2300      	movs	r3, #0
 8018aec:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018aee:	2300      	movs	r3, #0
 8018af0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018af8:	78bb      	ldrb	r3, [r7, #2]
 8018afa:	883a      	ldrh	r2, [r7, #0]
 8018afc:	78f9      	ldrb	r1, [r7, #3]
 8018afe:	f7f0 fe89 	bl	8009814 <HAL_PCD_EP_Open>
 8018b02:	4603      	mov	r3, r0
 8018b04:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018b06:	7bbb      	ldrb	r3, [r7, #14]
 8018b08:	2b03      	cmp	r3, #3
 8018b0a:	d817      	bhi.n	8018b3c <USBD_LL_OpenEP+0x6c>
 8018b0c:	a201      	add	r2, pc, #4	; (adr r2, 8018b14 <USBD_LL_OpenEP+0x44>)
 8018b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b12:	bf00      	nop
 8018b14:	08018b25 	.word	0x08018b25
 8018b18:	08018b2b 	.word	0x08018b2b
 8018b1c:	08018b31 	.word	0x08018b31
 8018b20:	08018b37 	.word	0x08018b37
    case HAL_OK :
      usb_status = USBD_OK;
 8018b24:	2300      	movs	r3, #0
 8018b26:	73fb      	strb	r3, [r7, #15]
    break;
 8018b28:	e00b      	b.n	8018b42 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b2a:	2303      	movs	r3, #3
 8018b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8018b2e:	e008      	b.n	8018b42 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b30:	2301      	movs	r3, #1
 8018b32:	73fb      	strb	r3, [r7, #15]
    break;
 8018b34:	e005      	b.n	8018b42 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b36:	2303      	movs	r3, #3
 8018b38:	73fb      	strb	r3, [r7, #15]
    break;
 8018b3a:	e002      	b.n	8018b42 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8018b3c:	2303      	movs	r3, #3
 8018b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8018b40:	bf00      	nop
  }
  return usb_status;
 8018b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3710      	adds	r7, #16
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b084      	sub	sp, #16
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
 8018b54:	460b      	mov	r3, r1
 8018b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b66:	78fa      	ldrb	r2, [r7, #3]
 8018b68:	4611      	mov	r1, r2
 8018b6a:	4618      	mov	r0, r3
 8018b6c:	f7f0 feba 	bl	80098e4 <HAL_PCD_EP_Close>
 8018b70:	4603      	mov	r3, r0
 8018b72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018b74:	7bbb      	ldrb	r3, [r7, #14]
 8018b76:	2b03      	cmp	r3, #3
 8018b78:	d816      	bhi.n	8018ba8 <USBD_LL_CloseEP+0x5c>
 8018b7a:	a201      	add	r2, pc, #4	; (adr r2, 8018b80 <USBD_LL_CloseEP+0x34>)
 8018b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b80:	08018b91 	.word	0x08018b91
 8018b84:	08018b97 	.word	0x08018b97
 8018b88:	08018b9d 	.word	0x08018b9d
 8018b8c:	08018ba3 	.word	0x08018ba3
    case HAL_OK :
      usb_status = USBD_OK;
 8018b90:	2300      	movs	r3, #0
 8018b92:	73fb      	strb	r3, [r7, #15]
    break;
 8018b94:	e00b      	b.n	8018bae <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b96:	2303      	movs	r3, #3
 8018b98:	73fb      	strb	r3, [r7, #15]
    break;
 8018b9a:	e008      	b.n	8018bae <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8018ba0:	e005      	b.n	8018bae <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018ba2:	2303      	movs	r3, #3
 8018ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8018ba6:	e002      	b.n	8018bae <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018ba8:	2303      	movs	r3, #3
 8018baa:	73fb      	strb	r3, [r7, #15]
    break;
 8018bac:	bf00      	nop
  }
  return usb_status;
 8018bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3710      	adds	r7, #16
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018bd2:	78fa      	ldrb	r2, [r7, #3]
 8018bd4:	4611      	mov	r1, r2
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7f0 ff61 	bl	8009a9e <HAL_PCD_EP_SetStall>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018be0:	7bbb      	ldrb	r3, [r7, #14]
 8018be2:	2b03      	cmp	r3, #3
 8018be4:	d816      	bhi.n	8018c14 <USBD_LL_StallEP+0x5c>
 8018be6:	a201      	add	r2, pc, #4	; (adr r2, 8018bec <USBD_LL_StallEP+0x34>)
 8018be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bec:	08018bfd 	.word	0x08018bfd
 8018bf0:	08018c03 	.word	0x08018c03
 8018bf4:	08018c09 	.word	0x08018c09
 8018bf8:	08018c0f 	.word	0x08018c0f
    case HAL_OK :
      usb_status = USBD_OK;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8018c00:	e00b      	b.n	8018c1a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018c02:	2303      	movs	r3, #3
 8018c04:	73fb      	strb	r3, [r7, #15]
    break;
 8018c06:	e008      	b.n	8018c1a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018c08:	2301      	movs	r3, #1
 8018c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8018c0c:	e005      	b.n	8018c1a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018c0e:	2303      	movs	r3, #3
 8018c10:	73fb      	strb	r3, [r7, #15]
    break;
 8018c12:	e002      	b.n	8018c1a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018c14:	2303      	movs	r3, #3
 8018c16:	73fb      	strb	r3, [r7, #15]
    break;
 8018c18:	bf00      	nop
  }
  return usb_status;
 8018c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3710      	adds	r7, #16
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b084      	sub	sp, #16
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c30:	2300      	movs	r3, #0
 8018c32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c34:	2300      	movs	r3, #0
 8018c36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018c3e:	78fa      	ldrb	r2, [r7, #3]
 8018c40:	4611      	mov	r1, r2
 8018c42:	4618      	mov	r0, r3
 8018c44:	f7f0 ff8d 	bl	8009b62 <HAL_PCD_EP_ClrStall>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018c4c:	7bbb      	ldrb	r3, [r7, #14]
 8018c4e:	2b03      	cmp	r3, #3
 8018c50:	d816      	bhi.n	8018c80 <USBD_LL_ClearStallEP+0x5c>
 8018c52:	a201      	add	r2, pc, #4	; (adr r2, 8018c58 <USBD_LL_ClearStallEP+0x34>)
 8018c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c58:	08018c69 	.word	0x08018c69
 8018c5c:	08018c6f 	.word	0x08018c6f
 8018c60:	08018c75 	.word	0x08018c75
 8018c64:	08018c7b 	.word	0x08018c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8018c6c:	e00b      	b.n	8018c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018c6e:	2303      	movs	r3, #3
 8018c70:	73fb      	strb	r3, [r7, #15]
    break;
 8018c72:	e008      	b.n	8018c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018c74:	2301      	movs	r3, #1
 8018c76:	73fb      	strb	r3, [r7, #15]
    break;
 8018c78:	e005      	b.n	8018c86 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018c7a:	2303      	movs	r3, #3
 8018c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8018c7e:	e002      	b.n	8018c86 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018c80:	2303      	movs	r3, #3
 8018c82:	73fb      	strb	r3, [r7, #15]
    break;
 8018c84:	bf00      	nop
  }
  return usb_status;
 8018c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3710      	adds	r7, #16
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018c90:	b480      	push	{r7}
 8018c92:	b085      	sub	sp, #20
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	460b      	mov	r3, r1
 8018c9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	da0b      	bge.n	8018cc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018cac:	78fb      	ldrb	r3, [r7, #3]
 8018cae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018cb2:	68f9      	ldr	r1, [r7, #12]
 8018cb4:	4613      	mov	r3, r2
 8018cb6:	00db      	lsls	r3, r3, #3
 8018cb8:	4413      	add	r3, r2
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	440b      	add	r3, r1
 8018cbe:	333e      	adds	r3, #62	; 0x3e
 8018cc0:	781b      	ldrb	r3, [r3, #0]
 8018cc2:	e00b      	b.n	8018cdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018cc4:	78fb      	ldrb	r3, [r7, #3]
 8018cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018cca:	68f9      	ldr	r1, [r7, #12]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	00db      	lsls	r3, r3, #3
 8018cd0:	4413      	add	r3, r2
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	440b      	add	r3, r1
 8018cd6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018cda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	3714      	adds	r7, #20
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr

08018ce8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	460b      	mov	r3, r1
 8018cf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018d02:	78fa      	ldrb	r2, [r7, #3]
 8018d04:	4611      	mov	r1, r2
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7f0 fd5f 	bl	80097ca <HAL_PCD_SetAddress>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018d10:	7bbb      	ldrb	r3, [r7, #14]
 8018d12:	2b03      	cmp	r3, #3
 8018d14:	d816      	bhi.n	8018d44 <USBD_LL_SetUSBAddress+0x5c>
 8018d16:	a201      	add	r2, pc, #4	; (adr r2, 8018d1c <USBD_LL_SetUSBAddress+0x34>)
 8018d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d1c:	08018d2d 	.word	0x08018d2d
 8018d20:	08018d33 	.word	0x08018d33
 8018d24:	08018d39 	.word	0x08018d39
 8018d28:	08018d3f 	.word	0x08018d3f
    case HAL_OK :
      usb_status = USBD_OK;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8018d30:	e00b      	b.n	8018d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d32:	2303      	movs	r3, #3
 8018d34:	73fb      	strb	r3, [r7, #15]
    break;
 8018d36:	e008      	b.n	8018d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8018d3c:	e005      	b.n	8018d4a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d3e:	2303      	movs	r3, #3
 8018d40:	73fb      	strb	r3, [r7, #15]
    break;
 8018d42:	e002      	b.n	8018d4a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8018d44:	2303      	movs	r3, #3
 8018d46:	73fb      	strb	r3, [r7, #15]
    break;
 8018d48:	bf00      	nop
  }
  return usb_status;
 8018d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	3710      	adds	r7, #16
 8018d50:	46bd      	mov	sp, r7
 8018d52:	bd80      	pop	{r7, pc}

08018d54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b086      	sub	sp, #24
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	60f8      	str	r0, [r7, #12]
 8018d5c:	607a      	str	r2, [r7, #4]
 8018d5e:	603b      	str	r3, [r7, #0]
 8018d60:	460b      	mov	r3, r1
 8018d62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d64:	2300      	movs	r3, #0
 8018d66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018d72:	7af9      	ldrb	r1, [r7, #11]
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	f7f0 fe54 	bl	8009a24 <HAL_PCD_EP_Transmit>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018d80:	7dbb      	ldrb	r3, [r7, #22]
 8018d82:	2b03      	cmp	r3, #3
 8018d84:	d816      	bhi.n	8018db4 <USBD_LL_Transmit+0x60>
 8018d86:	a201      	add	r2, pc, #4	; (adr r2, 8018d8c <USBD_LL_Transmit+0x38>)
 8018d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d8c:	08018d9d 	.word	0x08018d9d
 8018d90:	08018da3 	.word	0x08018da3
 8018d94:	08018da9 	.word	0x08018da9
 8018d98:	08018daf 	.word	0x08018daf
    case HAL_OK :
      usb_status = USBD_OK;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	75fb      	strb	r3, [r7, #23]
    break;
 8018da0:	e00b      	b.n	8018dba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018da2:	2303      	movs	r3, #3
 8018da4:	75fb      	strb	r3, [r7, #23]
    break;
 8018da6:	e008      	b.n	8018dba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018da8:	2301      	movs	r3, #1
 8018daa:	75fb      	strb	r3, [r7, #23]
    break;
 8018dac:	e005      	b.n	8018dba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018dae:	2303      	movs	r3, #3
 8018db0:	75fb      	strb	r3, [r7, #23]
    break;
 8018db2:	e002      	b.n	8018dba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8018db4:	2303      	movs	r3, #3
 8018db6:	75fb      	strb	r3, [r7, #23]
    break;
 8018db8:	bf00      	nop
  }
  return usb_status;
 8018dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3718      	adds	r7, #24
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b086      	sub	sp, #24
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	607a      	str	r2, [r7, #4]
 8018dce:	603b      	str	r3, [r7, #0]
 8018dd0:	460b      	mov	r3, r1
 8018dd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dd8:	2300      	movs	r3, #0
 8018dda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018de2:	7af9      	ldrb	r1, [r7, #11]
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	f7f0 fdc6 	bl	8009978 <HAL_PCD_EP_Receive>
 8018dec:	4603      	mov	r3, r0
 8018dee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018df0:	7dbb      	ldrb	r3, [r7, #22]
 8018df2:	2b03      	cmp	r3, #3
 8018df4:	d816      	bhi.n	8018e24 <USBD_LL_PrepareReceive+0x60>
 8018df6:	a201      	add	r2, pc, #4	; (adr r2, 8018dfc <USBD_LL_PrepareReceive+0x38>)
 8018df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018dfc:	08018e0d 	.word	0x08018e0d
 8018e00:	08018e13 	.word	0x08018e13
 8018e04:	08018e19 	.word	0x08018e19
 8018e08:	08018e1f 	.word	0x08018e1f
    case HAL_OK :
      usb_status = USBD_OK;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	75fb      	strb	r3, [r7, #23]
    break;
 8018e10:	e00b      	b.n	8018e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018e12:	2303      	movs	r3, #3
 8018e14:	75fb      	strb	r3, [r7, #23]
    break;
 8018e16:	e008      	b.n	8018e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018e18:	2301      	movs	r3, #1
 8018e1a:	75fb      	strb	r3, [r7, #23]
    break;
 8018e1c:	e005      	b.n	8018e2a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018e1e:	2303      	movs	r3, #3
 8018e20:	75fb      	strb	r3, [r7, #23]
    break;
 8018e22:	e002      	b.n	8018e2a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8018e24:	2303      	movs	r3, #3
 8018e26:	75fb      	strb	r3, [r7, #23]
    break;
 8018e28:	bf00      	nop
  }
  return usb_status;
 8018e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	3718      	adds	r7, #24
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bd80      	pop	{r7, pc}

08018e34 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b082      	sub	sp, #8
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
 8018e3c:	460b      	mov	r3, r1
 8018e3e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018e46:	78fa      	ldrb	r2, [r7, #3]
 8018e48:	4611      	mov	r1, r2
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7f0 fdd2 	bl	80099f4 <HAL_PCD_EP_GetRxCount>
 8018e50:	4603      	mov	r3, r0
}
 8018e52:	4618      	mov	r0, r3
 8018e54:	3708      	adds	r7, #8
 8018e56:	46bd      	mov	sp, r7
 8018e58:	bd80      	pop	{r7, pc}
	...

08018e5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018e5c:	b480      	push	{r7}
 8018e5e:	b083      	sub	sp, #12
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018e64:	4b03      	ldr	r3, [pc, #12]	; (8018e74 <USBD_static_malloc+0x18>)
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	370c      	adds	r7, #12
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr
 8018e72:	bf00      	nop
 8018e74:	20002e10 	.word	0x20002e10

08018e78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018e78:	b480      	push	{r7}
 8018e7a:	b083      	sub	sp, #12
 8018e7c:	af00      	add	r7, sp, #0
 8018e7e:	6078      	str	r0, [r7, #4]

}
 8018e80:	bf00      	nop
 8018e82:	370c      	adds	r7, #12
 8018e84:	46bd      	mov	sp, r7
 8018e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8a:	4770      	bx	lr

08018e8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018e90:	f7eb f9f8 	bl	8004284 <SystemClock_Config>
}
 8018e94:	bf00      	nop
 8018e96:	bd80      	pop	{r7, pc}

08018e98 <__libc_init_array>:
 8018e98:	b570      	push	{r4, r5, r6, lr}
 8018e9a:	4d0d      	ldr	r5, [pc, #52]	; (8018ed0 <__libc_init_array+0x38>)
 8018e9c:	4c0d      	ldr	r4, [pc, #52]	; (8018ed4 <__libc_init_array+0x3c>)
 8018e9e:	1b64      	subs	r4, r4, r5
 8018ea0:	10a4      	asrs	r4, r4, #2
 8018ea2:	2600      	movs	r6, #0
 8018ea4:	42a6      	cmp	r6, r4
 8018ea6:	d109      	bne.n	8018ebc <__libc_init_array+0x24>
 8018ea8:	4d0b      	ldr	r5, [pc, #44]	; (8018ed8 <__libc_init_array+0x40>)
 8018eaa:	4c0c      	ldr	r4, [pc, #48]	; (8018edc <__libc_init_array+0x44>)
 8018eac:	f002 ff70 	bl	801bd90 <_init>
 8018eb0:	1b64      	subs	r4, r4, r5
 8018eb2:	10a4      	asrs	r4, r4, #2
 8018eb4:	2600      	movs	r6, #0
 8018eb6:	42a6      	cmp	r6, r4
 8018eb8:	d105      	bne.n	8018ec6 <__libc_init_array+0x2e>
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ec0:	4798      	blx	r3
 8018ec2:	3601      	adds	r6, #1
 8018ec4:	e7ee      	b.n	8018ea4 <__libc_init_array+0xc>
 8018ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eca:	4798      	blx	r3
 8018ecc:	3601      	adds	r6, #1
 8018ece:	e7f2      	b.n	8018eb6 <__libc_init_array+0x1e>
 8018ed0:	0801c690 	.word	0x0801c690
 8018ed4:	0801c690 	.word	0x0801c690
 8018ed8:	0801c690 	.word	0x0801c690
 8018edc:	0801c694 	.word	0x0801c694

08018ee0 <malloc>:
 8018ee0:	4b02      	ldr	r3, [pc, #8]	; (8018eec <malloc+0xc>)
 8018ee2:	4601      	mov	r1, r0
 8018ee4:	6818      	ldr	r0, [r3, #0]
 8018ee6:	f000 b885 	b.w	8018ff4 <_malloc_r>
 8018eea:	bf00      	nop
 8018eec:	20000190 	.word	0x20000190

08018ef0 <memcpy>:
 8018ef0:	440a      	add	r2, r1
 8018ef2:	4291      	cmp	r1, r2
 8018ef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018ef8:	d100      	bne.n	8018efc <memcpy+0xc>
 8018efa:	4770      	bx	lr
 8018efc:	b510      	push	{r4, lr}
 8018efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f06:	4291      	cmp	r1, r2
 8018f08:	d1f9      	bne.n	8018efe <memcpy+0xe>
 8018f0a:	bd10      	pop	{r4, pc}

08018f0c <memset>:
 8018f0c:	4402      	add	r2, r0
 8018f0e:	4603      	mov	r3, r0
 8018f10:	4293      	cmp	r3, r2
 8018f12:	d100      	bne.n	8018f16 <memset+0xa>
 8018f14:	4770      	bx	lr
 8018f16:	f803 1b01 	strb.w	r1, [r3], #1
 8018f1a:	e7f9      	b.n	8018f10 <memset+0x4>

08018f1c <_free_r>:
 8018f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f1e:	2900      	cmp	r1, #0
 8018f20:	d044      	beq.n	8018fac <_free_r+0x90>
 8018f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f26:	9001      	str	r0, [sp, #4]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8018f2e:	bfb8      	it	lt
 8018f30:	18e4      	addlt	r4, r4, r3
 8018f32:	f001 fd41 	bl	801a9b8 <__malloc_lock>
 8018f36:	4a1e      	ldr	r2, [pc, #120]	; (8018fb0 <_free_r+0x94>)
 8018f38:	9801      	ldr	r0, [sp, #4]
 8018f3a:	6813      	ldr	r3, [r2, #0]
 8018f3c:	b933      	cbnz	r3, 8018f4c <_free_r+0x30>
 8018f3e:	6063      	str	r3, [r4, #4]
 8018f40:	6014      	str	r4, [r2, #0]
 8018f42:	b003      	add	sp, #12
 8018f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f48:	f001 bd3c 	b.w	801a9c4 <__malloc_unlock>
 8018f4c:	42a3      	cmp	r3, r4
 8018f4e:	d908      	bls.n	8018f62 <_free_r+0x46>
 8018f50:	6825      	ldr	r5, [r4, #0]
 8018f52:	1961      	adds	r1, r4, r5
 8018f54:	428b      	cmp	r3, r1
 8018f56:	bf01      	itttt	eq
 8018f58:	6819      	ldreq	r1, [r3, #0]
 8018f5a:	685b      	ldreq	r3, [r3, #4]
 8018f5c:	1949      	addeq	r1, r1, r5
 8018f5e:	6021      	streq	r1, [r4, #0]
 8018f60:	e7ed      	b.n	8018f3e <_free_r+0x22>
 8018f62:	461a      	mov	r2, r3
 8018f64:	685b      	ldr	r3, [r3, #4]
 8018f66:	b10b      	cbz	r3, 8018f6c <_free_r+0x50>
 8018f68:	42a3      	cmp	r3, r4
 8018f6a:	d9fa      	bls.n	8018f62 <_free_r+0x46>
 8018f6c:	6811      	ldr	r1, [r2, #0]
 8018f6e:	1855      	adds	r5, r2, r1
 8018f70:	42a5      	cmp	r5, r4
 8018f72:	d10b      	bne.n	8018f8c <_free_r+0x70>
 8018f74:	6824      	ldr	r4, [r4, #0]
 8018f76:	4421      	add	r1, r4
 8018f78:	1854      	adds	r4, r2, r1
 8018f7a:	42a3      	cmp	r3, r4
 8018f7c:	6011      	str	r1, [r2, #0]
 8018f7e:	d1e0      	bne.n	8018f42 <_free_r+0x26>
 8018f80:	681c      	ldr	r4, [r3, #0]
 8018f82:	685b      	ldr	r3, [r3, #4]
 8018f84:	6053      	str	r3, [r2, #4]
 8018f86:	4421      	add	r1, r4
 8018f88:	6011      	str	r1, [r2, #0]
 8018f8a:	e7da      	b.n	8018f42 <_free_r+0x26>
 8018f8c:	d902      	bls.n	8018f94 <_free_r+0x78>
 8018f8e:	230c      	movs	r3, #12
 8018f90:	6003      	str	r3, [r0, #0]
 8018f92:	e7d6      	b.n	8018f42 <_free_r+0x26>
 8018f94:	6825      	ldr	r5, [r4, #0]
 8018f96:	1961      	adds	r1, r4, r5
 8018f98:	428b      	cmp	r3, r1
 8018f9a:	bf04      	itt	eq
 8018f9c:	6819      	ldreq	r1, [r3, #0]
 8018f9e:	685b      	ldreq	r3, [r3, #4]
 8018fa0:	6063      	str	r3, [r4, #4]
 8018fa2:	bf04      	itt	eq
 8018fa4:	1949      	addeq	r1, r1, r5
 8018fa6:	6021      	streq	r1, [r4, #0]
 8018fa8:	6054      	str	r4, [r2, #4]
 8018faa:	e7ca      	b.n	8018f42 <_free_r+0x26>
 8018fac:	b003      	add	sp, #12
 8018fae:	bd30      	pop	{r4, r5, pc}
 8018fb0:	20003030 	.word	0x20003030

08018fb4 <sbrk_aligned>:
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	4e0e      	ldr	r6, [pc, #56]	; (8018ff0 <sbrk_aligned+0x3c>)
 8018fb8:	460c      	mov	r4, r1
 8018fba:	6831      	ldr	r1, [r6, #0]
 8018fbc:	4605      	mov	r5, r0
 8018fbe:	b911      	cbnz	r1, 8018fc6 <sbrk_aligned+0x12>
 8018fc0:	f000 fd0e 	bl	80199e0 <_sbrk_r>
 8018fc4:	6030      	str	r0, [r6, #0]
 8018fc6:	4621      	mov	r1, r4
 8018fc8:	4628      	mov	r0, r5
 8018fca:	f000 fd09 	bl	80199e0 <_sbrk_r>
 8018fce:	1c43      	adds	r3, r0, #1
 8018fd0:	d00a      	beq.n	8018fe8 <sbrk_aligned+0x34>
 8018fd2:	1cc4      	adds	r4, r0, #3
 8018fd4:	f024 0403 	bic.w	r4, r4, #3
 8018fd8:	42a0      	cmp	r0, r4
 8018fda:	d007      	beq.n	8018fec <sbrk_aligned+0x38>
 8018fdc:	1a21      	subs	r1, r4, r0
 8018fde:	4628      	mov	r0, r5
 8018fe0:	f000 fcfe 	bl	80199e0 <_sbrk_r>
 8018fe4:	3001      	adds	r0, #1
 8018fe6:	d101      	bne.n	8018fec <sbrk_aligned+0x38>
 8018fe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018fec:	4620      	mov	r0, r4
 8018fee:	bd70      	pop	{r4, r5, r6, pc}
 8018ff0:	20003034 	.word	0x20003034

08018ff4 <_malloc_r>:
 8018ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	1ccd      	adds	r5, r1, #3
 8018ffa:	f025 0503 	bic.w	r5, r5, #3
 8018ffe:	3508      	adds	r5, #8
 8019000:	2d0c      	cmp	r5, #12
 8019002:	bf38      	it	cc
 8019004:	250c      	movcc	r5, #12
 8019006:	2d00      	cmp	r5, #0
 8019008:	4607      	mov	r7, r0
 801900a:	db01      	blt.n	8019010 <_malloc_r+0x1c>
 801900c:	42a9      	cmp	r1, r5
 801900e:	d905      	bls.n	801901c <_malloc_r+0x28>
 8019010:	230c      	movs	r3, #12
 8019012:	603b      	str	r3, [r7, #0]
 8019014:	2600      	movs	r6, #0
 8019016:	4630      	mov	r0, r6
 8019018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801901c:	4e2e      	ldr	r6, [pc, #184]	; (80190d8 <_malloc_r+0xe4>)
 801901e:	f001 fccb 	bl	801a9b8 <__malloc_lock>
 8019022:	6833      	ldr	r3, [r6, #0]
 8019024:	461c      	mov	r4, r3
 8019026:	bb34      	cbnz	r4, 8019076 <_malloc_r+0x82>
 8019028:	4629      	mov	r1, r5
 801902a:	4638      	mov	r0, r7
 801902c:	f7ff ffc2 	bl	8018fb4 <sbrk_aligned>
 8019030:	1c43      	adds	r3, r0, #1
 8019032:	4604      	mov	r4, r0
 8019034:	d14d      	bne.n	80190d2 <_malloc_r+0xde>
 8019036:	6834      	ldr	r4, [r6, #0]
 8019038:	4626      	mov	r6, r4
 801903a:	2e00      	cmp	r6, #0
 801903c:	d140      	bne.n	80190c0 <_malloc_r+0xcc>
 801903e:	6823      	ldr	r3, [r4, #0]
 8019040:	4631      	mov	r1, r6
 8019042:	4638      	mov	r0, r7
 8019044:	eb04 0803 	add.w	r8, r4, r3
 8019048:	f000 fcca 	bl	80199e0 <_sbrk_r>
 801904c:	4580      	cmp	r8, r0
 801904e:	d13a      	bne.n	80190c6 <_malloc_r+0xd2>
 8019050:	6821      	ldr	r1, [r4, #0]
 8019052:	3503      	adds	r5, #3
 8019054:	1a6d      	subs	r5, r5, r1
 8019056:	f025 0503 	bic.w	r5, r5, #3
 801905a:	3508      	adds	r5, #8
 801905c:	2d0c      	cmp	r5, #12
 801905e:	bf38      	it	cc
 8019060:	250c      	movcc	r5, #12
 8019062:	4629      	mov	r1, r5
 8019064:	4638      	mov	r0, r7
 8019066:	f7ff ffa5 	bl	8018fb4 <sbrk_aligned>
 801906a:	3001      	adds	r0, #1
 801906c:	d02b      	beq.n	80190c6 <_malloc_r+0xd2>
 801906e:	6823      	ldr	r3, [r4, #0]
 8019070:	442b      	add	r3, r5
 8019072:	6023      	str	r3, [r4, #0]
 8019074:	e00e      	b.n	8019094 <_malloc_r+0xa0>
 8019076:	6822      	ldr	r2, [r4, #0]
 8019078:	1b52      	subs	r2, r2, r5
 801907a:	d41e      	bmi.n	80190ba <_malloc_r+0xc6>
 801907c:	2a0b      	cmp	r2, #11
 801907e:	d916      	bls.n	80190ae <_malloc_r+0xba>
 8019080:	1961      	adds	r1, r4, r5
 8019082:	42a3      	cmp	r3, r4
 8019084:	6025      	str	r5, [r4, #0]
 8019086:	bf18      	it	ne
 8019088:	6059      	strne	r1, [r3, #4]
 801908a:	6863      	ldr	r3, [r4, #4]
 801908c:	bf08      	it	eq
 801908e:	6031      	streq	r1, [r6, #0]
 8019090:	5162      	str	r2, [r4, r5]
 8019092:	604b      	str	r3, [r1, #4]
 8019094:	4638      	mov	r0, r7
 8019096:	f104 060b 	add.w	r6, r4, #11
 801909a:	f001 fc93 	bl	801a9c4 <__malloc_unlock>
 801909e:	f026 0607 	bic.w	r6, r6, #7
 80190a2:	1d23      	adds	r3, r4, #4
 80190a4:	1af2      	subs	r2, r6, r3
 80190a6:	d0b6      	beq.n	8019016 <_malloc_r+0x22>
 80190a8:	1b9b      	subs	r3, r3, r6
 80190aa:	50a3      	str	r3, [r4, r2]
 80190ac:	e7b3      	b.n	8019016 <_malloc_r+0x22>
 80190ae:	6862      	ldr	r2, [r4, #4]
 80190b0:	42a3      	cmp	r3, r4
 80190b2:	bf0c      	ite	eq
 80190b4:	6032      	streq	r2, [r6, #0]
 80190b6:	605a      	strne	r2, [r3, #4]
 80190b8:	e7ec      	b.n	8019094 <_malloc_r+0xa0>
 80190ba:	4623      	mov	r3, r4
 80190bc:	6864      	ldr	r4, [r4, #4]
 80190be:	e7b2      	b.n	8019026 <_malloc_r+0x32>
 80190c0:	4634      	mov	r4, r6
 80190c2:	6876      	ldr	r6, [r6, #4]
 80190c4:	e7b9      	b.n	801903a <_malloc_r+0x46>
 80190c6:	230c      	movs	r3, #12
 80190c8:	603b      	str	r3, [r7, #0]
 80190ca:	4638      	mov	r0, r7
 80190cc:	f001 fc7a 	bl	801a9c4 <__malloc_unlock>
 80190d0:	e7a1      	b.n	8019016 <_malloc_r+0x22>
 80190d2:	6025      	str	r5, [r4, #0]
 80190d4:	e7de      	b.n	8019094 <_malloc_r+0xa0>
 80190d6:	bf00      	nop
 80190d8:	20003030 	.word	0x20003030

080190dc <__cvt>:
 80190dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190e0:	ec55 4b10 	vmov	r4, r5, d0
 80190e4:	2d00      	cmp	r5, #0
 80190e6:	460e      	mov	r6, r1
 80190e8:	4619      	mov	r1, r3
 80190ea:	462b      	mov	r3, r5
 80190ec:	bfbb      	ittet	lt
 80190ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80190f2:	461d      	movlt	r5, r3
 80190f4:	2300      	movge	r3, #0
 80190f6:	232d      	movlt	r3, #45	; 0x2d
 80190f8:	700b      	strb	r3, [r1, #0]
 80190fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019100:	4691      	mov	r9, r2
 8019102:	f023 0820 	bic.w	r8, r3, #32
 8019106:	bfbc      	itt	lt
 8019108:	4622      	movlt	r2, r4
 801910a:	4614      	movlt	r4, r2
 801910c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019110:	d005      	beq.n	801911e <__cvt+0x42>
 8019112:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019116:	d100      	bne.n	801911a <__cvt+0x3e>
 8019118:	3601      	adds	r6, #1
 801911a:	2102      	movs	r1, #2
 801911c:	e000      	b.n	8019120 <__cvt+0x44>
 801911e:	2103      	movs	r1, #3
 8019120:	ab03      	add	r3, sp, #12
 8019122:	9301      	str	r3, [sp, #4]
 8019124:	ab02      	add	r3, sp, #8
 8019126:	9300      	str	r3, [sp, #0]
 8019128:	ec45 4b10 	vmov	d0, r4, r5
 801912c:	4653      	mov	r3, sl
 801912e:	4632      	mov	r2, r6
 8019130:	f000 fd32 	bl	8019b98 <_dtoa_r>
 8019134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019138:	4607      	mov	r7, r0
 801913a:	d102      	bne.n	8019142 <__cvt+0x66>
 801913c:	f019 0f01 	tst.w	r9, #1
 8019140:	d022      	beq.n	8019188 <__cvt+0xac>
 8019142:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019146:	eb07 0906 	add.w	r9, r7, r6
 801914a:	d110      	bne.n	801916e <__cvt+0x92>
 801914c:	783b      	ldrb	r3, [r7, #0]
 801914e:	2b30      	cmp	r3, #48	; 0x30
 8019150:	d10a      	bne.n	8019168 <__cvt+0x8c>
 8019152:	2200      	movs	r2, #0
 8019154:	2300      	movs	r3, #0
 8019156:	4620      	mov	r0, r4
 8019158:	4629      	mov	r1, r5
 801915a:	f7e7 fccd 	bl	8000af8 <__aeabi_dcmpeq>
 801915e:	b918      	cbnz	r0, 8019168 <__cvt+0x8c>
 8019160:	f1c6 0601 	rsb	r6, r6, #1
 8019164:	f8ca 6000 	str.w	r6, [sl]
 8019168:	f8da 3000 	ldr.w	r3, [sl]
 801916c:	4499      	add	r9, r3
 801916e:	2200      	movs	r2, #0
 8019170:	2300      	movs	r3, #0
 8019172:	4620      	mov	r0, r4
 8019174:	4629      	mov	r1, r5
 8019176:	f7e7 fcbf 	bl	8000af8 <__aeabi_dcmpeq>
 801917a:	b108      	cbz	r0, 8019180 <__cvt+0xa4>
 801917c:	f8cd 900c 	str.w	r9, [sp, #12]
 8019180:	2230      	movs	r2, #48	; 0x30
 8019182:	9b03      	ldr	r3, [sp, #12]
 8019184:	454b      	cmp	r3, r9
 8019186:	d307      	bcc.n	8019198 <__cvt+0xbc>
 8019188:	9b03      	ldr	r3, [sp, #12]
 801918a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801918c:	1bdb      	subs	r3, r3, r7
 801918e:	4638      	mov	r0, r7
 8019190:	6013      	str	r3, [r2, #0]
 8019192:	b004      	add	sp, #16
 8019194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019198:	1c59      	adds	r1, r3, #1
 801919a:	9103      	str	r1, [sp, #12]
 801919c:	701a      	strb	r2, [r3, #0]
 801919e:	e7f0      	b.n	8019182 <__cvt+0xa6>

080191a0 <__exponent>:
 80191a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191a2:	4603      	mov	r3, r0
 80191a4:	2900      	cmp	r1, #0
 80191a6:	bfb8      	it	lt
 80191a8:	4249      	neglt	r1, r1
 80191aa:	f803 2b02 	strb.w	r2, [r3], #2
 80191ae:	bfb4      	ite	lt
 80191b0:	222d      	movlt	r2, #45	; 0x2d
 80191b2:	222b      	movge	r2, #43	; 0x2b
 80191b4:	2909      	cmp	r1, #9
 80191b6:	7042      	strb	r2, [r0, #1]
 80191b8:	dd2a      	ble.n	8019210 <__exponent+0x70>
 80191ba:	f10d 0407 	add.w	r4, sp, #7
 80191be:	46a4      	mov	ip, r4
 80191c0:	270a      	movs	r7, #10
 80191c2:	46a6      	mov	lr, r4
 80191c4:	460a      	mov	r2, r1
 80191c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80191ca:	fb07 1516 	mls	r5, r7, r6, r1
 80191ce:	3530      	adds	r5, #48	; 0x30
 80191d0:	2a63      	cmp	r2, #99	; 0x63
 80191d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80191d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80191da:	4631      	mov	r1, r6
 80191dc:	dcf1      	bgt.n	80191c2 <__exponent+0x22>
 80191de:	3130      	adds	r1, #48	; 0x30
 80191e0:	f1ae 0502 	sub.w	r5, lr, #2
 80191e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80191e8:	1c44      	adds	r4, r0, #1
 80191ea:	4629      	mov	r1, r5
 80191ec:	4561      	cmp	r1, ip
 80191ee:	d30a      	bcc.n	8019206 <__exponent+0x66>
 80191f0:	f10d 0209 	add.w	r2, sp, #9
 80191f4:	eba2 020e 	sub.w	r2, r2, lr
 80191f8:	4565      	cmp	r5, ip
 80191fa:	bf88      	it	hi
 80191fc:	2200      	movhi	r2, #0
 80191fe:	4413      	add	r3, r2
 8019200:	1a18      	subs	r0, r3, r0
 8019202:	b003      	add	sp, #12
 8019204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019206:	f811 2b01 	ldrb.w	r2, [r1], #1
 801920a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801920e:	e7ed      	b.n	80191ec <__exponent+0x4c>
 8019210:	2330      	movs	r3, #48	; 0x30
 8019212:	3130      	adds	r1, #48	; 0x30
 8019214:	7083      	strb	r3, [r0, #2]
 8019216:	70c1      	strb	r1, [r0, #3]
 8019218:	1d03      	adds	r3, r0, #4
 801921a:	e7f1      	b.n	8019200 <__exponent+0x60>

0801921c <_printf_float>:
 801921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019220:	ed2d 8b02 	vpush	{d8}
 8019224:	b08d      	sub	sp, #52	; 0x34
 8019226:	460c      	mov	r4, r1
 8019228:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801922c:	4616      	mov	r6, r2
 801922e:	461f      	mov	r7, r3
 8019230:	4605      	mov	r5, r0
 8019232:	f001 fba7 	bl	801a984 <_localeconv_r>
 8019236:	f8d0 a000 	ldr.w	sl, [r0]
 801923a:	4650      	mov	r0, sl
 801923c:	f7e6 ffe0 	bl	8000200 <strlen>
 8019240:	2300      	movs	r3, #0
 8019242:	930a      	str	r3, [sp, #40]	; 0x28
 8019244:	6823      	ldr	r3, [r4, #0]
 8019246:	9305      	str	r3, [sp, #20]
 8019248:	f8d8 3000 	ldr.w	r3, [r8]
 801924c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019250:	3307      	adds	r3, #7
 8019252:	f023 0307 	bic.w	r3, r3, #7
 8019256:	f103 0208 	add.w	r2, r3, #8
 801925a:	f8c8 2000 	str.w	r2, [r8]
 801925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019262:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019266:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801926a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801926e:	9307      	str	r3, [sp, #28]
 8019270:	f8cd 8018 	str.w	r8, [sp, #24]
 8019274:	ee08 0a10 	vmov	s16, r0
 8019278:	4b9f      	ldr	r3, [pc, #636]	; (80194f8 <_printf_float+0x2dc>)
 801927a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801927e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019282:	f7e7 fc6b 	bl	8000b5c <__aeabi_dcmpun>
 8019286:	bb88      	cbnz	r0, 80192ec <_printf_float+0xd0>
 8019288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801928c:	4b9a      	ldr	r3, [pc, #616]	; (80194f8 <_printf_float+0x2dc>)
 801928e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019292:	f7e7 fc45 	bl	8000b20 <__aeabi_dcmple>
 8019296:	bb48      	cbnz	r0, 80192ec <_printf_float+0xd0>
 8019298:	2200      	movs	r2, #0
 801929a:	2300      	movs	r3, #0
 801929c:	4640      	mov	r0, r8
 801929e:	4649      	mov	r1, r9
 80192a0:	f7e7 fc34 	bl	8000b0c <__aeabi_dcmplt>
 80192a4:	b110      	cbz	r0, 80192ac <_printf_float+0x90>
 80192a6:	232d      	movs	r3, #45	; 0x2d
 80192a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80192ac:	4b93      	ldr	r3, [pc, #588]	; (80194fc <_printf_float+0x2e0>)
 80192ae:	4894      	ldr	r0, [pc, #592]	; (8019500 <_printf_float+0x2e4>)
 80192b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80192b4:	bf94      	ite	ls
 80192b6:	4698      	movls	r8, r3
 80192b8:	4680      	movhi	r8, r0
 80192ba:	2303      	movs	r3, #3
 80192bc:	6123      	str	r3, [r4, #16]
 80192be:	9b05      	ldr	r3, [sp, #20]
 80192c0:	f023 0204 	bic.w	r2, r3, #4
 80192c4:	6022      	str	r2, [r4, #0]
 80192c6:	f04f 0900 	mov.w	r9, #0
 80192ca:	9700      	str	r7, [sp, #0]
 80192cc:	4633      	mov	r3, r6
 80192ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80192d0:	4621      	mov	r1, r4
 80192d2:	4628      	mov	r0, r5
 80192d4:	f000 f9d8 	bl	8019688 <_printf_common>
 80192d8:	3001      	adds	r0, #1
 80192da:	f040 8090 	bne.w	80193fe <_printf_float+0x1e2>
 80192de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192e2:	b00d      	add	sp, #52	; 0x34
 80192e4:	ecbd 8b02 	vpop	{d8}
 80192e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ec:	4642      	mov	r2, r8
 80192ee:	464b      	mov	r3, r9
 80192f0:	4640      	mov	r0, r8
 80192f2:	4649      	mov	r1, r9
 80192f4:	f7e7 fc32 	bl	8000b5c <__aeabi_dcmpun>
 80192f8:	b140      	cbz	r0, 801930c <_printf_float+0xf0>
 80192fa:	464b      	mov	r3, r9
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	bfbc      	itt	lt
 8019300:	232d      	movlt	r3, #45	; 0x2d
 8019302:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019306:	487f      	ldr	r0, [pc, #508]	; (8019504 <_printf_float+0x2e8>)
 8019308:	4b7f      	ldr	r3, [pc, #508]	; (8019508 <_printf_float+0x2ec>)
 801930a:	e7d1      	b.n	80192b0 <_printf_float+0x94>
 801930c:	6863      	ldr	r3, [r4, #4]
 801930e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019312:	9206      	str	r2, [sp, #24]
 8019314:	1c5a      	adds	r2, r3, #1
 8019316:	d13f      	bne.n	8019398 <_printf_float+0x17c>
 8019318:	2306      	movs	r3, #6
 801931a:	6063      	str	r3, [r4, #4]
 801931c:	9b05      	ldr	r3, [sp, #20]
 801931e:	6861      	ldr	r1, [r4, #4]
 8019320:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019324:	2300      	movs	r3, #0
 8019326:	9303      	str	r3, [sp, #12]
 8019328:	ab0a      	add	r3, sp, #40	; 0x28
 801932a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801932e:	ab09      	add	r3, sp, #36	; 0x24
 8019330:	ec49 8b10 	vmov	d0, r8, r9
 8019334:	9300      	str	r3, [sp, #0]
 8019336:	6022      	str	r2, [r4, #0]
 8019338:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801933c:	4628      	mov	r0, r5
 801933e:	f7ff fecd 	bl	80190dc <__cvt>
 8019342:	9b06      	ldr	r3, [sp, #24]
 8019344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019346:	2b47      	cmp	r3, #71	; 0x47
 8019348:	4680      	mov	r8, r0
 801934a:	d108      	bne.n	801935e <_printf_float+0x142>
 801934c:	1cc8      	adds	r0, r1, #3
 801934e:	db02      	blt.n	8019356 <_printf_float+0x13a>
 8019350:	6863      	ldr	r3, [r4, #4]
 8019352:	4299      	cmp	r1, r3
 8019354:	dd41      	ble.n	80193da <_printf_float+0x1be>
 8019356:	f1ab 0b02 	sub.w	fp, fp, #2
 801935a:	fa5f fb8b 	uxtb.w	fp, fp
 801935e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019362:	d820      	bhi.n	80193a6 <_printf_float+0x18a>
 8019364:	3901      	subs	r1, #1
 8019366:	465a      	mov	r2, fp
 8019368:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801936c:	9109      	str	r1, [sp, #36]	; 0x24
 801936e:	f7ff ff17 	bl	80191a0 <__exponent>
 8019372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019374:	1813      	adds	r3, r2, r0
 8019376:	2a01      	cmp	r2, #1
 8019378:	4681      	mov	r9, r0
 801937a:	6123      	str	r3, [r4, #16]
 801937c:	dc02      	bgt.n	8019384 <_printf_float+0x168>
 801937e:	6822      	ldr	r2, [r4, #0]
 8019380:	07d2      	lsls	r2, r2, #31
 8019382:	d501      	bpl.n	8019388 <_printf_float+0x16c>
 8019384:	3301      	adds	r3, #1
 8019386:	6123      	str	r3, [r4, #16]
 8019388:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801938c:	2b00      	cmp	r3, #0
 801938e:	d09c      	beq.n	80192ca <_printf_float+0xae>
 8019390:	232d      	movs	r3, #45	; 0x2d
 8019392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019396:	e798      	b.n	80192ca <_printf_float+0xae>
 8019398:	9a06      	ldr	r2, [sp, #24]
 801939a:	2a47      	cmp	r2, #71	; 0x47
 801939c:	d1be      	bne.n	801931c <_printf_float+0x100>
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d1bc      	bne.n	801931c <_printf_float+0x100>
 80193a2:	2301      	movs	r3, #1
 80193a4:	e7b9      	b.n	801931a <_printf_float+0xfe>
 80193a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80193aa:	d118      	bne.n	80193de <_printf_float+0x1c2>
 80193ac:	2900      	cmp	r1, #0
 80193ae:	6863      	ldr	r3, [r4, #4]
 80193b0:	dd0b      	ble.n	80193ca <_printf_float+0x1ae>
 80193b2:	6121      	str	r1, [r4, #16]
 80193b4:	b913      	cbnz	r3, 80193bc <_printf_float+0x1a0>
 80193b6:	6822      	ldr	r2, [r4, #0]
 80193b8:	07d0      	lsls	r0, r2, #31
 80193ba:	d502      	bpl.n	80193c2 <_printf_float+0x1a6>
 80193bc:	3301      	adds	r3, #1
 80193be:	440b      	add	r3, r1
 80193c0:	6123      	str	r3, [r4, #16]
 80193c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80193c4:	f04f 0900 	mov.w	r9, #0
 80193c8:	e7de      	b.n	8019388 <_printf_float+0x16c>
 80193ca:	b913      	cbnz	r3, 80193d2 <_printf_float+0x1b6>
 80193cc:	6822      	ldr	r2, [r4, #0]
 80193ce:	07d2      	lsls	r2, r2, #31
 80193d0:	d501      	bpl.n	80193d6 <_printf_float+0x1ba>
 80193d2:	3302      	adds	r3, #2
 80193d4:	e7f4      	b.n	80193c0 <_printf_float+0x1a4>
 80193d6:	2301      	movs	r3, #1
 80193d8:	e7f2      	b.n	80193c0 <_printf_float+0x1a4>
 80193da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80193de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193e0:	4299      	cmp	r1, r3
 80193e2:	db05      	blt.n	80193f0 <_printf_float+0x1d4>
 80193e4:	6823      	ldr	r3, [r4, #0]
 80193e6:	6121      	str	r1, [r4, #16]
 80193e8:	07d8      	lsls	r0, r3, #31
 80193ea:	d5ea      	bpl.n	80193c2 <_printf_float+0x1a6>
 80193ec:	1c4b      	adds	r3, r1, #1
 80193ee:	e7e7      	b.n	80193c0 <_printf_float+0x1a4>
 80193f0:	2900      	cmp	r1, #0
 80193f2:	bfd4      	ite	le
 80193f4:	f1c1 0202 	rsble	r2, r1, #2
 80193f8:	2201      	movgt	r2, #1
 80193fa:	4413      	add	r3, r2
 80193fc:	e7e0      	b.n	80193c0 <_printf_float+0x1a4>
 80193fe:	6823      	ldr	r3, [r4, #0]
 8019400:	055a      	lsls	r2, r3, #21
 8019402:	d407      	bmi.n	8019414 <_printf_float+0x1f8>
 8019404:	6923      	ldr	r3, [r4, #16]
 8019406:	4642      	mov	r2, r8
 8019408:	4631      	mov	r1, r6
 801940a:	4628      	mov	r0, r5
 801940c:	47b8      	blx	r7
 801940e:	3001      	adds	r0, #1
 8019410:	d12c      	bne.n	801946c <_printf_float+0x250>
 8019412:	e764      	b.n	80192de <_printf_float+0xc2>
 8019414:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019418:	f240 80e0 	bls.w	80195dc <_printf_float+0x3c0>
 801941c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019420:	2200      	movs	r2, #0
 8019422:	2300      	movs	r3, #0
 8019424:	f7e7 fb68 	bl	8000af8 <__aeabi_dcmpeq>
 8019428:	2800      	cmp	r0, #0
 801942a:	d034      	beq.n	8019496 <_printf_float+0x27a>
 801942c:	4a37      	ldr	r2, [pc, #220]	; (801950c <_printf_float+0x2f0>)
 801942e:	2301      	movs	r3, #1
 8019430:	4631      	mov	r1, r6
 8019432:	4628      	mov	r0, r5
 8019434:	47b8      	blx	r7
 8019436:	3001      	adds	r0, #1
 8019438:	f43f af51 	beq.w	80192de <_printf_float+0xc2>
 801943c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019440:	429a      	cmp	r2, r3
 8019442:	db02      	blt.n	801944a <_printf_float+0x22e>
 8019444:	6823      	ldr	r3, [r4, #0]
 8019446:	07d8      	lsls	r0, r3, #31
 8019448:	d510      	bpl.n	801946c <_printf_float+0x250>
 801944a:	ee18 3a10 	vmov	r3, s16
 801944e:	4652      	mov	r2, sl
 8019450:	4631      	mov	r1, r6
 8019452:	4628      	mov	r0, r5
 8019454:	47b8      	blx	r7
 8019456:	3001      	adds	r0, #1
 8019458:	f43f af41 	beq.w	80192de <_printf_float+0xc2>
 801945c:	f04f 0800 	mov.w	r8, #0
 8019460:	f104 091a 	add.w	r9, r4, #26
 8019464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019466:	3b01      	subs	r3, #1
 8019468:	4543      	cmp	r3, r8
 801946a:	dc09      	bgt.n	8019480 <_printf_float+0x264>
 801946c:	6823      	ldr	r3, [r4, #0]
 801946e:	079b      	lsls	r3, r3, #30
 8019470:	f100 8105 	bmi.w	801967e <_printf_float+0x462>
 8019474:	68e0      	ldr	r0, [r4, #12]
 8019476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019478:	4298      	cmp	r0, r3
 801947a:	bfb8      	it	lt
 801947c:	4618      	movlt	r0, r3
 801947e:	e730      	b.n	80192e2 <_printf_float+0xc6>
 8019480:	2301      	movs	r3, #1
 8019482:	464a      	mov	r2, r9
 8019484:	4631      	mov	r1, r6
 8019486:	4628      	mov	r0, r5
 8019488:	47b8      	blx	r7
 801948a:	3001      	adds	r0, #1
 801948c:	f43f af27 	beq.w	80192de <_printf_float+0xc2>
 8019490:	f108 0801 	add.w	r8, r8, #1
 8019494:	e7e6      	b.n	8019464 <_printf_float+0x248>
 8019496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019498:	2b00      	cmp	r3, #0
 801949a:	dc39      	bgt.n	8019510 <_printf_float+0x2f4>
 801949c:	4a1b      	ldr	r2, [pc, #108]	; (801950c <_printf_float+0x2f0>)
 801949e:	2301      	movs	r3, #1
 80194a0:	4631      	mov	r1, r6
 80194a2:	4628      	mov	r0, r5
 80194a4:	47b8      	blx	r7
 80194a6:	3001      	adds	r0, #1
 80194a8:	f43f af19 	beq.w	80192de <_printf_float+0xc2>
 80194ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80194b0:	4313      	orrs	r3, r2
 80194b2:	d102      	bne.n	80194ba <_printf_float+0x29e>
 80194b4:	6823      	ldr	r3, [r4, #0]
 80194b6:	07d9      	lsls	r1, r3, #31
 80194b8:	d5d8      	bpl.n	801946c <_printf_float+0x250>
 80194ba:	ee18 3a10 	vmov	r3, s16
 80194be:	4652      	mov	r2, sl
 80194c0:	4631      	mov	r1, r6
 80194c2:	4628      	mov	r0, r5
 80194c4:	47b8      	blx	r7
 80194c6:	3001      	adds	r0, #1
 80194c8:	f43f af09 	beq.w	80192de <_printf_float+0xc2>
 80194cc:	f04f 0900 	mov.w	r9, #0
 80194d0:	f104 0a1a 	add.w	sl, r4, #26
 80194d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194d6:	425b      	negs	r3, r3
 80194d8:	454b      	cmp	r3, r9
 80194da:	dc01      	bgt.n	80194e0 <_printf_float+0x2c4>
 80194dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80194de:	e792      	b.n	8019406 <_printf_float+0x1ea>
 80194e0:	2301      	movs	r3, #1
 80194e2:	4652      	mov	r2, sl
 80194e4:	4631      	mov	r1, r6
 80194e6:	4628      	mov	r0, r5
 80194e8:	47b8      	blx	r7
 80194ea:	3001      	adds	r0, #1
 80194ec:	f43f aef7 	beq.w	80192de <_printf_float+0xc2>
 80194f0:	f109 0901 	add.w	r9, r9, #1
 80194f4:	e7ee      	b.n	80194d4 <_printf_float+0x2b8>
 80194f6:	bf00      	nop
 80194f8:	7fefffff 	.word	0x7fefffff
 80194fc:	0801c2a8 	.word	0x0801c2a8
 8019500:	0801c2ac 	.word	0x0801c2ac
 8019504:	0801c2b4 	.word	0x0801c2b4
 8019508:	0801c2b0 	.word	0x0801c2b0
 801950c:	0801c2b8 	.word	0x0801c2b8
 8019510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019512:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019514:	429a      	cmp	r2, r3
 8019516:	bfa8      	it	ge
 8019518:	461a      	movge	r2, r3
 801951a:	2a00      	cmp	r2, #0
 801951c:	4691      	mov	r9, r2
 801951e:	dc37      	bgt.n	8019590 <_printf_float+0x374>
 8019520:	f04f 0b00 	mov.w	fp, #0
 8019524:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019528:	f104 021a 	add.w	r2, r4, #26
 801952c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801952e:	9305      	str	r3, [sp, #20]
 8019530:	eba3 0309 	sub.w	r3, r3, r9
 8019534:	455b      	cmp	r3, fp
 8019536:	dc33      	bgt.n	80195a0 <_printf_float+0x384>
 8019538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801953c:	429a      	cmp	r2, r3
 801953e:	db3b      	blt.n	80195b8 <_printf_float+0x39c>
 8019540:	6823      	ldr	r3, [r4, #0]
 8019542:	07da      	lsls	r2, r3, #31
 8019544:	d438      	bmi.n	80195b8 <_printf_float+0x39c>
 8019546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019548:	9a05      	ldr	r2, [sp, #20]
 801954a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801954c:	1a9a      	subs	r2, r3, r2
 801954e:	eba3 0901 	sub.w	r9, r3, r1
 8019552:	4591      	cmp	r9, r2
 8019554:	bfa8      	it	ge
 8019556:	4691      	movge	r9, r2
 8019558:	f1b9 0f00 	cmp.w	r9, #0
 801955c:	dc35      	bgt.n	80195ca <_printf_float+0x3ae>
 801955e:	f04f 0800 	mov.w	r8, #0
 8019562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019566:	f104 0a1a 	add.w	sl, r4, #26
 801956a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801956e:	1a9b      	subs	r3, r3, r2
 8019570:	eba3 0309 	sub.w	r3, r3, r9
 8019574:	4543      	cmp	r3, r8
 8019576:	f77f af79 	ble.w	801946c <_printf_float+0x250>
 801957a:	2301      	movs	r3, #1
 801957c:	4652      	mov	r2, sl
 801957e:	4631      	mov	r1, r6
 8019580:	4628      	mov	r0, r5
 8019582:	47b8      	blx	r7
 8019584:	3001      	adds	r0, #1
 8019586:	f43f aeaa 	beq.w	80192de <_printf_float+0xc2>
 801958a:	f108 0801 	add.w	r8, r8, #1
 801958e:	e7ec      	b.n	801956a <_printf_float+0x34e>
 8019590:	4613      	mov	r3, r2
 8019592:	4631      	mov	r1, r6
 8019594:	4642      	mov	r2, r8
 8019596:	4628      	mov	r0, r5
 8019598:	47b8      	blx	r7
 801959a:	3001      	adds	r0, #1
 801959c:	d1c0      	bne.n	8019520 <_printf_float+0x304>
 801959e:	e69e      	b.n	80192de <_printf_float+0xc2>
 80195a0:	2301      	movs	r3, #1
 80195a2:	4631      	mov	r1, r6
 80195a4:	4628      	mov	r0, r5
 80195a6:	9205      	str	r2, [sp, #20]
 80195a8:	47b8      	blx	r7
 80195aa:	3001      	adds	r0, #1
 80195ac:	f43f ae97 	beq.w	80192de <_printf_float+0xc2>
 80195b0:	9a05      	ldr	r2, [sp, #20]
 80195b2:	f10b 0b01 	add.w	fp, fp, #1
 80195b6:	e7b9      	b.n	801952c <_printf_float+0x310>
 80195b8:	ee18 3a10 	vmov	r3, s16
 80195bc:	4652      	mov	r2, sl
 80195be:	4631      	mov	r1, r6
 80195c0:	4628      	mov	r0, r5
 80195c2:	47b8      	blx	r7
 80195c4:	3001      	adds	r0, #1
 80195c6:	d1be      	bne.n	8019546 <_printf_float+0x32a>
 80195c8:	e689      	b.n	80192de <_printf_float+0xc2>
 80195ca:	9a05      	ldr	r2, [sp, #20]
 80195cc:	464b      	mov	r3, r9
 80195ce:	4442      	add	r2, r8
 80195d0:	4631      	mov	r1, r6
 80195d2:	4628      	mov	r0, r5
 80195d4:	47b8      	blx	r7
 80195d6:	3001      	adds	r0, #1
 80195d8:	d1c1      	bne.n	801955e <_printf_float+0x342>
 80195da:	e680      	b.n	80192de <_printf_float+0xc2>
 80195dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195de:	2a01      	cmp	r2, #1
 80195e0:	dc01      	bgt.n	80195e6 <_printf_float+0x3ca>
 80195e2:	07db      	lsls	r3, r3, #31
 80195e4:	d538      	bpl.n	8019658 <_printf_float+0x43c>
 80195e6:	2301      	movs	r3, #1
 80195e8:	4642      	mov	r2, r8
 80195ea:	4631      	mov	r1, r6
 80195ec:	4628      	mov	r0, r5
 80195ee:	47b8      	blx	r7
 80195f0:	3001      	adds	r0, #1
 80195f2:	f43f ae74 	beq.w	80192de <_printf_float+0xc2>
 80195f6:	ee18 3a10 	vmov	r3, s16
 80195fa:	4652      	mov	r2, sl
 80195fc:	4631      	mov	r1, r6
 80195fe:	4628      	mov	r0, r5
 8019600:	47b8      	blx	r7
 8019602:	3001      	adds	r0, #1
 8019604:	f43f ae6b 	beq.w	80192de <_printf_float+0xc2>
 8019608:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801960c:	2200      	movs	r2, #0
 801960e:	2300      	movs	r3, #0
 8019610:	f7e7 fa72 	bl	8000af8 <__aeabi_dcmpeq>
 8019614:	b9d8      	cbnz	r0, 801964e <_printf_float+0x432>
 8019616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019618:	f108 0201 	add.w	r2, r8, #1
 801961c:	3b01      	subs	r3, #1
 801961e:	4631      	mov	r1, r6
 8019620:	4628      	mov	r0, r5
 8019622:	47b8      	blx	r7
 8019624:	3001      	adds	r0, #1
 8019626:	d10e      	bne.n	8019646 <_printf_float+0x42a>
 8019628:	e659      	b.n	80192de <_printf_float+0xc2>
 801962a:	2301      	movs	r3, #1
 801962c:	4652      	mov	r2, sl
 801962e:	4631      	mov	r1, r6
 8019630:	4628      	mov	r0, r5
 8019632:	47b8      	blx	r7
 8019634:	3001      	adds	r0, #1
 8019636:	f43f ae52 	beq.w	80192de <_printf_float+0xc2>
 801963a:	f108 0801 	add.w	r8, r8, #1
 801963e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019640:	3b01      	subs	r3, #1
 8019642:	4543      	cmp	r3, r8
 8019644:	dcf1      	bgt.n	801962a <_printf_float+0x40e>
 8019646:	464b      	mov	r3, r9
 8019648:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801964c:	e6dc      	b.n	8019408 <_printf_float+0x1ec>
 801964e:	f04f 0800 	mov.w	r8, #0
 8019652:	f104 0a1a 	add.w	sl, r4, #26
 8019656:	e7f2      	b.n	801963e <_printf_float+0x422>
 8019658:	2301      	movs	r3, #1
 801965a:	4642      	mov	r2, r8
 801965c:	e7df      	b.n	801961e <_printf_float+0x402>
 801965e:	2301      	movs	r3, #1
 8019660:	464a      	mov	r2, r9
 8019662:	4631      	mov	r1, r6
 8019664:	4628      	mov	r0, r5
 8019666:	47b8      	blx	r7
 8019668:	3001      	adds	r0, #1
 801966a:	f43f ae38 	beq.w	80192de <_printf_float+0xc2>
 801966e:	f108 0801 	add.w	r8, r8, #1
 8019672:	68e3      	ldr	r3, [r4, #12]
 8019674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019676:	1a5b      	subs	r3, r3, r1
 8019678:	4543      	cmp	r3, r8
 801967a:	dcf0      	bgt.n	801965e <_printf_float+0x442>
 801967c:	e6fa      	b.n	8019474 <_printf_float+0x258>
 801967e:	f04f 0800 	mov.w	r8, #0
 8019682:	f104 0919 	add.w	r9, r4, #25
 8019686:	e7f4      	b.n	8019672 <_printf_float+0x456>

08019688 <_printf_common>:
 8019688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801968c:	4616      	mov	r6, r2
 801968e:	4699      	mov	r9, r3
 8019690:	688a      	ldr	r2, [r1, #8]
 8019692:	690b      	ldr	r3, [r1, #16]
 8019694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019698:	4293      	cmp	r3, r2
 801969a:	bfb8      	it	lt
 801969c:	4613      	movlt	r3, r2
 801969e:	6033      	str	r3, [r6, #0]
 80196a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80196a4:	4607      	mov	r7, r0
 80196a6:	460c      	mov	r4, r1
 80196a8:	b10a      	cbz	r2, 80196ae <_printf_common+0x26>
 80196aa:	3301      	adds	r3, #1
 80196ac:	6033      	str	r3, [r6, #0]
 80196ae:	6823      	ldr	r3, [r4, #0]
 80196b0:	0699      	lsls	r1, r3, #26
 80196b2:	bf42      	ittt	mi
 80196b4:	6833      	ldrmi	r3, [r6, #0]
 80196b6:	3302      	addmi	r3, #2
 80196b8:	6033      	strmi	r3, [r6, #0]
 80196ba:	6825      	ldr	r5, [r4, #0]
 80196bc:	f015 0506 	ands.w	r5, r5, #6
 80196c0:	d106      	bne.n	80196d0 <_printf_common+0x48>
 80196c2:	f104 0a19 	add.w	sl, r4, #25
 80196c6:	68e3      	ldr	r3, [r4, #12]
 80196c8:	6832      	ldr	r2, [r6, #0]
 80196ca:	1a9b      	subs	r3, r3, r2
 80196cc:	42ab      	cmp	r3, r5
 80196ce:	dc26      	bgt.n	801971e <_printf_common+0x96>
 80196d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80196d4:	1e13      	subs	r3, r2, #0
 80196d6:	6822      	ldr	r2, [r4, #0]
 80196d8:	bf18      	it	ne
 80196da:	2301      	movne	r3, #1
 80196dc:	0692      	lsls	r2, r2, #26
 80196de:	d42b      	bmi.n	8019738 <_printf_common+0xb0>
 80196e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80196e4:	4649      	mov	r1, r9
 80196e6:	4638      	mov	r0, r7
 80196e8:	47c0      	blx	r8
 80196ea:	3001      	adds	r0, #1
 80196ec:	d01e      	beq.n	801972c <_printf_common+0xa4>
 80196ee:	6823      	ldr	r3, [r4, #0]
 80196f0:	68e5      	ldr	r5, [r4, #12]
 80196f2:	6832      	ldr	r2, [r6, #0]
 80196f4:	f003 0306 	and.w	r3, r3, #6
 80196f8:	2b04      	cmp	r3, #4
 80196fa:	bf08      	it	eq
 80196fc:	1aad      	subeq	r5, r5, r2
 80196fe:	68a3      	ldr	r3, [r4, #8]
 8019700:	6922      	ldr	r2, [r4, #16]
 8019702:	bf0c      	ite	eq
 8019704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019708:	2500      	movne	r5, #0
 801970a:	4293      	cmp	r3, r2
 801970c:	bfc4      	itt	gt
 801970e:	1a9b      	subgt	r3, r3, r2
 8019710:	18ed      	addgt	r5, r5, r3
 8019712:	2600      	movs	r6, #0
 8019714:	341a      	adds	r4, #26
 8019716:	42b5      	cmp	r5, r6
 8019718:	d11a      	bne.n	8019750 <_printf_common+0xc8>
 801971a:	2000      	movs	r0, #0
 801971c:	e008      	b.n	8019730 <_printf_common+0xa8>
 801971e:	2301      	movs	r3, #1
 8019720:	4652      	mov	r2, sl
 8019722:	4649      	mov	r1, r9
 8019724:	4638      	mov	r0, r7
 8019726:	47c0      	blx	r8
 8019728:	3001      	adds	r0, #1
 801972a:	d103      	bne.n	8019734 <_printf_common+0xac>
 801972c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019734:	3501      	adds	r5, #1
 8019736:	e7c6      	b.n	80196c6 <_printf_common+0x3e>
 8019738:	18e1      	adds	r1, r4, r3
 801973a:	1c5a      	adds	r2, r3, #1
 801973c:	2030      	movs	r0, #48	; 0x30
 801973e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019742:	4422      	add	r2, r4
 8019744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801974c:	3302      	adds	r3, #2
 801974e:	e7c7      	b.n	80196e0 <_printf_common+0x58>
 8019750:	2301      	movs	r3, #1
 8019752:	4622      	mov	r2, r4
 8019754:	4649      	mov	r1, r9
 8019756:	4638      	mov	r0, r7
 8019758:	47c0      	blx	r8
 801975a:	3001      	adds	r0, #1
 801975c:	d0e6      	beq.n	801972c <_printf_common+0xa4>
 801975e:	3601      	adds	r6, #1
 8019760:	e7d9      	b.n	8019716 <_printf_common+0x8e>
	...

08019764 <_printf_i>:
 8019764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019768:	7e0f      	ldrb	r7, [r1, #24]
 801976a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801976c:	2f78      	cmp	r7, #120	; 0x78
 801976e:	4691      	mov	r9, r2
 8019770:	4680      	mov	r8, r0
 8019772:	460c      	mov	r4, r1
 8019774:	469a      	mov	sl, r3
 8019776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801977a:	d807      	bhi.n	801978c <_printf_i+0x28>
 801977c:	2f62      	cmp	r7, #98	; 0x62
 801977e:	d80a      	bhi.n	8019796 <_printf_i+0x32>
 8019780:	2f00      	cmp	r7, #0
 8019782:	f000 80d8 	beq.w	8019936 <_printf_i+0x1d2>
 8019786:	2f58      	cmp	r7, #88	; 0x58
 8019788:	f000 80a3 	beq.w	80198d2 <_printf_i+0x16e>
 801978c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019794:	e03a      	b.n	801980c <_printf_i+0xa8>
 8019796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801979a:	2b15      	cmp	r3, #21
 801979c:	d8f6      	bhi.n	801978c <_printf_i+0x28>
 801979e:	a101      	add	r1, pc, #4	; (adr r1, 80197a4 <_printf_i+0x40>)
 80197a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80197a4:	080197fd 	.word	0x080197fd
 80197a8:	08019811 	.word	0x08019811
 80197ac:	0801978d 	.word	0x0801978d
 80197b0:	0801978d 	.word	0x0801978d
 80197b4:	0801978d 	.word	0x0801978d
 80197b8:	0801978d 	.word	0x0801978d
 80197bc:	08019811 	.word	0x08019811
 80197c0:	0801978d 	.word	0x0801978d
 80197c4:	0801978d 	.word	0x0801978d
 80197c8:	0801978d 	.word	0x0801978d
 80197cc:	0801978d 	.word	0x0801978d
 80197d0:	0801991d 	.word	0x0801991d
 80197d4:	08019841 	.word	0x08019841
 80197d8:	080198ff 	.word	0x080198ff
 80197dc:	0801978d 	.word	0x0801978d
 80197e0:	0801978d 	.word	0x0801978d
 80197e4:	0801993f 	.word	0x0801993f
 80197e8:	0801978d 	.word	0x0801978d
 80197ec:	08019841 	.word	0x08019841
 80197f0:	0801978d 	.word	0x0801978d
 80197f4:	0801978d 	.word	0x0801978d
 80197f8:	08019907 	.word	0x08019907
 80197fc:	682b      	ldr	r3, [r5, #0]
 80197fe:	1d1a      	adds	r2, r3, #4
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	602a      	str	r2, [r5, #0]
 8019804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801980c:	2301      	movs	r3, #1
 801980e:	e0a3      	b.n	8019958 <_printf_i+0x1f4>
 8019810:	6820      	ldr	r0, [r4, #0]
 8019812:	6829      	ldr	r1, [r5, #0]
 8019814:	0606      	lsls	r6, r0, #24
 8019816:	f101 0304 	add.w	r3, r1, #4
 801981a:	d50a      	bpl.n	8019832 <_printf_i+0xce>
 801981c:	680e      	ldr	r6, [r1, #0]
 801981e:	602b      	str	r3, [r5, #0]
 8019820:	2e00      	cmp	r6, #0
 8019822:	da03      	bge.n	801982c <_printf_i+0xc8>
 8019824:	232d      	movs	r3, #45	; 0x2d
 8019826:	4276      	negs	r6, r6
 8019828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801982c:	485e      	ldr	r0, [pc, #376]	; (80199a8 <_printf_i+0x244>)
 801982e:	230a      	movs	r3, #10
 8019830:	e019      	b.n	8019866 <_printf_i+0x102>
 8019832:	680e      	ldr	r6, [r1, #0]
 8019834:	602b      	str	r3, [r5, #0]
 8019836:	f010 0f40 	tst.w	r0, #64	; 0x40
 801983a:	bf18      	it	ne
 801983c:	b236      	sxthne	r6, r6
 801983e:	e7ef      	b.n	8019820 <_printf_i+0xbc>
 8019840:	682b      	ldr	r3, [r5, #0]
 8019842:	6820      	ldr	r0, [r4, #0]
 8019844:	1d19      	adds	r1, r3, #4
 8019846:	6029      	str	r1, [r5, #0]
 8019848:	0601      	lsls	r1, r0, #24
 801984a:	d501      	bpl.n	8019850 <_printf_i+0xec>
 801984c:	681e      	ldr	r6, [r3, #0]
 801984e:	e002      	b.n	8019856 <_printf_i+0xf2>
 8019850:	0646      	lsls	r6, r0, #25
 8019852:	d5fb      	bpl.n	801984c <_printf_i+0xe8>
 8019854:	881e      	ldrh	r6, [r3, #0]
 8019856:	4854      	ldr	r0, [pc, #336]	; (80199a8 <_printf_i+0x244>)
 8019858:	2f6f      	cmp	r7, #111	; 0x6f
 801985a:	bf0c      	ite	eq
 801985c:	2308      	moveq	r3, #8
 801985e:	230a      	movne	r3, #10
 8019860:	2100      	movs	r1, #0
 8019862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019866:	6865      	ldr	r5, [r4, #4]
 8019868:	60a5      	str	r5, [r4, #8]
 801986a:	2d00      	cmp	r5, #0
 801986c:	bfa2      	ittt	ge
 801986e:	6821      	ldrge	r1, [r4, #0]
 8019870:	f021 0104 	bicge.w	r1, r1, #4
 8019874:	6021      	strge	r1, [r4, #0]
 8019876:	b90e      	cbnz	r6, 801987c <_printf_i+0x118>
 8019878:	2d00      	cmp	r5, #0
 801987a:	d04d      	beq.n	8019918 <_printf_i+0x1b4>
 801987c:	4615      	mov	r5, r2
 801987e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019882:	fb03 6711 	mls	r7, r3, r1, r6
 8019886:	5dc7      	ldrb	r7, [r0, r7]
 8019888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801988c:	4637      	mov	r7, r6
 801988e:	42bb      	cmp	r3, r7
 8019890:	460e      	mov	r6, r1
 8019892:	d9f4      	bls.n	801987e <_printf_i+0x11a>
 8019894:	2b08      	cmp	r3, #8
 8019896:	d10b      	bne.n	80198b0 <_printf_i+0x14c>
 8019898:	6823      	ldr	r3, [r4, #0]
 801989a:	07de      	lsls	r6, r3, #31
 801989c:	d508      	bpl.n	80198b0 <_printf_i+0x14c>
 801989e:	6923      	ldr	r3, [r4, #16]
 80198a0:	6861      	ldr	r1, [r4, #4]
 80198a2:	4299      	cmp	r1, r3
 80198a4:	bfde      	ittt	le
 80198a6:	2330      	movle	r3, #48	; 0x30
 80198a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80198ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80198b0:	1b52      	subs	r2, r2, r5
 80198b2:	6122      	str	r2, [r4, #16]
 80198b4:	f8cd a000 	str.w	sl, [sp]
 80198b8:	464b      	mov	r3, r9
 80198ba:	aa03      	add	r2, sp, #12
 80198bc:	4621      	mov	r1, r4
 80198be:	4640      	mov	r0, r8
 80198c0:	f7ff fee2 	bl	8019688 <_printf_common>
 80198c4:	3001      	adds	r0, #1
 80198c6:	d14c      	bne.n	8019962 <_printf_i+0x1fe>
 80198c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80198cc:	b004      	add	sp, #16
 80198ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198d2:	4835      	ldr	r0, [pc, #212]	; (80199a8 <_printf_i+0x244>)
 80198d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80198d8:	6829      	ldr	r1, [r5, #0]
 80198da:	6823      	ldr	r3, [r4, #0]
 80198dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80198e0:	6029      	str	r1, [r5, #0]
 80198e2:	061d      	lsls	r5, r3, #24
 80198e4:	d514      	bpl.n	8019910 <_printf_i+0x1ac>
 80198e6:	07df      	lsls	r7, r3, #31
 80198e8:	bf44      	itt	mi
 80198ea:	f043 0320 	orrmi.w	r3, r3, #32
 80198ee:	6023      	strmi	r3, [r4, #0]
 80198f0:	b91e      	cbnz	r6, 80198fa <_printf_i+0x196>
 80198f2:	6823      	ldr	r3, [r4, #0]
 80198f4:	f023 0320 	bic.w	r3, r3, #32
 80198f8:	6023      	str	r3, [r4, #0]
 80198fa:	2310      	movs	r3, #16
 80198fc:	e7b0      	b.n	8019860 <_printf_i+0xfc>
 80198fe:	6823      	ldr	r3, [r4, #0]
 8019900:	f043 0320 	orr.w	r3, r3, #32
 8019904:	6023      	str	r3, [r4, #0]
 8019906:	2378      	movs	r3, #120	; 0x78
 8019908:	4828      	ldr	r0, [pc, #160]	; (80199ac <_printf_i+0x248>)
 801990a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801990e:	e7e3      	b.n	80198d8 <_printf_i+0x174>
 8019910:	0659      	lsls	r1, r3, #25
 8019912:	bf48      	it	mi
 8019914:	b2b6      	uxthmi	r6, r6
 8019916:	e7e6      	b.n	80198e6 <_printf_i+0x182>
 8019918:	4615      	mov	r5, r2
 801991a:	e7bb      	b.n	8019894 <_printf_i+0x130>
 801991c:	682b      	ldr	r3, [r5, #0]
 801991e:	6826      	ldr	r6, [r4, #0]
 8019920:	6961      	ldr	r1, [r4, #20]
 8019922:	1d18      	adds	r0, r3, #4
 8019924:	6028      	str	r0, [r5, #0]
 8019926:	0635      	lsls	r5, r6, #24
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	d501      	bpl.n	8019930 <_printf_i+0x1cc>
 801992c:	6019      	str	r1, [r3, #0]
 801992e:	e002      	b.n	8019936 <_printf_i+0x1d2>
 8019930:	0670      	lsls	r0, r6, #25
 8019932:	d5fb      	bpl.n	801992c <_printf_i+0x1c8>
 8019934:	8019      	strh	r1, [r3, #0]
 8019936:	2300      	movs	r3, #0
 8019938:	6123      	str	r3, [r4, #16]
 801993a:	4615      	mov	r5, r2
 801993c:	e7ba      	b.n	80198b4 <_printf_i+0x150>
 801993e:	682b      	ldr	r3, [r5, #0]
 8019940:	1d1a      	adds	r2, r3, #4
 8019942:	602a      	str	r2, [r5, #0]
 8019944:	681d      	ldr	r5, [r3, #0]
 8019946:	6862      	ldr	r2, [r4, #4]
 8019948:	2100      	movs	r1, #0
 801994a:	4628      	mov	r0, r5
 801994c:	f7e6 fc60 	bl	8000210 <memchr>
 8019950:	b108      	cbz	r0, 8019956 <_printf_i+0x1f2>
 8019952:	1b40      	subs	r0, r0, r5
 8019954:	6060      	str	r0, [r4, #4]
 8019956:	6863      	ldr	r3, [r4, #4]
 8019958:	6123      	str	r3, [r4, #16]
 801995a:	2300      	movs	r3, #0
 801995c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019960:	e7a8      	b.n	80198b4 <_printf_i+0x150>
 8019962:	6923      	ldr	r3, [r4, #16]
 8019964:	462a      	mov	r2, r5
 8019966:	4649      	mov	r1, r9
 8019968:	4640      	mov	r0, r8
 801996a:	47d0      	blx	sl
 801996c:	3001      	adds	r0, #1
 801996e:	d0ab      	beq.n	80198c8 <_printf_i+0x164>
 8019970:	6823      	ldr	r3, [r4, #0]
 8019972:	079b      	lsls	r3, r3, #30
 8019974:	d413      	bmi.n	801999e <_printf_i+0x23a>
 8019976:	68e0      	ldr	r0, [r4, #12]
 8019978:	9b03      	ldr	r3, [sp, #12]
 801997a:	4298      	cmp	r0, r3
 801997c:	bfb8      	it	lt
 801997e:	4618      	movlt	r0, r3
 8019980:	e7a4      	b.n	80198cc <_printf_i+0x168>
 8019982:	2301      	movs	r3, #1
 8019984:	4632      	mov	r2, r6
 8019986:	4649      	mov	r1, r9
 8019988:	4640      	mov	r0, r8
 801998a:	47d0      	blx	sl
 801998c:	3001      	adds	r0, #1
 801998e:	d09b      	beq.n	80198c8 <_printf_i+0x164>
 8019990:	3501      	adds	r5, #1
 8019992:	68e3      	ldr	r3, [r4, #12]
 8019994:	9903      	ldr	r1, [sp, #12]
 8019996:	1a5b      	subs	r3, r3, r1
 8019998:	42ab      	cmp	r3, r5
 801999a:	dcf2      	bgt.n	8019982 <_printf_i+0x21e>
 801999c:	e7eb      	b.n	8019976 <_printf_i+0x212>
 801999e:	2500      	movs	r5, #0
 80199a0:	f104 0619 	add.w	r6, r4, #25
 80199a4:	e7f5      	b.n	8019992 <_printf_i+0x22e>
 80199a6:	bf00      	nop
 80199a8:	0801c2ba 	.word	0x0801c2ba
 80199ac:	0801c2cb 	.word	0x0801c2cb

080199b0 <iprintf>:
 80199b0:	b40f      	push	{r0, r1, r2, r3}
 80199b2:	4b0a      	ldr	r3, [pc, #40]	; (80199dc <iprintf+0x2c>)
 80199b4:	b513      	push	{r0, r1, r4, lr}
 80199b6:	681c      	ldr	r4, [r3, #0]
 80199b8:	b124      	cbz	r4, 80199c4 <iprintf+0x14>
 80199ba:	69a3      	ldr	r3, [r4, #24]
 80199bc:	b913      	cbnz	r3, 80199c4 <iprintf+0x14>
 80199be:	4620      	mov	r0, r4
 80199c0:	f000 ff30 	bl	801a824 <__sinit>
 80199c4:	ab05      	add	r3, sp, #20
 80199c6:	9a04      	ldr	r2, [sp, #16]
 80199c8:	68a1      	ldr	r1, [r4, #8]
 80199ca:	9301      	str	r3, [sp, #4]
 80199cc:	4620      	mov	r0, r4
 80199ce:	f001 fd1f 	bl	801b410 <_vfiprintf_r>
 80199d2:	b002      	add	sp, #8
 80199d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80199d8:	b004      	add	sp, #16
 80199da:	4770      	bx	lr
 80199dc:	20000190 	.word	0x20000190

080199e0 <_sbrk_r>:
 80199e0:	b538      	push	{r3, r4, r5, lr}
 80199e2:	4d06      	ldr	r5, [pc, #24]	; (80199fc <_sbrk_r+0x1c>)
 80199e4:	2300      	movs	r3, #0
 80199e6:	4604      	mov	r4, r0
 80199e8:	4608      	mov	r0, r1
 80199ea:	602b      	str	r3, [r5, #0]
 80199ec:	f002 f9b8 	bl	801bd60 <_sbrk>
 80199f0:	1c43      	adds	r3, r0, #1
 80199f2:	d102      	bne.n	80199fa <_sbrk_r+0x1a>
 80199f4:	682b      	ldr	r3, [r5, #0]
 80199f6:	b103      	cbz	r3, 80199fa <_sbrk_r+0x1a>
 80199f8:	6023      	str	r3, [r4, #0]
 80199fa:	bd38      	pop	{r3, r4, r5, pc}
 80199fc:	2000303c 	.word	0x2000303c

08019a00 <siprintf>:
 8019a00:	b40e      	push	{r1, r2, r3}
 8019a02:	b500      	push	{lr}
 8019a04:	b09c      	sub	sp, #112	; 0x70
 8019a06:	ab1d      	add	r3, sp, #116	; 0x74
 8019a08:	9002      	str	r0, [sp, #8]
 8019a0a:	9006      	str	r0, [sp, #24]
 8019a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019a10:	4809      	ldr	r0, [pc, #36]	; (8019a38 <siprintf+0x38>)
 8019a12:	9107      	str	r1, [sp, #28]
 8019a14:	9104      	str	r1, [sp, #16]
 8019a16:	4909      	ldr	r1, [pc, #36]	; (8019a3c <siprintf+0x3c>)
 8019a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a1c:	9105      	str	r1, [sp, #20]
 8019a1e:	6800      	ldr	r0, [r0, #0]
 8019a20:	9301      	str	r3, [sp, #4]
 8019a22:	a902      	add	r1, sp, #8
 8019a24:	f001 fbca 	bl	801b1bc <_svfiprintf_r>
 8019a28:	9b02      	ldr	r3, [sp, #8]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	701a      	strb	r2, [r3, #0]
 8019a2e:	b01c      	add	sp, #112	; 0x70
 8019a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a34:	b003      	add	sp, #12
 8019a36:	4770      	bx	lr
 8019a38:	20000190 	.word	0x20000190
 8019a3c:	ffff0208 	.word	0xffff0208

08019a40 <__assert_func>:
 8019a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019a42:	4614      	mov	r4, r2
 8019a44:	461a      	mov	r2, r3
 8019a46:	4b09      	ldr	r3, [pc, #36]	; (8019a6c <__assert_func+0x2c>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	4605      	mov	r5, r0
 8019a4c:	68d8      	ldr	r0, [r3, #12]
 8019a4e:	b14c      	cbz	r4, 8019a64 <__assert_func+0x24>
 8019a50:	4b07      	ldr	r3, [pc, #28]	; (8019a70 <__assert_func+0x30>)
 8019a52:	9100      	str	r1, [sp, #0]
 8019a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019a58:	4906      	ldr	r1, [pc, #24]	; (8019a74 <__assert_func+0x34>)
 8019a5a:	462b      	mov	r3, r5
 8019a5c:	f000 ff60 	bl	801a920 <fiprintf>
 8019a60:	f001 ff2a 	bl	801b8b8 <abort>
 8019a64:	4b04      	ldr	r3, [pc, #16]	; (8019a78 <__assert_func+0x38>)
 8019a66:	461c      	mov	r4, r3
 8019a68:	e7f3      	b.n	8019a52 <__assert_func+0x12>
 8019a6a:	bf00      	nop
 8019a6c:	20000190 	.word	0x20000190
 8019a70:	0801c2dc 	.word	0x0801c2dc
 8019a74:	0801c2e9 	.word	0x0801c2e9
 8019a78:	0801c317 	.word	0x0801c317

08019a7c <quorem>:
 8019a7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a80:	6903      	ldr	r3, [r0, #16]
 8019a82:	690c      	ldr	r4, [r1, #16]
 8019a84:	42a3      	cmp	r3, r4
 8019a86:	4607      	mov	r7, r0
 8019a88:	f2c0 8081 	blt.w	8019b8e <quorem+0x112>
 8019a8c:	3c01      	subs	r4, #1
 8019a8e:	f101 0814 	add.w	r8, r1, #20
 8019a92:	f100 0514 	add.w	r5, r0, #20
 8019a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019a9a:	9301      	str	r3, [sp, #4]
 8019a9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8019aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019aac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019ab0:	fbb2 f6f3 	udiv	r6, r2, r3
 8019ab4:	d331      	bcc.n	8019b1a <quorem+0x9e>
 8019ab6:	f04f 0e00 	mov.w	lr, #0
 8019aba:	4640      	mov	r0, r8
 8019abc:	46ac      	mov	ip, r5
 8019abe:	46f2      	mov	sl, lr
 8019ac0:	f850 2b04 	ldr.w	r2, [r0], #4
 8019ac4:	b293      	uxth	r3, r2
 8019ac6:	fb06 e303 	mla	r3, r6, r3, lr
 8019aca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019ace:	b29b      	uxth	r3, r3
 8019ad0:	ebaa 0303 	sub.w	r3, sl, r3
 8019ad4:	f8dc a000 	ldr.w	sl, [ip]
 8019ad8:	0c12      	lsrs	r2, r2, #16
 8019ada:	fa13 f38a 	uxtah	r3, r3, sl
 8019ade:	fb06 e202 	mla	r2, r6, r2, lr
 8019ae2:	9300      	str	r3, [sp, #0]
 8019ae4:	9b00      	ldr	r3, [sp, #0]
 8019ae6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8019aea:	b292      	uxth	r2, r2
 8019aec:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8019af0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019af4:	f8bd 3000 	ldrh.w	r3, [sp]
 8019af8:	4581      	cmp	r9, r0
 8019afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019afe:	f84c 3b04 	str.w	r3, [ip], #4
 8019b02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8019b06:	d2db      	bcs.n	8019ac0 <quorem+0x44>
 8019b08:	f855 300b 	ldr.w	r3, [r5, fp]
 8019b0c:	b92b      	cbnz	r3, 8019b1a <quorem+0x9e>
 8019b0e:	9b01      	ldr	r3, [sp, #4]
 8019b10:	3b04      	subs	r3, #4
 8019b12:	429d      	cmp	r5, r3
 8019b14:	461a      	mov	r2, r3
 8019b16:	d32e      	bcc.n	8019b76 <quorem+0xfa>
 8019b18:	613c      	str	r4, [r7, #16]
 8019b1a:	4638      	mov	r0, r7
 8019b1c:	f001 f9da 	bl	801aed4 <__mcmp>
 8019b20:	2800      	cmp	r0, #0
 8019b22:	db24      	blt.n	8019b6e <quorem+0xf2>
 8019b24:	3601      	adds	r6, #1
 8019b26:	4628      	mov	r0, r5
 8019b28:	f04f 0c00 	mov.w	ip, #0
 8019b2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8019b30:	f8d0 e000 	ldr.w	lr, [r0]
 8019b34:	b293      	uxth	r3, r2
 8019b36:	ebac 0303 	sub.w	r3, ip, r3
 8019b3a:	0c12      	lsrs	r2, r2, #16
 8019b3c:	fa13 f38e 	uxtah	r3, r3, lr
 8019b40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8019b44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019b4e:	45c1      	cmp	r9, r8
 8019b50:	f840 3b04 	str.w	r3, [r0], #4
 8019b54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8019b58:	d2e8      	bcs.n	8019b2c <quorem+0xb0>
 8019b5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8019b5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8019b62:	b922      	cbnz	r2, 8019b6e <quorem+0xf2>
 8019b64:	3b04      	subs	r3, #4
 8019b66:	429d      	cmp	r5, r3
 8019b68:	461a      	mov	r2, r3
 8019b6a:	d30a      	bcc.n	8019b82 <quorem+0x106>
 8019b6c:	613c      	str	r4, [r7, #16]
 8019b6e:	4630      	mov	r0, r6
 8019b70:	b003      	add	sp, #12
 8019b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b76:	6812      	ldr	r2, [r2, #0]
 8019b78:	3b04      	subs	r3, #4
 8019b7a:	2a00      	cmp	r2, #0
 8019b7c:	d1cc      	bne.n	8019b18 <quorem+0x9c>
 8019b7e:	3c01      	subs	r4, #1
 8019b80:	e7c7      	b.n	8019b12 <quorem+0x96>
 8019b82:	6812      	ldr	r2, [r2, #0]
 8019b84:	3b04      	subs	r3, #4
 8019b86:	2a00      	cmp	r2, #0
 8019b88:	d1f0      	bne.n	8019b6c <quorem+0xf0>
 8019b8a:	3c01      	subs	r4, #1
 8019b8c:	e7eb      	b.n	8019b66 <quorem+0xea>
 8019b8e:	2000      	movs	r0, #0
 8019b90:	e7ee      	b.n	8019b70 <quorem+0xf4>
 8019b92:	0000      	movs	r0, r0
 8019b94:	0000      	movs	r0, r0
	...

08019b98 <_dtoa_r>:
 8019b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b9c:	ed2d 8b04 	vpush	{d8-d9}
 8019ba0:	ec57 6b10 	vmov	r6, r7, d0
 8019ba4:	b093      	sub	sp, #76	; 0x4c
 8019ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019ba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019bac:	9106      	str	r1, [sp, #24]
 8019bae:	ee10 aa10 	vmov	sl, s0
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8019bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8019bb8:	46bb      	mov	fp, r7
 8019bba:	b975      	cbnz	r5, 8019bda <_dtoa_r+0x42>
 8019bbc:	2010      	movs	r0, #16
 8019bbe:	f7ff f98f 	bl	8018ee0 <malloc>
 8019bc2:	4602      	mov	r2, r0
 8019bc4:	6260      	str	r0, [r4, #36]	; 0x24
 8019bc6:	b920      	cbnz	r0, 8019bd2 <_dtoa_r+0x3a>
 8019bc8:	4ba7      	ldr	r3, [pc, #668]	; (8019e68 <_dtoa_r+0x2d0>)
 8019bca:	21ea      	movs	r1, #234	; 0xea
 8019bcc:	48a7      	ldr	r0, [pc, #668]	; (8019e6c <_dtoa_r+0x2d4>)
 8019bce:	f7ff ff37 	bl	8019a40 <__assert_func>
 8019bd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019bd6:	6005      	str	r5, [r0, #0]
 8019bd8:	60c5      	str	r5, [r0, #12]
 8019bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019bdc:	6819      	ldr	r1, [r3, #0]
 8019bde:	b151      	cbz	r1, 8019bf6 <_dtoa_r+0x5e>
 8019be0:	685a      	ldr	r2, [r3, #4]
 8019be2:	604a      	str	r2, [r1, #4]
 8019be4:	2301      	movs	r3, #1
 8019be6:	4093      	lsls	r3, r2
 8019be8:	608b      	str	r3, [r1, #8]
 8019bea:	4620      	mov	r0, r4
 8019bec:	f000 ff30 	bl	801aa50 <_Bfree>
 8019bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019bf2:	2200      	movs	r2, #0
 8019bf4:	601a      	str	r2, [r3, #0]
 8019bf6:	1e3b      	subs	r3, r7, #0
 8019bf8:	bfaa      	itet	ge
 8019bfa:	2300      	movge	r3, #0
 8019bfc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8019c00:	f8c8 3000 	strge.w	r3, [r8]
 8019c04:	4b9a      	ldr	r3, [pc, #616]	; (8019e70 <_dtoa_r+0x2d8>)
 8019c06:	bfbc      	itt	lt
 8019c08:	2201      	movlt	r2, #1
 8019c0a:	f8c8 2000 	strlt.w	r2, [r8]
 8019c0e:	ea33 030b 	bics.w	r3, r3, fp
 8019c12:	d11b      	bne.n	8019c4c <_dtoa_r+0xb4>
 8019c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c16:	f242 730f 	movw	r3, #9999	; 0x270f
 8019c1a:	6013      	str	r3, [r2, #0]
 8019c1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019c20:	4333      	orrs	r3, r6
 8019c22:	f000 8592 	beq.w	801a74a <_dtoa_r+0xbb2>
 8019c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c28:	b963      	cbnz	r3, 8019c44 <_dtoa_r+0xac>
 8019c2a:	4b92      	ldr	r3, [pc, #584]	; (8019e74 <_dtoa_r+0x2dc>)
 8019c2c:	e022      	b.n	8019c74 <_dtoa_r+0xdc>
 8019c2e:	4b92      	ldr	r3, [pc, #584]	; (8019e78 <_dtoa_r+0x2e0>)
 8019c30:	9301      	str	r3, [sp, #4]
 8019c32:	3308      	adds	r3, #8
 8019c34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019c36:	6013      	str	r3, [r2, #0]
 8019c38:	9801      	ldr	r0, [sp, #4]
 8019c3a:	b013      	add	sp, #76	; 0x4c
 8019c3c:	ecbd 8b04 	vpop	{d8-d9}
 8019c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c44:	4b8b      	ldr	r3, [pc, #556]	; (8019e74 <_dtoa_r+0x2dc>)
 8019c46:	9301      	str	r3, [sp, #4]
 8019c48:	3303      	adds	r3, #3
 8019c4a:	e7f3      	b.n	8019c34 <_dtoa_r+0x9c>
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2300      	movs	r3, #0
 8019c50:	4650      	mov	r0, sl
 8019c52:	4659      	mov	r1, fp
 8019c54:	f7e6 ff50 	bl	8000af8 <__aeabi_dcmpeq>
 8019c58:	ec4b ab19 	vmov	d9, sl, fp
 8019c5c:	4680      	mov	r8, r0
 8019c5e:	b158      	cbz	r0, 8019c78 <_dtoa_r+0xe0>
 8019c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019c62:	2301      	movs	r3, #1
 8019c64:	6013      	str	r3, [r2, #0]
 8019c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	f000 856b 	beq.w	801a744 <_dtoa_r+0xbac>
 8019c6e:	4883      	ldr	r0, [pc, #524]	; (8019e7c <_dtoa_r+0x2e4>)
 8019c70:	6018      	str	r0, [r3, #0]
 8019c72:	1e43      	subs	r3, r0, #1
 8019c74:	9301      	str	r3, [sp, #4]
 8019c76:	e7df      	b.n	8019c38 <_dtoa_r+0xa0>
 8019c78:	ec4b ab10 	vmov	d0, sl, fp
 8019c7c:	aa10      	add	r2, sp, #64	; 0x40
 8019c7e:	a911      	add	r1, sp, #68	; 0x44
 8019c80:	4620      	mov	r0, r4
 8019c82:	f001 f9cd 	bl	801b020 <__d2b>
 8019c86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8019c8a:	ee08 0a10 	vmov	s16, r0
 8019c8e:	2d00      	cmp	r5, #0
 8019c90:	f000 8084 	beq.w	8019d9c <_dtoa_r+0x204>
 8019c94:	ee19 3a90 	vmov	r3, s19
 8019c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019c9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8019ca0:	4656      	mov	r6, sl
 8019ca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8019ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019caa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8019cae:	4b74      	ldr	r3, [pc, #464]	; (8019e80 <_dtoa_r+0x2e8>)
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	4639      	mov	r1, r7
 8019cb6:	f7e6 faff 	bl	80002b8 <__aeabi_dsub>
 8019cba:	a365      	add	r3, pc, #404	; (adr r3, 8019e50 <_dtoa_r+0x2b8>)
 8019cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc0:	f7e6 fcb2 	bl	8000628 <__aeabi_dmul>
 8019cc4:	a364      	add	r3, pc, #400	; (adr r3, 8019e58 <_dtoa_r+0x2c0>)
 8019cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cca:	f7e6 faf7 	bl	80002bc <__adddf3>
 8019cce:	4606      	mov	r6, r0
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	460f      	mov	r7, r1
 8019cd4:	f7e6 fc3e 	bl	8000554 <__aeabi_i2d>
 8019cd8:	a361      	add	r3, pc, #388	; (adr r3, 8019e60 <_dtoa_r+0x2c8>)
 8019cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cde:	f7e6 fca3 	bl	8000628 <__aeabi_dmul>
 8019ce2:	4602      	mov	r2, r0
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	4630      	mov	r0, r6
 8019ce8:	4639      	mov	r1, r7
 8019cea:	f7e6 fae7 	bl	80002bc <__adddf3>
 8019cee:	4606      	mov	r6, r0
 8019cf0:	460f      	mov	r7, r1
 8019cf2:	f7e6 ff49 	bl	8000b88 <__aeabi_d2iz>
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	9000      	str	r0, [sp, #0]
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	4630      	mov	r0, r6
 8019cfe:	4639      	mov	r1, r7
 8019d00:	f7e6 ff04 	bl	8000b0c <__aeabi_dcmplt>
 8019d04:	b150      	cbz	r0, 8019d1c <_dtoa_r+0x184>
 8019d06:	9800      	ldr	r0, [sp, #0]
 8019d08:	f7e6 fc24 	bl	8000554 <__aeabi_i2d>
 8019d0c:	4632      	mov	r2, r6
 8019d0e:	463b      	mov	r3, r7
 8019d10:	f7e6 fef2 	bl	8000af8 <__aeabi_dcmpeq>
 8019d14:	b910      	cbnz	r0, 8019d1c <_dtoa_r+0x184>
 8019d16:	9b00      	ldr	r3, [sp, #0]
 8019d18:	3b01      	subs	r3, #1
 8019d1a:	9300      	str	r3, [sp, #0]
 8019d1c:	9b00      	ldr	r3, [sp, #0]
 8019d1e:	2b16      	cmp	r3, #22
 8019d20:	d85a      	bhi.n	8019dd8 <_dtoa_r+0x240>
 8019d22:	9a00      	ldr	r2, [sp, #0]
 8019d24:	4b57      	ldr	r3, [pc, #348]	; (8019e84 <_dtoa_r+0x2ec>)
 8019d26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d2e:	ec51 0b19 	vmov	r0, r1, d9
 8019d32:	f7e6 feeb 	bl	8000b0c <__aeabi_dcmplt>
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d050      	beq.n	8019ddc <_dtoa_r+0x244>
 8019d3a:	9b00      	ldr	r3, [sp, #0]
 8019d3c:	3b01      	subs	r3, #1
 8019d3e:	9300      	str	r3, [sp, #0]
 8019d40:	2300      	movs	r3, #0
 8019d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019d46:	1b5d      	subs	r5, r3, r5
 8019d48:	1e6b      	subs	r3, r5, #1
 8019d4a:	9305      	str	r3, [sp, #20]
 8019d4c:	bf45      	ittet	mi
 8019d4e:	f1c5 0301 	rsbmi	r3, r5, #1
 8019d52:	9304      	strmi	r3, [sp, #16]
 8019d54:	2300      	movpl	r3, #0
 8019d56:	2300      	movmi	r3, #0
 8019d58:	bf4c      	ite	mi
 8019d5a:	9305      	strmi	r3, [sp, #20]
 8019d5c:	9304      	strpl	r3, [sp, #16]
 8019d5e:	9b00      	ldr	r3, [sp, #0]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	db3d      	blt.n	8019de0 <_dtoa_r+0x248>
 8019d64:	9b05      	ldr	r3, [sp, #20]
 8019d66:	9a00      	ldr	r2, [sp, #0]
 8019d68:	920a      	str	r2, [sp, #40]	; 0x28
 8019d6a:	4413      	add	r3, r2
 8019d6c:	9305      	str	r3, [sp, #20]
 8019d6e:	2300      	movs	r3, #0
 8019d70:	9307      	str	r3, [sp, #28]
 8019d72:	9b06      	ldr	r3, [sp, #24]
 8019d74:	2b09      	cmp	r3, #9
 8019d76:	f200 8089 	bhi.w	8019e8c <_dtoa_r+0x2f4>
 8019d7a:	2b05      	cmp	r3, #5
 8019d7c:	bfc4      	itt	gt
 8019d7e:	3b04      	subgt	r3, #4
 8019d80:	9306      	strgt	r3, [sp, #24]
 8019d82:	9b06      	ldr	r3, [sp, #24]
 8019d84:	f1a3 0302 	sub.w	r3, r3, #2
 8019d88:	bfcc      	ite	gt
 8019d8a:	2500      	movgt	r5, #0
 8019d8c:	2501      	movle	r5, #1
 8019d8e:	2b03      	cmp	r3, #3
 8019d90:	f200 8087 	bhi.w	8019ea2 <_dtoa_r+0x30a>
 8019d94:	e8df f003 	tbb	[pc, r3]
 8019d98:	59383a2d 	.word	0x59383a2d
 8019d9c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8019da0:	441d      	add	r5, r3
 8019da2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019da6:	2b20      	cmp	r3, #32
 8019da8:	bfc1      	itttt	gt
 8019daa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019dae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019db2:	fa0b f303 	lslgt.w	r3, fp, r3
 8019db6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019dba:	bfda      	itte	le
 8019dbc:	f1c3 0320 	rsble	r3, r3, #32
 8019dc0:	fa06 f003 	lslle.w	r0, r6, r3
 8019dc4:	4318      	orrgt	r0, r3
 8019dc6:	f7e6 fbb5 	bl	8000534 <__aeabi_ui2d>
 8019dca:	2301      	movs	r3, #1
 8019dcc:	4606      	mov	r6, r0
 8019dce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019dd2:	3d01      	subs	r5, #1
 8019dd4:	930e      	str	r3, [sp, #56]	; 0x38
 8019dd6:	e76a      	b.n	8019cae <_dtoa_r+0x116>
 8019dd8:	2301      	movs	r3, #1
 8019dda:	e7b2      	b.n	8019d42 <_dtoa_r+0x1aa>
 8019ddc:	900b      	str	r0, [sp, #44]	; 0x2c
 8019dde:	e7b1      	b.n	8019d44 <_dtoa_r+0x1ac>
 8019de0:	9b04      	ldr	r3, [sp, #16]
 8019de2:	9a00      	ldr	r2, [sp, #0]
 8019de4:	1a9b      	subs	r3, r3, r2
 8019de6:	9304      	str	r3, [sp, #16]
 8019de8:	4253      	negs	r3, r2
 8019dea:	9307      	str	r3, [sp, #28]
 8019dec:	2300      	movs	r3, #0
 8019dee:	930a      	str	r3, [sp, #40]	; 0x28
 8019df0:	e7bf      	b.n	8019d72 <_dtoa_r+0x1da>
 8019df2:	2300      	movs	r3, #0
 8019df4:	9308      	str	r3, [sp, #32]
 8019df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	dc55      	bgt.n	8019ea8 <_dtoa_r+0x310>
 8019dfc:	2301      	movs	r3, #1
 8019dfe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019e02:	461a      	mov	r2, r3
 8019e04:	9209      	str	r2, [sp, #36]	; 0x24
 8019e06:	e00c      	b.n	8019e22 <_dtoa_r+0x28a>
 8019e08:	2301      	movs	r3, #1
 8019e0a:	e7f3      	b.n	8019df4 <_dtoa_r+0x25c>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e10:	9308      	str	r3, [sp, #32]
 8019e12:	9b00      	ldr	r3, [sp, #0]
 8019e14:	4413      	add	r3, r2
 8019e16:	9302      	str	r3, [sp, #8]
 8019e18:	3301      	adds	r3, #1
 8019e1a:	2b01      	cmp	r3, #1
 8019e1c:	9303      	str	r3, [sp, #12]
 8019e1e:	bfb8      	it	lt
 8019e20:	2301      	movlt	r3, #1
 8019e22:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019e24:	2200      	movs	r2, #0
 8019e26:	6042      	str	r2, [r0, #4]
 8019e28:	2204      	movs	r2, #4
 8019e2a:	f102 0614 	add.w	r6, r2, #20
 8019e2e:	429e      	cmp	r6, r3
 8019e30:	6841      	ldr	r1, [r0, #4]
 8019e32:	d93d      	bls.n	8019eb0 <_dtoa_r+0x318>
 8019e34:	4620      	mov	r0, r4
 8019e36:	f000 fdcb 	bl	801a9d0 <_Balloc>
 8019e3a:	9001      	str	r0, [sp, #4]
 8019e3c:	2800      	cmp	r0, #0
 8019e3e:	d13b      	bne.n	8019eb8 <_dtoa_r+0x320>
 8019e40:	4b11      	ldr	r3, [pc, #68]	; (8019e88 <_dtoa_r+0x2f0>)
 8019e42:	4602      	mov	r2, r0
 8019e44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019e48:	e6c0      	b.n	8019bcc <_dtoa_r+0x34>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	e7df      	b.n	8019e0e <_dtoa_r+0x276>
 8019e4e:	bf00      	nop
 8019e50:	636f4361 	.word	0x636f4361
 8019e54:	3fd287a7 	.word	0x3fd287a7
 8019e58:	8b60c8b3 	.word	0x8b60c8b3
 8019e5c:	3fc68a28 	.word	0x3fc68a28
 8019e60:	509f79fb 	.word	0x509f79fb
 8019e64:	3fd34413 	.word	0x3fd34413
 8019e68:	0801c426 	.word	0x0801c426
 8019e6c:	0801c43d 	.word	0x0801c43d
 8019e70:	7ff00000 	.word	0x7ff00000
 8019e74:	0801c422 	.word	0x0801c422
 8019e78:	0801c419 	.word	0x0801c419
 8019e7c:	0801c2b9 	.word	0x0801c2b9
 8019e80:	3ff80000 	.word	0x3ff80000
 8019e84:	0801c5a0 	.word	0x0801c5a0
 8019e88:	0801c498 	.word	0x0801c498
 8019e8c:	2501      	movs	r5, #1
 8019e8e:	2300      	movs	r3, #0
 8019e90:	9306      	str	r3, [sp, #24]
 8019e92:	9508      	str	r5, [sp, #32]
 8019e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e98:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019e9c:	2200      	movs	r2, #0
 8019e9e:	2312      	movs	r3, #18
 8019ea0:	e7b0      	b.n	8019e04 <_dtoa_r+0x26c>
 8019ea2:	2301      	movs	r3, #1
 8019ea4:	9308      	str	r3, [sp, #32]
 8019ea6:	e7f5      	b.n	8019e94 <_dtoa_r+0x2fc>
 8019ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8019eae:	e7b8      	b.n	8019e22 <_dtoa_r+0x28a>
 8019eb0:	3101      	adds	r1, #1
 8019eb2:	6041      	str	r1, [r0, #4]
 8019eb4:	0052      	lsls	r2, r2, #1
 8019eb6:	e7b8      	b.n	8019e2a <_dtoa_r+0x292>
 8019eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019eba:	9a01      	ldr	r2, [sp, #4]
 8019ebc:	601a      	str	r2, [r3, #0]
 8019ebe:	9b03      	ldr	r3, [sp, #12]
 8019ec0:	2b0e      	cmp	r3, #14
 8019ec2:	f200 809d 	bhi.w	801a000 <_dtoa_r+0x468>
 8019ec6:	2d00      	cmp	r5, #0
 8019ec8:	f000 809a 	beq.w	801a000 <_dtoa_r+0x468>
 8019ecc:	9b00      	ldr	r3, [sp, #0]
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	dd32      	ble.n	8019f38 <_dtoa_r+0x3a0>
 8019ed2:	4ab7      	ldr	r2, [pc, #732]	; (801a1b0 <_dtoa_r+0x618>)
 8019ed4:	f003 030f 	and.w	r3, r3, #15
 8019ed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019ee0:	9b00      	ldr	r3, [sp, #0]
 8019ee2:	05d8      	lsls	r0, r3, #23
 8019ee4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8019ee8:	d516      	bpl.n	8019f18 <_dtoa_r+0x380>
 8019eea:	4bb2      	ldr	r3, [pc, #712]	; (801a1b4 <_dtoa_r+0x61c>)
 8019eec:	ec51 0b19 	vmov	r0, r1, d9
 8019ef0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019ef4:	f7e6 fcc2 	bl	800087c <__aeabi_ddiv>
 8019ef8:	f007 070f 	and.w	r7, r7, #15
 8019efc:	4682      	mov	sl, r0
 8019efe:	468b      	mov	fp, r1
 8019f00:	2503      	movs	r5, #3
 8019f02:	4eac      	ldr	r6, [pc, #688]	; (801a1b4 <_dtoa_r+0x61c>)
 8019f04:	b957      	cbnz	r7, 8019f1c <_dtoa_r+0x384>
 8019f06:	4642      	mov	r2, r8
 8019f08:	464b      	mov	r3, r9
 8019f0a:	4650      	mov	r0, sl
 8019f0c:	4659      	mov	r1, fp
 8019f0e:	f7e6 fcb5 	bl	800087c <__aeabi_ddiv>
 8019f12:	4682      	mov	sl, r0
 8019f14:	468b      	mov	fp, r1
 8019f16:	e028      	b.n	8019f6a <_dtoa_r+0x3d2>
 8019f18:	2502      	movs	r5, #2
 8019f1a:	e7f2      	b.n	8019f02 <_dtoa_r+0x36a>
 8019f1c:	07f9      	lsls	r1, r7, #31
 8019f1e:	d508      	bpl.n	8019f32 <_dtoa_r+0x39a>
 8019f20:	4640      	mov	r0, r8
 8019f22:	4649      	mov	r1, r9
 8019f24:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019f28:	f7e6 fb7e 	bl	8000628 <__aeabi_dmul>
 8019f2c:	3501      	adds	r5, #1
 8019f2e:	4680      	mov	r8, r0
 8019f30:	4689      	mov	r9, r1
 8019f32:	107f      	asrs	r7, r7, #1
 8019f34:	3608      	adds	r6, #8
 8019f36:	e7e5      	b.n	8019f04 <_dtoa_r+0x36c>
 8019f38:	f000 809b 	beq.w	801a072 <_dtoa_r+0x4da>
 8019f3c:	9b00      	ldr	r3, [sp, #0]
 8019f3e:	4f9d      	ldr	r7, [pc, #628]	; (801a1b4 <_dtoa_r+0x61c>)
 8019f40:	425e      	negs	r6, r3
 8019f42:	4b9b      	ldr	r3, [pc, #620]	; (801a1b0 <_dtoa_r+0x618>)
 8019f44:	f006 020f 	and.w	r2, r6, #15
 8019f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f50:	ec51 0b19 	vmov	r0, r1, d9
 8019f54:	f7e6 fb68 	bl	8000628 <__aeabi_dmul>
 8019f58:	1136      	asrs	r6, r6, #4
 8019f5a:	4682      	mov	sl, r0
 8019f5c:	468b      	mov	fp, r1
 8019f5e:	2300      	movs	r3, #0
 8019f60:	2502      	movs	r5, #2
 8019f62:	2e00      	cmp	r6, #0
 8019f64:	d17a      	bne.n	801a05c <_dtoa_r+0x4c4>
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d1d3      	bne.n	8019f12 <_dtoa_r+0x37a>
 8019f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	f000 8082 	beq.w	801a076 <_dtoa_r+0x4de>
 8019f72:	4b91      	ldr	r3, [pc, #580]	; (801a1b8 <_dtoa_r+0x620>)
 8019f74:	2200      	movs	r2, #0
 8019f76:	4650      	mov	r0, sl
 8019f78:	4659      	mov	r1, fp
 8019f7a:	f7e6 fdc7 	bl	8000b0c <__aeabi_dcmplt>
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	d079      	beq.n	801a076 <_dtoa_r+0x4de>
 8019f82:	9b03      	ldr	r3, [sp, #12]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d076      	beq.n	801a076 <_dtoa_r+0x4de>
 8019f88:	9b02      	ldr	r3, [sp, #8]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	dd36      	ble.n	8019ffc <_dtoa_r+0x464>
 8019f8e:	9b00      	ldr	r3, [sp, #0]
 8019f90:	4650      	mov	r0, sl
 8019f92:	4659      	mov	r1, fp
 8019f94:	1e5f      	subs	r7, r3, #1
 8019f96:	2200      	movs	r2, #0
 8019f98:	4b88      	ldr	r3, [pc, #544]	; (801a1bc <_dtoa_r+0x624>)
 8019f9a:	f7e6 fb45 	bl	8000628 <__aeabi_dmul>
 8019f9e:	9e02      	ldr	r6, [sp, #8]
 8019fa0:	4682      	mov	sl, r0
 8019fa2:	468b      	mov	fp, r1
 8019fa4:	3501      	adds	r5, #1
 8019fa6:	4628      	mov	r0, r5
 8019fa8:	f7e6 fad4 	bl	8000554 <__aeabi_i2d>
 8019fac:	4652      	mov	r2, sl
 8019fae:	465b      	mov	r3, fp
 8019fb0:	f7e6 fb3a 	bl	8000628 <__aeabi_dmul>
 8019fb4:	4b82      	ldr	r3, [pc, #520]	; (801a1c0 <_dtoa_r+0x628>)
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	f7e6 f980 	bl	80002bc <__adddf3>
 8019fbc:	46d0      	mov	r8, sl
 8019fbe:	46d9      	mov	r9, fp
 8019fc0:	4682      	mov	sl, r0
 8019fc2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8019fc6:	2e00      	cmp	r6, #0
 8019fc8:	d158      	bne.n	801a07c <_dtoa_r+0x4e4>
 8019fca:	4b7e      	ldr	r3, [pc, #504]	; (801a1c4 <_dtoa_r+0x62c>)
 8019fcc:	2200      	movs	r2, #0
 8019fce:	4640      	mov	r0, r8
 8019fd0:	4649      	mov	r1, r9
 8019fd2:	f7e6 f971 	bl	80002b8 <__aeabi_dsub>
 8019fd6:	4652      	mov	r2, sl
 8019fd8:	465b      	mov	r3, fp
 8019fda:	4680      	mov	r8, r0
 8019fdc:	4689      	mov	r9, r1
 8019fde:	f7e6 fdb3 	bl	8000b48 <__aeabi_dcmpgt>
 8019fe2:	2800      	cmp	r0, #0
 8019fe4:	f040 8295 	bne.w	801a512 <_dtoa_r+0x97a>
 8019fe8:	4652      	mov	r2, sl
 8019fea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019fee:	4640      	mov	r0, r8
 8019ff0:	4649      	mov	r1, r9
 8019ff2:	f7e6 fd8b 	bl	8000b0c <__aeabi_dcmplt>
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	f040 8289 	bne.w	801a50e <_dtoa_r+0x976>
 8019ffc:	ec5b ab19 	vmov	sl, fp, d9
 801a000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a002:	2b00      	cmp	r3, #0
 801a004:	f2c0 8148 	blt.w	801a298 <_dtoa_r+0x700>
 801a008:	9a00      	ldr	r2, [sp, #0]
 801a00a:	2a0e      	cmp	r2, #14
 801a00c:	f300 8144 	bgt.w	801a298 <_dtoa_r+0x700>
 801a010:	4b67      	ldr	r3, [pc, #412]	; (801a1b0 <_dtoa_r+0x618>)
 801a012:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a016:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	f280 80d5 	bge.w	801a1cc <_dtoa_r+0x634>
 801a022:	9b03      	ldr	r3, [sp, #12]
 801a024:	2b00      	cmp	r3, #0
 801a026:	f300 80d1 	bgt.w	801a1cc <_dtoa_r+0x634>
 801a02a:	f040 826f 	bne.w	801a50c <_dtoa_r+0x974>
 801a02e:	4b65      	ldr	r3, [pc, #404]	; (801a1c4 <_dtoa_r+0x62c>)
 801a030:	2200      	movs	r2, #0
 801a032:	4640      	mov	r0, r8
 801a034:	4649      	mov	r1, r9
 801a036:	f7e6 faf7 	bl	8000628 <__aeabi_dmul>
 801a03a:	4652      	mov	r2, sl
 801a03c:	465b      	mov	r3, fp
 801a03e:	f7e6 fd79 	bl	8000b34 <__aeabi_dcmpge>
 801a042:	9e03      	ldr	r6, [sp, #12]
 801a044:	4637      	mov	r7, r6
 801a046:	2800      	cmp	r0, #0
 801a048:	f040 8245 	bne.w	801a4d6 <_dtoa_r+0x93e>
 801a04c:	9d01      	ldr	r5, [sp, #4]
 801a04e:	2331      	movs	r3, #49	; 0x31
 801a050:	f805 3b01 	strb.w	r3, [r5], #1
 801a054:	9b00      	ldr	r3, [sp, #0]
 801a056:	3301      	adds	r3, #1
 801a058:	9300      	str	r3, [sp, #0]
 801a05a:	e240      	b.n	801a4de <_dtoa_r+0x946>
 801a05c:	07f2      	lsls	r2, r6, #31
 801a05e:	d505      	bpl.n	801a06c <_dtoa_r+0x4d4>
 801a060:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a064:	f7e6 fae0 	bl	8000628 <__aeabi_dmul>
 801a068:	3501      	adds	r5, #1
 801a06a:	2301      	movs	r3, #1
 801a06c:	1076      	asrs	r6, r6, #1
 801a06e:	3708      	adds	r7, #8
 801a070:	e777      	b.n	8019f62 <_dtoa_r+0x3ca>
 801a072:	2502      	movs	r5, #2
 801a074:	e779      	b.n	8019f6a <_dtoa_r+0x3d2>
 801a076:	9f00      	ldr	r7, [sp, #0]
 801a078:	9e03      	ldr	r6, [sp, #12]
 801a07a:	e794      	b.n	8019fa6 <_dtoa_r+0x40e>
 801a07c:	9901      	ldr	r1, [sp, #4]
 801a07e:	4b4c      	ldr	r3, [pc, #304]	; (801a1b0 <_dtoa_r+0x618>)
 801a080:	4431      	add	r1, r6
 801a082:	910d      	str	r1, [sp, #52]	; 0x34
 801a084:	9908      	ldr	r1, [sp, #32]
 801a086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801a08a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801a08e:	2900      	cmp	r1, #0
 801a090:	d043      	beq.n	801a11a <_dtoa_r+0x582>
 801a092:	494d      	ldr	r1, [pc, #308]	; (801a1c8 <_dtoa_r+0x630>)
 801a094:	2000      	movs	r0, #0
 801a096:	f7e6 fbf1 	bl	800087c <__aeabi_ddiv>
 801a09a:	4652      	mov	r2, sl
 801a09c:	465b      	mov	r3, fp
 801a09e:	f7e6 f90b 	bl	80002b8 <__aeabi_dsub>
 801a0a2:	9d01      	ldr	r5, [sp, #4]
 801a0a4:	4682      	mov	sl, r0
 801a0a6:	468b      	mov	fp, r1
 801a0a8:	4649      	mov	r1, r9
 801a0aa:	4640      	mov	r0, r8
 801a0ac:	f7e6 fd6c 	bl	8000b88 <__aeabi_d2iz>
 801a0b0:	4606      	mov	r6, r0
 801a0b2:	f7e6 fa4f 	bl	8000554 <__aeabi_i2d>
 801a0b6:	4602      	mov	r2, r0
 801a0b8:	460b      	mov	r3, r1
 801a0ba:	4640      	mov	r0, r8
 801a0bc:	4649      	mov	r1, r9
 801a0be:	f7e6 f8fb 	bl	80002b8 <__aeabi_dsub>
 801a0c2:	3630      	adds	r6, #48	; 0x30
 801a0c4:	f805 6b01 	strb.w	r6, [r5], #1
 801a0c8:	4652      	mov	r2, sl
 801a0ca:	465b      	mov	r3, fp
 801a0cc:	4680      	mov	r8, r0
 801a0ce:	4689      	mov	r9, r1
 801a0d0:	f7e6 fd1c 	bl	8000b0c <__aeabi_dcmplt>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d163      	bne.n	801a1a0 <_dtoa_r+0x608>
 801a0d8:	4642      	mov	r2, r8
 801a0da:	464b      	mov	r3, r9
 801a0dc:	4936      	ldr	r1, [pc, #216]	; (801a1b8 <_dtoa_r+0x620>)
 801a0de:	2000      	movs	r0, #0
 801a0e0:	f7e6 f8ea 	bl	80002b8 <__aeabi_dsub>
 801a0e4:	4652      	mov	r2, sl
 801a0e6:	465b      	mov	r3, fp
 801a0e8:	f7e6 fd10 	bl	8000b0c <__aeabi_dcmplt>
 801a0ec:	2800      	cmp	r0, #0
 801a0ee:	f040 80b5 	bne.w	801a25c <_dtoa_r+0x6c4>
 801a0f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0f4:	429d      	cmp	r5, r3
 801a0f6:	d081      	beq.n	8019ffc <_dtoa_r+0x464>
 801a0f8:	4b30      	ldr	r3, [pc, #192]	; (801a1bc <_dtoa_r+0x624>)
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	4650      	mov	r0, sl
 801a0fe:	4659      	mov	r1, fp
 801a100:	f7e6 fa92 	bl	8000628 <__aeabi_dmul>
 801a104:	4b2d      	ldr	r3, [pc, #180]	; (801a1bc <_dtoa_r+0x624>)
 801a106:	4682      	mov	sl, r0
 801a108:	468b      	mov	fp, r1
 801a10a:	4640      	mov	r0, r8
 801a10c:	4649      	mov	r1, r9
 801a10e:	2200      	movs	r2, #0
 801a110:	f7e6 fa8a 	bl	8000628 <__aeabi_dmul>
 801a114:	4680      	mov	r8, r0
 801a116:	4689      	mov	r9, r1
 801a118:	e7c6      	b.n	801a0a8 <_dtoa_r+0x510>
 801a11a:	4650      	mov	r0, sl
 801a11c:	4659      	mov	r1, fp
 801a11e:	f7e6 fa83 	bl	8000628 <__aeabi_dmul>
 801a122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a124:	9d01      	ldr	r5, [sp, #4]
 801a126:	930f      	str	r3, [sp, #60]	; 0x3c
 801a128:	4682      	mov	sl, r0
 801a12a:	468b      	mov	fp, r1
 801a12c:	4649      	mov	r1, r9
 801a12e:	4640      	mov	r0, r8
 801a130:	f7e6 fd2a 	bl	8000b88 <__aeabi_d2iz>
 801a134:	4606      	mov	r6, r0
 801a136:	f7e6 fa0d 	bl	8000554 <__aeabi_i2d>
 801a13a:	3630      	adds	r6, #48	; 0x30
 801a13c:	4602      	mov	r2, r0
 801a13e:	460b      	mov	r3, r1
 801a140:	4640      	mov	r0, r8
 801a142:	4649      	mov	r1, r9
 801a144:	f7e6 f8b8 	bl	80002b8 <__aeabi_dsub>
 801a148:	f805 6b01 	strb.w	r6, [r5], #1
 801a14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a14e:	429d      	cmp	r5, r3
 801a150:	4680      	mov	r8, r0
 801a152:	4689      	mov	r9, r1
 801a154:	f04f 0200 	mov.w	r2, #0
 801a158:	d124      	bne.n	801a1a4 <_dtoa_r+0x60c>
 801a15a:	4b1b      	ldr	r3, [pc, #108]	; (801a1c8 <_dtoa_r+0x630>)
 801a15c:	4650      	mov	r0, sl
 801a15e:	4659      	mov	r1, fp
 801a160:	f7e6 f8ac 	bl	80002bc <__adddf3>
 801a164:	4602      	mov	r2, r0
 801a166:	460b      	mov	r3, r1
 801a168:	4640      	mov	r0, r8
 801a16a:	4649      	mov	r1, r9
 801a16c:	f7e6 fcec 	bl	8000b48 <__aeabi_dcmpgt>
 801a170:	2800      	cmp	r0, #0
 801a172:	d173      	bne.n	801a25c <_dtoa_r+0x6c4>
 801a174:	4652      	mov	r2, sl
 801a176:	465b      	mov	r3, fp
 801a178:	4913      	ldr	r1, [pc, #76]	; (801a1c8 <_dtoa_r+0x630>)
 801a17a:	2000      	movs	r0, #0
 801a17c:	f7e6 f89c 	bl	80002b8 <__aeabi_dsub>
 801a180:	4602      	mov	r2, r0
 801a182:	460b      	mov	r3, r1
 801a184:	4640      	mov	r0, r8
 801a186:	4649      	mov	r1, r9
 801a188:	f7e6 fcc0 	bl	8000b0c <__aeabi_dcmplt>
 801a18c:	2800      	cmp	r0, #0
 801a18e:	f43f af35 	beq.w	8019ffc <_dtoa_r+0x464>
 801a192:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801a194:	1e6b      	subs	r3, r5, #1
 801a196:	930f      	str	r3, [sp, #60]	; 0x3c
 801a198:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a19c:	2b30      	cmp	r3, #48	; 0x30
 801a19e:	d0f8      	beq.n	801a192 <_dtoa_r+0x5fa>
 801a1a0:	9700      	str	r7, [sp, #0]
 801a1a2:	e049      	b.n	801a238 <_dtoa_r+0x6a0>
 801a1a4:	4b05      	ldr	r3, [pc, #20]	; (801a1bc <_dtoa_r+0x624>)
 801a1a6:	f7e6 fa3f 	bl	8000628 <__aeabi_dmul>
 801a1aa:	4680      	mov	r8, r0
 801a1ac:	4689      	mov	r9, r1
 801a1ae:	e7bd      	b.n	801a12c <_dtoa_r+0x594>
 801a1b0:	0801c5a0 	.word	0x0801c5a0
 801a1b4:	0801c578 	.word	0x0801c578
 801a1b8:	3ff00000 	.word	0x3ff00000
 801a1bc:	40240000 	.word	0x40240000
 801a1c0:	401c0000 	.word	0x401c0000
 801a1c4:	40140000 	.word	0x40140000
 801a1c8:	3fe00000 	.word	0x3fe00000
 801a1cc:	9d01      	ldr	r5, [sp, #4]
 801a1ce:	4656      	mov	r6, sl
 801a1d0:	465f      	mov	r7, fp
 801a1d2:	4642      	mov	r2, r8
 801a1d4:	464b      	mov	r3, r9
 801a1d6:	4630      	mov	r0, r6
 801a1d8:	4639      	mov	r1, r7
 801a1da:	f7e6 fb4f 	bl	800087c <__aeabi_ddiv>
 801a1de:	f7e6 fcd3 	bl	8000b88 <__aeabi_d2iz>
 801a1e2:	4682      	mov	sl, r0
 801a1e4:	f7e6 f9b6 	bl	8000554 <__aeabi_i2d>
 801a1e8:	4642      	mov	r2, r8
 801a1ea:	464b      	mov	r3, r9
 801a1ec:	f7e6 fa1c 	bl	8000628 <__aeabi_dmul>
 801a1f0:	4602      	mov	r2, r0
 801a1f2:	460b      	mov	r3, r1
 801a1f4:	4630      	mov	r0, r6
 801a1f6:	4639      	mov	r1, r7
 801a1f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801a1fc:	f7e6 f85c 	bl	80002b8 <__aeabi_dsub>
 801a200:	f805 6b01 	strb.w	r6, [r5], #1
 801a204:	9e01      	ldr	r6, [sp, #4]
 801a206:	9f03      	ldr	r7, [sp, #12]
 801a208:	1bae      	subs	r6, r5, r6
 801a20a:	42b7      	cmp	r7, r6
 801a20c:	4602      	mov	r2, r0
 801a20e:	460b      	mov	r3, r1
 801a210:	d135      	bne.n	801a27e <_dtoa_r+0x6e6>
 801a212:	f7e6 f853 	bl	80002bc <__adddf3>
 801a216:	4642      	mov	r2, r8
 801a218:	464b      	mov	r3, r9
 801a21a:	4606      	mov	r6, r0
 801a21c:	460f      	mov	r7, r1
 801a21e:	f7e6 fc93 	bl	8000b48 <__aeabi_dcmpgt>
 801a222:	b9d0      	cbnz	r0, 801a25a <_dtoa_r+0x6c2>
 801a224:	4642      	mov	r2, r8
 801a226:	464b      	mov	r3, r9
 801a228:	4630      	mov	r0, r6
 801a22a:	4639      	mov	r1, r7
 801a22c:	f7e6 fc64 	bl	8000af8 <__aeabi_dcmpeq>
 801a230:	b110      	cbz	r0, 801a238 <_dtoa_r+0x6a0>
 801a232:	f01a 0f01 	tst.w	sl, #1
 801a236:	d110      	bne.n	801a25a <_dtoa_r+0x6c2>
 801a238:	4620      	mov	r0, r4
 801a23a:	ee18 1a10 	vmov	r1, s16
 801a23e:	f000 fc07 	bl	801aa50 <_Bfree>
 801a242:	2300      	movs	r3, #0
 801a244:	9800      	ldr	r0, [sp, #0]
 801a246:	702b      	strb	r3, [r5, #0]
 801a248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a24a:	3001      	adds	r0, #1
 801a24c:	6018      	str	r0, [r3, #0]
 801a24e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a250:	2b00      	cmp	r3, #0
 801a252:	f43f acf1 	beq.w	8019c38 <_dtoa_r+0xa0>
 801a256:	601d      	str	r5, [r3, #0]
 801a258:	e4ee      	b.n	8019c38 <_dtoa_r+0xa0>
 801a25a:	9f00      	ldr	r7, [sp, #0]
 801a25c:	462b      	mov	r3, r5
 801a25e:	461d      	mov	r5, r3
 801a260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a264:	2a39      	cmp	r2, #57	; 0x39
 801a266:	d106      	bne.n	801a276 <_dtoa_r+0x6de>
 801a268:	9a01      	ldr	r2, [sp, #4]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d1f7      	bne.n	801a25e <_dtoa_r+0x6c6>
 801a26e:	9901      	ldr	r1, [sp, #4]
 801a270:	2230      	movs	r2, #48	; 0x30
 801a272:	3701      	adds	r7, #1
 801a274:	700a      	strb	r2, [r1, #0]
 801a276:	781a      	ldrb	r2, [r3, #0]
 801a278:	3201      	adds	r2, #1
 801a27a:	701a      	strb	r2, [r3, #0]
 801a27c:	e790      	b.n	801a1a0 <_dtoa_r+0x608>
 801a27e:	4ba6      	ldr	r3, [pc, #664]	; (801a518 <_dtoa_r+0x980>)
 801a280:	2200      	movs	r2, #0
 801a282:	f7e6 f9d1 	bl	8000628 <__aeabi_dmul>
 801a286:	2200      	movs	r2, #0
 801a288:	2300      	movs	r3, #0
 801a28a:	4606      	mov	r6, r0
 801a28c:	460f      	mov	r7, r1
 801a28e:	f7e6 fc33 	bl	8000af8 <__aeabi_dcmpeq>
 801a292:	2800      	cmp	r0, #0
 801a294:	d09d      	beq.n	801a1d2 <_dtoa_r+0x63a>
 801a296:	e7cf      	b.n	801a238 <_dtoa_r+0x6a0>
 801a298:	9a08      	ldr	r2, [sp, #32]
 801a29a:	2a00      	cmp	r2, #0
 801a29c:	f000 80d7 	beq.w	801a44e <_dtoa_r+0x8b6>
 801a2a0:	9a06      	ldr	r2, [sp, #24]
 801a2a2:	2a01      	cmp	r2, #1
 801a2a4:	f300 80ba 	bgt.w	801a41c <_dtoa_r+0x884>
 801a2a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a2aa:	2a00      	cmp	r2, #0
 801a2ac:	f000 80b2 	beq.w	801a414 <_dtoa_r+0x87c>
 801a2b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a2b4:	9e07      	ldr	r6, [sp, #28]
 801a2b6:	9d04      	ldr	r5, [sp, #16]
 801a2b8:	9a04      	ldr	r2, [sp, #16]
 801a2ba:	441a      	add	r2, r3
 801a2bc:	9204      	str	r2, [sp, #16]
 801a2be:	9a05      	ldr	r2, [sp, #20]
 801a2c0:	2101      	movs	r1, #1
 801a2c2:	441a      	add	r2, r3
 801a2c4:	4620      	mov	r0, r4
 801a2c6:	9205      	str	r2, [sp, #20]
 801a2c8:	f000 fc7a 	bl	801abc0 <__i2b>
 801a2cc:	4607      	mov	r7, r0
 801a2ce:	2d00      	cmp	r5, #0
 801a2d0:	dd0c      	ble.n	801a2ec <_dtoa_r+0x754>
 801a2d2:	9b05      	ldr	r3, [sp, #20]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	dd09      	ble.n	801a2ec <_dtoa_r+0x754>
 801a2d8:	42ab      	cmp	r3, r5
 801a2da:	9a04      	ldr	r2, [sp, #16]
 801a2dc:	bfa8      	it	ge
 801a2de:	462b      	movge	r3, r5
 801a2e0:	1ad2      	subs	r2, r2, r3
 801a2e2:	9204      	str	r2, [sp, #16]
 801a2e4:	9a05      	ldr	r2, [sp, #20]
 801a2e6:	1aed      	subs	r5, r5, r3
 801a2e8:	1ad3      	subs	r3, r2, r3
 801a2ea:	9305      	str	r3, [sp, #20]
 801a2ec:	9b07      	ldr	r3, [sp, #28]
 801a2ee:	b31b      	cbz	r3, 801a338 <_dtoa_r+0x7a0>
 801a2f0:	9b08      	ldr	r3, [sp, #32]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	f000 80af 	beq.w	801a456 <_dtoa_r+0x8be>
 801a2f8:	2e00      	cmp	r6, #0
 801a2fa:	dd13      	ble.n	801a324 <_dtoa_r+0x78c>
 801a2fc:	4639      	mov	r1, r7
 801a2fe:	4632      	mov	r2, r6
 801a300:	4620      	mov	r0, r4
 801a302:	f000 fd1d 	bl	801ad40 <__pow5mult>
 801a306:	ee18 2a10 	vmov	r2, s16
 801a30a:	4601      	mov	r1, r0
 801a30c:	4607      	mov	r7, r0
 801a30e:	4620      	mov	r0, r4
 801a310:	f000 fc6c 	bl	801abec <__multiply>
 801a314:	ee18 1a10 	vmov	r1, s16
 801a318:	4680      	mov	r8, r0
 801a31a:	4620      	mov	r0, r4
 801a31c:	f000 fb98 	bl	801aa50 <_Bfree>
 801a320:	ee08 8a10 	vmov	s16, r8
 801a324:	9b07      	ldr	r3, [sp, #28]
 801a326:	1b9a      	subs	r2, r3, r6
 801a328:	d006      	beq.n	801a338 <_dtoa_r+0x7a0>
 801a32a:	ee18 1a10 	vmov	r1, s16
 801a32e:	4620      	mov	r0, r4
 801a330:	f000 fd06 	bl	801ad40 <__pow5mult>
 801a334:	ee08 0a10 	vmov	s16, r0
 801a338:	2101      	movs	r1, #1
 801a33a:	4620      	mov	r0, r4
 801a33c:	f000 fc40 	bl	801abc0 <__i2b>
 801a340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a342:	2b00      	cmp	r3, #0
 801a344:	4606      	mov	r6, r0
 801a346:	f340 8088 	ble.w	801a45a <_dtoa_r+0x8c2>
 801a34a:	461a      	mov	r2, r3
 801a34c:	4601      	mov	r1, r0
 801a34e:	4620      	mov	r0, r4
 801a350:	f000 fcf6 	bl	801ad40 <__pow5mult>
 801a354:	9b06      	ldr	r3, [sp, #24]
 801a356:	2b01      	cmp	r3, #1
 801a358:	4606      	mov	r6, r0
 801a35a:	f340 8081 	ble.w	801a460 <_dtoa_r+0x8c8>
 801a35e:	f04f 0800 	mov.w	r8, #0
 801a362:	6933      	ldr	r3, [r6, #16]
 801a364:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a368:	6918      	ldr	r0, [r3, #16]
 801a36a:	f000 fbd9 	bl	801ab20 <__hi0bits>
 801a36e:	f1c0 0020 	rsb	r0, r0, #32
 801a372:	9b05      	ldr	r3, [sp, #20]
 801a374:	4418      	add	r0, r3
 801a376:	f010 001f 	ands.w	r0, r0, #31
 801a37a:	f000 8092 	beq.w	801a4a2 <_dtoa_r+0x90a>
 801a37e:	f1c0 0320 	rsb	r3, r0, #32
 801a382:	2b04      	cmp	r3, #4
 801a384:	f340 808a 	ble.w	801a49c <_dtoa_r+0x904>
 801a388:	f1c0 001c 	rsb	r0, r0, #28
 801a38c:	9b04      	ldr	r3, [sp, #16]
 801a38e:	4403      	add	r3, r0
 801a390:	9304      	str	r3, [sp, #16]
 801a392:	9b05      	ldr	r3, [sp, #20]
 801a394:	4403      	add	r3, r0
 801a396:	4405      	add	r5, r0
 801a398:	9305      	str	r3, [sp, #20]
 801a39a:	9b04      	ldr	r3, [sp, #16]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	dd07      	ble.n	801a3b0 <_dtoa_r+0x818>
 801a3a0:	ee18 1a10 	vmov	r1, s16
 801a3a4:	461a      	mov	r2, r3
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	f000 fd24 	bl	801adf4 <__lshift>
 801a3ac:	ee08 0a10 	vmov	s16, r0
 801a3b0:	9b05      	ldr	r3, [sp, #20]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	dd05      	ble.n	801a3c2 <_dtoa_r+0x82a>
 801a3b6:	4631      	mov	r1, r6
 801a3b8:	461a      	mov	r2, r3
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	f000 fd1a 	bl	801adf4 <__lshift>
 801a3c0:	4606      	mov	r6, r0
 801a3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d06e      	beq.n	801a4a6 <_dtoa_r+0x90e>
 801a3c8:	ee18 0a10 	vmov	r0, s16
 801a3cc:	4631      	mov	r1, r6
 801a3ce:	f000 fd81 	bl	801aed4 <__mcmp>
 801a3d2:	2800      	cmp	r0, #0
 801a3d4:	da67      	bge.n	801a4a6 <_dtoa_r+0x90e>
 801a3d6:	9b00      	ldr	r3, [sp, #0]
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	ee18 1a10 	vmov	r1, s16
 801a3de:	9300      	str	r3, [sp, #0]
 801a3e0:	220a      	movs	r2, #10
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	4620      	mov	r0, r4
 801a3e6:	f000 fb55 	bl	801aa94 <__multadd>
 801a3ea:	9b08      	ldr	r3, [sp, #32]
 801a3ec:	ee08 0a10 	vmov	s16, r0
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f000 81b1 	beq.w	801a758 <_dtoa_r+0xbc0>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	4639      	mov	r1, r7
 801a3fa:	220a      	movs	r2, #10
 801a3fc:	4620      	mov	r0, r4
 801a3fe:	f000 fb49 	bl	801aa94 <__multadd>
 801a402:	9b02      	ldr	r3, [sp, #8]
 801a404:	2b00      	cmp	r3, #0
 801a406:	4607      	mov	r7, r0
 801a408:	f300 808e 	bgt.w	801a528 <_dtoa_r+0x990>
 801a40c:	9b06      	ldr	r3, [sp, #24]
 801a40e:	2b02      	cmp	r3, #2
 801a410:	dc51      	bgt.n	801a4b6 <_dtoa_r+0x91e>
 801a412:	e089      	b.n	801a528 <_dtoa_r+0x990>
 801a414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a416:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a41a:	e74b      	b.n	801a2b4 <_dtoa_r+0x71c>
 801a41c:	9b03      	ldr	r3, [sp, #12]
 801a41e:	1e5e      	subs	r6, r3, #1
 801a420:	9b07      	ldr	r3, [sp, #28]
 801a422:	42b3      	cmp	r3, r6
 801a424:	bfbf      	itttt	lt
 801a426:	9b07      	ldrlt	r3, [sp, #28]
 801a428:	9607      	strlt	r6, [sp, #28]
 801a42a:	1af2      	sublt	r2, r6, r3
 801a42c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801a42e:	bfb6      	itet	lt
 801a430:	189b      	addlt	r3, r3, r2
 801a432:	1b9e      	subge	r6, r3, r6
 801a434:	930a      	strlt	r3, [sp, #40]	; 0x28
 801a436:	9b03      	ldr	r3, [sp, #12]
 801a438:	bfb8      	it	lt
 801a43a:	2600      	movlt	r6, #0
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	bfb7      	itett	lt
 801a440:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801a444:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801a448:	1a9d      	sublt	r5, r3, r2
 801a44a:	2300      	movlt	r3, #0
 801a44c:	e734      	b.n	801a2b8 <_dtoa_r+0x720>
 801a44e:	9e07      	ldr	r6, [sp, #28]
 801a450:	9d04      	ldr	r5, [sp, #16]
 801a452:	9f08      	ldr	r7, [sp, #32]
 801a454:	e73b      	b.n	801a2ce <_dtoa_r+0x736>
 801a456:	9a07      	ldr	r2, [sp, #28]
 801a458:	e767      	b.n	801a32a <_dtoa_r+0x792>
 801a45a:	9b06      	ldr	r3, [sp, #24]
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	dc18      	bgt.n	801a492 <_dtoa_r+0x8fa>
 801a460:	f1ba 0f00 	cmp.w	sl, #0
 801a464:	d115      	bne.n	801a492 <_dtoa_r+0x8fa>
 801a466:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a46a:	b993      	cbnz	r3, 801a492 <_dtoa_r+0x8fa>
 801a46c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a470:	0d1b      	lsrs	r3, r3, #20
 801a472:	051b      	lsls	r3, r3, #20
 801a474:	b183      	cbz	r3, 801a498 <_dtoa_r+0x900>
 801a476:	9b04      	ldr	r3, [sp, #16]
 801a478:	3301      	adds	r3, #1
 801a47a:	9304      	str	r3, [sp, #16]
 801a47c:	9b05      	ldr	r3, [sp, #20]
 801a47e:	3301      	adds	r3, #1
 801a480:	9305      	str	r3, [sp, #20]
 801a482:	f04f 0801 	mov.w	r8, #1
 801a486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a488:	2b00      	cmp	r3, #0
 801a48a:	f47f af6a 	bne.w	801a362 <_dtoa_r+0x7ca>
 801a48e:	2001      	movs	r0, #1
 801a490:	e76f      	b.n	801a372 <_dtoa_r+0x7da>
 801a492:	f04f 0800 	mov.w	r8, #0
 801a496:	e7f6      	b.n	801a486 <_dtoa_r+0x8ee>
 801a498:	4698      	mov	r8, r3
 801a49a:	e7f4      	b.n	801a486 <_dtoa_r+0x8ee>
 801a49c:	f43f af7d 	beq.w	801a39a <_dtoa_r+0x802>
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	301c      	adds	r0, #28
 801a4a4:	e772      	b.n	801a38c <_dtoa_r+0x7f4>
 801a4a6:	9b03      	ldr	r3, [sp, #12]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	dc37      	bgt.n	801a51c <_dtoa_r+0x984>
 801a4ac:	9b06      	ldr	r3, [sp, #24]
 801a4ae:	2b02      	cmp	r3, #2
 801a4b0:	dd34      	ble.n	801a51c <_dtoa_r+0x984>
 801a4b2:	9b03      	ldr	r3, [sp, #12]
 801a4b4:	9302      	str	r3, [sp, #8]
 801a4b6:	9b02      	ldr	r3, [sp, #8]
 801a4b8:	b96b      	cbnz	r3, 801a4d6 <_dtoa_r+0x93e>
 801a4ba:	4631      	mov	r1, r6
 801a4bc:	2205      	movs	r2, #5
 801a4be:	4620      	mov	r0, r4
 801a4c0:	f000 fae8 	bl	801aa94 <__multadd>
 801a4c4:	4601      	mov	r1, r0
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	ee18 0a10 	vmov	r0, s16
 801a4cc:	f000 fd02 	bl	801aed4 <__mcmp>
 801a4d0:	2800      	cmp	r0, #0
 801a4d2:	f73f adbb 	bgt.w	801a04c <_dtoa_r+0x4b4>
 801a4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4d8:	9d01      	ldr	r5, [sp, #4]
 801a4da:	43db      	mvns	r3, r3
 801a4dc:	9300      	str	r3, [sp, #0]
 801a4de:	f04f 0800 	mov.w	r8, #0
 801a4e2:	4631      	mov	r1, r6
 801a4e4:	4620      	mov	r0, r4
 801a4e6:	f000 fab3 	bl	801aa50 <_Bfree>
 801a4ea:	2f00      	cmp	r7, #0
 801a4ec:	f43f aea4 	beq.w	801a238 <_dtoa_r+0x6a0>
 801a4f0:	f1b8 0f00 	cmp.w	r8, #0
 801a4f4:	d005      	beq.n	801a502 <_dtoa_r+0x96a>
 801a4f6:	45b8      	cmp	r8, r7
 801a4f8:	d003      	beq.n	801a502 <_dtoa_r+0x96a>
 801a4fa:	4641      	mov	r1, r8
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f000 faa7 	bl	801aa50 <_Bfree>
 801a502:	4639      	mov	r1, r7
 801a504:	4620      	mov	r0, r4
 801a506:	f000 faa3 	bl	801aa50 <_Bfree>
 801a50a:	e695      	b.n	801a238 <_dtoa_r+0x6a0>
 801a50c:	2600      	movs	r6, #0
 801a50e:	4637      	mov	r7, r6
 801a510:	e7e1      	b.n	801a4d6 <_dtoa_r+0x93e>
 801a512:	9700      	str	r7, [sp, #0]
 801a514:	4637      	mov	r7, r6
 801a516:	e599      	b.n	801a04c <_dtoa_r+0x4b4>
 801a518:	40240000 	.word	0x40240000
 801a51c:	9b08      	ldr	r3, [sp, #32]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	f000 80ca 	beq.w	801a6b8 <_dtoa_r+0xb20>
 801a524:	9b03      	ldr	r3, [sp, #12]
 801a526:	9302      	str	r3, [sp, #8]
 801a528:	2d00      	cmp	r5, #0
 801a52a:	dd05      	ble.n	801a538 <_dtoa_r+0x9a0>
 801a52c:	4639      	mov	r1, r7
 801a52e:	462a      	mov	r2, r5
 801a530:	4620      	mov	r0, r4
 801a532:	f000 fc5f 	bl	801adf4 <__lshift>
 801a536:	4607      	mov	r7, r0
 801a538:	f1b8 0f00 	cmp.w	r8, #0
 801a53c:	d05b      	beq.n	801a5f6 <_dtoa_r+0xa5e>
 801a53e:	6879      	ldr	r1, [r7, #4]
 801a540:	4620      	mov	r0, r4
 801a542:	f000 fa45 	bl	801a9d0 <_Balloc>
 801a546:	4605      	mov	r5, r0
 801a548:	b928      	cbnz	r0, 801a556 <_dtoa_r+0x9be>
 801a54a:	4b87      	ldr	r3, [pc, #540]	; (801a768 <_dtoa_r+0xbd0>)
 801a54c:	4602      	mov	r2, r0
 801a54e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a552:	f7ff bb3b 	b.w	8019bcc <_dtoa_r+0x34>
 801a556:	693a      	ldr	r2, [r7, #16]
 801a558:	3202      	adds	r2, #2
 801a55a:	0092      	lsls	r2, r2, #2
 801a55c:	f107 010c 	add.w	r1, r7, #12
 801a560:	300c      	adds	r0, #12
 801a562:	f7fe fcc5 	bl	8018ef0 <memcpy>
 801a566:	2201      	movs	r2, #1
 801a568:	4629      	mov	r1, r5
 801a56a:	4620      	mov	r0, r4
 801a56c:	f000 fc42 	bl	801adf4 <__lshift>
 801a570:	9b01      	ldr	r3, [sp, #4]
 801a572:	f103 0901 	add.w	r9, r3, #1
 801a576:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801a57a:	4413      	add	r3, r2
 801a57c:	9305      	str	r3, [sp, #20]
 801a57e:	f00a 0301 	and.w	r3, sl, #1
 801a582:	46b8      	mov	r8, r7
 801a584:	9304      	str	r3, [sp, #16]
 801a586:	4607      	mov	r7, r0
 801a588:	4631      	mov	r1, r6
 801a58a:	ee18 0a10 	vmov	r0, s16
 801a58e:	f7ff fa75 	bl	8019a7c <quorem>
 801a592:	4641      	mov	r1, r8
 801a594:	9002      	str	r0, [sp, #8]
 801a596:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801a59a:	ee18 0a10 	vmov	r0, s16
 801a59e:	f000 fc99 	bl	801aed4 <__mcmp>
 801a5a2:	463a      	mov	r2, r7
 801a5a4:	9003      	str	r0, [sp, #12]
 801a5a6:	4631      	mov	r1, r6
 801a5a8:	4620      	mov	r0, r4
 801a5aa:	f000 fcaf 	bl	801af0c <__mdiff>
 801a5ae:	68c2      	ldr	r2, [r0, #12]
 801a5b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801a5b4:	4605      	mov	r5, r0
 801a5b6:	bb02      	cbnz	r2, 801a5fa <_dtoa_r+0xa62>
 801a5b8:	4601      	mov	r1, r0
 801a5ba:	ee18 0a10 	vmov	r0, s16
 801a5be:	f000 fc89 	bl	801aed4 <__mcmp>
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	4629      	mov	r1, r5
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	9207      	str	r2, [sp, #28]
 801a5ca:	f000 fa41 	bl	801aa50 <_Bfree>
 801a5ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a5d2:	ea43 0102 	orr.w	r1, r3, r2
 801a5d6:	9b04      	ldr	r3, [sp, #16]
 801a5d8:	430b      	orrs	r3, r1
 801a5da:	464d      	mov	r5, r9
 801a5dc:	d10f      	bne.n	801a5fe <_dtoa_r+0xa66>
 801a5de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801a5e2:	d02a      	beq.n	801a63a <_dtoa_r+0xaa2>
 801a5e4:	9b03      	ldr	r3, [sp, #12]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	dd02      	ble.n	801a5f0 <_dtoa_r+0xa58>
 801a5ea:	9b02      	ldr	r3, [sp, #8]
 801a5ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801a5f0:	f88b a000 	strb.w	sl, [fp]
 801a5f4:	e775      	b.n	801a4e2 <_dtoa_r+0x94a>
 801a5f6:	4638      	mov	r0, r7
 801a5f8:	e7ba      	b.n	801a570 <_dtoa_r+0x9d8>
 801a5fa:	2201      	movs	r2, #1
 801a5fc:	e7e2      	b.n	801a5c4 <_dtoa_r+0xa2c>
 801a5fe:	9b03      	ldr	r3, [sp, #12]
 801a600:	2b00      	cmp	r3, #0
 801a602:	db04      	blt.n	801a60e <_dtoa_r+0xa76>
 801a604:	9906      	ldr	r1, [sp, #24]
 801a606:	430b      	orrs	r3, r1
 801a608:	9904      	ldr	r1, [sp, #16]
 801a60a:	430b      	orrs	r3, r1
 801a60c:	d122      	bne.n	801a654 <_dtoa_r+0xabc>
 801a60e:	2a00      	cmp	r2, #0
 801a610:	ddee      	ble.n	801a5f0 <_dtoa_r+0xa58>
 801a612:	ee18 1a10 	vmov	r1, s16
 801a616:	2201      	movs	r2, #1
 801a618:	4620      	mov	r0, r4
 801a61a:	f000 fbeb 	bl	801adf4 <__lshift>
 801a61e:	4631      	mov	r1, r6
 801a620:	ee08 0a10 	vmov	s16, r0
 801a624:	f000 fc56 	bl	801aed4 <__mcmp>
 801a628:	2800      	cmp	r0, #0
 801a62a:	dc03      	bgt.n	801a634 <_dtoa_r+0xa9c>
 801a62c:	d1e0      	bne.n	801a5f0 <_dtoa_r+0xa58>
 801a62e:	f01a 0f01 	tst.w	sl, #1
 801a632:	d0dd      	beq.n	801a5f0 <_dtoa_r+0xa58>
 801a634:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801a638:	d1d7      	bne.n	801a5ea <_dtoa_r+0xa52>
 801a63a:	2339      	movs	r3, #57	; 0x39
 801a63c:	f88b 3000 	strb.w	r3, [fp]
 801a640:	462b      	mov	r3, r5
 801a642:	461d      	mov	r5, r3
 801a644:	3b01      	subs	r3, #1
 801a646:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a64a:	2a39      	cmp	r2, #57	; 0x39
 801a64c:	d071      	beq.n	801a732 <_dtoa_r+0xb9a>
 801a64e:	3201      	adds	r2, #1
 801a650:	701a      	strb	r2, [r3, #0]
 801a652:	e746      	b.n	801a4e2 <_dtoa_r+0x94a>
 801a654:	2a00      	cmp	r2, #0
 801a656:	dd07      	ble.n	801a668 <_dtoa_r+0xad0>
 801a658:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801a65c:	d0ed      	beq.n	801a63a <_dtoa_r+0xaa2>
 801a65e:	f10a 0301 	add.w	r3, sl, #1
 801a662:	f88b 3000 	strb.w	r3, [fp]
 801a666:	e73c      	b.n	801a4e2 <_dtoa_r+0x94a>
 801a668:	9b05      	ldr	r3, [sp, #20]
 801a66a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801a66e:	4599      	cmp	r9, r3
 801a670:	d047      	beq.n	801a702 <_dtoa_r+0xb6a>
 801a672:	ee18 1a10 	vmov	r1, s16
 801a676:	2300      	movs	r3, #0
 801a678:	220a      	movs	r2, #10
 801a67a:	4620      	mov	r0, r4
 801a67c:	f000 fa0a 	bl	801aa94 <__multadd>
 801a680:	45b8      	cmp	r8, r7
 801a682:	ee08 0a10 	vmov	s16, r0
 801a686:	f04f 0300 	mov.w	r3, #0
 801a68a:	f04f 020a 	mov.w	r2, #10
 801a68e:	4641      	mov	r1, r8
 801a690:	4620      	mov	r0, r4
 801a692:	d106      	bne.n	801a6a2 <_dtoa_r+0xb0a>
 801a694:	f000 f9fe 	bl	801aa94 <__multadd>
 801a698:	4680      	mov	r8, r0
 801a69a:	4607      	mov	r7, r0
 801a69c:	f109 0901 	add.w	r9, r9, #1
 801a6a0:	e772      	b.n	801a588 <_dtoa_r+0x9f0>
 801a6a2:	f000 f9f7 	bl	801aa94 <__multadd>
 801a6a6:	4639      	mov	r1, r7
 801a6a8:	4680      	mov	r8, r0
 801a6aa:	2300      	movs	r3, #0
 801a6ac:	220a      	movs	r2, #10
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f000 f9f0 	bl	801aa94 <__multadd>
 801a6b4:	4607      	mov	r7, r0
 801a6b6:	e7f1      	b.n	801a69c <_dtoa_r+0xb04>
 801a6b8:	9b03      	ldr	r3, [sp, #12]
 801a6ba:	9302      	str	r3, [sp, #8]
 801a6bc:	9d01      	ldr	r5, [sp, #4]
 801a6be:	ee18 0a10 	vmov	r0, s16
 801a6c2:	4631      	mov	r1, r6
 801a6c4:	f7ff f9da 	bl	8019a7c <quorem>
 801a6c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801a6cc:	9b01      	ldr	r3, [sp, #4]
 801a6ce:	f805 ab01 	strb.w	sl, [r5], #1
 801a6d2:	1aea      	subs	r2, r5, r3
 801a6d4:	9b02      	ldr	r3, [sp, #8]
 801a6d6:	4293      	cmp	r3, r2
 801a6d8:	dd09      	ble.n	801a6ee <_dtoa_r+0xb56>
 801a6da:	ee18 1a10 	vmov	r1, s16
 801a6de:	2300      	movs	r3, #0
 801a6e0:	220a      	movs	r2, #10
 801a6e2:	4620      	mov	r0, r4
 801a6e4:	f000 f9d6 	bl	801aa94 <__multadd>
 801a6e8:	ee08 0a10 	vmov	s16, r0
 801a6ec:	e7e7      	b.n	801a6be <_dtoa_r+0xb26>
 801a6ee:	9b02      	ldr	r3, [sp, #8]
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	bfc8      	it	gt
 801a6f4:	461d      	movgt	r5, r3
 801a6f6:	9b01      	ldr	r3, [sp, #4]
 801a6f8:	bfd8      	it	le
 801a6fa:	2501      	movle	r5, #1
 801a6fc:	441d      	add	r5, r3
 801a6fe:	f04f 0800 	mov.w	r8, #0
 801a702:	ee18 1a10 	vmov	r1, s16
 801a706:	2201      	movs	r2, #1
 801a708:	4620      	mov	r0, r4
 801a70a:	f000 fb73 	bl	801adf4 <__lshift>
 801a70e:	4631      	mov	r1, r6
 801a710:	ee08 0a10 	vmov	s16, r0
 801a714:	f000 fbde 	bl	801aed4 <__mcmp>
 801a718:	2800      	cmp	r0, #0
 801a71a:	dc91      	bgt.n	801a640 <_dtoa_r+0xaa8>
 801a71c:	d102      	bne.n	801a724 <_dtoa_r+0xb8c>
 801a71e:	f01a 0f01 	tst.w	sl, #1
 801a722:	d18d      	bne.n	801a640 <_dtoa_r+0xaa8>
 801a724:	462b      	mov	r3, r5
 801a726:	461d      	mov	r5, r3
 801a728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a72c:	2a30      	cmp	r2, #48	; 0x30
 801a72e:	d0fa      	beq.n	801a726 <_dtoa_r+0xb8e>
 801a730:	e6d7      	b.n	801a4e2 <_dtoa_r+0x94a>
 801a732:	9a01      	ldr	r2, [sp, #4]
 801a734:	429a      	cmp	r2, r3
 801a736:	d184      	bne.n	801a642 <_dtoa_r+0xaaa>
 801a738:	9b00      	ldr	r3, [sp, #0]
 801a73a:	3301      	adds	r3, #1
 801a73c:	9300      	str	r3, [sp, #0]
 801a73e:	2331      	movs	r3, #49	; 0x31
 801a740:	7013      	strb	r3, [r2, #0]
 801a742:	e6ce      	b.n	801a4e2 <_dtoa_r+0x94a>
 801a744:	4b09      	ldr	r3, [pc, #36]	; (801a76c <_dtoa_r+0xbd4>)
 801a746:	f7ff ba95 	b.w	8019c74 <_dtoa_r+0xdc>
 801a74a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	f47f aa6e 	bne.w	8019c2e <_dtoa_r+0x96>
 801a752:	4b07      	ldr	r3, [pc, #28]	; (801a770 <_dtoa_r+0xbd8>)
 801a754:	f7ff ba8e 	b.w	8019c74 <_dtoa_r+0xdc>
 801a758:	9b02      	ldr	r3, [sp, #8]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	dcae      	bgt.n	801a6bc <_dtoa_r+0xb24>
 801a75e:	9b06      	ldr	r3, [sp, #24]
 801a760:	2b02      	cmp	r3, #2
 801a762:	f73f aea8 	bgt.w	801a4b6 <_dtoa_r+0x91e>
 801a766:	e7a9      	b.n	801a6bc <_dtoa_r+0xb24>
 801a768:	0801c498 	.word	0x0801c498
 801a76c:	0801c2b8 	.word	0x0801c2b8
 801a770:	0801c419 	.word	0x0801c419

0801a774 <std>:
 801a774:	2300      	movs	r3, #0
 801a776:	b510      	push	{r4, lr}
 801a778:	4604      	mov	r4, r0
 801a77a:	e9c0 3300 	strd	r3, r3, [r0]
 801a77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a782:	6083      	str	r3, [r0, #8]
 801a784:	8181      	strh	r1, [r0, #12]
 801a786:	6643      	str	r3, [r0, #100]	; 0x64
 801a788:	81c2      	strh	r2, [r0, #14]
 801a78a:	6183      	str	r3, [r0, #24]
 801a78c:	4619      	mov	r1, r3
 801a78e:	2208      	movs	r2, #8
 801a790:	305c      	adds	r0, #92	; 0x5c
 801a792:	f7fe fbbb 	bl	8018f0c <memset>
 801a796:	4b05      	ldr	r3, [pc, #20]	; (801a7ac <std+0x38>)
 801a798:	6263      	str	r3, [r4, #36]	; 0x24
 801a79a:	4b05      	ldr	r3, [pc, #20]	; (801a7b0 <std+0x3c>)
 801a79c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a79e:	4b05      	ldr	r3, [pc, #20]	; (801a7b4 <std+0x40>)
 801a7a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a7a2:	4b05      	ldr	r3, [pc, #20]	; (801a7b8 <std+0x44>)
 801a7a4:	6224      	str	r4, [r4, #32]
 801a7a6:	6323      	str	r3, [r4, #48]	; 0x30
 801a7a8:	bd10      	pop	{r4, pc}
 801a7aa:	bf00      	nop
 801a7ac:	0801b671 	.word	0x0801b671
 801a7b0:	0801b693 	.word	0x0801b693
 801a7b4:	0801b6cb 	.word	0x0801b6cb
 801a7b8:	0801b6ef 	.word	0x0801b6ef

0801a7bc <_cleanup_r>:
 801a7bc:	4901      	ldr	r1, [pc, #4]	; (801a7c4 <_cleanup_r+0x8>)
 801a7be:	f000 b8c1 	b.w	801a944 <_fwalk_reent>
 801a7c2:	bf00      	nop
 801a7c4:	0801b9f5 	.word	0x0801b9f5

0801a7c8 <__sfmoreglue>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	2268      	movs	r2, #104	; 0x68
 801a7cc:	1e4d      	subs	r5, r1, #1
 801a7ce:	4355      	muls	r5, r2
 801a7d0:	460e      	mov	r6, r1
 801a7d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a7d6:	f7fe fc0d 	bl	8018ff4 <_malloc_r>
 801a7da:	4604      	mov	r4, r0
 801a7dc:	b140      	cbz	r0, 801a7f0 <__sfmoreglue+0x28>
 801a7de:	2100      	movs	r1, #0
 801a7e0:	e9c0 1600 	strd	r1, r6, [r0]
 801a7e4:	300c      	adds	r0, #12
 801a7e6:	60a0      	str	r0, [r4, #8]
 801a7e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a7ec:	f7fe fb8e 	bl	8018f0c <memset>
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	bd70      	pop	{r4, r5, r6, pc}

0801a7f4 <__sfp_lock_acquire>:
 801a7f4:	4801      	ldr	r0, [pc, #4]	; (801a7fc <__sfp_lock_acquire+0x8>)
 801a7f6:	f000 b8ca 	b.w	801a98e <__retarget_lock_acquire_recursive>
 801a7fa:	bf00      	nop
 801a7fc:	20003039 	.word	0x20003039

0801a800 <__sfp_lock_release>:
 801a800:	4801      	ldr	r0, [pc, #4]	; (801a808 <__sfp_lock_release+0x8>)
 801a802:	f000 b8c5 	b.w	801a990 <__retarget_lock_release_recursive>
 801a806:	bf00      	nop
 801a808:	20003039 	.word	0x20003039

0801a80c <__sinit_lock_acquire>:
 801a80c:	4801      	ldr	r0, [pc, #4]	; (801a814 <__sinit_lock_acquire+0x8>)
 801a80e:	f000 b8be 	b.w	801a98e <__retarget_lock_acquire_recursive>
 801a812:	bf00      	nop
 801a814:	2000303a 	.word	0x2000303a

0801a818 <__sinit_lock_release>:
 801a818:	4801      	ldr	r0, [pc, #4]	; (801a820 <__sinit_lock_release+0x8>)
 801a81a:	f000 b8b9 	b.w	801a990 <__retarget_lock_release_recursive>
 801a81e:	bf00      	nop
 801a820:	2000303a 	.word	0x2000303a

0801a824 <__sinit>:
 801a824:	b510      	push	{r4, lr}
 801a826:	4604      	mov	r4, r0
 801a828:	f7ff fff0 	bl	801a80c <__sinit_lock_acquire>
 801a82c:	69a3      	ldr	r3, [r4, #24]
 801a82e:	b11b      	cbz	r3, 801a838 <__sinit+0x14>
 801a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a834:	f7ff bff0 	b.w	801a818 <__sinit_lock_release>
 801a838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a83c:	6523      	str	r3, [r4, #80]	; 0x50
 801a83e:	4b13      	ldr	r3, [pc, #76]	; (801a88c <__sinit+0x68>)
 801a840:	4a13      	ldr	r2, [pc, #76]	; (801a890 <__sinit+0x6c>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	62a2      	str	r2, [r4, #40]	; 0x28
 801a846:	42a3      	cmp	r3, r4
 801a848:	bf04      	itt	eq
 801a84a:	2301      	moveq	r3, #1
 801a84c:	61a3      	streq	r3, [r4, #24]
 801a84e:	4620      	mov	r0, r4
 801a850:	f000 f820 	bl	801a894 <__sfp>
 801a854:	6060      	str	r0, [r4, #4]
 801a856:	4620      	mov	r0, r4
 801a858:	f000 f81c 	bl	801a894 <__sfp>
 801a85c:	60a0      	str	r0, [r4, #8]
 801a85e:	4620      	mov	r0, r4
 801a860:	f000 f818 	bl	801a894 <__sfp>
 801a864:	2200      	movs	r2, #0
 801a866:	60e0      	str	r0, [r4, #12]
 801a868:	2104      	movs	r1, #4
 801a86a:	6860      	ldr	r0, [r4, #4]
 801a86c:	f7ff ff82 	bl	801a774 <std>
 801a870:	68a0      	ldr	r0, [r4, #8]
 801a872:	2201      	movs	r2, #1
 801a874:	2109      	movs	r1, #9
 801a876:	f7ff ff7d 	bl	801a774 <std>
 801a87a:	68e0      	ldr	r0, [r4, #12]
 801a87c:	2202      	movs	r2, #2
 801a87e:	2112      	movs	r1, #18
 801a880:	f7ff ff78 	bl	801a774 <std>
 801a884:	2301      	movs	r3, #1
 801a886:	61a3      	str	r3, [r4, #24]
 801a888:	e7d2      	b.n	801a830 <__sinit+0xc>
 801a88a:	bf00      	nop
 801a88c:	0801c2a4 	.word	0x0801c2a4
 801a890:	0801a7bd 	.word	0x0801a7bd

0801a894 <__sfp>:
 801a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a896:	4607      	mov	r7, r0
 801a898:	f7ff ffac 	bl	801a7f4 <__sfp_lock_acquire>
 801a89c:	4b1e      	ldr	r3, [pc, #120]	; (801a918 <__sfp+0x84>)
 801a89e:	681e      	ldr	r6, [r3, #0]
 801a8a0:	69b3      	ldr	r3, [r6, #24]
 801a8a2:	b913      	cbnz	r3, 801a8aa <__sfp+0x16>
 801a8a4:	4630      	mov	r0, r6
 801a8a6:	f7ff ffbd 	bl	801a824 <__sinit>
 801a8aa:	3648      	adds	r6, #72	; 0x48
 801a8ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a8b0:	3b01      	subs	r3, #1
 801a8b2:	d503      	bpl.n	801a8bc <__sfp+0x28>
 801a8b4:	6833      	ldr	r3, [r6, #0]
 801a8b6:	b30b      	cbz	r3, 801a8fc <__sfp+0x68>
 801a8b8:	6836      	ldr	r6, [r6, #0]
 801a8ba:	e7f7      	b.n	801a8ac <__sfp+0x18>
 801a8bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a8c0:	b9d5      	cbnz	r5, 801a8f8 <__sfp+0x64>
 801a8c2:	4b16      	ldr	r3, [pc, #88]	; (801a91c <__sfp+0x88>)
 801a8c4:	60e3      	str	r3, [r4, #12]
 801a8c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a8ca:	6665      	str	r5, [r4, #100]	; 0x64
 801a8cc:	f000 f85e 	bl	801a98c <__retarget_lock_init_recursive>
 801a8d0:	f7ff ff96 	bl	801a800 <__sfp_lock_release>
 801a8d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a8d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a8dc:	6025      	str	r5, [r4, #0]
 801a8de:	61a5      	str	r5, [r4, #24]
 801a8e0:	2208      	movs	r2, #8
 801a8e2:	4629      	mov	r1, r5
 801a8e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a8e8:	f7fe fb10 	bl	8018f0c <memset>
 801a8ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a8f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8f8:	3468      	adds	r4, #104	; 0x68
 801a8fa:	e7d9      	b.n	801a8b0 <__sfp+0x1c>
 801a8fc:	2104      	movs	r1, #4
 801a8fe:	4638      	mov	r0, r7
 801a900:	f7ff ff62 	bl	801a7c8 <__sfmoreglue>
 801a904:	4604      	mov	r4, r0
 801a906:	6030      	str	r0, [r6, #0]
 801a908:	2800      	cmp	r0, #0
 801a90a:	d1d5      	bne.n	801a8b8 <__sfp+0x24>
 801a90c:	f7ff ff78 	bl	801a800 <__sfp_lock_release>
 801a910:	230c      	movs	r3, #12
 801a912:	603b      	str	r3, [r7, #0]
 801a914:	e7ee      	b.n	801a8f4 <__sfp+0x60>
 801a916:	bf00      	nop
 801a918:	0801c2a4 	.word	0x0801c2a4
 801a91c:	ffff0001 	.word	0xffff0001

0801a920 <fiprintf>:
 801a920:	b40e      	push	{r1, r2, r3}
 801a922:	b503      	push	{r0, r1, lr}
 801a924:	4601      	mov	r1, r0
 801a926:	ab03      	add	r3, sp, #12
 801a928:	4805      	ldr	r0, [pc, #20]	; (801a940 <fiprintf+0x20>)
 801a92a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a92e:	6800      	ldr	r0, [r0, #0]
 801a930:	9301      	str	r3, [sp, #4]
 801a932:	f000 fd6d 	bl	801b410 <_vfiprintf_r>
 801a936:	b002      	add	sp, #8
 801a938:	f85d eb04 	ldr.w	lr, [sp], #4
 801a93c:	b003      	add	sp, #12
 801a93e:	4770      	bx	lr
 801a940:	20000190 	.word	0x20000190

0801a944 <_fwalk_reent>:
 801a944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a948:	4606      	mov	r6, r0
 801a94a:	4688      	mov	r8, r1
 801a94c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a950:	2700      	movs	r7, #0
 801a952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a956:	f1b9 0901 	subs.w	r9, r9, #1
 801a95a:	d505      	bpl.n	801a968 <_fwalk_reent+0x24>
 801a95c:	6824      	ldr	r4, [r4, #0]
 801a95e:	2c00      	cmp	r4, #0
 801a960:	d1f7      	bne.n	801a952 <_fwalk_reent+0xe>
 801a962:	4638      	mov	r0, r7
 801a964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a968:	89ab      	ldrh	r3, [r5, #12]
 801a96a:	2b01      	cmp	r3, #1
 801a96c:	d907      	bls.n	801a97e <_fwalk_reent+0x3a>
 801a96e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a972:	3301      	adds	r3, #1
 801a974:	d003      	beq.n	801a97e <_fwalk_reent+0x3a>
 801a976:	4629      	mov	r1, r5
 801a978:	4630      	mov	r0, r6
 801a97a:	47c0      	blx	r8
 801a97c:	4307      	orrs	r7, r0
 801a97e:	3568      	adds	r5, #104	; 0x68
 801a980:	e7e9      	b.n	801a956 <_fwalk_reent+0x12>
	...

0801a984 <_localeconv_r>:
 801a984:	4800      	ldr	r0, [pc, #0]	; (801a988 <_localeconv_r+0x4>)
 801a986:	4770      	bx	lr
 801a988:	200002e4 	.word	0x200002e4

0801a98c <__retarget_lock_init_recursive>:
 801a98c:	4770      	bx	lr

0801a98e <__retarget_lock_acquire_recursive>:
 801a98e:	4770      	bx	lr

0801a990 <__retarget_lock_release_recursive>:
 801a990:	4770      	bx	lr

0801a992 <__ascii_mbtowc>:
 801a992:	b082      	sub	sp, #8
 801a994:	b901      	cbnz	r1, 801a998 <__ascii_mbtowc+0x6>
 801a996:	a901      	add	r1, sp, #4
 801a998:	b142      	cbz	r2, 801a9ac <__ascii_mbtowc+0x1a>
 801a99a:	b14b      	cbz	r3, 801a9b0 <__ascii_mbtowc+0x1e>
 801a99c:	7813      	ldrb	r3, [r2, #0]
 801a99e:	600b      	str	r3, [r1, #0]
 801a9a0:	7812      	ldrb	r2, [r2, #0]
 801a9a2:	1e10      	subs	r0, r2, #0
 801a9a4:	bf18      	it	ne
 801a9a6:	2001      	movne	r0, #1
 801a9a8:	b002      	add	sp, #8
 801a9aa:	4770      	bx	lr
 801a9ac:	4610      	mov	r0, r2
 801a9ae:	e7fb      	b.n	801a9a8 <__ascii_mbtowc+0x16>
 801a9b0:	f06f 0001 	mvn.w	r0, #1
 801a9b4:	e7f8      	b.n	801a9a8 <__ascii_mbtowc+0x16>
	...

0801a9b8 <__malloc_lock>:
 801a9b8:	4801      	ldr	r0, [pc, #4]	; (801a9c0 <__malloc_lock+0x8>)
 801a9ba:	f7ff bfe8 	b.w	801a98e <__retarget_lock_acquire_recursive>
 801a9be:	bf00      	nop
 801a9c0:	20003038 	.word	0x20003038

0801a9c4 <__malloc_unlock>:
 801a9c4:	4801      	ldr	r0, [pc, #4]	; (801a9cc <__malloc_unlock+0x8>)
 801a9c6:	f7ff bfe3 	b.w	801a990 <__retarget_lock_release_recursive>
 801a9ca:	bf00      	nop
 801a9cc:	20003038 	.word	0x20003038

0801a9d0 <_Balloc>:
 801a9d0:	b570      	push	{r4, r5, r6, lr}
 801a9d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a9d4:	4604      	mov	r4, r0
 801a9d6:	460d      	mov	r5, r1
 801a9d8:	b976      	cbnz	r6, 801a9f8 <_Balloc+0x28>
 801a9da:	2010      	movs	r0, #16
 801a9dc:	f7fe fa80 	bl	8018ee0 <malloc>
 801a9e0:	4602      	mov	r2, r0
 801a9e2:	6260      	str	r0, [r4, #36]	; 0x24
 801a9e4:	b920      	cbnz	r0, 801a9f0 <_Balloc+0x20>
 801a9e6:	4b18      	ldr	r3, [pc, #96]	; (801aa48 <_Balloc+0x78>)
 801a9e8:	4818      	ldr	r0, [pc, #96]	; (801aa4c <_Balloc+0x7c>)
 801a9ea:	2166      	movs	r1, #102	; 0x66
 801a9ec:	f7ff f828 	bl	8019a40 <__assert_func>
 801a9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a9f4:	6006      	str	r6, [r0, #0]
 801a9f6:	60c6      	str	r6, [r0, #12]
 801a9f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a9fa:	68f3      	ldr	r3, [r6, #12]
 801a9fc:	b183      	cbz	r3, 801aa20 <_Balloc+0x50>
 801a9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa00:	68db      	ldr	r3, [r3, #12]
 801aa02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801aa06:	b9b8      	cbnz	r0, 801aa38 <_Balloc+0x68>
 801aa08:	2101      	movs	r1, #1
 801aa0a:	fa01 f605 	lsl.w	r6, r1, r5
 801aa0e:	1d72      	adds	r2, r6, #5
 801aa10:	0092      	lsls	r2, r2, #2
 801aa12:	4620      	mov	r0, r4
 801aa14:	f000 fb60 	bl	801b0d8 <_calloc_r>
 801aa18:	b160      	cbz	r0, 801aa34 <_Balloc+0x64>
 801aa1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801aa1e:	e00e      	b.n	801aa3e <_Balloc+0x6e>
 801aa20:	2221      	movs	r2, #33	; 0x21
 801aa22:	2104      	movs	r1, #4
 801aa24:	4620      	mov	r0, r4
 801aa26:	f000 fb57 	bl	801b0d8 <_calloc_r>
 801aa2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aa2c:	60f0      	str	r0, [r6, #12]
 801aa2e:	68db      	ldr	r3, [r3, #12]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d1e4      	bne.n	801a9fe <_Balloc+0x2e>
 801aa34:	2000      	movs	r0, #0
 801aa36:	bd70      	pop	{r4, r5, r6, pc}
 801aa38:	6802      	ldr	r2, [r0, #0]
 801aa3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801aa3e:	2300      	movs	r3, #0
 801aa40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801aa44:	e7f7      	b.n	801aa36 <_Balloc+0x66>
 801aa46:	bf00      	nop
 801aa48:	0801c426 	.word	0x0801c426
 801aa4c:	0801c516 	.word	0x0801c516

0801aa50 <_Bfree>:
 801aa50:	b570      	push	{r4, r5, r6, lr}
 801aa52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801aa54:	4605      	mov	r5, r0
 801aa56:	460c      	mov	r4, r1
 801aa58:	b976      	cbnz	r6, 801aa78 <_Bfree+0x28>
 801aa5a:	2010      	movs	r0, #16
 801aa5c:	f7fe fa40 	bl	8018ee0 <malloc>
 801aa60:	4602      	mov	r2, r0
 801aa62:	6268      	str	r0, [r5, #36]	; 0x24
 801aa64:	b920      	cbnz	r0, 801aa70 <_Bfree+0x20>
 801aa66:	4b09      	ldr	r3, [pc, #36]	; (801aa8c <_Bfree+0x3c>)
 801aa68:	4809      	ldr	r0, [pc, #36]	; (801aa90 <_Bfree+0x40>)
 801aa6a:	218a      	movs	r1, #138	; 0x8a
 801aa6c:	f7fe ffe8 	bl	8019a40 <__assert_func>
 801aa70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801aa74:	6006      	str	r6, [r0, #0]
 801aa76:	60c6      	str	r6, [r0, #12]
 801aa78:	b13c      	cbz	r4, 801aa8a <_Bfree+0x3a>
 801aa7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801aa7c:	6862      	ldr	r2, [r4, #4]
 801aa7e:	68db      	ldr	r3, [r3, #12]
 801aa80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801aa84:	6021      	str	r1, [r4, #0]
 801aa86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801aa8a:	bd70      	pop	{r4, r5, r6, pc}
 801aa8c:	0801c426 	.word	0x0801c426
 801aa90:	0801c516 	.word	0x0801c516

0801aa94 <__multadd>:
 801aa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa98:	690d      	ldr	r5, [r1, #16]
 801aa9a:	4607      	mov	r7, r0
 801aa9c:	460c      	mov	r4, r1
 801aa9e:	461e      	mov	r6, r3
 801aaa0:	f101 0c14 	add.w	ip, r1, #20
 801aaa4:	2000      	movs	r0, #0
 801aaa6:	f8dc 3000 	ldr.w	r3, [ip]
 801aaaa:	b299      	uxth	r1, r3
 801aaac:	fb02 6101 	mla	r1, r2, r1, r6
 801aab0:	0c1e      	lsrs	r6, r3, #16
 801aab2:	0c0b      	lsrs	r3, r1, #16
 801aab4:	fb02 3306 	mla	r3, r2, r6, r3
 801aab8:	b289      	uxth	r1, r1
 801aaba:	3001      	adds	r0, #1
 801aabc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801aac0:	4285      	cmp	r5, r0
 801aac2:	f84c 1b04 	str.w	r1, [ip], #4
 801aac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801aaca:	dcec      	bgt.n	801aaa6 <__multadd+0x12>
 801aacc:	b30e      	cbz	r6, 801ab12 <__multadd+0x7e>
 801aace:	68a3      	ldr	r3, [r4, #8]
 801aad0:	42ab      	cmp	r3, r5
 801aad2:	dc19      	bgt.n	801ab08 <__multadd+0x74>
 801aad4:	6861      	ldr	r1, [r4, #4]
 801aad6:	4638      	mov	r0, r7
 801aad8:	3101      	adds	r1, #1
 801aada:	f7ff ff79 	bl	801a9d0 <_Balloc>
 801aade:	4680      	mov	r8, r0
 801aae0:	b928      	cbnz	r0, 801aaee <__multadd+0x5a>
 801aae2:	4602      	mov	r2, r0
 801aae4:	4b0c      	ldr	r3, [pc, #48]	; (801ab18 <__multadd+0x84>)
 801aae6:	480d      	ldr	r0, [pc, #52]	; (801ab1c <__multadd+0x88>)
 801aae8:	21b5      	movs	r1, #181	; 0xb5
 801aaea:	f7fe ffa9 	bl	8019a40 <__assert_func>
 801aaee:	6922      	ldr	r2, [r4, #16]
 801aaf0:	3202      	adds	r2, #2
 801aaf2:	f104 010c 	add.w	r1, r4, #12
 801aaf6:	0092      	lsls	r2, r2, #2
 801aaf8:	300c      	adds	r0, #12
 801aafa:	f7fe f9f9 	bl	8018ef0 <memcpy>
 801aafe:	4621      	mov	r1, r4
 801ab00:	4638      	mov	r0, r7
 801ab02:	f7ff ffa5 	bl	801aa50 <_Bfree>
 801ab06:	4644      	mov	r4, r8
 801ab08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ab0c:	3501      	adds	r5, #1
 801ab0e:	615e      	str	r6, [r3, #20]
 801ab10:	6125      	str	r5, [r4, #16]
 801ab12:	4620      	mov	r0, r4
 801ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ab18:	0801c498 	.word	0x0801c498
 801ab1c:	0801c516 	.word	0x0801c516

0801ab20 <__hi0bits>:
 801ab20:	0c03      	lsrs	r3, r0, #16
 801ab22:	041b      	lsls	r3, r3, #16
 801ab24:	b9d3      	cbnz	r3, 801ab5c <__hi0bits+0x3c>
 801ab26:	0400      	lsls	r0, r0, #16
 801ab28:	2310      	movs	r3, #16
 801ab2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ab2e:	bf04      	itt	eq
 801ab30:	0200      	lsleq	r0, r0, #8
 801ab32:	3308      	addeq	r3, #8
 801ab34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ab38:	bf04      	itt	eq
 801ab3a:	0100      	lsleq	r0, r0, #4
 801ab3c:	3304      	addeq	r3, #4
 801ab3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ab42:	bf04      	itt	eq
 801ab44:	0080      	lsleq	r0, r0, #2
 801ab46:	3302      	addeq	r3, #2
 801ab48:	2800      	cmp	r0, #0
 801ab4a:	db05      	blt.n	801ab58 <__hi0bits+0x38>
 801ab4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ab50:	f103 0301 	add.w	r3, r3, #1
 801ab54:	bf08      	it	eq
 801ab56:	2320      	moveq	r3, #32
 801ab58:	4618      	mov	r0, r3
 801ab5a:	4770      	bx	lr
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	e7e4      	b.n	801ab2a <__hi0bits+0xa>

0801ab60 <__lo0bits>:
 801ab60:	6803      	ldr	r3, [r0, #0]
 801ab62:	f013 0207 	ands.w	r2, r3, #7
 801ab66:	4601      	mov	r1, r0
 801ab68:	d00b      	beq.n	801ab82 <__lo0bits+0x22>
 801ab6a:	07da      	lsls	r2, r3, #31
 801ab6c:	d423      	bmi.n	801abb6 <__lo0bits+0x56>
 801ab6e:	0798      	lsls	r0, r3, #30
 801ab70:	bf49      	itett	mi
 801ab72:	085b      	lsrmi	r3, r3, #1
 801ab74:	089b      	lsrpl	r3, r3, #2
 801ab76:	2001      	movmi	r0, #1
 801ab78:	600b      	strmi	r3, [r1, #0]
 801ab7a:	bf5c      	itt	pl
 801ab7c:	600b      	strpl	r3, [r1, #0]
 801ab7e:	2002      	movpl	r0, #2
 801ab80:	4770      	bx	lr
 801ab82:	b298      	uxth	r0, r3
 801ab84:	b9a8      	cbnz	r0, 801abb2 <__lo0bits+0x52>
 801ab86:	0c1b      	lsrs	r3, r3, #16
 801ab88:	2010      	movs	r0, #16
 801ab8a:	b2da      	uxtb	r2, r3
 801ab8c:	b90a      	cbnz	r2, 801ab92 <__lo0bits+0x32>
 801ab8e:	3008      	adds	r0, #8
 801ab90:	0a1b      	lsrs	r3, r3, #8
 801ab92:	071a      	lsls	r2, r3, #28
 801ab94:	bf04      	itt	eq
 801ab96:	091b      	lsreq	r3, r3, #4
 801ab98:	3004      	addeq	r0, #4
 801ab9a:	079a      	lsls	r2, r3, #30
 801ab9c:	bf04      	itt	eq
 801ab9e:	089b      	lsreq	r3, r3, #2
 801aba0:	3002      	addeq	r0, #2
 801aba2:	07da      	lsls	r2, r3, #31
 801aba4:	d403      	bmi.n	801abae <__lo0bits+0x4e>
 801aba6:	085b      	lsrs	r3, r3, #1
 801aba8:	f100 0001 	add.w	r0, r0, #1
 801abac:	d005      	beq.n	801abba <__lo0bits+0x5a>
 801abae:	600b      	str	r3, [r1, #0]
 801abb0:	4770      	bx	lr
 801abb2:	4610      	mov	r0, r2
 801abb4:	e7e9      	b.n	801ab8a <__lo0bits+0x2a>
 801abb6:	2000      	movs	r0, #0
 801abb8:	4770      	bx	lr
 801abba:	2020      	movs	r0, #32
 801abbc:	4770      	bx	lr
	...

0801abc0 <__i2b>:
 801abc0:	b510      	push	{r4, lr}
 801abc2:	460c      	mov	r4, r1
 801abc4:	2101      	movs	r1, #1
 801abc6:	f7ff ff03 	bl	801a9d0 <_Balloc>
 801abca:	4602      	mov	r2, r0
 801abcc:	b928      	cbnz	r0, 801abda <__i2b+0x1a>
 801abce:	4b05      	ldr	r3, [pc, #20]	; (801abe4 <__i2b+0x24>)
 801abd0:	4805      	ldr	r0, [pc, #20]	; (801abe8 <__i2b+0x28>)
 801abd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801abd6:	f7fe ff33 	bl	8019a40 <__assert_func>
 801abda:	2301      	movs	r3, #1
 801abdc:	6144      	str	r4, [r0, #20]
 801abde:	6103      	str	r3, [r0, #16]
 801abe0:	bd10      	pop	{r4, pc}
 801abe2:	bf00      	nop
 801abe4:	0801c498 	.word	0x0801c498
 801abe8:	0801c516 	.word	0x0801c516

0801abec <__multiply>:
 801abec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abf0:	4691      	mov	r9, r2
 801abf2:	690a      	ldr	r2, [r1, #16]
 801abf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801abf8:	429a      	cmp	r2, r3
 801abfa:	bfb8      	it	lt
 801abfc:	460b      	movlt	r3, r1
 801abfe:	460c      	mov	r4, r1
 801ac00:	bfbc      	itt	lt
 801ac02:	464c      	movlt	r4, r9
 801ac04:	4699      	movlt	r9, r3
 801ac06:	6927      	ldr	r7, [r4, #16]
 801ac08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ac0c:	68a3      	ldr	r3, [r4, #8]
 801ac0e:	6861      	ldr	r1, [r4, #4]
 801ac10:	eb07 060a 	add.w	r6, r7, sl
 801ac14:	42b3      	cmp	r3, r6
 801ac16:	b085      	sub	sp, #20
 801ac18:	bfb8      	it	lt
 801ac1a:	3101      	addlt	r1, #1
 801ac1c:	f7ff fed8 	bl	801a9d0 <_Balloc>
 801ac20:	b930      	cbnz	r0, 801ac30 <__multiply+0x44>
 801ac22:	4602      	mov	r2, r0
 801ac24:	4b44      	ldr	r3, [pc, #272]	; (801ad38 <__multiply+0x14c>)
 801ac26:	4845      	ldr	r0, [pc, #276]	; (801ad3c <__multiply+0x150>)
 801ac28:	f240 115d 	movw	r1, #349	; 0x15d
 801ac2c:	f7fe ff08 	bl	8019a40 <__assert_func>
 801ac30:	f100 0514 	add.w	r5, r0, #20
 801ac34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801ac38:	462b      	mov	r3, r5
 801ac3a:	2200      	movs	r2, #0
 801ac3c:	4543      	cmp	r3, r8
 801ac3e:	d321      	bcc.n	801ac84 <__multiply+0x98>
 801ac40:	f104 0314 	add.w	r3, r4, #20
 801ac44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ac48:	f109 0314 	add.w	r3, r9, #20
 801ac4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801ac50:	9202      	str	r2, [sp, #8]
 801ac52:	1b3a      	subs	r2, r7, r4
 801ac54:	3a15      	subs	r2, #21
 801ac56:	f022 0203 	bic.w	r2, r2, #3
 801ac5a:	3204      	adds	r2, #4
 801ac5c:	f104 0115 	add.w	r1, r4, #21
 801ac60:	428f      	cmp	r7, r1
 801ac62:	bf38      	it	cc
 801ac64:	2204      	movcc	r2, #4
 801ac66:	9201      	str	r2, [sp, #4]
 801ac68:	9a02      	ldr	r2, [sp, #8]
 801ac6a:	9303      	str	r3, [sp, #12]
 801ac6c:	429a      	cmp	r2, r3
 801ac6e:	d80c      	bhi.n	801ac8a <__multiply+0x9e>
 801ac70:	2e00      	cmp	r6, #0
 801ac72:	dd03      	ble.n	801ac7c <__multiply+0x90>
 801ac74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d05a      	beq.n	801ad32 <__multiply+0x146>
 801ac7c:	6106      	str	r6, [r0, #16]
 801ac7e:	b005      	add	sp, #20
 801ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac84:	f843 2b04 	str.w	r2, [r3], #4
 801ac88:	e7d8      	b.n	801ac3c <__multiply+0x50>
 801ac8a:	f8b3 a000 	ldrh.w	sl, [r3]
 801ac8e:	f1ba 0f00 	cmp.w	sl, #0
 801ac92:	d024      	beq.n	801acde <__multiply+0xf2>
 801ac94:	f104 0e14 	add.w	lr, r4, #20
 801ac98:	46a9      	mov	r9, r5
 801ac9a:	f04f 0c00 	mov.w	ip, #0
 801ac9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 801aca2:	f8d9 1000 	ldr.w	r1, [r9]
 801aca6:	fa1f fb82 	uxth.w	fp, r2
 801acaa:	b289      	uxth	r1, r1
 801acac:	fb0a 110b 	mla	r1, sl, fp, r1
 801acb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801acb4:	f8d9 2000 	ldr.w	r2, [r9]
 801acb8:	4461      	add	r1, ip
 801acba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801acbe:	fb0a c20b 	mla	r2, sl, fp, ip
 801acc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801acc6:	b289      	uxth	r1, r1
 801acc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801accc:	4577      	cmp	r7, lr
 801acce:	f849 1b04 	str.w	r1, [r9], #4
 801acd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801acd6:	d8e2      	bhi.n	801ac9e <__multiply+0xb2>
 801acd8:	9a01      	ldr	r2, [sp, #4]
 801acda:	f845 c002 	str.w	ip, [r5, r2]
 801acde:	9a03      	ldr	r2, [sp, #12]
 801ace0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ace4:	3304      	adds	r3, #4
 801ace6:	f1b9 0f00 	cmp.w	r9, #0
 801acea:	d020      	beq.n	801ad2e <__multiply+0x142>
 801acec:	6829      	ldr	r1, [r5, #0]
 801acee:	f104 0c14 	add.w	ip, r4, #20
 801acf2:	46ae      	mov	lr, r5
 801acf4:	f04f 0a00 	mov.w	sl, #0
 801acf8:	f8bc b000 	ldrh.w	fp, [ip]
 801acfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ad00:	fb09 220b 	mla	r2, r9, fp, r2
 801ad04:	4492      	add	sl, r2
 801ad06:	b289      	uxth	r1, r1
 801ad08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ad0c:	f84e 1b04 	str.w	r1, [lr], #4
 801ad10:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ad14:	f8be 1000 	ldrh.w	r1, [lr]
 801ad18:	0c12      	lsrs	r2, r2, #16
 801ad1a:	fb09 1102 	mla	r1, r9, r2, r1
 801ad1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ad22:	4567      	cmp	r7, ip
 801ad24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ad28:	d8e6      	bhi.n	801acf8 <__multiply+0x10c>
 801ad2a:	9a01      	ldr	r2, [sp, #4]
 801ad2c:	50a9      	str	r1, [r5, r2]
 801ad2e:	3504      	adds	r5, #4
 801ad30:	e79a      	b.n	801ac68 <__multiply+0x7c>
 801ad32:	3e01      	subs	r6, #1
 801ad34:	e79c      	b.n	801ac70 <__multiply+0x84>
 801ad36:	bf00      	nop
 801ad38:	0801c498 	.word	0x0801c498
 801ad3c:	0801c516 	.word	0x0801c516

0801ad40 <__pow5mult>:
 801ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad44:	4615      	mov	r5, r2
 801ad46:	f012 0203 	ands.w	r2, r2, #3
 801ad4a:	4606      	mov	r6, r0
 801ad4c:	460f      	mov	r7, r1
 801ad4e:	d007      	beq.n	801ad60 <__pow5mult+0x20>
 801ad50:	4c25      	ldr	r4, [pc, #148]	; (801ade8 <__pow5mult+0xa8>)
 801ad52:	3a01      	subs	r2, #1
 801ad54:	2300      	movs	r3, #0
 801ad56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ad5a:	f7ff fe9b 	bl	801aa94 <__multadd>
 801ad5e:	4607      	mov	r7, r0
 801ad60:	10ad      	asrs	r5, r5, #2
 801ad62:	d03d      	beq.n	801ade0 <__pow5mult+0xa0>
 801ad64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ad66:	b97c      	cbnz	r4, 801ad88 <__pow5mult+0x48>
 801ad68:	2010      	movs	r0, #16
 801ad6a:	f7fe f8b9 	bl	8018ee0 <malloc>
 801ad6e:	4602      	mov	r2, r0
 801ad70:	6270      	str	r0, [r6, #36]	; 0x24
 801ad72:	b928      	cbnz	r0, 801ad80 <__pow5mult+0x40>
 801ad74:	4b1d      	ldr	r3, [pc, #116]	; (801adec <__pow5mult+0xac>)
 801ad76:	481e      	ldr	r0, [pc, #120]	; (801adf0 <__pow5mult+0xb0>)
 801ad78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ad7c:	f7fe fe60 	bl	8019a40 <__assert_func>
 801ad80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ad84:	6004      	str	r4, [r0, #0]
 801ad86:	60c4      	str	r4, [r0, #12]
 801ad88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ad8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ad90:	b94c      	cbnz	r4, 801ada6 <__pow5mult+0x66>
 801ad92:	f240 2171 	movw	r1, #625	; 0x271
 801ad96:	4630      	mov	r0, r6
 801ad98:	f7ff ff12 	bl	801abc0 <__i2b>
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ada2:	4604      	mov	r4, r0
 801ada4:	6003      	str	r3, [r0, #0]
 801ada6:	f04f 0900 	mov.w	r9, #0
 801adaa:	07eb      	lsls	r3, r5, #31
 801adac:	d50a      	bpl.n	801adc4 <__pow5mult+0x84>
 801adae:	4639      	mov	r1, r7
 801adb0:	4622      	mov	r2, r4
 801adb2:	4630      	mov	r0, r6
 801adb4:	f7ff ff1a 	bl	801abec <__multiply>
 801adb8:	4639      	mov	r1, r7
 801adba:	4680      	mov	r8, r0
 801adbc:	4630      	mov	r0, r6
 801adbe:	f7ff fe47 	bl	801aa50 <_Bfree>
 801adc2:	4647      	mov	r7, r8
 801adc4:	106d      	asrs	r5, r5, #1
 801adc6:	d00b      	beq.n	801ade0 <__pow5mult+0xa0>
 801adc8:	6820      	ldr	r0, [r4, #0]
 801adca:	b938      	cbnz	r0, 801addc <__pow5mult+0x9c>
 801adcc:	4622      	mov	r2, r4
 801adce:	4621      	mov	r1, r4
 801add0:	4630      	mov	r0, r6
 801add2:	f7ff ff0b 	bl	801abec <__multiply>
 801add6:	6020      	str	r0, [r4, #0]
 801add8:	f8c0 9000 	str.w	r9, [r0]
 801addc:	4604      	mov	r4, r0
 801adde:	e7e4      	b.n	801adaa <__pow5mult+0x6a>
 801ade0:	4638      	mov	r0, r7
 801ade2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ade6:	bf00      	nop
 801ade8:	0801c668 	.word	0x0801c668
 801adec:	0801c426 	.word	0x0801c426
 801adf0:	0801c516 	.word	0x0801c516

0801adf4 <__lshift>:
 801adf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801adf8:	460c      	mov	r4, r1
 801adfa:	6849      	ldr	r1, [r1, #4]
 801adfc:	6923      	ldr	r3, [r4, #16]
 801adfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ae02:	68a3      	ldr	r3, [r4, #8]
 801ae04:	4607      	mov	r7, r0
 801ae06:	4691      	mov	r9, r2
 801ae08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ae0c:	f108 0601 	add.w	r6, r8, #1
 801ae10:	42b3      	cmp	r3, r6
 801ae12:	db0b      	blt.n	801ae2c <__lshift+0x38>
 801ae14:	4638      	mov	r0, r7
 801ae16:	f7ff fddb 	bl	801a9d0 <_Balloc>
 801ae1a:	4605      	mov	r5, r0
 801ae1c:	b948      	cbnz	r0, 801ae32 <__lshift+0x3e>
 801ae1e:	4602      	mov	r2, r0
 801ae20:	4b2a      	ldr	r3, [pc, #168]	; (801aecc <__lshift+0xd8>)
 801ae22:	482b      	ldr	r0, [pc, #172]	; (801aed0 <__lshift+0xdc>)
 801ae24:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ae28:	f7fe fe0a 	bl	8019a40 <__assert_func>
 801ae2c:	3101      	adds	r1, #1
 801ae2e:	005b      	lsls	r3, r3, #1
 801ae30:	e7ee      	b.n	801ae10 <__lshift+0x1c>
 801ae32:	2300      	movs	r3, #0
 801ae34:	f100 0114 	add.w	r1, r0, #20
 801ae38:	f100 0210 	add.w	r2, r0, #16
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	4553      	cmp	r3, sl
 801ae40:	db37      	blt.n	801aeb2 <__lshift+0xbe>
 801ae42:	6920      	ldr	r0, [r4, #16]
 801ae44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ae48:	f104 0314 	add.w	r3, r4, #20
 801ae4c:	f019 091f 	ands.w	r9, r9, #31
 801ae50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ae54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ae58:	d02f      	beq.n	801aeba <__lshift+0xc6>
 801ae5a:	f1c9 0e20 	rsb	lr, r9, #32
 801ae5e:	468a      	mov	sl, r1
 801ae60:	f04f 0c00 	mov.w	ip, #0
 801ae64:	681a      	ldr	r2, [r3, #0]
 801ae66:	fa02 f209 	lsl.w	r2, r2, r9
 801ae6a:	ea42 020c 	orr.w	r2, r2, ip
 801ae6e:	f84a 2b04 	str.w	r2, [sl], #4
 801ae72:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae76:	4298      	cmp	r0, r3
 801ae78:	fa22 fc0e 	lsr.w	ip, r2, lr
 801ae7c:	d8f2      	bhi.n	801ae64 <__lshift+0x70>
 801ae7e:	1b03      	subs	r3, r0, r4
 801ae80:	3b15      	subs	r3, #21
 801ae82:	f023 0303 	bic.w	r3, r3, #3
 801ae86:	3304      	adds	r3, #4
 801ae88:	f104 0215 	add.w	r2, r4, #21
 801ae8c:	4290      	cmp	r0, r2
 801ae8e:	bf38      	it	cc
 801ae90:	2304      	movcc	r3, #4
 801ae92:	f841 c003 	str.w	ip, [r1, r3]
 801ae96:	f1bc 0f00 	cmp.w	ip, #0
 801ae9a:	d001      	beq.n	801aea0 <__lshift+0xac>
 801ae9c:	f108 0602 	add.w	r6, r8, #2
 801aea0:	3e01      	subs	r6, #1
 801aea2:	4638      	mov	r0, r7
 801aea4:	612e      	str	r6, [r5, #16]
 801aea6:	4621      	mov	r1, r4
 801aea8:	f7ff fdd2 	bl	801aa50 <_Bfree>
 801aeac:	4628      	mov	r0, r5
 801aeae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aeb2:	f842 0f04 	str.w	r0, [r2, #4]!
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	e7c1      	b.n	801ae3e <__lshift+0x4a>
 801aeba:	3904      	subs	r1, #4
 801aebc:	f853 2b04 	ldr.w	r2, [r3], #4
 801aec0:	f841 2f04 	str.w	r2, [r1, #4]!
 801aec4:	4298      	cmp	r0, r3
 801aec6:	d8f9      	bhi.n	801aebc <__lshift+0xc8>
 801aec8:	e7ea      	b.n	801aea0 <__lshift+0xac>
 801aeca:	bf00      	nop
 801aecc:	0801c498 	.word	0x0801c498
 801aed0:	0801c516 	.word	0x0801c516

0801aed4 <__mcmp>:
 801aed4:	b530      	push	{r4, r5, lr}
 801aed6:	6902      	ldr	r2, [r0, #16]
 801aed8:	690c      	ldr	r4, [r1, #16]
 801aeda:	1b12      	subs	r2, r2, r4
 801aedc:	d10e      	bne.n	801aefc <__mcmp+0x28>
 801aede:	f100 0314 	add.w	r3, r0, #20
 801aee2:	3114      	adds	r1, #20
 801aee4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801aee8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801aeec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801aef0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801aef4:	42a5      	cmp	r5, r4
 801aef6:	d003      	beq.n	801af00 <__mcmp+0x2c>
 801aef8:	d305      	bcc.n	801af06 <__mcmp+0x32>
 801aefa:	2201      	movs	r2, #1
 801aefc:	4610      	mov	r0, r2
 801aefe:	bd30      	pop	{r4, r5, pc}
 801af00:	4283      	cmp	r3, r0
 801af02:	d3f3      	bcc.n	801aeec <__mcmp+0x18>
 801af04:	e7fa      	b.n	801aefc <__mcmp+0x28>
 801af06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af0a:	e7f7      	b.n	801aefc <__mcmp+0x28>

0801af0c <__mdiff>:
 801af0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af10:	460c      	mov	r4, r1
 801af12:	4606      	mov	r6, r0
 801af14:	4611      	mov	r1, r2
 801af16:	4620      	mov	r0, r4
 801af18:	4690      	mov	r8, r2
 801af1a:	f7ff ffdb 	bl	801aed4 <__mcmp>
 801af1e:	1e05      	subs	r5, r0, #0
 801af20:	d110      	bne.n	801af44 <__mdiff+0x38>
 801af22:	4629      	mov	r1, r5
 801af24:	4630      	mov	r0, r6
 801af26:	f7ff fd53 	bl	801a9d0 <_Balloc>
 801af2a:	b930      	cbnz	r0, 801af3a <__mdiff+0x2e>
 801af2c:	4b3a      	ldr	r3, [pc, #232]	; (801b018 <__mdiff+0x10c>)
 801af2e:	4602      	mov	r2, r0
 801af30:	f240 2132 	movw	r1, #562	; 0x232
 801af34:	4839      	ldr	r0, [pc, #228]	; (801b01c <__mdiff+0x110>)
 801af36:	f7fe fd83 	bl	8019a40 <__assert_func>
 801af3a:	2301      	movs	r3, #1
 801af3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801af40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af44:	bfa4      	itt	ge
 801af46:	4643      	movge	r3, r8
 801af48:	46a0      	movge	r8, r4
 801af4a:	4630      	mov	r0, r6
 801af4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801af50:	bfa6      	itte	ge
 801af52:	461c      	movge	r4, r3
 801af54:	2500      	movge	r5, #0
 801af56:	2501      	movlt	r5, #1
 801af58:	f7ff fd3a 	bl	801a9d0 <_Balloc>
 801af5c:	b920      	cbnz	r0, 801af68 <__mdiff+0x5c>
 801af5e:	4b2e      	ldr	r3, [pc, #184]	; (801b018 <__mdiff+0x10c>)
 801af60:	4602      	mov	r2, r0
 801af62:	f44f 7110 	mov.w	r1, #576	; 0x240
 801af66:	e7e5      	b.n	801af34 <__mdiff+0x28>
 801af68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801af6c:	6926      	ldr	r6, [r4, #16]
 801af6e:	60c5      	str	r5, [r0, #12]
 801af70:	f104 0914 	add.w	r9, r4, #20
 801af74:	f108 0514 	add.w	r5, r8, #20
 801af78:	f100 0e14 	add.w	lr, r0, #20
 801af7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801af80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801af84:	f108 0210 	add.w	r2, r8, #16
 801af88:	46f2      	mov	sl, lr
 801af8a:	2100      	movs	r1, #0
 801af8c:	f859 3b04 	ldr.w	r3, [r9], #4
 801af90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801af94:	fa1f f883 	uxth.w	r8, r3
 801af98:	fa11 f18b 	uxtah	r1, r1, fp
 801af9c:	0c1b      	lsrs	r3, r3, #16
 801af9e:	eba1 0808 	sub.w	r8, r1, r8
 801afa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801afa6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801afaa:	fa1f f888 	uxth.w	r8, r8
 801afae:	1419      	asrs	r1, r3, #16
 801afb0:	454e      	cmp	r6, r9
 801afb2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801afb6:	f84a 3b04 	str.w	r3, [sl], #4
 801afba:	d8e7      	bhi.n	801af8c <__mdiff+0x80>
 801afbc:	1b33      	subs	r3, r6, r4
 801afbe:	3b15      	subs	r3, #21
 801afc0:	f023 0303 	bic.w	r3, r3, #3
 801afc4:	3304      	adds	r3, #4
 801afc6:	3415      	adds	r4, #21
 801afc8:	42a6      	cmp	r6, r4
 801afca:	bf38      	it	cc
 801afcc:	2304      	movcc	r3, #4
 801afce:	441d      	add	r5, r3
 801afd0:	4473      	add	r3, lr
 801afd2:	469e      	mov	lr, r3
 801afd4:	462e      	mov	r6, r5
 801afd6:	4566      	cmp	r6, ip
 801afd8:	d30e      	bcc.n	801aff8 <__mdiff+0xec>
 801afda:	f10c 0203 	add.w	r2, ip, #3
 801afde:	1b52      	subs	r2, r2, r5
 801afe0:	f022 0203 	bic.w	r2, r2, #3
 801afe4:	3d03      	subs	r5, #3
 801afe6:	45ac      	cmp	ip, r5
 801afe8:	bf38      	it	cc
 801afea:	2200      	movcc	r2, #0
 801afec:	441a      	add	r2, r3
 801afee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801aff2:	b17b      	cbz	r3, 801b014 <__mdiff+0x108>
 801aff4:	6107      	str	r7, [r0, #16]
 801aff6:	e7a3      	b.n	801af40 <__mdiff+0x34>
 801aff8:	f856 8b04 	ldr.w	r8, [r6], #4
 801affc:	fa11 f288 	uxtah	r2, r1, r8
 801b000:	1414      	asrs	r4, r2, #16
 801b002:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b006:	b292      	uxth	r2, r2
 801b008:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b00c:	f84e 2b04 	str.w	r2, [lr], #4
 801b010:	1421      	asrs	r1, r4, #16
 801b012:	e7e0      	b.n	801afd6 <__mdiff+0xca>
 801b014:	3f01      	subs	r7, #1
 801b016:	e7ea      	b.n	801afee <__mdiff+0xe2>
 801b018:	0801c498 	.word	0x0801c498
 801b01c:	0801c516 	.word	0x0801c516

0801b020 <__d2b>:
 801b020:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b024:	4689      	mov	r9, r1
 801b026:	2101      	movs	r1, #1
 801b028:	ec57 6b10 	vmov	r6, r7, d0
 801b02c:	4690      	mov	r8, r2
 801b02e:	f7ff fccf 	bl	801a9d0 <_Balloc>
 801b032:	4604      	mov	r4, r0
 801b034:	b930      	cbnz	r0, 801b044 <__d2b+0x24>
 801b036:	4602      	mov	r2, r0
 801b038:	4b25      	ldr	r3, [pc, #148]	; (801b0d0 <__d2b+0xb0>)
 801b03a:	4826      	ldr	r0, [pc, #152]	; (801b0d4 <__d2b+0xb4>)
 801b03c:	f240 310a 	movw	r1, #778	; 0x30a
 801b040:	f7fe fcfe 	bl	8019a40 <__assert_func>
 801b044:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b04c:	bb35      	cbnz	r5, 801b09c <__d2b+0x7c>
 801b04e:	2e00      	cmp	r6, #0
 801b050:	9301      	str	r3, [sp, #4]
 801b052:	d028      	beq.n	801b0a6 <__d2b+0x86>
 801b054:	4668      	mov	r0, sp
 801b056:	9600      	str	r6, [sp, #0]
 801b058:	f7ff fd82 	bl	801ab60 <__lo0bits>
 801b05c:	9900      	ldr	r1, [sp, #0]
 801b05e:	b300      	cbz	r0, 801b0a2 <__d2b+0x82>
 801b060:	9a01      	ldr	r2, [sp, #4]
 801b062:	f1c0 0320 	rsb	r3, r0, #32
 801b066:	fa02 f303 	lsl.w	r3, r2, r3
 801b06a:	430b      	orrs	r3, r1
 801b06c:	40c2      	lsrs	r2, r0
 801b06e:	6163      	str	r3, [r4, #20]
 801b070:	9201      	str	r2, [sp, #4]
 801b072:	9b01      	ldr	r3, [sp, #4]
 801b074:	61a3      	str	r3, [r4, #24]
 801b076:	2b00      	cmp	r3, #0
 801b078:	bf14      	ite	ne
 801b07a:	2202      	movne	r2, #2
 801b07c:	2201      	moveq	r2, #1
 801b07e:	6122      	str	r2, [r4, #16]
 801b080:	b1d5      	cbz	r5, 801b0b8 <__d2b+0x98>
 801b082:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b086:	4405      	add	r5, r0
 801b088:	f8c9 5000 	str.w	r5, [r9]
 801b08c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b090:	f8c8 0000 	str.w	r0, [r8]
 801b094:	4620      	mov	r0, r4
 801b096:	b003      	add	sp, #12
 801b098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b0a0:	e7d5      	b.n	801b04e <__d2b+0x2e>
 801b0a2:	6161      	str	r1, [r4, #20]
 801b0a4:	e7e5      	b.n	801b072 <__d2b+0x52>
 801b0a6:	a801      	add	r0, sp, #4
 801b0a8:	f7ff fd5a 	bl	801ab60 <__lo0bits>
 801b0ac:	9b01      	ldr	r3, [sp, #4]
 801b0ae:	6163      	str	r3, [r4, #20]
 801b0b0:	2201      	movs	r2, #1
 801b0b2:	6122      	str	r2, [r4, #16]
 801b0b4:	3020      	adds	r0, #32
 801b0b6:	e7e3      	b.n	801b080 <__d2b+0x60>
 801b0b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b0bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b0c0:	f8c9 0000 	str.w	r0, [r9]
 801b0c4:	6918      	ldr	r0, [r3, #16]
 801b0c6:	f7ff fd2b 	bl	801ab20 <__hi0bits>
 801b0ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b0ce:	e7df      	b.n	801b090 <__d2b+0x70>
 801b0d0:	0801c498 	.word	0x0801c498
 801b0d4:	0801c516 	.word	0x0801c516

0801b0d8 <_calloc_r>:
 801b0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b0da:	fba1 2402 	umull	r2, r4, r1, r2
 801b0de:	b94c      	cbnz	r4, 801b0f4 <_calloc_r+0x1c>
 801b0e0:	4611      	mov	r1, r2
 801b0e2:	9201      	str	r2, [sp, #4]
 801b0e4:	f7fd ff86 	bl	8018ff4 <_malloc_r>
 801b0e8:	9a01      	ldr	r2, [sp, #4]
 801b0ea:	4605      	mov	r5, r0
 801b0ec:	b930      	cbnz	r0, 801b0fc <_calloc_r+0x24>
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	b003      	add	sp, #12
 801b0f2:	bd30      	pop	{r4, r5, pc}
 801b0f4:	220c      	movs	r2, #12
 801b0f6:	6002      	str	r2, [r0, #0]
 801b0f8:	2500      	movs	r5, #0
 801b0fa:	e7f8      	b.n	801b0ee <_calloc_r+0x16>
 801b0fc:	4621      	mov	r1, r4
 801b0fe:	f7fd ff05 	bl	8018f0c <memset>
 801b102:	e7f4      	b.n	801b0ee <_calloc_r+0x16>

0801b104 <__ssputs_r>:
 801b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b108:	688e      	ldr	r6, [r1, #8]
 801b10a:	429e      	cmp	r6, r3
 801b10c:	4682      	mov	sl, r0
 801b10e:	460c      	mov	r4, r1
 801b110:	4690      	mov	r8, r2
 801b112:	461f      	mov	r7, r3
 801b114:	d838      	bhi.n	801b188 <__ssputs_r+0x84>
 801b116:	898a      	ldrh	r2, [r1, #12]
 801b118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b11c:	d032      	beq.n	801b184 <__ssputs_r+0x80>
 801b11e:	6825      	ldr	r5, [r4, #0]
 801b120:	6909      	ldr	r1, [r1, #16]
 801b122:	eba5 0901 	sub.w	r9, r5, r1
 801b126:	6965      	ldr	r5, [r4, #20]
 801b128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b12c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b130:	3301      	adds	r3, #1
 801b132:	444b      	add	r3, r9
 801b134:	106d      	asrs	r5, r5, #1
 801b136:	429d      	cmp	r5, r3
 801b138:	bf38      	it	cc
 801b13a:	461d      	movcc	r5, r3
 801b13c:	0553      	lsls	r3, r2, #21
 801b13e:	d531      	bpl.n	801b1a4 <__ssputs_r+0xa0>
 801b140:	4629      	mov	r1, r5
 801b142:	f7fd ff57 	bl	8018ff4 <_malloc_r>
 801b146:	4606      	mov	r6, r0
 801b148:	b950      	cbnz	r0, 801b160 <__ssputs_r+0x5c>
 801b14a:	230c      	movs	r3, #12
 801b14c:	f8ca 3000 	str.w	r3, [sl]
 801b150:	89a3      	ldrh	r3, [r4, #12]
 801b152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b156:	81a3      	strh	r3, [r4, #12]
 801b158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b160:	6921      	ldr	r1, [r4, #16]
 801b162:	464a      	mov	r2, r9
 801b164:	f7fd fec4 	bl	8018ef0 <memcpy>
 801b168:	89a3      	ldrh	r3, [r4, #12]
 801b16a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b16e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b172:	81a3      	strh	r3, [r4, #12]
 801b174:	6126      	str	r6, [r4, #16]
 801b176:	6165      	str	r5, [r4, #20]
 801b178:	444e      	add	r6, r9
 801b17a:	eba5 0509 	sub.w	r5, r5, r9
 801b17e:	6026      	str	r6, [r4, #0]
 801b180:	60a5      	str	r5, [r4, #8]
 801b182:	463e      	mov	r6, r7
 801b184:	42be      	cmp	r6, r7
 801b186:	d900      	bls.n	801b18a <__ssputs_r+0x86>
 801b188:	463e      	mov	r6, r7
 801b18a:	6820      	ldr	r0, [r4, #0]
 801b18c:	4632      	mov	r2, r6
 801b18e:	4641      	mov	r1, r8
 801b190:	f000 fce4 	bl	801bb5c <memmove>
 801b194:	68a3      	ldr	r3, [r4, #8]
 801b196:	1b9b      	subs	r3, r3, r6
 801b198:	60a3      	str	r3, [r4, #8]
 801b19a:	6823      	ldr	r3, [r4, #0]
 801b19c:	4433      	add	r3, r6
 801b19e:	6023      	str	r3, [r4, #0]
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	e7db      	b.n	801b15c <__ssputs_r+0x58>
 801b1a4:	462a      	mov	r2, r5
 801b1a6:	f000 fcf3 	bl	801bb90 <_realloc_r>
 801b1aa:	4606      	mov	r6, r0
 801b1ac:	2800      	cmp	r0, #0
 801b1ae:	d1e1      	bne.n	801b174 <__ssputs_r+0x70>
 801b1b0:	6921      	ldr	r1, [r4, #16]
 801b1b2:	4650      	mov	r0, sl
 801b1b4:	f7fd feb2 	bl	8018f1c <_free_r>
 801b1b8:	e7c7      	b.n	801b14a <__ssputs_r+0x46>
	...

0801b1bc <_svfiprintf_r>:
 801b1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1c0:	4698      	mov	r8, r3
 801b1c2:	898b      	ldrh	r3, [r1, #12]
 801b1c4:	061b      	lsls	r3, r3, #24
 801b1c6:	b09d      	sub	sp, #116	; 0x74
 801b1c8:	4607      	mov	r7, r0
 801b1ca:	460d      	mov	r5, r1
 801b1cc:	4614      	mov	r4, r2
 801b1ce:	d50e      	bpl.n	801b1ee <_svfiprintf_r+0x32>
 801b1d0:	690b      	ldr	r3, [r1, #16]
 801b1d2:	b963      	cbnz	r3, 801b1ee <_svfiprintf_r+0x32>
 801b1d4:	2140      	movs	r1, #64	; 0x40
 801b1d6:	f7fd ff0d 	bl	8018ff4 <_malloc_r>
 801b1da:	6028      	str	r0, [r5, #0]
 801b1dc:	6128      	str	r0, [r5, #16]
 801b1de:	b920      	cbnz	r0, 801b1ea <_svfiprintf_r+0x2e>
 801b1e0:	230c      	movs	r3, #12
 801b1e2:	603b      	str	r3, [r7, #0]
 801b1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1e8:	e0d1      	b.n	801b38e <_svfiprintf_r+0x1d2>
 801b1ea:	2340      	movs	r3, #64	; 0x40
 801b1ec:	616b      	str	r3, [r5, #20]
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 801b1f2:	2320      	movs	r3, #32
 801b1f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b1f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801b1fc:	2330      	movs	r3, #48	; 0x30
 801b1fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b3a8 <_svfiprintf_r+0x1ec>
 801b202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b206:	f04f 0901 	mov.w	r9, #1
 801b20a:	4623      	mov	r3, r4
 801b20c:	469a      	mov	sl, r3
 801b20e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b212:	b10a      	cbz	r2, 801b218 <_svfiprintf_r+0x5c>
 801b214:	2a25      	cmp	r2, #37	; 0x25
 801b216:	d1f9      	bne.n	801b20c <_svfiprintf_r+0x50>
 801b218:	ebba 0b04 	subs.w	fp, sl, r4
 801b21c:	d00b      	beq.n	801b236 <_svfiprintf_r+0x7a>
 801b21e:	465b      	mov	r3, fp
 801b220:	4622      	mov	r2, r4
 801b222:	4629      	mov	r1, r5
 801b224:	4638      	mov	r0, r7
 801b226:	f7ff ff6d 	bl	801b104 <__ssputs_r>
 801b22a:	3001      	adds	r0, #1
 801b22c:	f000 80aa 	beq.w	801b384 <_svfiprintf_r+0x1c8>
 801b230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b232:	445a      	add	r2, fp
 801b234:	9209      	str	r2, [sp, #36]	; 0x24
 801b236:	f89a 3000 	ldrb.w	r3, [sl]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	f000 80a2 	beq.w	801b384 <_svfiprintf_r+0x1c8>
 801b240:	2300      	movs	r3, #0
 801b242:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b24a:	f10a 0a01 	add.w	sl, sl, #1
 801b24e:	9304      	str	r3, [sp, #16]
 801b250:	9307      	str	r3, [sp, #28]
 801b252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b256:	931a      	str	r3, [sp, #104]	; 0x68
 801b258:	4654      	mov	r4, sl
 801b25a:	2205      	movs	r2, #5
 801b25c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b260:	4851      	ldr	r0, [pc, #324]	; (801b3a8 <_svfiprintf_r+0x1ec>)
 801b262:	f7e4 ffd5 	bl	8000210 <memchr>
 801b266:	9a04      	ldr	r2, [sp, #16]
 801b268:	b9d8      	cbnz	r0, 801b2a2 <_svfiprintf_r+0xe6>
 801b26a:	06d0      	lsls	r0, r2, #27
 801b26c:	bf44      	itt	mi
 801b26e:	2320      	movmi	r3, #32
 801b270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b274:	0711      	lsls	r1, r2, #28
 801b276:	bf44      	itt	mi
 801b278:	232b      	movmi	r3, #43	; 0x2b
 801b27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b27e:	f89a 3000 	ldrb.w	r3, [sl]
 801b282:	2b2a      	cmp	r3, #42	; 0x2a
 801b284:	d015      	beq.n	801b2b2 <_svfiprintf_r+0xf6>
 801b286:	9a07      	ldr	r2, [sp, #28]
 801b288:	4654      	mov	r4, sl
 801b28a:	2000      	movs	r0, #0
 801b28c:	f04f 0c0a 	mov.w	ip, #10
 801b290:	4621      	mov	r1, r4
 801b292:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b296:	3b30      	subs	r3, #48	; 0x30
 801b298:	2b09      	cmp	r3, #9
 801b29a:	d94e      	bls.n	801b33a <_svfiprintf_r+0x17e>
 801b29c:	b1b0      	cbz	r0, 801b2cc <_svfiprintf_r+0x110>
 801b29e:	9207      	str	r2, [sp, #28]
 801b2a0:	e014      	b.n	801b2cc <_svfiprintf_r+0x110>
 801b2a2:	eba0 0308 	sub.w	r3, r0, r8
 801b2a6:	fa09 f303 	lsl.w	r3, r9, r3
 801b2aa:	4313      	orrs	r3, r2
 801b2ac:	9304      	str	r3, [sp, #16]
 801b2ae:	46a2      	mov	sl, r4
 801b2b0:	e7d2      	b.n	801b258 <_svfiprintf_r+0x9c>
 801b2b2:	9b03      	ldr	r3, [sp, #12]
 801b2b4:	1d19      	adds	r1, r3, #4
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	9103      	str	r1, [sp, #12]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	bfbb      	ittet	lt
 801b2be:	425b      	neglt	r3, r3
 801b2c0:	f042 0202 	orrlt.w	r2, r2, #2
 801b2c4:	9307      	strge	r3, [sp, #28]
 801b2c6:	9307      	strlt	r3, [sp, #28]
 801b2c8:	bfb8      	it	lt
 801b2ca:	9204      	strlt	r2, [sp, #16]
 801b2cc:	7823      	ldrb	r3, [r4, #0]
 801b2ce:	2b2e      	cmp	r3, #46	; 0x2e
 801b2d0:	d10c      	bne.n	801b2ec <_svfiprintf_r+0x130>
 801b2d2:	7863      	ldrb	r3, [r4, #1]
 801b2d4:	2b2a      	cmp	r3, #42	; 0x2a
 801b2d6:	d135      	bne.n	801b344 <_svfiprintf_r+0x188>
 801b2d8:	9b03      	ldr	r3, [sp, #12]
 801b2da:	1d1a      	adds	r2, r3, #4
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	9203      	str	r2, [sp, #12]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	bfb8      	it	lt
 801b2e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b2e8:	3402      	adds	r4, #2
 801b2ea:	9305      	str	r3, [sp, #20]
 801b2ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b3b8 <_svfiprintf_r+0x1fc>
 801b2f0:	7821      	ldrb	r1, [r4, #0]
 801b2f2:	2203      	movs	r2, #3
 801b2f4:	4650      	mov	r0, sl
 801b2f6:	f7e4 ff8b 	bl	8000210 <memchr>
 801b2fa:	b140      	cbz	r0, 801b30e <_svfiprintf_r+0x152>
 801b2fc:	2340      	movs	r3, #64	; 0x40
 801b2fe:	eba0 000a 	sub.w	r0, r0, sl
 801b302:	fa03 f000 	lsl.w	r0, r3, r0
 801b306:	9b04      	ldr	r3, [sp, #16]
 801b308:	4303      	orrs	r3, r0
 801b30a:	3401      	adds	r4, #1
 801b30c:	9304      	str	r3, [sp, #16]
 801b30e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b312:	4826      	ldr	r0, [pc, #152]	; (801b3ac <_svfiprintf_r+0x1f0>)
 801b314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b318:	2206      	movs	r2, #6
 801b31a:	f7e4 ff79 	bl	8000210 <memchr>
 801b31e:	2800      	cmp	r0, #0
 801b320:	d038      	beq.n	801b394 <_svfiprintf_r+0x1d8>
 801b322:	4b23      	ldr	r3, [pc, #140]	; (801b3b0 <_svfiprintf_r+0x1f4>)
 801b324:	bb1b      	cbnz	r3, 801b36e <_svfiprintf_r+0x1b2>
 801b326:	9b03      	ldr	r3, [sp, #12]
 801b328:	3307      	adds	r3, #7
 801b32a:	f023 0307 	bic.w	r3, r3, #7
 801b32e:	3308      	adds	r3, #8
 801b330:	9303      	str	r3, [sp, #12]
 801b332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b334:	4433      	add	r3, r6
 801b336:	9309      	str	r3, [sp, #36]	; 0x24
 801b338:	e767      	b.n	801b20a <_svfiprintf_r+0x4e>
 801b33a:	fb0c 3202 	mla	r2, ip, r2, r3
 801b33e:	460c      	mov	r4, r1
 801b340:	2001      	movs	r0, #1
 801b342:	e7a5      	b.n	801b290 <_svfiprintf_r+0xd4>
 801b344:	2300      	movs	r3, #0
 801b346:	3401      	adds	r4, #1
 801b348:	9305      	str	r3, [sp, #20]
 801b34a:	4619      	mov	r1, r3
 801b34c:	f04f 0c0a 	mov.w	ip, #10
 801b350:	4620      	mov	r0, r4
 801b352:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b356:	3a30      	subs	r2, #48	; 0x30
 801b358:	2a09      	cmp	r2, #9
 801b35a:	d903      	bls.n	801b364 <_svfiprintf_r+0x1a8>
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d0c5      	beq.n	801b2ec <_svfiprintf_r+0x130>
 801b360:	9105      	str	r1, [sp, #20]
 801b362:	e7c3      	b.n	801b2ec <_svfiprintf_r+0x130>
 801b364:	fb0c 2101 	mla	r1, ip, r1, r2
 801b368:	4604      	mov	r4, r0
 801b36a:	2301      	movs	r3, #1
 801b36c:	e7f0      	b.n	801b350 <_svfiprintf_r+0x194>
 801b36e:	ab03      	add	r3, sp, #12
 801b370:	9300      	str	r3, [sp, #0]
 801b372:	462a      	mov	r2, r5
 801b374:	4b0f      	ldr	r3, [pc, #60]	; (801b3b4 <_svfiprintf_r+0x1f8>)
 801b376:	a904      	add	r1, sp, #16
 801b378:	4638      	mov	r0, r7
 801b37a:	f7fd ff4f 	bl	801921c <_printf_float>
 801b37e:	1c42      	adds	r2, r0, #1
 801b380:	4606      	mov	r6, r0
 801b382:	d1d6      	bne.n	801b332 <_svfiprintf_r+0x176>
 801b384:	89ab      	ldrh	r3, [r5, #12]
 801b386:	065b      	lsls	r3, r3, #25
 801b388:	f53f af2c 	bmi.w	801b1e4 <_svfiprintf_r+0x28>
 801b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b38e:	b01d      	add	sp, #116	; 0x74
 801b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b394:	ab03      	add	r3, sp, #12
 801b396:	9300      	str	r3, [sp, #0]
 801b398:	462a      	mov	r2, r5
 801b39a:	4b06      	ldr	r3, [pc, #24]	; (801b3b4 <_svfiprintf_r+0x1f8>)
 801b39c:	a904      	add	r1, sp, #16
 801b39e:	4638      	mov	r0, r7
 801b3a0:	f7fe f9e0 	bl	8019764 <_printf_i>
 801b3a4:	e7eb      	b.n	801b37e <_svfiprintf_r+0x1c2>
 801b3a6:	bf00      	nop
 801b3a8:	0801c674 	.word	0x0801c674
 801b3ac:	0801c67e 	.word	0x0801c67e
 801b3b0:	0801921d 	.word	0x0801921d
 801b3b4:	0801b105 	.word	0x0801b105
 801b3b8:	0801c67a 	.word	0x0801c67a

0801b3bc <__sfputc_r>:
 801b3bc:	6893      	ldr	r3, [r2, #8]
 801b3be:	3b01      	subs	r3, #1
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	b410      	push	{r4}
 801b3c4:	6093      	str	r3, [r2, #8]
 801b3c6:	da08      	bge.n	801b3da <__sfputc_r+0x1e>
 801b3c8:	6994      	ldr	r4, [r2, #24]
 801b3ca:	42a3      	cmp	r3, r4
 801b3cc:	db01      	blt.n	801b3d2 <__sfputc_r+0x16>
 801b3ce:	290a      	cmp	r1, #10
 801b3d0:	d103      	bne.n	801b3da <__sfputc_r+0x1e>
 801b3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3d6:	f000 b98f 	b.w	801b6f8 <__swbuf_r>
 801b3da:	6813      	ldr	r3, [r2, #0]
 801b3dc:	1c58      	adds	r0, r3, #1
 801b3de:	6010      	str	r0, [r2, #0]
 801b3e0:	7019      	strb	r1, [r3, #0]
 801b3e2:	4608      	mov	r0, r1
 801b3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3e8:	4770      	bx	lr

0801b3ea <__sfputs_r>:
 801b3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3ec:	4606      	mov	r6, r0
 801b3ee:	460f      	mov	r7, r1
 801b3f0:	4614      	mov	r4, r2
 801b3f2:	18d5      	adds	r5, r2, r3
 801b3f4:	42ac      	cmp	r4, r5
 801b3f6:	d101      	bne.n	801b3fc <__sfputs_r+0x12>
 801b3f8:	2000      	movs	r0, #0
 801b3fa:	e007      	b.n	801b40c <__sfputs_r+0x22>
 801b3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b400:	463a      	mov	r2, r7
 801b402:	4630      	mov	r0, r6
 801b404:	f7ff ffda 	bl	801b3bc <__sfputc_r>
 801b408:	1c43      	adds	r3, r0, #1
 801b40a:	d1f3      	bne.n	801b3f4 <__sfputs_r+0xa>
 801b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b410 <_vfiprintf_r>:
 801b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b414:	460d      	mov	r5, r1
 801b416:	b09d      	sub	sp, #116	; 0x74
 801b418:	4614      	mov	r4, r2
 801b41a:	4698      	mov	r8, r3
 801b41c:	4606      	mov	r6, r0
 801b41e:	b118      	cbz	r0, 801b428 <_vfiprintf_r+0x18>
 801b420:	6983      	ldr	r3, [r0, #24]
 801b422:	b90b      	cbnz	r3, 801b428 <_vfiprintf_r+0x18>
 801b424:	f7ff f9fe 	bl	801a824 <__sinit>
 801b428:	4b89      	ldr	r3, [pc, #548]	; (801b650 <_vfiprintf_r+0x240>)
 801b42a:	429d      	cmp	r5, r3
 801b42c:	d11b      	bne.n	801b466 <_vfiprintf_r+0x56>
 801b42e:	6875      	ldr	r5, [r6, #4]
 801b430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b432:	07d9      	lsls	r1, r3, #31
 801b434:	d405      	bmi.n	801b442 <_vfiprintf_r+0x32>
 801b436:	89ab      	ldrh	r3, [r5, #12]
 801b438:	059a      	lsls	r2, r3, #22
 801b43a:	d402      	bmi.n	801b442 <_vfiprintf_r+0x32>
 801b43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b43e:	f7ff faa6 	bl	801a98e <__retarget_lock_acquire_recursive>
 801b442:	89ab      	ldrh	r3, [r5, #12]
 801b444:	071b      	lsls	r3, r3, #28
 801b446:	d501      	bpl.n	801b44c <_vfiprintf_r+0x3c>
 801b448:	692b      	ldr	r3, [r5, #16]
 801b44a:	b9eb      	cbnz	r3, 801b488 <_vfiprintf_r+0x78>
 801b44c:	4629      	mov	r1, r5
 801b44e:	4630      	mov	r0, r6
 801b450:	f000 f9c4 	bl	801b7dc <__swsetup_r>
 801b454:	b1c0      	cbz	r0, 801b488 <_vfiprintf_r+0x78>
 801b456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b458:	07dc      	lsls	r4, r3, #31
 801b45a:	d50e      	bpl.n	801b47a <_vfiprintf_r+0x6a>
 801b45c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b460:	b01d      	add	sp, #116	; 0x74
 801b462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b466:	4b7b      	ldr	r3, [pc, #492]	; (801b654 <_vfiprintf_r+0x244>)
 801b468:	429d      	cmp	r5, r3
 801b46a:	d101      	bne.n	801b470 <_vfiprintf_r+0x60>
 801b46c:	68b5      	ldr	r5, [r6, #8]
 801b46e:	e7df      	b.n	801b430 <_vfiprintf_r+0x20>
 801b470:	4b79      	ldr	r3, [pc, #484]	; (801b658 <_vfiprintf_r+0x248>)
 801b472:	429d      	cmp	r5, r3
 801b474:	bf08      	it	eq
 801b476:	68f5      	ldreq	r5, [r6, #12]
 801b478:	e7da      	b.n	801b430 <_vfiprintf_r+0x20>
 801b47a:	89ab      	ldrh	r3, [r5, #12]
 801b47c:	0598      	lsls	r0, r3, #22
 801b47e:	d4ed      	bmi.n	801b45c <_vfiprintf_r+0x4c>
 801b480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b482:	f7ff fa85 	bl	801a990 <__retarget_lock_release_recursive>
 801b486:	e7e9      	b.n	801b45c <_vfiprintf_r+0x4c>
 801b488:	2300      	movs	r3, #0
 801b48a:	9309      	str	r3, [sp, #36]	; 0x24
 801b48c:	2320      	movs	r3, #32
 801b48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b492:	f8cd 800c 	str.w	r8, [sp, #12]
 801b496:	2330      	movs	r3, #48	; 0x30
 801b498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b65c <_vfiprintf_r+0x24c>
 801b49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4a0:	f04f 0901 	mov.w	r9, #1
 801b4a4:	4623      	mov	r3, r4
 801b4a6:	469a      	mov	sl, r3
 801b4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4ac:	b10a      	cbz	r2, 801b4b2 <_vfiprintf_r+0xa2>
 801b4ae:	2a25      	cmp	r2, #37	; 0x25
 801b4b0:	d1f9      	bne.n	801b4a6 <_vfiprintf_r+0x96>
 801b4b2:	ebba 0b04 	subs.w	fp, sl, r4
 801b4b6:	d00b      	beq.n	801b4d0 <_vfiprintf_r+0xc0>
 801b4b8:	465b      	mov	r3, fp
 801b4ba:	4622      	mov	r2, r4
 801b4bc:	4629      	mov	r1, r5
 801b4be:	4630      	mov	r0, r6
 801b4c0:	f7ff ff93 	bl	801b3ea <__sfputs_r>
 801b4c4:	3001      	adds	r0, #1
 801b4c6:	f000 80aa 	beq.w	801b61e <_vfiprintf_r+0x20e>
 801b4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4cc:	445a      	add	r2, fp
 801b4ce:	9209      	str	r2, [sp, #36]	; 0x24
 801b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	f000 80a2 	beq.w	801b61e <_vfiprintf_r+0x20e>
 801b4da:	2300      	movs	r3, #0
 801b4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4e4:	f10a 0a01 	add.w	sl, sl, #1
 801b4e8:	9304      	str	r3, [sp, #16]
 801b4ea:	9307      	str	r3, [sp, #28]
 801b4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b4f0:	931a      	str	r3, [sp, #104]	; 0x68
 801b4f2:	4654      	mov	r4, sl
 801b4f4:	2205      	movs	r2, #5
 801b4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4fa:	4858      	ldr	r0, [pc, #352]	; (801b65c <_vfiprintf_r+0x24c>)
 801b4fc:	f7e4 fe88 	bl	8000210 <memchr>
 801b500:	9a04      	ldr	r2, [sp, #16]
 801b502:	b9d8      	cbnz	r0, 801b53c <_vfiprintf_r+0x12c>
 801b504:	06d1      	lsls	r1, r2, #27
 801b506:	bf44      	itt	mi
 801b508:	2320      	movmi	r3, #32
 801b50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b50e:	0713      	lsls	r3, r2, #28
 801b510:	bf44      	itt	mi
 801b512:	232b      	movmi	r3, #43	; 0x2b
 801b514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b518:	f89a 3000 	ldrb.w	r3, [sl]
 801b51c:	2b2a      	cmp	r3, #42	; 0x2a
 801b51e:	d015      	beq.n	801b54c <_vfiprintf_r+0x13c>
 801b520:	9a07      	ldr	r2, [sp, #28]
 801b522:	4654      	mov	r4, sl
 801b524:	2000      	movs	r0, #0
 801b526:	f04f 0c0a 	mov.w	ip, #10
 801b52a:	4621      	mov	r1, r4
 801b52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b530:	3b30      	subs	r3, #48	; 0x30
 801b532:	2b09      	cmp	r3, #9
 801b534:	d94e      	bls.n	801b5d4 <_vfiprintf_r+0x1c4>
 801b536:	b1b0      	cbz	r0, 801b566 <_vfiprintf_r+0x156>
 801b538:	9207      	str	r2, [sp, #28]
 801b53a:	e014      	b.n	801b566 <_vfiprintf_r+0x156>
 801b53c:	eba0 0308 	sub.w	r3, r0, r8
 801b540:	fa09 f303 	lsl.w	r3, r9, r3
 801b544:	4313      	orrs	r3, r2
 801b546:	9304      	str	r3, [sp, #16]
 801b548:	46a2      	mov	sl, r4
 801b54a:	e7d2      	b.n	801b4f2 <_vfiprintf_r+0xe2>
 801b54c:	9b03      	ldr	r3, [sp, #12]
 801b54e:	1d19      	adds	r1, r3, #4
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	9103      	str	r1, [sp, #12]
 801b554:	2b00      	cmp	r3, #0
 801b556:	bfbb      	ittet	lt
 801b558:	425b      	neglt	r3, r3
 801b55a:	f042 0202 	orrlt.w	r2, r2, #2
 801b55e:	9307      	strge	r3, [sp, #28]
 801b560:	9307      	strlt	r3, [sp, #28]
 801b562:	bfb8      	it	lt
 801b564:	9204      	strlt	r2, [sp, #16]
 801b566:	7823      	ldrb	r3, [r4, #0]
 801b568:	2b2e      	cmp	r3, #46	; 0x2e
 801b56a:	d10c      	bne.n	801b586 <_vfiprintf_r+0x176>
 801b56c:	7863      	ldrb	r3, [r4, #1]
 801b56e:	2b2a      	cmp	r3, #42	; 0x2a
 801b570:	d135      	bne.n	801b5de <_vfiprintf_r+0x1ce>
 801b572:	9b03      	ldr	r3, [sp, #12]
 801b574:	1d1a      	adds	r2, r3, #4
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	9203      	str	r2, [sp, #12]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	bfb8      	it	lt
 801b57e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b582:	3402      	adds	r4, #2
 801b584:	9305      	str	r3, [sp, #20]
 801b586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b66c <_vfiprintf_r+0x25c>
 801b58a:	7821      	ldrb	r1, [r4, #0]
 801b58c:	2203      	movs	r2, #3
 801b58e:	4650      	mov	r0, sl
 801b590:	f7e4 fe3e 	bl	8000210 <memchr>
 801b594:	b140      	cbz	r0, 801b5a8 <_vfiprintf_r+0x198>
 801b596:	2340      	movs	r3, #64	; 0x40
 801b598:	eba0 000a 	sub.w	r0, r0, sl
 801b59c:	fa03 f000 	lsl.w	r0, r3, r0
 801b5a0:	9b04      	ldr	r3, [sp, #16]
 801b5a2:	4303      	orrs	r3, r0
 801b5a4:	3401      	adds	r4, #1
 801b5a6:	9304      	str	r3, [sp, #16]
 801b5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5ac:	482c      	ldr	r0, [pc, #176]	; (801b660 <_vfiprintf_r+0x250>)
 801b5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5b2:	2206      	movs	r2, #6
 801b5b4:	f7e4 fe2c 	bl	8000210 <memchr>
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d03f      	beq.n	801b63c <_vfiprintf_r+0x22c>
 801b5bc:	4b29      	ldr	r3, [pc, #164]	; (801b664 <_vfiprintf_r+0x254>)
 801b5be:	bb1b      	cbnz	r3, 801b608 <_vfiprintf_r+0x1f8>
 801b5c0:	9b03      	ldr	r3, [sp, #12]
 801b5c2:	3307      	adds	r3, #7
 801b5c4:	f023 0307 	bic.w	r3, r3, #7
 801b5c8:	3308      	adds	r3, #8
 801b5ca:	9303      	str	r3, [sp, #12]
 801b5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5ce:	443b      	add	r3, r7
 801b5d0:	9309      	str	r3, [sp, #36]	; 0x24
 801b5d2:	e767      	b.n	801b4a4 <_vfiprintf_r+0x94>
 801b5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b5d8:	460c      	mov	r4, r1
 801b5da:	2001      	movs	r0, #1
 801b5dc:	e7a5      	b.n	801b52a <_vfiprintf_r+0x11a>
 801b5de:	2300      	movs	r3, #0
 801b5e0:	3401      	adds	r4, #1
 801b5e2:	9305      	str	r3, [sp, #20]
 801b5e4:	4619      	mov	r1, r3
 801b5e6:	f04f 0c0a 	mov.w	ip, #10
 801b5ea:	4620      	mov	r0, r4
 801b5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5f0:	3a30      	subs	r2, #48	; 0x30
 801b5f2:	2a09      	cmp	r2, #9
 801b5f4:	d903      	bls.n	801b5fe <_vfiprintf_r+0x1ee>
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d0c5      	beq.n	801b586 <_vfiprintf_r+0x176>
 801b5fa:	9105      	str	r1, [sp, #20]
 801b5fc:	e7c3      	b.n	801b586 <_vfiprintf_r+0x176>
 801b5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801b602:	4604      	mov	r4, r0
 801b604:	2301      	movs	r3, #1
 801b606:	e7f0      	b.n	801b5ea <_vfiprintf_r+0x1da>
 801b608:	ab03      	add	r3, sp, #12
 801b60a:	9300      	str	r3, [sp, #0]
 801b60c:	462a      	mov	r2, r5
 801b60e:	4b16      	ldr	r3, [pc, #88]	; (801b668 <_vfiprintf_r+0x258>)
 801b610:	a904      	add	r1, sp, #16
 801b612:	4630      	mov	r0, r6
 801b614:	f7fd fe02 	bl	801921c <_printf_float>
 801b618:	4607      	mov	r7, r0
 801b61a:	1c78      	adds	r0, r7, #1
 801b61c:	d1d6      	bne.n	801b5cc <_vfiprintf_r+0x1bc>
 801b61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b620:	07d9      	lsls	r1, r3, #31
 801b622:	d405      	bmi.n	801b630 <_vfiprintf_r+0x220>
 801b624:	89ab      	ldrh	r3, [r5, #12]
 801b626:	059a      	lsls	r2, r3, #22
 801b628:	d402      	bmi.n	801b630 <_vfiprintf_r+0x220>
 801b62a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b62c:	f7ff f9b0 	bl	801a990 <__retarget_lock_release_recursive>
 801b630:	89ab      	ldrh	r3, [r5, #12]
 801b632:	065b      	lsls	r3, r3, #25
 801b634:	f53f af12 	bmi.w	801b45c <_vfiprintf_r+0x4c>
 801b638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b63a:	e711      	b.n	801b460 <_vfiprintf_r+0x50>
 801b63c:	ab03      	add	r3, sp, #12
 801b63e:	9300      	str	r3, [sp, #0]
 801b640:	462a      	mov	r2, r5
 801b642:	4b09      	ldr	r3, [pc, #36]	; (801b668 <_vfiprintf_r+0x258>)
 801b644:	a904      	add	r1, sp, #16
 801b646:	4630      	mov	r0, r6
 801b648:	f7fe f88c 	bl	8019764 <_printf_i>
 801b64c:	e7e4      	b.n	801b618 <_vfiprintf_r+0x208>
 801b64e:	bf00      	nop
 801b650:	0801c4cc 	.word	0x0801c4cc
 801b654:	0801c4ec 	.word	0x0801c4ec
 801b658:	0801c4ac 	.word	0x0801c4ac
 801b65c:	0801c674 	.word	0x0801c674
 801b660:	0801c67e 	.word	0x0801c67e
 801b664:	0801921d 	.word	0x0801921d
 801b668:	0801b3eb 	.word	0x0801b3eb
 801b66c:	0801c67a 	.word	0x0801c67a

0801b670 <__sread>:
 801b670:	b510      	push	{r4, lr}
 801b672:	460c      	mov	r4, r1
 801b674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b678:	f000 faba 	bl	801bbf0 <_read_r>
 801b67c:	2800      	cmp	r0, #0
 801b67e:	bfab      	itete	ge
 801b680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b682:	89a3      	ldrhlt	r3, [r4, #12]
 801b684:	181b      	addge	r3, r3, r0
 801b686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b68a:	bfac      	ite	ge
 801b68c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b68e:	81a3      	strhlt	r3, [r4, #12]
 801b690:	bd10      	pop	{r4, pc}

0801b692 <__swrite>:
 801b692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b696:	461f      	mov	r7, r3
 801b698:	898b      	ldrh	r3, [r1, #12]
 801b69a:	05db      	lsls	r3, r3, #23
 801b69c:	4605      	mov	r5, r0
 801b69e:	460c      	mov	r4, r1
 801b6a0:	4616      	mov	r6, r2
 801b6a2:	d505      	bpl.n	801b6b0 <__swrite+0x1e>
 801b6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6a8:	2302      	movs	r3, #2
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	f000 f9de 	bl	801ba6c <_lseek_r>
 801b6b0:	89a3      	ldrh	r3, [r4, #12]
 801b6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b6ba:	81a3      	strh	r3, [r4, #12]
 801b6bc:	4632      	mov	r2, r6
 801b6be:	463b      	mov	r3, r7
 801b6c0:	4628      	mov	r0, r5
 801b6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b6c6:	f000 b877 	b.w	801b7b8 <_write_r>

0801b6ca <__sseek>:
 801b6ca:	b510      	push	{r4, lr}
 801b6cc:	460c      	mov	r4, r1
 801b6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6d2:	f000 f9cb 	bl	801ba6c <_lseek_r>
 801b6d6:	1c43      	adds	r3, r0, #1
 801b6d8:	89a3      	ldrh	r3, [r4, #12]
 801b6da:	bf15      	itete	ne
 801b6dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801b6de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b6e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b6e6:	81a3      	strheq	r3, [r4, #12]
 801b6e8:	bf18      	it	ne
 801b6ea:	81a3      	strhne	r3, [r4, #12]
 801b6ec:	bd10      	pop	{r4, pc}

0801b6ee <__sclose>:
 801b6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6f2:	f000 b8e9 	b.w	801b8c8 <_close_r>
	...

0801b6f8 <__swbuf_r>:
 801b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6fa:	460e      	mov	r6, r1
 801b6fc:	4614      	mov	r4, r2
 801b6fe:	4605      	mov	r5, r0
 801b700:	b118      	cbz	r0, 801b70a <__swbuf_r+0x12>
 801b702:	6983      	ldr	r3, [r0, #24]
 801b704:	b90b      	cbnz	r3, 801b70a <__swbuf_r+0x12>
 801b706:	f7ff f88d 	bl	801a824 <__sinit>
 801b70a:	4b21      	ldr	r3, [pc, #132]	; (801b790 <__swbuf_r+0x98>)
 801b70c:	429c      	cmp	r4, r3
 801b70e:	d12b      	bne.n	801b768 <__swbuf_r+0x70>
 801b710:	686c      	ldr	r4, [r5, #4]
 801b712:	69a3      	ldr	r3, [r4, #24]
 801b714:	60a3      	str	r3, [r4, #8]
 801b716:	89a3      	ldrh	r3, [r4, #12]
 801b718:	071a      	lsls	r2, r3, #28
 801b71a:	d52f      	bpl.n	801b77c <__swbuf_r+0x84>
 801b71c:	6923      	ldr	r3, [r4, #16]
 801b71e:	b36b      	cbz	r3, 801b77c <__swbuf_r+0x84>
 801b720:	6923      	ldr	r3, [r4, #16]
 801b722:	6820      	ldr	r0, [r4, #0]
 801b724:	1ac0      	subs	r0, r0, r3
 801b726:	6963      	ldr	r3, [r4, #20]
 801b728:	b2f6      	uxtb	r6, r6
 801b72a:	4283      	cmp	r3, r0
 801b72c:	4637      	mov	r7, r6
 801b72e:	dc04      	bgt.n	801b73a <__swbuf_r+0x42>
 801b730:	4621      	mov	r1, r4
 801b732:	4628      	mov	r0, r5
 801b734:	f000 f95e 	bl	801b9f4 <_fflush_r>
 801b738:	bb30      	cbnz	r0, 801b788 <__swbuf_r+0x90>
 801b73a:	68a3      	ldr	r3, [r4, #8]
 801b73c:	3b01      	subs	r3, #1
 801b73e:	60a3      	str	r3, [r4, #8]
 801b740:	6823      	ldr	r3, [r4, #0]
 801b742:	1c5a      	adds	r2, r3, #1
 801b744:	6022      	str	r2, [r4, #0]
 801b746:	701e      	strb	r6, [r3, #0]
 801b748:	6963      	ldr	r3, [r4, #20]
 801b74a:	3001      	adds	r0, #1
 801b74c:	4283      	cmp	r3, r0
 801b74e:	d004      	beq.n	801b75a <__swbuf_r+0x62>
 801b750:	89a3      	ldrh	r3, [r4, #12]
 801b752:	07db      	lsls	r3, r3, #31
 801b754:	d506      	bpl.n	801b764 <__swbuf_r+0x6c>
 801b756:	2e0a      	cmp	r6, #10
 801b758:	d104      	bne.n	801b764 <__swbuf_r+0x6c>
 801b75a:	4621      	mov	r1, r4
 801b75c:	4628      	mov	r0, r5
 801b75e:	f000 f949 	bl	801b9f4 <_fflush_r>
 801b762:	b988      	cbnz	r0, 801b788 <__swbuf_r+0x90>
 801b764:	4638      	mov	r0, r7
 801b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b768:	4b0a      	ldr	r3, [pc, #40]	; (801b794 <__swbuf_r+0x9c>)
 801b76a:	429c      	cmp	r4, r3
 801b76c:	d101      	bne.n	801b772 <__swbuf_r+0x7a>
 801b76e:	68ac      	ldr	r4, [r5, #8]
 801b770:	e7cf      	b.n	801b712 <__swbuf_r+0x1a>
 801b772:	4b09      	ldr	r3, [pc, #36]	; (801b798 <__swbuf_r+0xa0>)
 801b774:	429c      	cmp	r4, r3
 801b776:	bf08      	it	eq
 801b778:	68ec      	ldreq	r4, [r5, #12]
 801b77a:	e7ca      	b.n	801b712 <__swbuf_r+0x1a>
 801b77c:	4621      	mov	r1, r4
 801b77e:	4628      	mov	r0, r5
 801b780:	f000 f82c 	bl	801b7dc <__swsetup_r>
 801b784:	2800      	cmp	r0, #0
 801b786:	d0cb      	beq.n	801b720 <__swbuf_r+0x28>
 801b788:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b78c:	e7ea      	b.n	801b764 <__swbuf_r+0x6c>
 801b78e:	bf00      	nop
 801b790:	0801c4cc 	.word	0x0801c4cc
 801b794:	0801c4ec 	.word	0x0801c4ec
 801b798:	0801c4ac 	.word	0x0801c4ac

0801b79c <__ascii_wctomb>:
 801b79c:	b149      	cbz	r1, 801b7b2 <__ascii_wctomb+0x16>
 801b79e:	2aff      	cmp	r2, #255	; 0xff
 801b7a0:	bf85      	ittet	hi
 801b7a2:	238a      	movhi	r3, #138	; 0x8a
 801b7a4:	6003      	strhi	r3, [r0, #0]
 801b7a6:	700a      	strbls	r2, [r1, #0]
 801b7a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b7ac:	bf98      	it	ls
 801b7ae:	2001      	movls	r0, #1
 801b7b0:	4770      	bx	lr
 801b7b2:	4608      	mov	r0, r1
 801b7b4:	4770      	bx	lr
	...

0801b7b8 <_write_r>:
 801b7b8:	b538      	push	{r3, r4, r5, lr}
 801b7ba:	4d07      	ldr	r5, [pc, #28]	; (801b7d8 <_write_r+0x20>)
 801b7bc:	4604      	mov	r4, r0
 801b7be:	4608      	mov	r0, r1
 801b7c0:	4611      	mov	r1, r2
 801b7c2:	2200      	movs	r2, #0
 801b7c4:	602a      	str	r2, [r5, #0]
 801b7c6:	461a      	mov	r2, r3
 801b7c8:	f000 fad8 	bl	801bd7c <_write>
 801b7cc:	1c43      	adds	r3, r0, #1
 801b7ce:	d102      	bne.n	801b7d6 <_write_r+0x1e>
 801b7d0:	682b      	ldr	r3, [r5, #0]
 801b7d2:	b103      	cbz	r3, 801b7d6 <_write_r+0x1e>
 801b7d4:	6023      	str	r3, [r4, #0]
 801b7d6:	bd38      	pop	{r3, r4, r5, pc}
 801b7d8:	2000303c 	.word	0x2000303c

0801b7dc <__swsetup_r>:
 801b7dc:	4b32      	ldr	r3, [pc, #200]	; (801b8a8 <__swsetup_r+0xcc>)
 801b7de:	b570      	push	{r4, r5, r6, lr}
 801b7e0:	681d      	ldr	r5, [r3, #0]
 801b7e2:	4606      	mov	r6, r0
 801b7e4:	460c      	mov	r4, r1
 801b7e6:	b125      	cbz	r5, 801b7f2 <__swsetup_r+0x16>
 801b7e8:	69ab      	ldr	r3, [r5, #24]
 801b7ea:	b913      	cbnz	r3, 801b7f2 <__swsetup_r+0x16>
 801b7ec:	4628      	mov	r0, r5
 801b7ee:	f7ff f819 	bl	801a824 <__sinit>
 801b7f2:	4b2e      	ldr	r3, [pc, #184]	; (801b8ac <__swsetup_r+0xd0>)
 801b7f4:	429c      	cmp	r4, r3
 801b7f6:	d10f      	bne.n	801b818 <__swsetup_r+0x3c>
 801b7f8:	686c      	ldr	r4, [r5, #4]
 801b7fa:	89a3      	ldrh	r3, [r4, #12]
 801b7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b800:	0719      	lsls	r1, r3, #28
 801b802:	d42c      	bmi.n	801b85e <__swsetup_r+0x82>
 801b804:	06dd      	lsls	r5, r3, #27
 801b806:	d411      	bmi.n	801b82c <__swsetup_r+0x50>
 801b808:	2309      	movs	r3, #9
 801b80a:	6033      	str	r3, [r6, #0]
 801b80c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b810:	81a3      	strh	r3, [r4, #12]
 801b812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b816:	e03e      	b.n	801b896 <__swsetup_r+0xba>
 801b818:	4b25      	ldr	r3, [pc, #148]	; (801b8b0 <__swsetup_r+0xd4>)
 801b81a:	429c      	cmp	r4, r3
 801b81c:	d101      	bne.n	801b822 <__swsetup_r+0x46>
 801b81e:	68ac      	ldr	r4, [r5, #8]
 801b820:	e7eb      	b.n	801b7fa <__swsetup_r+0x1e>
 801b822:	4b24      	ldr	r3, [pc, #144]	; (801b8b4 <__swsetup_r+0xd8>)
 801b824:	429c      	cmp	r4, r3
 801b826:	bf08      	it	eq
 801b828:	68ec      	ldreq	r4, [r5, #12]
 801b82a:	e7e6      	b.n	801b7fa <__swsetup_r+0x1e>
 801b82c:	0758      	lsls	r0, r3, #29
 801b82e:	d512      	bpl.n	801b856 <__swsetup_r+0x7a>
 801b830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b832:	b141      	cbz	r1, 801b846 <__swsetup_r+0x6a>
 801b834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b838:	4299      	cmp	r1, r3
 801b83a:	d002      	beq.n	801b842 <__swsetup_r+0x66>
 801b83c:	4630      	mov	r0, r6
 801b83e:	f7fd fb6d 	bl	8018f1c <_free_r>
 801b842:	2300      	movs	r3, #0
 801b844:	6363      	str	r3, [r4, #52]	; 0x34
 801b846:	89a3      	ldrh	r3, [r4, #12]
 801b848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b84c:	81a3      	strh	r3, [r4, #12]
 801b84e:	2300      	movs	r3, #0
 801b850:	6063      	str	r3, [r4, #4]
 801b852:	6923      	ldr	r3, [r4, #16]
 801b854:	6023      	str	r3, [r4, #0]
 801b856:	89a3      	ldrh	r3, [r4, #12]
 801b858:	f043 0308 	orr.w	r3, r3, #8
 801b85c:	81a3      	strh	r3, [r4, #12]
 801b85e:	6923      	ldr	r3, [r4, #16]
 801b860:	b94b      	cbnz	r3, 801b876 <__swsetup_r+0x9a>
 801b862:	89a3      	ldrh	r3, [r4, #12]
 801b864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b86c:	d003      	beq.n	801b876 <__swsetup_r+0x9a>
 801b86e:	4621      	mov	r1, r4
 801b870:	4630      	mov	r0, r6
 801b872:	f000 f933 	bl	801badc <__smakebuf_r>
 801b876:	89a0      	ldrh	r0, [r4, #12]
 801b878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b87c:	f010 0301 	ands.w	r3, r0, #1
 801b880:	d00a      	beq.n	801b898 <__swsetup_r+0xbc>
 801b882:	2300      	movs	r3, #0
 801b884:	60a3      	str	r3, [r4, #8]
 801b886:	6963      	ldr	r3, [r4, #20]
 801b888:	425b      	negs	r3, r3
 801b88a:	61a3      	str	r3, [r4, #24]
 801b88c:	6923      	ldr	r3, [r4, #16]
 801b88e:	b943      	cbnz	r3, 801b8a2 <__swsetup_r+0xc6>
 801b890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b894:	d1ba      	bne.n	801b80c <__swsetup_r+0x30>
 801b896:	bd70      	pop	{r4, r5, r6, pc}
 801b898:	0781      	lsls	r1, r0, #30
 801b89a:	bf58      	it	pl
 801b89c:	6963      	ldrpl	r3, [r4, #20]
 801b89e:	60a3      	str	r3, [r4, #8]
 801b8a0:	e7f4      	b.n	801b88c <__swsetup_r+0xb0>
 801b8a2:	2000      	movs	r0, #0
 801b8a4:	e7f7      	b.n	801b896 <__swsetup_r+0xba>
 801b8a6:	bf00      	nop
 801b8a8:	20000190 	.word	0x20000190
 801b8ac:	0801c4cc 	.word	0x0801c4cc
 801b8b0:	0801c4ec 	.word	0x0801c4ec
 801b8b4:	0801c4ac 	.word	0x0801c4ac

0801b8b8 <abort>:
 801b8b8:	b508      	push	{r3, lr}
 801b8ba:	2006      	movs	r0, #6
 801b8bc:	f000 f9d2 	bl	801bc64 <raise>
 801b8c0:	2001      	movs	r0, #1
 801b8c2:	f000 fa63 	bl	801bd8c <_exit>
	...

0801b8c8 <_close_r>:
 801b8c8:	b538      	push	{r3, r4, r5, lr}
 801b8ca:	4d06      	ldr	r5, [pc, #24]	; (801b8e4 <_close_r+0x1c>)
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	4608      	mov	r0, r1
 801b8d2:	602b      	str	r3, [r5, #0]
 801b8d4:	f000 fa0c 	bl	801bcf0 <_close>
 801b8d8:	1c43      	adds	r3, r0, #1
 801b8da:	d102      	bne.n	801b8e2 <_close_r+0x1a>
 801b8dc:	682b      	ldr	r3, [r5, #0]
 801b8de:	b103      	cbz	r3, 801b8e2 <_close_r+0x1a>
 801b8e0:	6023      	str	r3, [r4, #0]
 801b8e2:	bd38      	pop	{r3, r4, r5, pc}
 801b8e4:	2000303c 	.word	0x2000303c

0801b8e8 <__sflush_r>:
 801b8e8:	898a      	ldrh	r2, [r1, #12]
 801b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8ee:	4605      	mov	r5, r0
 801b8f0:	0710      	lsls	r0, r2, #28
 801b8f2:	460c      	mov	r4, r1
 801b8f4:	d458      	bmi.n	801b9a8 <__sflush_r+0xc0>
 801b8f6:	684b      	ldr	r3, [r1, #4]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	dc05      	bgt.n	801b908 <__sflush_r+0x20>
 801b8fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	dc02      	bgt.n	801b908 <__sflush_r+0x20>
 801b902:	2000      	movs	r0, #0
 801b904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b90a:	2e00      	cmp	r6, #0
 801b90c:	d0f9      	beq.n	801b902 <__sflush_r+0x1a>
 801b90e:	2300      	movs	r3, #0
 801b910:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b914:	682f      	ldr	r7, [r5, #0]
 801b916:	602b      	str	r3, [r5, #0]
 801b918:	d032      	beq.n	801b980 <__sflush_r+0x98>
 801b91a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b91c:	89a3      	ldrh	r3, [r4, #12]
 801b91e:	075a      	lsls	r2, r3, #29
 801b920:	d505      	bpl.n	801b92e <__sflush_r+0x46>
 801b922:	6863      	ldr	r3, [r4, #4]
 801b924:	1ac0      	subs	r0, r0, r3
 801b926:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b928:	b10b      	cbz	r3, 801b92e <__sflush_r+0x46>
 801b92a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b92c:	1ac0      	subs	r0, r0, r3
 801b92e:	2300      	movs	r3, #0
 801b930:	4602      	mov	r2, r0
 801b932:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b934:	6a21      	ldr	r1, [r4, #32]
 801b936:	4628      	mov	r0, r5
 801b938:	47b0      	blx	r6
 801b93a:	1c43      	adds	r3, r0, #1
 801b93c:	89a3      	ldrh	r3, [r4, #12]
 801b93e:	d106      	bne.n	801b94e <__sflush_r+0x66>
 801b940:	6829      	ldr	r1, [r5, #0]
 801b942:	291d      	cmp	r1, #29
 801b944:	d82c      	bhi.n	801b9a0 <__sflush_r+0xb8>
 801b946:	4a2a      	ldr	r2, [pc, #168]	; (801b9f0 <__sflush_r+0x108>)
 801b948:	40ca      	lsrs	r2, r1
 801b94a:	07d6      	lsls	r6, r2, #31
 801b94c:	d528      	bpl.n	801b9a0 <__sflush_r+0xb8>
 801b94e:	2200      	movs	r2, #0
 801b950:	6062      	str	r2, [r4, #4]
 801b952:	04d9      	lsls	r1, r3, #19
 801b954:	6922      	ldr	r2, [r4, #16]
 801b956:	6022      	str	r2, [r4, #0]
 801b958:	d504      	bpl.n	801b964 <__sflush_r+0x7c>
 801b95a:	1c42      	adds	r2, r0, #1
 801b95c:	d101      	bne.n	801b962 <__sflush_r+0x7a>
 801b95e:	682b      	ldr	r3, [r5, #0]
 801b960:	b903      	cbnz	r3, 801b964 <__sflush_r+0x7c>
 801b962:	6560      	str	r0, [r4, #84]	; 0x54
 801b964:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b966:	602f      	str	r7, [r5, #0]
 801b968:	2900      	cmp	r1, #0
 801b96a:	d0ca      	beq.n	801b902 <__sflush_r+0x1a>
 801b96c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b970:	4299      	cmp	r1, r3
 801b972:	d002      	beq.n	801b97a <__sflush_r+0x92>
 801b974:	4628      	mov	r0, r5
 801b976:	f7fd fad1 	bl	8018f1c <_free_r>
 801b97a:	2000      	movs	r0, #0
 801b97c:	6360      	str	r0, [r4, #52]	; 0x34
 801b97e:	e7c1      	b.n	801b904 <__sflush_r+0x1c>
 801b980:	6a21      	ldr	r1, [r4, #32]
 801b982:	2301      	movs	r3, #1
 801b984:	4628      	mov	r0, r5
 801b986:	47b0      	blx	r6
 801b988:	1c41      	adds	r1, r0, #1
 801b98a:	d1c7      	bne.n	801b91c <__sflush_r+0x34>
 801b98c:	682b      	ldr	r3, [r5, #0]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d0c4      	beq.n	801b91c <__sflush_r+0x34>
 801b992:	2b1d      	cmp	r3, #29
 801b994:	d001      	beq.n	801b99a <__sflush_r+0xb2>
 801b996:	2b16      	cmp	r3, #22
 801b998:	d101      	bne.n	801b99e <__sflush_r+0xb6>
 801b99a:	602f      	str	r7, [r5, #0]
 801b99c:	e7b1      	b.n	801b902 <__sflush_r+0x1a>
 801b99e:	89a3      	ldrh	r3, [r4, #12]
 801b9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9a4:	81a3      	strh	r3, [r4, #12]
 801b9a6:	e7ad      	b.n	801b904 <__sflush_r+0x1c>
 801b9a8:	690f      	ldr	r7, [r1, #16]
 801b9aa:	2f00      	cmp	r7, #0
 801b9ac:	d0a9      	beq.n	801b902 <__sflush_r+0x1a>
 801b9ae:	0793      	lsls	r3, r2, #30
 801b9b0:	680e      	ldr	r6, [r1, #0]
 801b9b2:	bf08      	it	eq
 801b9b4:	694b      	ldreq	r3, [r1, #20]
 801b9b6:	600f      	str	r7, [r1, #0]
 801b9b8:	bf18      	it	ne
 801b9ba:	2300      	movne	r3, #0
 801b9bc:	eba6 0807 	sub.w	r8, r6, r7
 801b9c0:	608b      	str	r3, [r1, #8]
 801b9c2:	f1b8 0f00 	cmp.w	r8, #0
 801b9c6:	dd9c      	ble.n	801b902 <__sflush_r+0x1a>
 801b9c8:	6a21      	ldr	r1, [r4, #32]
 801b9ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b9cc:	4643      	mov	r3, r8
 801b9ce:	463a      	mov	r2, r7
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	47b0      	blx	r6
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	dc06      	bgt.n	801b9e6 <__sflush_r+0xfe>
 801b9d8:	89a3      	ldrh	r3, [r4, #12]
 801b9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9de:	81a3      	strh	r3, [r4, #12]
 801b9e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9e4:	e78e      	b.n	801b904 <__sflush_r+0x1c>
 801b9e6:	4407      	add	r7, r0
 801b9e8:	eba8 0800 	sub.w	r8, r8, r0
 801b9ec:	e7e9      	b.n	801b9c2 <__sflush_r+0xda>
 801b9ee:	bf00      	nop
 801b9f0:	20400001 	.word	0x20400001

0801b9f4 <_fflush_r>:
 801b9f4:	b538      	push	{r3, r4, r5, lr}
 801b9f6:	690b      	ldr	r3, [r1, #16]
 801b9f8:	4605      	mov	r5, r0
 801b9fa:	460c      	mov	r4, r1
 801b9fc:	b913      	cbnz	r3, 801ba04 <_fflush_r+0x10>
 801b9fe:	2500      	movs	r5, #0
 801ba00:	4628      	mov	r0, r5
 801ba02:	bd38      	pop	{r3, r4, r5, pc}
 801ba04:	b118      	cbz	r0, 801ba0e <_fflush_r+0x1a>
 801ba06:	6983      	ldr	r3, [r0, #24]
 801ba08:	b90b      	cbnz	r3, 801ba0e <_fflush_r+0x1a>
 801ba0a:	f7fe ff0b 	bl	801a824 <__sinit>
 801ba0e:	4b14      	ldr	r3, [pc, #80]	; (801ba60 <_fflush_r+0x6c>)
 801ba10:	429c      	cmp	r4, r3
 801ba12:	d11b      	bne.n	801ba4c <_fflush_r+0x58>
 801ba14:	686c      	ldr	r4, [r5, #4]
 801ba16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d0ef      	beq.n	801b9fe <_fflush_r+0xa>
 801ba1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ba20:	07d0      	lsls	r0, r2, #31
 801ba22:	d404      	bmi.n	801ba2e <_fflush_r+0x3a>
 801ba24:	0599      	lsls	r1, r3, #22
 801ba26:	d402      	bmi.n	801ba2e <_fflush_r+0x3a>
 801ba28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba2a:	f7fe ffb0 	bl	801a98e <__retarget_lock_acquire_recursive>
 801ba2e:	4628      	mov	r0, r5
 801ba30:	4621      	mov	r1, r4
 801ba32:	f7ff ff59 	bl	801b8e8 <__sflush_r>
 801ba36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba38:	07da      	lsls	r2, r3, #31
 801ba3a:	4605      	mov	r5, r0
 801ba3c:	d4e0      	bmi.n	801ba00 <_fflush_r+0xc>
 801ba3e:	89a3      	ldrh	r3, [r4, #12]
 801ba40:	059b      	lsls	r3, r3, #22
 801ba42:	d4dd      	bmi.n	801ba00 <_fflush_r+0xc>
 801ba44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba46:	f7fe ffa3 	bl	801a990 <__retarget_lock_release_recursive>
 801ba4a:	e7d9      	b.n	801ba00 <_fflush_r+0xc>
 801ba4c:	4b05      	ldr	r3, [pc, #20]	; (801ba64 <_fflush_r+0x70>)
 801ba4e:	429c      	cmp	r4, r3
 801ba50:	d101      	bne.n	801ba56 <_fflush_r+0x62>
 801ba52:	68ac      	ldr	r4, [r5, #8]
 801ba54:	e7df      	b.n	801ba16 <_fflush_r+0x22>
 801ba56:	4b04      	ldr	r3, [pc, #16]	; (801ba68 <_fflush_r+0x74>)
 801ba58:	429c      	cmp	r4, r3
 801ba5a:	bf08      	it	eq
 801ba5c:	68ec      	ldreq	r4, [r5, #12]
 801ba5e:	e7da      	b.n	801ba16 <_fflush_r+0x22>
 801ba60:	0801c4cc 	.word	0x0801c4cc
 801ba64:	0801c4ec 	.word	0x0801c4ec
 801ba68:	0801c4ac 	.word	0x0801c4ac

0801ba6c <_lseek_r>:
 801ba6c:	b538      	push	{r3, r4, r5, lr}
 801ba6e:	4d07      	ldr	r5, [pc, #28]	; (801ba8c <_lseek_r+0x20>)
 801ba70:	4604      	mov	r4, r0
 801ba72:	4608      	mov	r0, r1
 801ba74:	4611      	mov	r1, r2
 801ba76:	2200      	movs	r2, #0
 801ba78:	602a      	str	r2, [r5, #0]
 801ba7a:	461a      	mov	r2, r3
 801ba7c:	f000 f960 	bl	801bd40 <_lseek>
 801ba80:	1c43      	adds	r3, r0, #1
 801ba82:	d102      	bne.n	801ba8a <_lseek_r+0x1e>
 801ba84:	682b      	ldr	r3, [r5, #0]
 801ba86:	b103      	cbz	r3, 801ba8a <_lseek_r+0x1e>
 801ba88:	6023      	str	r3, [r4, #0]
 801ba8a:	bd38      	pop	{r3, r4, r5, pc}
 801ba8c:	2000303c 	.word	0x2000303c

0801ba90 <__swhatbuf_r>:
 801ba90:	b570      	push	{r4, r5, r6, lr}
 801ba92:	460e      	mov	r6, r1
 801ba94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba98:	2900      	cmp	r1, #0
 801ba9a:	b096      	sub	sp, #88	; 0x58
 801ba9c:	4614      	mov	r4, r2
 801ba9e:	461d      	mov	r5, r3
 801baa0:	da08      	bge.n	801bab4 <__swhatbuf_r+0x24>
 801baa2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801baa6:	2200      	movs	r2, #0
 801baa8:	602a      	str	r2, [r5, #0]
 801baaa:	061a      	lsls	r2, r3, #24
 801baac:	d410      	bmi.n	801bad0 <__swhatbuf_r+0x40>
 801baae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bab2:	e00e      	b.n	801bad2 <__swhatbuf_r+0x42>
 801bab4:	466a      	mov	r2, sp
 801bab6:	f000 f8f1 	bl	801bc9c <_fstat_r>
 801baba:	2800      	cmp	r0, #0
 801babc:	dbf1      	blt.n	801baa2 <__swhatbuf_r+0x12>
 801babe:	9a01      	ldr	r2, [sp, #4]
 801bac0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bac4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bac8:	425a      	negs	r2, r3
 801baca:	415a      	adcs	r2, r3
 801bacc:	602a      	str	r2, [r5, #0]
 801bace:	e7ee      	b.n	801baae <__swhatbuf_r+0x1e>
 801bad0:	2340      	movs	r3, #64	; 0x40
 801bad2:	2000      	movs	r0, #0
 801bad4:	6023      	str	r3, [r4, #0]
 801bad6:	b016      	add	sp, #88	; 0x58
 801bad8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801badc <__smakebuf_r>:
 801badc:	898b      	ldrh	r3, [r1, #12]
 801bade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bae0:	079d      	lsls	r5, r3, #30
 801bae2:	4606      	mov	r6, r0
 801bae4:	460c      	mov	r4, r1
 801bae6:	d507      	bpl.n	801baf8 <__smakebuf_r+0x1c>
 801bae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801baec:	6023      	str	r3, [r4, #0]
 801baee:	6123      	str	r3, [r4, #16]
 801baf0:	2301      	movs	r3, #1
 801baf2:	6163      	str	r3, [r4, #20]
 801baf4:	b002      	add	sp, #8
 801baf6:	bd70      	pop	{r4, r5, r6, pc}
 801baf8:	ab01      	add	r3, sp, #4
 801bafa:	466a      	mov	r2, sp
 801bafc:	f7ff ffc8 	bl	801ba90 <__swhatbuf_r>
 801bb00:	9900      	ldr	r1, [sp, #0]
 801bb02:	4605      	mov	r5, r0
 801bb04:	4630      	mov	r0, r6
 801bb06:	f7fd fa75 	bl	8018ff4 <_malloc_r>
 801bb0a:	b948      	cbnz	r0, 801bb20 <__smakebuf_r+0x44>
 801bb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb10:	059a      	lsls	r2, r3, #22
 801bb12:	d4ef      	bmi.n	801baf4 <__smakebuf_r+0x18>
 801bb14:	f023 0303 	bic.w	r3, r3, #3
 801bb18:	f043 0302 	orr.w	r3, r3, #2
 801bb1c:	81a3      	strh	r3, [r4, #12]
 801bb1e:	e7e3      	b.n	801bae8 <__smakebuf_r+0xc>
 801bb20:	4b0d      	ldr	r3, [pc, #52]	; (801bb58 <__smakebuf_r+0x7c>)
 801bb22:	62b3      	str	r3, [r6, #40]	; 0x28
 801bb24:	89a3      	ldrh	r3, [r4, #12]
 801bb26:	6020      	str	r0, [r4, #0]
 801bb28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb2c:	81a3      	strh	r3, [r4, #12]
 801bb2e:	9b00      	ldr	r3, [sp, #0]
 801bb30:	6163      	str	r3, [r4, #20]
 801bb32:	9b01      	ldr	r3, [sp, #4]
 801bb34:	6120      	str	r0, [r4, #16]
 801bb36:	b15b      	cbz	r3, 801bb50 <__smakebuf_r+0x74>
 801bb38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb3c:	4630      	mov	r0, r6
 801bb3e:	f000 f8bf 	bl	801bcc0 <_isatty_r>
 801bb42:	b128      	cbz	r0, 801bb50 <__smakebuf_r+0x74>
 801bb44:	89a3      	ldrh	r3, [r4, #12]
 801bb46:	f023 0303 	bic.w	r3, r3, #3
 801bb4a:	f043 0301 	orr.w	r3, r3, #1
 801bb4e:	81a3      	strh	r3, [r4, #12]
 801bb50:	89a0      	ldrh	r0, [r4, #12]
 801bb52:	4305      	orrs	r5, r0
 801bb54:	81a5      	strh	r5, [r4, #12]
 801bb56:	e7cd      	b.n	801baf4 <__smakebuf_r+0x18>
 801bb58:	0801a7bd 	.word	0x0801a7bd

0801bb5c <memmove>:
 801bb5c:	4288      	cmp	r0, r1
 801bb5e:	b510      	push	{r4, lr}
 801bb60:	eb01 0402 	add.w	r4, r1, r2
 801bb64:	d902      	bls.n	801bb6c <memmove+0x10>
 801bb66:	4284      	cmp	r4, r0
 801bb68:	4623      	mov	r3, r4
 801bb6a:	d807      	bhi.n	801bb7c <memmove+0x20>
 801bb6c:	1e43      	subs	r3, r0, #1
 801bb6e:	42a1      	cmp	r1, r4
 801bb70:	d008      	beq.n	801bb84 <memmove+0x28>
 801bb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bb7a:	e7f8      	b.n	801bb6e <memmove+0x12>
 801bb7c:	4402      	add	r2, r0
 801bb7e:	4601      	mov	r1, r0
 801bb80:	428a      	cmp	r2, r1
 801bb82:	d100      	bne.n	801bb86 <memmove+0x2a>
 801bb84:	bd10      	pop	{r4, pc}
 801bb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bb8e:	e7f7      	b.n	801bb80 <memmove+0x24>

0801bb90 <_realloc_r>:
 801bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb94:	4680      	mov	r8, r0
 801bb96:	4614      	mov	r4, r2
 801bb98:	460e      	mov	r6, r1
 801bb9a:	b921      	cbnz	r1, 801bba6 <_realloc_r+0x16>
 801bb9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bba0:	4611      	mov	r1, r2
 801bba2:	f7fd ba27 	b.w	8018ff4 <_malloc_r>
 801bba6:	b92a      	cbnz	r2, 801bbb4 <_realloc_r+0x24>
 801bba8:	f7fd f9b8 	bl	8018f1c <_free_r>
 801bbac:	4625      	mov	r5, r4
 801bbae:	4628      	mov	r0, r5
 801bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbb4:	f000 f894 	bl	801bce0 <_malloc_usable_size_r>
 801bbb8:	4284      	cmp	r4, r0
 801bbba:	4607      	mov	r7, r0
 801bbbc:	d802      	bhi.n	801bbc4 <_realloc_r+0x34>
 801bbbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bbc2:	d812      	bhi.n	801bbea <_realloc_r+0x5a>
 801bbc4:	4621      	mov	r1, r4
 801bbc6:	4640      	mov	r0, r8
 801bbc8:	f7fd fa14 	bl	8018ff4 <_malloc_r>
 801bbcc:	4605      	mov	r5, r0
 801bbce:	2800      	cmp	r0, #0
 801bbd0:	d0ed      	beq.n	801bbae <_realloc_r+0x1e>
 801bbd2:	42bc      	cmp	r4, r7
 801bbd4:	4622      	mov	r2, r4
 801bbd6:	4631      	mov	r1, r6
 801bbd8:	bf28      	it	cs
 801bbda:	463a      	movcs	r2, r7
 801bbdc:	f7fd f988 	bl	8018ef0 <memcpy>
 801bbe0:	4631      	mov	r1, r6
 801bbe2:	4640      	mov	r0, r8
 801bbe4:	f7fd f99a 	bl	8018f1c <_free_r>
 801bbe8:	e7e1      	b.n	801bbae <_realloc_r+0x1e>
 801bbea:	4635      	mov	r5, r6
 801bbec:	e7df      	b.n	801bbae <_realloc_r+0x1e>
	...

0801bbf0 <_read_r>:
 801bbf0:	b538      	push	{r3, r4, r5, lr}
 801bbf2:	4d07      	ldr	r5, [pc, #28]	; (801bc10 <_read_r+0x20>)
 801bbf4:	4604      	mov	r4, r0
 801bbf6:	4608      	mov	r0, r1
 801bbf8:	4611      	mov	r1, r2
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	602a      	str	r2, [r5, #0]
 801bbfe:	461a      	mov	r2, r3
 801bc00:	f000 f8a6 	bl	801bd50 <_read>
 801bc04:	1c43      	adds	r3, r0, #1
 801bc06:	d102      	bne.n	801bc0e <_read_r+0x1e>
 801bc08:	682b      	ldr	r3, [r5, #0]
 801bc0a:	b103      	cbz	r3, 801bc0e <_read_r+0x1e>
 801bc0c:	6023      	str	r3, [r4, #0]
 801bc0e:	bd38      	pop	{r3, r4, r5, pc}
 801bc10:	2000303c 	.word	0x2000303c

0801bc14 <_raise_r>:
 801bc14:	291f      	cmp	r1, #31
 801bc16:	b538      	push	{r3, r4, r5, lr}
 801bc18:	4604      	mov	r4, r0
 801bc1a:	460d      	mov	r5, r1
 801bc1c:	d904      	bls.n	801bc28 <_raise_r+0x14>
 801bc1e:	2316      	movs	r3, #22
 801bc20:	6003      	str	r3, [r0, #0]
 801bc22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc26:	bd38      	pop	{r3, r4, r5, pc}
 801bc28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bc2a:	b112      	cbz	r2, 801bc32 <_raise_r+0x1e>
 801bc2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bc30:	b94b      	cbnz	r3, 801bc46 <_raise_r+0x32>
 801bc32:	4620      	mov	r0, r4
 801bc34:	f000 f830 	bl	801bc98 <_getpid_r>
 801bc38:	462a      	mov	r2, r5
 801bc3a:	4601      	mov	r1, r0
 801bc3c:	4620      	mov	r0, r4
 801bc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bc42:	f000 b817 	b.w	801bc74 <_kill_r>
 801bc46:	2b01      	cmp	r3, #1
 801bc48:	d00a      	beq.n	801bc60 <_raise_r+0x4c>
 801bc4a:	1c59      	adds	r1, r3, #1
 801bc4c:	d103      	bne.n	801bc56 <_raise_r+0x42>
 801bc4e:	2316      	movs	r3, #22
 801bc50:	6003      	str	r3, [r0, #0]
 801bc52:	2001      	movs	r0, #1
 801bc54:	e7e7      	b.n	801bc26 <_raise_r+0x12>
 801bc56:	2400      	movs	r4, #0
 801bc58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bc5c:	4628      	mov	r0, r5
 801bc5e:	4798      	blx	r3
 801bc60:	2000      	movs	r0, #0
 801bc62:	e7e0      	b.n	801bc26 <_raise_r+0x12>

0801bc64 <raise>:
 801bc64:	4b02      	ldr	r3, [pc, #8]	; (801bc70 <raise+0xc>)
 801bc66:	4601      	mov	r1, r0
 801bc68:	6818      	ldr	r0, [r3, #0]
 801bc6a:	f7ff bfd3 	b.w	801bc14 <_raise_r>
 801bc6e:	bf00      	nop
 801bc70:	20000190 	.word	0x20000190

0801bc74 <_kill_r>:
 801bc74:	b538      	push	{r3, r4, r5, lr}
 801bc76:	4d07      	ldr	r5, [pc, #28]	; (801bc94 <_kill_r+0x20>)
 801bc78:	2300      	movs	r3, #0
 801bc7a:	4604      	mov	r4, r0
 801bc7c:	4608      	mov	r0, r1
 801bc7e:	4611      	mov	r1, r2
 801bc80:	602b      	str	r3, [r5, #0]
 801bc82:	f000 f855 	bl	801bd30 <_kill>
 801bc86:	1c43      	adds	r3, r0, #1
 801bc88:	d102      	bne.n	801bc90 <_kill_r+0x1c>
 801bc8a:	682b      	ldr	r3, [r5, #0]
 801bc8c:	b103      	cbz	r3, 801bc90 <_kill_r+0x1c>
 801bc8e:	6023      	str	r3, [r4, #0]
 801bc90:	bd38      	pop	{r3, r4, r5, pc}
 801bc92:	bf00      	nop
 801bc94:	2000303c 	.word	0x2000303c

0801bc98 <_getpid_r>:
 801bc98:	f000 b83a 	b.w	801bd10 <_getpid>

0801bc9c <_fstat_r>:
 801bc9c:	b538      	push	{r3, r4, r5, lr}
 801bc9e:	4d07      	ldr	r5, [pc, #28]	; (801bcbc <_fstat_r+0x20>)
 801bca0:	2300      	movs	r3, #0
 801bca2:	4604      	mov	r4, r0
 801bca4:	4608      	mov	r0, r1
 801bca6:	4611      	mov	r1, r2
 801bca8:	602b      	str	r3, [r5, #0]
 801bcaa:	f000 f829 	bl	801bd00 <_fstat>
 801bcae:	1c43      	adds	r3, r0, #1
 801bcb0:	d102      	bne.n	801bcb8 <_fstat_r+0x1c>
 801bcb2:	682b      	ldr	r3, [r5, #0]
 801bcb4:	b103      	cbz	r3, 801bcb8 <_fstat_r+0x1c>
 801bcb6:	6023      	str	r3, [r4, #0]
 801bcb8:	bd38      	pop	{r3, r4, r5, pc}
 801bcba:	bf00      	nop
 801bcbc:	2000303c 	.word	0x2000303c

0801bcc0 <_isatty_r>:
 801bcc0:	b538      	push	{r3, r4, r5, lr}
 801bcc2:	4d06      	ldr	r5, [pc, #24]	; (801bcdc <_isatty_r+0x1c>)
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	4604      	mov	r4, r0
 801bcc8:	4608      	mov	r0, r1
 801bcca:	602b      	str	r3, [r5, #0]
 801bccc:	f000 f828 	bl	801bd20 <_isatty>
 801bcd0:	1c43      	adds	r3, r0, #1
 801bcd2:	d102      	bne.n	801bcda <_isatty_r+0x1a>
 801bcd4:	682b      	ldr	r3, [r5, #0]
 801bcd6:	b103      	cbz	r3, 801bcda <_isatty_r+0x1a>
 801bcd8:	6023      	str	r3, [r4, #0]
 801bcda:	bd38      	pop	{r3, r4, r5, pc}
 801bcdc:	2000303c 	.word	0x2000303c

0801bce0 <_malloc_usable_size_r>:
 801bce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bce4:	1f18      	subs	r0, r3, #4
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	bfbc      	itt	lt
 801bcea:	580b      	ldrlt	r3, [r1, r0]
 801bcec:	18c0      	addlt	r0, r0, r3
 801bcee:	4770      	bx	lr

0801bcf0 <_close>:
 801bcf0:	4b02      	ldr	r3, [pc, #8]	; (801bcfc <_close+0xc>)
 801bcf2:	2258      	movs	r2, #88	; 0x58
 801bcf4:	601a      	str	r2, [r3, #0]
 801bcf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bcfa:	4770      	bx	lr
 801bcfc:	2000303c 	.word	0x2000303c

0801bd00 <_fstat>:
 801bd00:	4b02      	ldr	r3, [pc, #8]	; (801bd0c <_fstat+0xc>)
 801bd02:	2258      	movs	r2, #88	; 0x58
 801bd04:	601a      	str	r2, [r3, #0]
 801bd06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd0a:	4770      	bx	lr
 801bd0c:	2000303c 	.word	0x2000303c

0801bd10 <_getpid>:
 801bd10:	4b02      	ldr	r3, [pc, #8]	; (801bd1c <_getpid+0xc>)
 801bd12:	2258      	movs	r2, #88	; 0x58
 801bd14:	601a      	str	r2, [r3, #0]
 801bd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd1a:	4770      	bx	lr
 801bd1c:	2000303c 	.word	0x2000303c

0801bd20 <_isatty>:
 801bd20:	4b02      	ldr	r3, [pc, #8]	; (801bd2c <_isatty+0xc>)
 801bd22:	2258      	movs	r2, #88	; 0x58
 801bd24:	601a      	str	r2, [r3, #0]
 801bd26:	2000      	movs	r0, #0
 801bd28:	4770      	bx	lr
 801bd2a:	bf00      	nop
 801bd2c:	2000303c 	.word	0x2000303c

0801bd30 <_kill>:
 801bd30:	4b02      	ldr	r3, [pc, #8]	; (801bd3c <_kill+0xc>)
 801bd32:	2258      	movs	r2, #88	; 0x58
 801bd34:	601a      	str	r2, [r3, #0]
 801bd36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd3a:	4770      	bx	lr
 801bd3c:	2000303c 	.word	0x2000303c

0801bd40 <_lseek>:
 801bd40:	4b02      	ldr	r3, [pc, #8]	; (801bd4c <_lseek+0xc>)
 801bd42:	2258      	movs	r2, #88	; 0x58
 801bd44:	601a      	str	r2, [r3, #0]
 801bd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd4a:	4770      	bx	lr
 801bd4c:	2000303c 	.word	0x2000303c

0801bd50 <_read>:
 801bd50:	4b02      	ldr	r3, [pc, #8]	; (801bd5c <_read+0xc>)
 801bd52:	2258      	movs	r2, #88	; 0x58
 801bd54:	601a      	str	r2, [r3, #0]
 801bd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd5a:	4770      	bx	lr
 801bd5c:	2000303c 	.word	0x2000303c

0801bd60 <_sbrk>:
 801bd60:	4a04      	ldr	r2, [pc, #16]	; (801bd74 <_sbrk+0x14>)
 801bd62:	6811      	ldr	r1, [r2, #0]
 801bd64:	4603      	mov	r3, r0
 801bd66:	b909      	cbnz	r1, 801bd6c <_sbrk+0xc>
 801bd68:	4903      	ldr	r1, [pc, #12]	; (801bd78 <_sbrk+0x18>)
 801bd6a:	6011      	str	r1, [r2, #0]
 801bd6c:	6810      	ldr	r0, [r2, #0]
 801bd6e:	4403      	add	r3, r0
 801bd70:	6013      	str	r3, [r2, #0]
 801bd72:	4770      	bx	lr
 801bd74:	20003040 	.word	0x20003040
 801bd78:	20003048 	.word	0x20003048

0801bd7c <_write>:
 801bd7c:	4b02      	ldr	r3, [pc, #8]	; (801bd88 <_write+0xc>)
 801bd7e:	2258      	movs	r2, #88	; 0x58
 801bd80:	601a      	str	r2, [r3, #0]
 801bd82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd86:	4770      	bx	lr
 801bd88:	2000303c 	.word	0x2000303c

0801bd8c <_exit>:
 801bd8c:	e7fe      	b.n	801bd8c <_exit>
	...

0801bd90 <_init>:
 801bd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd92:	bf00      	nop
 801bd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd96:	bc08      	pop	{r3}
 801bd98:	469e      	mov	lr, r3
 801bd9a:	4770      	bx	lr

0801bd9c <_fini>:
 801bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd9e:	bf00      	nop
 801bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bda2:	bc08      	pop	{r3}
 801bda4:	469e      	mov	lr, r3
 801bda6:	4770      	bx	lr
